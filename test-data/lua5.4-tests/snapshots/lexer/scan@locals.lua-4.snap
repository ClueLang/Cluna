---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/locals.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 4,
            column: 6,
            span: 69..74,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 4,
            column: 7,
            span: 74..75,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing local variables and environments'",
        ),
        position: Position {
            line: 4,
            column: 49,
            span: 75..117,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 4,
            column: 50,
            span: 117..118,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 6,
            column: 6,
            span: 120..125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 6,
            column: 12,
            span: 126..131,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 6,
            column: 14,
            span: 132..133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 6,
            column: 22,
            span: 134..141,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        position: Position {
            line: 6,
            column: 30,
            span: 142..149,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 8,
            column: 6,
            span: 151..156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        position: Position {
            line: 8,
            column: 14,
            span: 157..164,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 8,
            column: 16,
            span: 165..166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 8,
            column: 24,
            span: 167..174,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tracegc\"",
        ),
        position: Position {
            line: 8,
            column: 34,
            span: 175..184,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 13,
            column: 6,
            span: 203..208,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 13,
            column: 15,
            span: 209..217,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 13,
            column: 17,
            span: 218..219,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 18,
            span: 219..220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 13,
            column: 19,
            span: 220..221,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 20,
            span: 221..222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 14,
            column: 4,
            span: 225..226,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 14,
            column: 6,
            span: 227..228,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 14,
            column: 10,
            span: 229..232,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 14,
            column: 11,
            span: 232..233,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 14,
            column: 18,
            span: 234..240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 14,
            column: 0,
            span: 241..242,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 15,
            column: 0,
            span: 243..246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 16,
            column: 7,
            span: 247..253,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 8,
            span: 253..254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 16,
            column: 9,
            span: 254..255,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 10,
            span: 255..256,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 16,
            column: 12,
            span: 255..258,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 13,
            span: 258..259,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 16,
            column: 16,
            span: 260..262,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 16,
            column: 20,
            span: 263..266,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 21,
            span: 266..267,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 18,
            column: 6,
            span: 269..274,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 18,
            column: 15,
            span: 275..283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 18,
            column: 17,
            span: 284..285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 18,
            span: 285..286,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 19,
            span: 286..287,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 19,
            column: 8,
            span: 290..295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 19,
            column: 10,
            span: 296..297,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 19,
            column: 11,
            span: 297..298,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 19,
            column: 18,
            span: 299..305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 19,
            column: 0,
            span: 306..307,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 20,
            column: 0,
            span: 308..311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 21,
            column: 7,
            span: 312..318,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 8,
            span: 318..319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 21,
            column: 9,
            span: 319..320,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 10,
            span: 320..321,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 21,
            column: 12,
            span: 320..323,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 13,
            span: 323..324,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 21,
            column: 16,
            span: 325..327,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 21,
            column: 20,
            span: 328..331,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 21,
            span: 331..332,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 23,
            column: 6,
            span: 334..339,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 23,
            column: 15,
            span: 340..348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 23,
            column: 17,
            span: 349..350,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 18,
            span: 350..351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 23,
            column: 19,
            span: 351..352,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 20,
            span: 352..353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 24,
            column: 4,
            span: 356..357,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 24,
            column: 6,
            span: 358..359,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 24,
            column: 10,
            span: 360..363,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 24,
            column: 11,
            span: 363..364,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 24,
            column: 17,
            span: 365..370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 24,
            column: 19,
            span: 371..372,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 24,
            column: 20,
            span: 372..373,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 24,
            column: 27,
            span: 374..380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 24,
            column: 29,
            span: 381..382,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 24,
            column: 30,
            span: 382..383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 24,
            column: 0,
            span: 384..385,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 25,
            column: 0,
            span: 386..389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 26,
            column: 7,
            span: 390..396,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 8,
            span: 396..397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 26,
            column: 9,
            span: 397..398,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 10,
            span: 398..399,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 12,
            span: 398..401,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 13,
            span: 401..402,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 26,
            column: 16,
            span: 403..405,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 26,
            column: 20,
            span: 406..409,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 26,
            column: 24,
            span: 410..413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        position: Position {
            line: 26,
            column: 31,
            span: 414..420,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 32,
            span: 420..421,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 33,
            span: 420..422,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 26,
            column: 34,
            span: 422..423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 26,
            column: 36,
            span: 424..425,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 37,
            span: 425..426,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 39,
            span: 425..428,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 40,
            span: 428..429,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 41,
            span: 429..430,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 26,
            column: 44,
            span: 431..433,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 26,
            column: 48,
            span: 434..437,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 49,
            span: 437..438,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 28,
            column: 0,
            span: 440..442,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 29,
            column: 8,
            span: 445..450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 29,
            column: 10,
            span: 451..452,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 29,
            column: 12,
            span: 453..454,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 29,
            column: 0,
            span: 454..457,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 30,
            column: 0,
            span: 460..462,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 31,
            column: 10,
            span: 467..472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 31,
            column: 12,
            span: 473..474,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 31,
            column: 14,
            span: 475..476,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 31,
            column: 18,
            span: 476..480,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 31,
            column: 19,
            span: 480..481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 31,
            column: 26,
            span: 482..488,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 27,
            span: 488..489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 31,
            column: 28,
            span: 489..490,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 31,
            column: 31,
            span: 491..493,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 31,
            column: 35,
            span: 493..497,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 36,
            span: 497..498,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 32,
            column: 0,
            span: 501..504,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 33,
            column: 0,
            span: 507..509,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 34,
            column: 10,
            span: 514..519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 34,
            column: 12,
            span: 520..521,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 34,
            column: 14,
            span: 522..523,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 34,
            column: 19,
            span: 523..528,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 34,
            column: 20,
            span: 528..529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 34,
            column: 27,
            span: 530..536,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 28,
            span: 536..537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 34,
            column: 29,
            span: 537..538,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 34,
            column: 32,
            span: 539..541,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 34,
            column: 37,
            span: 541..546,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 38,
            span: 546..547,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 35,
            column: 0,
            span: 550..553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 36,
            column: 9,
            span: 556..562,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 10,
            span: 562..563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 36,
            column: 11,
            span: 563..564,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 36,
            column: 14,
            span: 565..567,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 36,
            column: 17,
            span: 567..570,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 18,
            span: 570..571,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 37,
            column: 5,
            span: 574..576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 37,
            column: 7,
            span: 577..578,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 37,
            column: 10,
            span: 579..581,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 37,
            column: 13,
            span: 581..584,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 37,
            column: 0,
            span: 585..589,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 38,
            column: 10,
            span: 594..599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 38,
            column: 12,
            span: 600..601,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 38,
            column: 14,
            span: 602..603,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 38,
            column: 0,
            span: 603..606,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 39,
            column: 0,
            span: 609..613,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 40,
            column: 10,
            span: 618..623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 40,
            column: 12,
            span: 624..625,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 40,
            column: 14,
            span: 626..627,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 0,
            span: 627..630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 41,
            column: 11,
            span: 635..641,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 12,
            span: 641..642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 41,
            column: 13,
            span: 642..643,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 41,
            column: 16,
            span: 644..646,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 41,
            column: 19,
            span: 646..649,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 20,
            span: 649..650,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 42,
            column: 0,
            span: 653..656,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 43,
            column: 0,
            span: 657..660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 47,
            column: 2,
            span: 664..665,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 47,
            column: 4,
            span: 666..667,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 47,
            column: 0,
            span: 668..671,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 49,
            column: 6,
            span: 673..678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 49,
            column: 0,
            span: 679..680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 50,
            column: 2,
            span: 681..682,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 50,
            column: 4,
            span: 683..684,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 50,
            column: 0,
            span: 684..686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 52,
            column: 2,
            span: 688..689,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 52,
            column: 4,
            span: 690..691,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 52,
            column: 0,
            span: 692..695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 53,
            column: 5,
            span: 696..700,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 6,
            span: 700..701,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'local a = {}'",
        ),
        position: Position {
            line: 53,
            column: 20,
            span: 701..715,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 21,
            span: 715..716,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 22,
            span: 716..717,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 23,
            span: 717..718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 54,
            column: 7,
            span: 719..725,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 8,
            span: 725..726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 54,
            column: 9,
            span: 726..727,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 54,
            column: 12,
            span: 728..730,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 54,
            column: 16,
            span: 731..734,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 17,
            span: 734..735,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 56,
            column: 9,
            span: 737..745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 56,
            column: 11,
            span: 746..747,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 12,
            span: 747..748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 56,
            column: 13,
            span: 748..749,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 14,
            span: 749..750,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 57,
            column: 8,
            span: 753..758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_1",
        ),
        position: Position {
            line: 57,
            column: 11,
            span: 759..761,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 57,
            column: 12,
            span: 761..762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_2",
        ),
        position: Position {
            line: 57,
            column: 15,
            span: 763..765,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 57,
            column: 16,
            span: 765..766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_3",
        ),
        position: Position {
            line: 57,
            column: 19,
            span: 767..769,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 57,
            column: 20,
            span: 769..770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_4",
        ),
        position: Position {
            line: 57,
            column: 23,
            span: 771..773,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 57,
            column: 24,
            span: 773..774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_5",
        ),
        position: Position {
            line: 57,
            column: 0,
            span: 775..777,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 58,
            column: 8,
            span: 780..785,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_6",
        ),
        position: Position {
            line: 58,
            column: 11,
            span: 786..788,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 12,
            span: 788..789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_7",
        ),
        position: Position {
            line: 58,
            column: 15,
            span: 790..792,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 16,
            span: 792..793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_8",
        ),
        position: Position {
            line: 58,
            column: 19,
            span: 794..796,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 20,
            span: 796..797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_9",
        ),
        position: Position {
            line: 58,
            column: 23,
            span: 798..800,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 24,
            span: 800..801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_10",
        ),
        position: Position {
            line: 58,
            column: 0,
            span: 802..805,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 59,
            column: 8,
            span: 808..813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 59,
            column: 10,
            span: 814..815,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 59,
            column: 12,
            span: 816..817,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 59,
            column: 0,
            span: 817..819,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 60,
            column: 8,
            span: 822..827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 60,
            column: 10,
            span: 828..829,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 60,
            column: 12,
            span: 830..831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 60,
            column: 0,
            span: 832..833,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 61,
            column: 8,
            span: 836..841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 61,
            column: 10,
            span: 842..843,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 11,
            span: 843..844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 61,
            column: 13,
            span: 845..846,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 61,
            column: 15,
            span: 847..848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 61,
            column: 17,
            span: 849..850,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 18,
            span: 850..851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 61,
            column: 0,
            span: 852..853,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 62,
            column: 5,
            span: 856..858,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 7,
            span: 859..860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 62,
            column: 8,
            span: 860..861,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 62,
            column: 11,
            span: 862..864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 62,
            column: 13,
            span: 865..866,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 14,
            span: 866..867,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 62,
            column: 0,
            span: 868..872,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 63,
            column: 10,
            span: 877..882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 63,
            column: 12,
            span: 883..884,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 63,
            column: 14,
            span: 885..886,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'q'",
        ),
        position: Position {
            line: 63,
            column: 18,
            span: 887..890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 64,
            column: 6,
            span: 895..896,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 64,
            column: 8,
            span: 897..898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 64,
            column: 0,
            span: 899..900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 65,
            column: 11,
            span: 905..911,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 12,
            span: 911..912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 65,
            column: 13,
            span: 912..913,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 65,
            column: 16,
            span: 914..916,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 65,
            column: 18,
            span: 916..918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 19,
            span: 918..919,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 66,
            column: 0,
            span: 922..926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 67,
            column: 11,
            span: 931..937,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 12,
            span: 937..938,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 67,
            column: 15,
            span: 938..941,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 16,
            span: 941..942,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 68,
            column: 0,
            span: 945..948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 69,
            column: 9,
            span: 951..957,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 10,
            span: 957..958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 69,
            column: 11,
            span: 958..959,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 69,
            column: 14,
            span: 960..962,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 69,
            column: 16,
            span: 962..964,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 17,
            span: 964..965,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 70,
            column: 8,
            span: 968..973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 70,
            column: 10,
            span: 974..975,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 70,
            column: 12,
            span: 976..977,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 0,
            span: 977..980,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 71,
            column: 0,
            span: 981..984,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 73,
            column: 6,
            span: 986..991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 73,
            column: 8,
            span: 992..993,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 73,
            column: 10,
            span: 994..995,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 73,
            column: 0,
            span: 995..998,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 74,
            column: 6,
            span: 999..1004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 74,
            column: 8,
            span: 1005..1006,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 74,
            column: 9,
            span: 1006..1007,
        },
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        position: Position {
            line: 74,
            column: 0,
            span: 1008..1014,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 75,
            column: 8,
            span: 1017..1022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 75,
            column: 10,
            span: 1023..1024,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 75,
            column: 11,
            span: 1024..1025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 75,
            column: 13,
            span: 1026..1027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 14,
            span: 1027..1028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 75,
            column: 16,
            span: 1029..1030,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 75,
            column: 18,
            span: 1031..1032,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 20,
            span: 1032..1034,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 21,
            span: 1034..1035,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 23,
            span: 1035..1037,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 75,
            column: 24,
            span: 1037..1038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 75,
            column: 31,
            span: 1039..1045,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 32,
            span: 1045..1046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 75,
            column: 33,
            span: 1046..1047,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 75,
            column: 35,
            span: 1048..1049,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 37,
            span: 1049..1051,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 75,
            column: 40,
            span: 1052..1054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 75,
            column: 42,
            span: 1055..1056,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 43,
            span: 1056..1057,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 75,
            column: 44,
            span: 1057..1058,
        },
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        position: Position {
            line: 76,
            column: 6,
            span: 1059..1064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 76,
            column: 8,
            span: 1065..1066,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 76,
            column: 10,
            span: 1067..1068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 76,
            column: 12,
            span: 1069..1070,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 76,
            column: 15,
            span: 1071..1073,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 0,
            span: 1073..1075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 79,
            column: 7,
            span: 1078..1084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 8,
            span: 1084..1085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 79,
            column: 9,
            span: 1085..1086,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 79,
            column: 12,
            span: 1087..1089,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 14,
            span: 1089..1091,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 15,
            span: 1091..1092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 81,
            column: 2,
            span: 1094..1095,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 3,
            span: 1095..1096,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 81,
            column: 4,
            span: 1095..1097,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 5,
            span: 1097..1098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 82,
            column: 7,
            span: 1099..1105,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 8,
            span: 1105..1106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 82,
            column: 12,
            span: 1106..1110,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 13,
            span: 1110..1111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 82,
            column: 14,
            span: 1111..1112,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 15,
            span: 1112..1113,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 82,
            column: 18,
            span: 1114..1116,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        position: Position {
            line: 82,
            column: 29,
            span: 1117..1127,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 30,
            span: 1127..1128,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 85,
            column: 6,
            span: 1131..1136,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 85,
            column: 15,
            span: 1137..1145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getenv",
        ),
        position: Position {
            line: 85,
            column: 22,
            span: 1146..1152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 23,
            span: 1152..1153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 85,
            column: 24,
            span: 1153..1154,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 25,
            span: 1154..1155,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 86,
            column: 8,
            span: 1158..1163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 86,
            column: 10,
            span: 1164..1165,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 11,
            span: 1165..1166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 86,
            column: 13,
            span: 1167..1168,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 86,
            column: 15,
            span: 1169..1170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 86,
            column: 21,
            span: 1171..1176,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 86,
            column: 22,
            span: 1176..1177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 86,
            column: 32,
            span: 1177..1187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 33,
            span: 1187..1188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 86,
            column: 34,
            span: 1188..1189,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 35,
            span: 1189..1190,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 37,
            span: 1190..1192,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 38,
            span: 1192..1193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 87,
            column: 9,
            span: 1196..1202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 87,
            column: 10,
            span: 1202..1203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 87,
            column: 11,
            span: 1203..1204,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 87,
            column: 14,
            span: 1205..1207,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'_ENV'",
        ),
        position: Position {
            line: 87,
            column: 21,
            span: 1208..1214,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 22,
            span: 1214..1215,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 88,
            column: 9,
            span: 1218..1224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 88,
            column: 0,
            span: 1225..1226,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 89,
            column: 0,
            span: 1227..1230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 92,
            column: 7,
            span: 1274..1280,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 8,
            span: 1280..1281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getenv",
        ),
        position: Position {
            line: 92,
            column: 14,
            span: 1281..1287,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 15,
            span: 1287..1288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 92,
            column: 19,
            span: 1288..1292,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=3\"",
        ),
        position: Position {
            line: 92,
            column: 25,
            span: 1293..1298,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 26,
            span: 1298..1299,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 92,
            column: 29,
            span: 1300..1302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 92,
            column: 32,
            span: 1303..1305,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 33,
            span: 1305..1306,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 93,
            column: 6,
            span: 1307..1312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 93,
            column: 8,
            span: 1313..1314,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 93,
            column: 10,
            span: 1315..1316,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 93,
            column: 12,
            span: 1317..1318,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 93,
            column: 13,
            span: 1318..1319,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 93,
            column: 14,
            span: 1319..1320,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 93,
            column: 20,
            span: 1321..1326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 93,
            column: 22,
            span: 1327..1328,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 93,
            column: 24,
            span: 1329..1330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 93,
            column: 29,
            span: 1331..1335,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 30,
            span: 1335..1336,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 3\"",
        ),
        position: Position {
            line: 93,
            column: 37,
            span: 1336..1343,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 38,
            span: 1343..1344,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 93,
            column: 42,
            span: 1345..1348,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 43,
            span: 1348..1349,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 93,
            column: 47,
            span: 1350..1353,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 48,
            span: 1353..1354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 93,
            column: 50,
            span: 1355..1356,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 51,
            span: 1356..1357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 94,
            column: 7,
            span: 1358..1364,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 94,
            column: 8,
            span: 1364..1365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getenv",
        ),
        position: Position {
            line: 94,
            column: 14,
            span: 1365..1371,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 94,
            column: 15,
            span: 1371..1372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 94,
            column: 16,
            span: 1372..1373,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 94,
            column: 17,
            span: 1373..1374,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 94,
            column: 20,
            span: 1375..1377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 94,
            column: 22,
            span: 1378..1379,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 94,
            column: 23,
            span: 1379..1380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 95,
            column: 7,
            span: 1381..1387,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 95,
            column: 8,
            span: 1387..1388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 95,
            column: 9,
            span: 1388..1389,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 95,
            column: 10,
            span: 1389..1390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 95,
            column: 11,
            span: 1390..1391,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 95,
            column: 14,
            span: 1392..1394,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 95,
            column: 18,
            span: 1395..1398,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 95,
            column: 19,
            span: 1398..1399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 96,
            column: 2,
            span: 1400..1401,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 3,
            span: 1401..1402,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 4,
            span: 1402..1403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 97,
            column: 7,
            span: 1404..1410,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 8,
            span: 1410..1411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 97,
            column: 9,
            span: 1411..1412,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 97,
            column: 10,
            span: 1412..1413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 97,
            column: 11,
            span: 1413..1414,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 97,
            column: 14,
            span: 1415..1417,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 16,
            span: 1417..1419,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 17,
            span: 1419..1420,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 100,
            column: 0,
            span: 1470..1472,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 101,
            column: 8,
            span: 1475..1480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 101,
            column: 10,
            span: 1481..1482,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 101,
            column: 12,
            span: 1483..1484,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 0,
            span: 1484..1486,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 102,
            column: 8,
            span: 1489..1494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 102,
            column: 10,
            span: 1495..1496,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 102,
            column: 12,
            span: 1497..1498,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 14,
            span: 1498..1500,
        },
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        position: Position {
            line: 103,
            column: 0,
            span: 1515..1521,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 104,
            column: 8,
            span: 1526..1529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 104,
            column: 10,
            span: 1530..1531,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 104,
            column: 12,
            span: 1532..1533,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 104,
            column: 14,
            span: 1534..1535,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 15,
            span: 1534..1536,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 16,
            span: 1536..1537,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 18,
            span: 1537..1539,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 104,
            column: 0,
            span: 1540..1542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 105,
            column: 13,
            span: 1549..1555,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 105,
            column: 14,
            span: 1555..1556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 105,
            column: 18,
            span: 1556..1560,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 105,
            column: 19,
            span: 1560..1561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 105,
            column: 25,
            span: 1561..1567,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 105,
            column: 26,
            span: 1567..1568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 105,
            column: 32,
            span: 1568..1574,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 105,
            column: 33,
            span: 1574..1575,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[local a=%s;\n                                        a=a+%s;\n                                        assert(a ==2^%s)]]",
        ),
        position: Position {
            line: 107,
            column: 59,
            span: 1575..1695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 60,
            span: 1695..1696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 107,
            column: 62,
            span: 1697..1698,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 63,
            span: 1698..1699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 107,
            column: 65,
            span: 1700..1701,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 107,
            column: 67,
            span: 1702..1703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 107,
            column: 69,
            span: 1704..1705,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 70,
            span: 1705..1706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 107,
            column: 72,
            span: 1707..1708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 73,
            span: 1708..1709,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 74,
            span: 1709..1710,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 107,
            column: 77,
            span: 1711..1713,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 78,
            span: 1713..1714,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 79,
            span: 1714..1715,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 107,
            column: 80,
            span: 1715..1716,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 81,
            span: 1716..1717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 108,
            column: 13,
            span: 1724..1730,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 14,
            span: 1730..1731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 108,
            column: 18,
            span: 1731..1735,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 19,
            span: 1735..1736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 108,
            column: 25,
            span: 1736..1742,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 108,
            column: 26,
            span: 1742..1743,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 108,
            column: 32,
            span: 1743..1749,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 33,
            span: 1749..1750,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[local a=%s;\n                                        a=a-%s;\n                                        assert(a==-2^%s)]]",
        ),
        position: Position {
            line: 110,
            column: 59,
            span: 1750..1870,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 60,
            span: 1870..1871,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 110,
            column: 62,
            span: 1872..1873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 110,
            column: 63,
            span: 1873..1874,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 64,
            span: 1874..1875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 110,
            column: 66,
            span: 1876..1877,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 110,
            column: 68,
            span: 1878..1879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 110,
            column: 70,
            span: 1880..1881,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 71,
            span: 1881..1882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 110,
            column: 73,
            span: 1883..1884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 74,
            span: 1884..1885,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 75,
            span: 1885..1886,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 110,
            column: 78,
            span: 1887..1889,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 79,
            span: 1889..1890,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 80,
            span: 1890..1891,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 81,
            span: 1891..1892,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 82,
            span: 1892..1893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 111,
            column: 13,
            span: 1900..1906,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 14,
            span: 1906..1907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 111,
            column: 18,
            span: 1907..1911,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 19,
            span: 1911..1912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 111,
            column: 25,
            span: 1912..1918,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 111,
            column: 26,
            span: 1918..1919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 111,
            column: 32,
            span: 1919..1925,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 33,
            span: 1925..1926,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[local a,b=0,%s;\n                                        a=b-%s;\n                                        assert(a==-2^%s)]]",
        ),
        position: Position {
            line: 113,
            column: 59,
            span: 1926..2050,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 60,
            span: 2050..2051,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 113,
            column: 62,
            span: 2052..2053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 113,
            column: 63,
            span: 2053..2054,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 64,
            span: 2054..2055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 113,
            column: 66,
            span: 2056..2057,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 113,
            column: 68,
            span: 2058..2059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 113,
            column: 70,
            span: 2060..2061,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 71,
            span: 2061..2062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 113,
            column: 73,
            span: 2063..2064,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 74,
            span: 2064..2065,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 75,
            span: 2065..2066,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 113,
            column: 78,
            span: 2067..2069,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 79,
            span: 2069..2070,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 80,
            span: 2070..2071,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 81,
            span: 2071..2072,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 82,
            span: 2072..2073,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 114,
            column: 0,
            span: 2078..2081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 115,
            column: 6,
            span: 2086..2087,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 115,
            column: 8,
            span: 2088..2089,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 115,
            column: 10,
            span: 2089..2091,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 115,
            column: 12,
            span: 2092..2093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 115,
            column: 14,
            span: 2094..2095,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 115,
            column: 15,
            span: 2095..2096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 115,
            column: 17,
            span: 2097..2098,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 115,
            column: 19,
            span: 2099..2100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 115,
            column: 21,
            span: 2101..2102,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 115,
            column: 23,
            span: 2103..2104,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 115,
            column: 0,
            span: 2104..2106,
        },
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        position: Position {
            line: 116,
            column: 8,
            span: 2109..2114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 116,
            column: 10,
            span: 2115..2116,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 116,
            column: 13,
            span: 2117..2119,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 116,
            column: 0,
            span: 2119..2121,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 117,
            column: 0,
            span: 2122..2125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 119,
            column: 6,
            span: 2127..2132,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 119,
            column: 10,
            span: 2133..2136,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 122,
            column: 3,
            span: 2139..2141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        position: Position {
            line: 122,
            column: 10,
            span: 2142..2148,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 122,
            column: 11,
            span: 2148..2149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 122,
            column: 13,
            span: 2149..2151,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 122,
            column: 14,
            span: 2151..2152,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"T\"",
        ),
        position: Position {
            line: 122,
            column: 18,
            span: 2153..2156,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 122,
            column: 19,
            span: 2156..2157,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 122,
            column: 0,
            span: 2158..2162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 124,
            column: 17,
            span: 2216..2230,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 18,
            span: 2230..2231,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 124,
            column: 24,
            span: 2231..2237,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 25,
            span: 2237..2238,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 125,
            column: 8,
            span: 2252..2257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 125,
            column: 10,
            span: 2258..2259,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 125,
            column: 12,
            span: 2260..2261,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 125,
            column: 14,
            span: 2262..2263,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 126,
            column: 6,
            span: 2268..2269,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 126,
            column: 7,
            span: 2269..2270,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 126,
            column: 8,
            span: 2270..2271,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 126,
            column: 9,
            span: 2271..2272,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 126,
            column: 11,
            span: 2273..2274,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 126,
            column: 13,
            span: 2274..2276,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 14,
            span: 2276..2277,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 127,
            column: 6,
            span: 2282..2283,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 127,
            column: 7,
            span: 2282..2284,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 127,
            column: 8,
            span: 2284..2285,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 127,
            column: 10,
            span: 2286..2287,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 127,
            column: 12,
            span: 2287..2289,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 13,
            span: 2289..2290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alo",
        ),
        position: Position {
            line: 128,
            column: 8,
            span: 2295..2298,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 128,
            column: 10,
            span: 2299..2300,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 12,
            span: 2300..2302,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 13,
            span: 2302..2303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1234567890123456789012345678901234567890",
        ),
        position: Position {
            line: 129,
            column: 46,
            span: 2308..2349,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 129,
            column: 48,
            span: 2350..2351,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 0,
            span: 2351..2354,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 130,
            column: 4,
            span: 2357..2358,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 132,
            column: 8,
            span: 2362..2367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 132,
            column: 10,
            span: 2368..2369,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 132,
            column: 12,
            span: 2370..2371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 132,
            column: 14,
            span: 2372..2373,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 132,
            column: 15,
            span: 2373..2374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        position: Position {
            line: 132,
            column: 23,
            span: 2374..2382,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 132,
            column: 24,
            span: 2382..2383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 132,
            column: 25,
            span: 2383..2384,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 132,
            column: 26,
            span: 2384..2385,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 134,
            column: 6,
            span: 2389..2392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 134,
            column: 8,
            span: 2393..2394,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 9,
            span: 2394..2395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 134,
            column: 11,
            span: 2396..2397,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 134,
            column: 14,
            span: 2398..2400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 134,
            column: 20,
            span: 2401..2406,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 21,
            span: 2406..2407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 134,
            column: 22,
            span: 2407..2408,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 23,
            span: 2408..2409,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 134,
            column: 26,
            span: 2410..2412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 134,
            column: 28,
            span: 2413..2414,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 134,
            column: 29,
            span: 2414..2415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 134,
            column: 30,
            span: 2415..2416,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 134,
            column: 31,
            span: 2416..2417,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 134,
            column: 33,
            span: 2418..2419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        position: Position {
            line: 134,
            column: 39,
            span: 2420..2425,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 134,
            column: 0,
            span: 2426..2429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 135,
            column: 17,
            span: 2432..2446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 18,
            span: 2446..2447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 19,
            span: 2447..2448,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 136,
            column: 6,
            span: 2496..2499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 136,
            column: 8,
            span: 2500..2501,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 136,
            column: 10,
            span: 2502..2503,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 136,
            column: 12,
            span: 2503..2505,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 13,
            span: 2505..2506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 136,
            column: 15,
            span: 2507..2508,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 136,
            column: 17,
            span: 2509..2510,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 136,
            column: 19,
            span: 2510..2512,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 136,
            column: 0,
            span: 2513..2515,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 137,
            column: 10,
            span: 2520..2525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 137,
            column: 12,
            span: 2526..2527,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 137,
            column: 14,
            span: 2528..2529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        position: Position {
            line: 137,
            column: 23,
            span: 2530..2538,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 24,
            span: 2538..2539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 137,
            column: 25,
            span: 2539..2540,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 26,
            span: 2540..2541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 137,
            column: 28,
            span: 2542..2543,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 29,
            span: 2543..2544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 138,
            column: 11,
            span: 2549..2555,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 12,
            span: 2555..2556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 138,
            column: 13,
            span: 2556..2557,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 138,
            column: 16,
            span: 2558..2560,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 138,
            column: 20,
            span: 2561..2564,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 138,
            column: 23,
            span: 2565..2567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 138,
            column: 28,
            span: 2568..2572,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 29,
            span: 2572..2573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 138,
            column: 30,
            span: 2573..2574,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 31,
            span: 2574..2575,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 138,
            column: 34,
            span: 2576..2578,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'number'",
        ),
        position: Position {
            line: 138,
            column: 43,
            span: 2579..2587,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 138,
            column: 46,
            span: 2588..2590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 138,
            column: 48,
            span: 2591..2592,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 138,
            column: 51,
            span: 2593..2595,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 138,
            column: 57,
            span: 2596..2601,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 58,
            span: 2601..2602,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 139,
            column: 0,
            span: 2605..2608,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 142,
            column: 8,
            span: 2667..2672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 142,
            column: 10,
            span: 2673..2674,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 142,
            column: 12,
            span: 2675..2676,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 142,
            column: 14,
            span: 2677..2678,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 142,
            column: 15,
            span: 2678..2679,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 143,
            column: 8,
            span: 2682..2687,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 143,
            column: 17,
            span: 2688..2696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "additems",
        ),
        position: Position {
            line: 143,
            column: 26,
            span: 2697..2705,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 27,
            span: 2705..2706,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 28,
            span: 2706..2707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 144,
            column: 6,
            span: 2712..2713,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 144,
            column: 7,
            span: 2713..2714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 144,
            column: 8,
            span: 2714..2715,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 144,
            column: 10,
            span: 2716..2717,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 144,
            column: 15,
            span: 2718..2722,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 144,
            column: 16,
            span: 2722..2723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 144,
            column: 18,
            span: 2724..2725,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 144,
            column: 19,
            span: 2725..2726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 144,
            column: 20,
            span: 2726..2727,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 144,
            column: 22,
            span: 2728..2729,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 144,
            column: 27,
            span: 2730..2734,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 144,
            column: 28,
            span: 2734..2735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 144,
            column: 30,
            span: 2736..2737,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 144,
            column: 31,
            span: 2737..2738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 144,
            column: 32,
            span: 2738..2739,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 144,
            column: 34,
            span: 2740..2741,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 144,
            column: 0,
            span: 2742..2746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 145,
            column: 6,
            span: 2751..2752,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 145,
            column: 7,
            span: 2752..2753,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 145,
            column: 8,
            span: 2752..2754,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 145,
            column: 9,
            span: 2754..2755,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 145,
            column: 11,
            span: 2756..2757,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 145,
            column: 0,
            span: 2758..2762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 146,
            column: 6,
            span: 2767..2768,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 146,
            column: 7,
            span: 2768..2769,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 146,
            column: 8,
            span: 2768..2770,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 146,
            column: 9,
            span: 2770..2771,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 146,
            column: 11,
            span: 2772..2773,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 146,
            column: 0,
            span: 2774..2778,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 147,
            column: 0,
            span: 2781..2784,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 148,
            column: 6,
            span: 2787..2790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 148,
            column: 8,
            span: 2791..2792,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 148,
            column: 10,
            span: 2793..2794,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 12,
            span: 2794..2796,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 13,
            span: 2796..2797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 148,
            column: 18,
            span: 2798..2802,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 148,
            column: 19,
            span: 2802..2803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        position: Position {
            line: 148,
            column: 23,
            span: 2803..2807,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 148,
            column: 0,
            span: 2808..2810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 149,
            column: 6,
            span: 2815..2816,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 149,
            column: 7,
            span: 2816..2817,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alloccount",
        ),
        position: Position {
            line: 149,
            column: 17,
            span: 2817..2827,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 18,
            span: 2827..2828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 149,
            column: 19,
            span: 2828..2829,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 20,
            span: 2829..2830,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 150,
            column: 10,
            span: 2835..2840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 150,
            column: 13,
            span: 2841..2843,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 14,
            span: 2843..2844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 150,
            column: 18,
            span: 2845..2848,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 150,
            column: 20,
            span: 2849..2850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 150,
            column: 26,
            span: 2851..2856,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 150,
            column: 27,
            span: 2856..2857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "additems",
        ),
        position: Position {
            line: 150,
            column: 35,
            span: 2857..2865,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 150,
            column: 36,
            span: 2865..2866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 151,
            column: 6,
            span: 2871..2872,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 151,
            column: 7,
            span: 2872..2873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alloccount",
        ),
        position: Position {
            line: 151,
            column: 17,
            span: 2873..2883,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 18,
            span: 2883..2884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 19,
            span: 2884..2885,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 152,
            column: 10,
            span: 2890..2895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 152,
            column: 16,
            span: 2896..2901,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 152,
            column: 18,
            span: 2902..2903,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 0,
            span: 2903..2905,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 153,
            column: 8,
            span: 2910..2913,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 153,
            column: 10,
            span: 2914..2915,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 11,
            span: 2915..2916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 153,
            column: 13,
            span: 2917..2918,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 153,
            column: 16,
            span: 2919..2921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 153,
            column: 22,
            span: 2922..2927,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 23,
            span: 2927..2928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 153,
            column: 24,
            span: 2928..2929,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 25,
            span: 2929..2930,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 153,
            column: 0,
            span: 2931..2933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 154,
            column: 13,
            span: 2940..2946,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 14,
            span: 2946..2947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 154,
            column: 15,
            span: 2947..2948,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 154,
            column: 16,
            span: 2948..2949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 154,
            column: 17,
            span: 2949..2950,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 154,
            column: 18,
            span: 2950..2951,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 154,
            column: 21,
            span: 2952..2954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 154,
            column: 23,
            span: 2955..2956,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 24,
            span: 2956..2957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 155,
            column: 12,
            span: 2964..2969,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 155,
            column: 14,
            span: 2970..2971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 155,
            column: 20,
            span: 2972..2977,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 155,
            column: 22,
            span: 2978..2979,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 155,
            column: 0,
            span: 2979..2981,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 156,
            column: 0,
            span: 2986..2989,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 157,
            column: 7,
            span: 2994..2996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 157,
            column: 10,
            span: 2997..2999,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 157,
            column: 0,
            span: 3000..3004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 158,
            column: 13,
            span: 3011..3017,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 158,
            column: 14,
            span: 3017..3018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 158,
            column: 19,
            span: 3018..3023,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 158,
            column: 22,
            span: 3024..3026,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 158,
            column: 24,
            span: 3026..3028,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 158,
            column: 25,
            span: 3028..3029,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 158,
            column: 26,
            span: 3029..3030,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 158,
            column: 0,
            span: 3031..3036,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 159,
            column: 0,
            span: 3041..3044,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 160,
            column: 0,
            span: 3047..3050,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 161,
            column: 0,
            span: 3051..3054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 166,
            column: 7,
            span: 3090..3096,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 8,
            span: 3096..3097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 166,
            column: 12,
            span: 3097..3101,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 166,
            column: 15,
            span: 3102..3104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 166,
            column: 18,
            span: 3105..3107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 19,
            span: 3107..3108,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 168,
            column: 0,
            span: 3110..3112,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 169,
            column: 8,
            span: 3115..3120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        position: Position {
            line: 169,
            column: 0,
            span: 3121..3126,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 170,
            column: 8,
            span: 3129..3134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 170,
            column: 13,
            span: 3135..3139,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 170,
            column: 15,
            span: 3140..3141,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 17,
            span: 3142..3143,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 170,
            column: 25,
            span: 3143..3151,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 26,
            span: 3151..3152,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 170,
            column: 29,
            span: 3152..3155,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 30,
            span: 3155..3156,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 170,
            column: 37,
            span: 3157..3163,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 170,
            column: 41,
            span: 3164..3167,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 170,
            column: 45,
            span: 3168..3171,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 46,
            span: 3171..3172,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 47,
            span: 3172..3173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 170,
            column: 49,
            span: 3173..3175,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 170,
            column: 50,
            span: 3175..3176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        position: Position {
            line: 170,
            column: 56,
            span: 3177..3182,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 57,
            span: 3182..3183,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 172,
            column: 0,
            span: 3192..3194,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 173,
            column: 10,
            span: 3199..3204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 173,
            column: 15,
            span: 3205..3209,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 173,
            column: 17,
            span: 3210..3211,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 173,
            column: 19,
            span: 3212..3213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 173,
            column: 26,
            span: 3214..3220,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 173,
            column: 28,
            span: 3221..3222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 173,
            column: 35,
            span: 3223..3229,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 173,
            column: 37,
            span: 3230..3231,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 173,
            column: 38,
            span: 3231..3232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 173,
            column: 45,
            span: 3233..3239,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 46,
            span: 3239..3240,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 173,
            column: 50,
            span: 3240..3244,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 51,
            span: 3244..3245,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 174,
            column: 0,
            span: 3248..3251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 175,
            column: 5,
            span: 3254..3256,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 175,
            column: 7,
            span: 3257..3258,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 175,
            column: 9,
            span: 3259..3260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 175,
            column: 12,
            span: 3261..3263,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 175,
            column: 14,
            span: 3264..3265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 175,
            column: 17,
            span: 3266..3268,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 175,
            column: 19,
            span: 3269..3270,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 176,
            column: 8,
            span: 3273..3278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 176,
            column: 12,
            span: 3279..3282,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 176,
            column: 13,
            span: 3282..3283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 176,
            column: 0,
            span: 3284..3285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 177,
            column: 4,
            span: 3288..3289,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 177,
            column: 6,
            span: 3290..3291,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 177,
            column: 12,
            span: 3292..3297,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 178,
            column: 0,
            span: 3315..3317,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 179,
            column: 10,
            span: 3322..3327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 179,
            column: 15,
            span: 3328..3332,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 179,
            column: 17,
            span: 3333..3334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 179,
            column: 0,
            span: 3335..3337,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 180,
            column: 13,
            span: 3342..3350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 180,
            column: 17,
            span: 3351..3354,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 18,
            span: 3354..3355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 180,
            column: 19,
            span: 3355..3356,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 20,
            span: 3356..3357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 181,
            column: 8,
            span: 3364..3365,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 181,
            column: 10,
            span: 3366..3367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 181,
            column: 0,
            span: 3368..3369,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 182,
            column: 0,
            span: 3376..3378,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 183,
            column: 14,
            span: 3387..3392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 183,
            column: 19,
            span: 3393..3397,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 183,
            column: 21,
            span: 3398..3399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 183,
            column: 24,
            span: 3400..3402,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 183,
            column: 25,
            span: 3402..3403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 183,
            column: 27,
            span: 3404..3405,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 183,
            column: 29,
            span: 3406..3407,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 183,
            column: 0,
            span: 3407..3412,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 184,
            column: 0,
            span: 3419..3422,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 185,
            column: 13,
            span: 3429..3435,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 185,
            column: 22,
            span: 3436..3444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 23,
            span: 3444..3445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 185,
            column: 24,
            span: 3445..3446,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 25,
            span: 3446..3447,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 185,
            column: 32,
            span: 3448..3454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 185,
            column: 34,
            span: 3455..3456,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 185,
            column: 37,
            span: 3457..3459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 185,
            column: 39,
            span: 3460..3461,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 185,
            column: 0,
            span: 3462..3465,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 186,
            column: 0,
            span: 3470..3473,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 187,
            column: 0,
            span: 3476..3479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 188,
            column: 9,
            span: 3482..3488,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 10,
            span: 3488..3489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getenv",
        ),
        position: Position {
            line: 188,
            column: 16,
            span: 3489..3495,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 17,
            span: 3495..3496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 188,
            column: 20,
            span: 3496..3499,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 21,
            span: 3499..3500,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 188,
            column: 24,
            span: 3501..3503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 188,
            column: 27,
            span: 3504..3506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 28,
            span: 3506..3507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 189,
            column: 4,
            span: 3510..3511,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 189,
            column: 6,
            span: 3512..3513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 189,
            column: 10,
            span: 3514..3517,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 11,
            span: 3517..3518,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'hi'",
        ),
        position: Position {
            line: 189,
            column: 15,
            span: 3518..3522,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 16,
            span: 3522..3523,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 189,
            column: 17,
            span: 3523..3524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 189,
            column: 24,
            span: 3525..3531,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 25,
            span: 3531..3532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 189,
            column: 27,
            span: 3532..3534,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 189,
            column: 28,
            span: 3534..3535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 189,
            column: 29,
            span: 3535..3536,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 189,
            column: 32,
            span: 3537..3539,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'hi'",
        ),
        position: Position {
            line: 189,
            column: 37,
            span: 3540..3544,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 189,
            column: 41,
            span: 3545..3548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 189,
            column: 43,
            span: 3549..3550,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 189,
            column: 46,
            span: 3551..3553,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 189,
            column: 51,
            span: 3553..3558,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 52,
            span: 3558..3559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 190,
            column: 9,
            span: 3562..3568,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 10,
            span: 3568..3569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 190,
            column: 11,
            span: 3569..3570,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 12,
            span: 3570..3571,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*'",
        ),
        position: Position {
            line: 190,
            column: 15,
            span: 3571..3574,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 16,
            span: 3574..3575,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 190,
            column: 19,
            span: 3576..3578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 190,
            column: 22,
            span: 3579..3581,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 190,
            column: 23,
            span: 3581..3582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 190,
            column: 24,
            span: 3582..3583,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 190,
            column: 27,
            span: 3584..3586,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*'",
        ),
        position: Position {
            line: 190,
            column: 31,
            span: 3587..3590,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 32,
            span: 3590..3591,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 192,
            column: 0,
            span: 3595..3597,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 193,
            column: 10,
            span: 3602..3607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 193,
            column: 15,
            span: 3608..3612,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 193,
            column: 17,
            span: 3613..3614,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 193,
            column: 19,
            span: 3615..3616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 193,
            column: 26,
            span: 3617..3623,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 193,
            column: 28,
            span: 3624..3625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 193,
            column: 35,
            span: 3626..3632,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 193,
            column: 36,
            span: 3632..3633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 193,
            column: 38,
            span: 3634..3635,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 193,
            column: 40,
            span: 3636..3637,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 193,
            column: 43,
            span: 3637..3640,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 193,
            column: 45,
            span: 3641..3642,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 193,
            column: 46,
            span: 3642..3643,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 194,
            column: 0,
            span: 3648..3650,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 195,
            column: 12,
            span: 3657..3662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 195,
            column: 17,
            span: 3663..3667,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 195,
            column: 19,
            span: 3668..3669,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 195,
            column: 21,
            span: 3670..3671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 195,
            column: 28,
            span: 3672..3678,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 195,
            column: 30,
            span: 3679..3680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 195,
            column: 37,
            span: 3681..3687,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 38,
            span: 3687..3688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 195,
            column: 40,
            span: 3689..3690,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 195,
            column: 42,
            span: 3691..3692,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 195,
            column: 45,
            span: 3692..3695,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 195,
            column: 47,
            span: 3696..3697,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 195,
            column: 48,
            span: 3697..3698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 196,
            column: 13,
            span: 3705..3711,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 14,
            span: 3711..3712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 196,
            column: 15,
            span: 3712..3713,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 196,
            column: 18,
            span: 3714..3716,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 196,
            column: 21,
            span: 3716..3719,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 22,
            span: 3719..3720,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 196,
            column: 23,
            span: 3720..3721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 196,
            column: 25,
            span: 3722..3723,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 196,
            column: 27,
            span: 3724..3725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 196,
            column: 0,
            span: 3726..3727,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 197,
            column: 0,
            span: 3732..3735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 198,
            column: 11,
            span: 3740..3746,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 198,
            column: 12,
            span: 3746..3747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 198,
            column: 13,
            span: 3747..3748,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 198,
            column: 16,
            span: 3749..3751,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 19,
            span: 3751..3754,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 198,
            column: 23,
            span: 3755..3758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 198,
            column: 25,
            span: 3759..3760,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 198,
            column: 28,
            span: 3761..3763,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 31,
            span: 3763..3766,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 198,
            column: 32,
            span: 3766..3767,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 199,
            column: 0,
            span: 3770..3773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 200,
            column: 9,
            span: 3776..3782,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 200,
            column: 10,
            span: 3782..3783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 200,
            column: 11,
            span: 3783..3784,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 200,
            column: 14,
            span: 3785..3787,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 200,
            column: 17,
            span: 3787..3790,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 200,
            column: 18,
            span: 3790..3791,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 203,
            column: 5,
            span: 3796..3798,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 204,
            column: 10,
            span: 3827..3832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 204,
            column: 12,
            span: 3833..3834,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 204,
            column: 14,
            span: 3835..3836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 204,
            column: 19,
            span: 3836..3841,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 204,
            column: 20,
            span: 3841..3842,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 21,
            span: 3842..3843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 204,
            column: 23,
            span: 3844..3845,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 24,
            span: 3845..3846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 204,
            column: 26,
            span: 3847..3848,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 204,
            column: 28,
            span: 3849..3850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 204,
            column: 33,
            span: 3850..3855,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 204,
            column: 34,
            span: 3855..3856,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 204,
            column: 36,
            span: 3857..3858,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 204,
            column: 39,
            span: 3858..3861,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 40,
            span: 3861..3862,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 204,
            column: 43,
            span: 3862..3865,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 44,
            span: 3865..3866,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 204,
            column: 0,
            span: 3866..3869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 205,
            column: 6,
            span: 3874..3875,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 205,
            column: 8,
            span: 3876..3877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 205,
            column: 10,
            span: 3878..3879,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 205,
            column: 12,
            span: 3880..3881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 205,
            column: 14,
            span: 3882..3883,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 205,
            column: 16,
            span: 3884..3885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 205,
            column: 18,
            span: 3886..3887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 206,
            column: 11,
            span: 3915..3921,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 12,
            span: 3921..3922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 206,
            column: 13,
            span: 3922..3923,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 206,
            column: 16,
            span: 3924..3926,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 206,
            column: 19,
            span: 3926..3929,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 206,
            column: 23,
            span: 3930..3933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 206,
            column: 25,
            span: 3934..3935,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 206,
            column: 28,
            span: 3936..3938,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 206,
            column: 31,
            span: 3938..3941,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 206,
            column: 35,
            span: 3942..3945,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 206,
            column: 37,
            span: 3946..3947,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 206,
            column: 40,
            span: 3948..3950,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 206,
            column: 43,
            span: 3950..3953,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 44,
            span: 3953..3954,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 207,
            column: 10,
            span: 3959..3964,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 207,
            column: 19,
            span: 3965..3973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkro",
        ),
        position: Position {
            line: 207,
            column: 27,
            span: 3974..3981,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 28,
            span: 3981..3982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 207,
            column: 32,
            span: 3982..3986,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 33,
            span: 3986..3987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        position: Position {
            line: 207,
            column: 38,
            span: 3988..3992,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 39,
            span: 3992..3993,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 208,
            column: 12,
            span: 4000..4005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 208,
            column: 15,
            span: 4006..4008,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 16,
            span: 4008..4009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 208,
            column: 20,
            span: 4010..4013,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 208,
            column: 22,
            span: 4014..4015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 208,
            column: 27,
            span: 4016..4020,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 208,
            column: 28,
            span: 4020..4021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        position: Position {
            line: 208,
            column: 32,
            span: 4021..4025,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 208,
            column: 33,
            span: 4025..4026,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 209,
            column: 12,
            span: 4033..4038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gab",
        ),
        position: Position {
            line: 209,
            column: 16,
            span: 4039..4042,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 209,
            column: 18,
            span: 4043..4044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 209,
            column: 25,
            span: 4045..4051,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 209,
            column: 26,
            span: 4051..4052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 209,
            column: 32,
            span: 4052..4058,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 209,
            column: 33,
            span: 4058..4059,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to assign to const variable '%s'\"",
        ),
        position: Position {
            line: 209,
            column: 75,
            span: 4059..4101,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 76,
            span: 4101..4102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 209,
            column: 81,
            span: 4103..4107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 209,
            column: 82,
            span: 4107..4108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 210,
            column: 13,
            span: 4115..4121,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 14,
            span: 4121..4122,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 210,
            column: 17,
            span: 4122..4125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 210,
            column: 20,
            span: 4126..4128,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 210,
            column: 24,
            span: 4129..4132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 210,
            column: 31,
            span: 4133..4139,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 210,
            column: 32,
            span: 4139..4140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 210,
            column: 36,
            span: 4140..4144,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 37,
            span: 4144..4145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 210,
            column: 40,
            span: 4145..4148,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 41,
            span: 4148..4149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gab",
        ),
        position: Position {
            line: 210,
            column: 45,
            span: 4150..4153,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 46,
            span: 4153..4154,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 47,
            span: 4154..4155,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 211,
            column: 0,
            span: 4160..4163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkro",
        ),
        position: Position {
            line: 212,
            column: 12,
            span: 4168..4175,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 212,
            column: 13,
            span: 4175..4176,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 212,
            column: 16,
            span: 4176..4179,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 17,
            span: 4179..4180,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local x, y <const>, z = 10, 20, 30; x = 11; y = 12\"",
        ),
        position: Position {
            line: 212,
            column: 70,
            span: 4181..4233,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 212,
            column: 71,
            span: 4233..4234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkro",
        ),
        position: Position {
            line: 213,
            column: 12,
            span: 4239..4246,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 213,
            column: 13,
            span: 4246..4247,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 213,
            column: 16,
            span: 4247..4250,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 17,
            span: 4250..4251,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local x <const>, y, z <const> = 10, 20, 30; x = 11\"",
        ),
        position: Position {
            line: 213,
            column: 70,
            span: 4252..4304,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 213,
            column: 71,
            span: 4304..4305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkro",
        ),
        position: Position {
            line: 214,
            column: 12,
            span: 4310..4317,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 214,
            column: 13,
            span: 4317..4318,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z\"",
        ),
        position: Position {
            line: 214,
            column: 16,
            span: 4318..4321,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 17,
            span: 4321..4322,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local x <const>, y, z <const> = 10, 20, 30; y = 10; z = 11\"",
        ),
        position: Position {
            line: 214,
            column: 78,
            span: 4323..4383,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 214,
            column: 79,
            span: 4383..4384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkro",
        ),
        position: Position {
            line: 215,
            column: 12,
            span: 4389..4396,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 215,
            column: 13,
            span: 4396..4397,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"foo\"",
        ),
        position: Position {
            line: 215,
            column: 18,
            span: 4397..4402,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 19,
            span: 4402..4403,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local foo <const> = 10; function foo() end\"",
        ),
        position: Position {
            line: 215,
            column: 64,
            span: 4404..4448,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 215,
            column: 65,
            span: 4448..4449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkro",
        ),
        position: Position {
            line: 216,
            column: 12,
            span: 4454..4461,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 216,
            column: 13,
            span: 4461..4462,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"foo\"",
        ),
        position: Position {
            line: 216,
            column: 18,
            span: 4462..4467,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 19,
            span: 4467..4468,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local foo <const> = {}; function foo() end\"",
        ),
        position: Position {
            line: 216,
            column: 64,
            span: 4469..4513,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 216,
            column: 65,
            span: 4513..4514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkro",
        ),
        position: Position {
            line: 218,
            column: 12,
            span: 4520..4527,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 218,
            column: 13,
            span: 4527..4528,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z\"",
        ),
        position: Position {
            line: 218,
            column: 16,
            span: 4528..4531,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 17,
            span: 4531..4532,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    local a, z <const>, b = 10;\n    function foo() a = 20; z = 32; end\n  ]]",
        ),
        position: Position {
            line: 221,
            column: 5,
            span: 4533..4611,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 6,
            span: 4611..4612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkro",
        ),
        position: Position {
            line: 223,
            column: 12,
            span: 4618..4625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 13,
            span: 4625..4626,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"var1\"",
        ),
        position: Position {
            line: 223,
            column: 19,
            span: 4626..4632,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 20,
            span: 4632..4633,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    local a, var1 <const> = 10;\n    function foo() a = 20; z = function () var1 = 12; end  end\n  ]]",
        ),
        position: Position {
            line: 226,
            column: 5,
            span: 4634..4736,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 6,
            span: 4736..4737,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 227,
            column: 0,
            span: 4740..4743,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 230,
            column: 8,
            span: 4748..4753,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing to-be-closed variables\"",
        ),
        position: Position {
            line: 230,
            column: 41,
            span: 4754..4786,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 232,
            column: 8,
            span: 4790..4795,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 232,
            column: 17,
            span: 4796..4804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        position: Position {
            line: 232,
            column: 23,
            span: 4805..4810,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 24,
            span: 4810..4811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 232,
            column: 25,
            span: 4811..4812,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 26,
            span: 4812..4813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 232,
            column: 28,
            span: 4814..4815,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 232,
            column: 30,
            span: 4816..4817,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 32,
            span: 4818..4819,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 33,
            span: 4819..4820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 232,
            column: 34,
            span: 4820..4821,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 232,
            column: 37,
            span: 4822..4824,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 232,
            column: 39,
            span: 4824..4826,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 40,
            span: 4826..4827,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 232,
            column: 43,
            span: 4828..4830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        position: Position {
            line: 232,
            column: 49,
            span: 4831..4836,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 50,
            span: 4836..4837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 232,
            column: 51,
            span: 4837..4838,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 232,
            column: 53,
            span: 4839..4840,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 232,
            column: 55,
            span: 4840..4842,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 56,
            span: 4842..4843,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 57,
            span: 4843..4844,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 232,
            column: 0,
            span: 4845..4848,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 234,
            column: 8,
            span: 4852..4857,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 234,
            column: 17,
            span: 4858..4866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 234,
            column: 28,
            span: 4867..4877,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 234,
            column: 29,
            span: 4877..4878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 234,
            column: 30,
            span: 4878..4879,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 31,
            span: 4879..4880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 234,
            column: 33,
            span: 4881..4882,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 34,
            span: 4882..4883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 234,
            column: 36,
            span: 4884..4885,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 234,
            column: 37,
            span: 4885..4886,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 235,
            column: 10,
            span: 4891..4896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 235,
            column: 14,
            span: 4897..4900,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 235,
            column: 16,
            span: 4901..4902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 235,
            column: 29,
            span: 4903..4915,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 30,
            span: 4915..4916,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 235,
            column: 31,
            span: 4916..4917,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 235,
            column: 32,
            span: 4917..4918,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 235,
            column: 33,
            span: 4918..4919,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 235,
            column: 35,
            span: 4920..4921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__close",
        ),
        position: Position {
            line: 235,
            column: 43,
            span: 4922..4929,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 235,
            column: 45,
            span: 4930..4931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 235,
            column: 47,
            span: 4932..4933,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 235,
            column: 49,
            span: 4934..4935,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 235,
            column: 50,
            span: 4935..4936,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 236,
            column: 7,
            span: 4941..4943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 236,
            column: 9,
            span: 4944..4945,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 236,
            column: 0,
            span: 4946..4950,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 237,
            column: 13,
            span: 4957..4963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 237,
            column: 15,
            span: 4964..4965,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 16,
            span: 4965..4966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 237,
            column: 20,
            span: 4967..4970,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 21,
            span: 4970..4971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 237,
            column: 0,
            span: 4972..4973,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 238,
            column: 0,
            span: 4978..4982,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 239,
            column: 13,
            span: 4989..4995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 239,
            column: 0,
            span: 4996..4999,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 240,
            column: 0,
            span: 5004..5007,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 241,
            column: 0,
            span: 5010..5013,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 244,
            column: 0,
            span: 5018..5020,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 245,
            column: 10,
            span: 5025..5030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 245,
            column: 12,
            span: 5031..5032,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 245,
            column: 14,
            span: 5033..5034,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 245,
            column: 16,
            span: 5035..5036,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 245,
            column: 17,
            span: 5036..5037,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 246,
            column: 0,
            span: 5042..5044,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 247,
            column: 12,
            span: 5051..5056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 247,
            column: 14,
            span: 5057..5058,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 247,
            column: 16,
            span: 5059..5060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 247,
            column: 21,
            span: 5060..5065,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 247,
            column: 22,
            span: 5065..5066,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 247,
            column: 24,
            span: 5067..5068,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 247,
            column: 30,
            span: 5069..5074,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 248,
            column: 12,
            span: 5101..5106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 248,
            column: 14,
            span: 5107..5108,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 248,
            column: 16,
            span: 5109..5110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 248,
            column: 21,
            span: 5110..5115,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 248,
            column: 22,
            span: 5115..5116,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 248,
            column: 24,
            span: 5117..5118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 248,
            column: 37,
            span: 5119..5131,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 248,
            column: 38,
            span: 5131..5132,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 248,
            column: 39,
            span: 5132..5133,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 248,
            column: 43,
            span: 5134..5137,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 248,
            column: 45,
            span: 5138..5139,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 248,
            column: 46,
            span: 5139..5140,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 248,
            column: 48,
            span: 5141..5142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__close",
        ),
        position: Position {
            line: 249,
            column: 16,
            span: 5151..5158,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 249,
            column: 18,
            span: 5159..5160,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 249,
            column: 27,
            span: 5161..5169,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 28,
            span: 5169..5170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 249,
            column: 32,
            span: 5170..5174,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 33,
            span: 5174..5175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 250,
            column: 12,
            span: 5186..5187,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 250,
            column: 13,
            span: 5187..5188,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 250,
            column: 14,
            span: 5188..5189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 250,
            column: 15,
            span: 5189..5190,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 250,
            column: 17,
            span: 5191..5192,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 250,
            column: 19,
            span: 5192..5194,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 250,
            column: 20,
            span: 5194..5195,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 250,
            column: 22,
            span: 5196..5197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 250,
            column: 27,
            span: 5198..5202,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 250,
            column: 28,
            span: 5202..5203,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 250,
            column: 29,
            span: 5202..5204,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 250,
            column: 30,
            span: 5204..5205,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 251,
            column: 0,
            span: 5214..5217,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 252,
            column: 8,
            span: 5224..5225,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 252,
            column: 9,
            span: 5225..5226,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 253,
            column: 12,
            span: 5233..5238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 253,
            column: 14,
            span: 5239..5240,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 253,
            column: 15,
            span: 5240..5241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 253,
            column: 17,
            span: 5242..5243,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 253,
            column: 19,
            span: 5244..5245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 253,
            column: 24,
            span: 5245..5250,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 253,
            column: 25,
            span: 5250..5251,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 253,
            column: 26,
            span: 5251..5252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 253,
            column: 28,
            span: 5253..5254,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 253,
            column: 30,
            span: 5255..5256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 253,
            column: 41,
            span: 5257..5267,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 42,
            span: 5267..5268,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 253,
            column: 50,
            span: 5268..5276,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 51,
            span: 5276..5277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 253,
            column: 55,
            span: 5277..5281,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 253,
            column: 56,
            span: 5281..5282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 253,
            column: 60,
            span: 5283..5286,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 61,
            span: 5286..5287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 254,
            column: 15,
            span: 5296..5302,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 16,
            span: 5302..5303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 254,
            column: 19,
            span: 5303..5306,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 254,
            column: 22,
            span: 5307..5309,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 254,
            column: 26,
            span: 5310..5313,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 27,
            span: 5313..5314,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 254,
            column: 28,
            span: 5314..5315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 254,
            column: 30,
            span: 5316..5317,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 254,
            column: 31,
            span: 5317..5318,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 254,
            column: 32,
            span: 5318..5319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 254,
            column: 33,
            span: 5319..5320,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 254,
            column: 35,
            span: 5321..5322,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 254,
            column: 37,
            span: 5322..5324,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 254,
            column: 38,
            span: 5324..5325,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 254,
            column: 40,
            span: 5326..5327,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 254,
            column: 44,
            span: 5328..5331,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 255,
            column: 10,
            span: 5338..5341,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 11,
            span: 5341..5342,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 14,
            span: 5342..5345,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 15,
            span: 5345..5346,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 18,
            span: 5346..5349,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 255,
            column: 19,
            span: 5349..5350,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 256,
            column: 12,
            span: 5357..5362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 256,
            column: 14,
            span: 5363..5364,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 256,
            column: 16,
            span: 5365..5366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 256,
            column: 21,
            span: 5366..5371,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 256,
            column: 22,
            span: 5371..5372,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 256,
            column: 24,
            span: 5373..5374,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 256,
            column: 28,
            span: 5375..5378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 257,
            column: 8,
            span: 5405..5406,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 257,
            column: 9,
            span: 5406..5407,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 257,
            column: 10,
            span: 5407..5408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 257,
            column: 11,
            span: 5408..5409,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 257,
            column: 13,
            span: 5410..5411,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 257,
            column: 15,
            span: 5411..5413,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 257,
            column: 16,
            span: 5413..5414,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 257,
            column: 18,
            span: 5415..5416,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"in\"",
        ),
        position: Position {
            line: 257,
            column: 23,
            span: 5417..5421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 258,
            column: 13,
            span: 5428..5434,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 14,
            span: 5434..5435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 258,
            column: 15,
            span: 5435..5436,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 258,
            column: 18,
            span: 5437..5439,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 258,
            column: 21,
            span: 5439..5442,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 258,
            column: 25,
            span: 5443..5446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 258,
            column: 27,
            span: 5447..5448,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 258,
            column: 30,
            span: 5449..5451,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 258,
            column: 33,
            span: 5451..5454,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 34,
            span: 5454..5455,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 259,
            column: 0,
            span: 5460..5463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 260,
            column: 6,
            span: 5468..5469,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 260,
            column: 7,
            span: 5469..5470,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 260,
            column: 8,
            span: 5470..5471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 260,
            column: 9,
            span: 5471..5472,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 260,
            column: 11,
            span: 5473..5474,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 260,
            column: 13,
            span: 5474..5476,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 260,
            column: 14,
            span: 5476..5477,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 260,
            column: 16,
            span: 5478..5479,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out\"",
        ),
        position: Position {
            line: 260,
            column: 22,
            span: 5480..5485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 261,
            column: 11,
            span: 5490..5496,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 12,
            span: 5496..5497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 261,
            column: 13,
            span: 5497..5498,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 261,
            column: 14,
            span: 5498..5499,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 261,
            column: 15,
            span: 5498..5500,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 261,
            column: 16,
            span: 5500..5501,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 261,
            column: 19,
            span: 5502..5504,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"in\"",
        ),
        position: Position {
            line: 261,
            column: 24,
            span: 5505..5509,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 261,
            column: 28,
            span: 5510..5513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 261,
            column: 30,
            span: 5514..5515,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 261,
            column: 31,
            span: 5515..5516,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 261,
            column: 32,
            span: 5515..5517,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 261,
            column: 33,
            span: 5517..5518,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 261,
            column: 36,
            span: 5519..5521,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 261,
            column: 40,
            span: 5522..5525,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 261,
            column: 44,
            span: 5526..5529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 261,
            column: 46,
            span: 5530..5531,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 261,
            column: 47,
            span: 5531..5532,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 261,
            column: 48,
            span: 5531..5533,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 261,
            column: 49,
            span: 5533..5534,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 261,
            column: 52,
            span: 5535..5537,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 261,
            column: 56,
            span: 5538..5541,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 261,
            column: 60,
            span: 5542..5545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 261,
            column: 62,
            span: 5546..5547,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 261,
            column: 63,
            span: 5547..5548,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 261,
            column: 64,
            span: 5547..5549,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 261,
            column: 65,
            span: 5549..5550,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 261,
            column: 68,
            span: 5551..5553,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out\"",
        ),
        position: Position {
            line: 261,
            column: 74,
            span: 5554..5559,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 75,
            span: 5559..5560,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 262,
            column: 0,
            span: 5563..5566,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 264,
            column: 0,
            span: 5570..5572,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 265,
            column: 10,
            span: 5577..5582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 265,
            column: 12,
            span: 5583..5584,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 265,
            column: 14,
            span: 5585..5586,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 265,
            column: 0,
            span: 5587..5592,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 267,
            column: 10,
            span: 5598..5603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 267,
            column: 12,
            span: 5604..5605,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 267,
            column: 13,
            span: 5605..5606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closescope",
        ),
        position: Position {
            line: 267,
            column: 24,
            span: 5607..5617,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 267,
            column: 26,
            span: 5618..5619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 267,
            column: 37,
            span: 5620..5630,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 38,
            span: 5630..5631,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 267,
            column: 46,
            span: 5631..5639,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 47,
            span: 5639..5640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 267,
            column: 48,
            span: 5640..5641,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 267,
            column: 49,
            span: 5641..5642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 267,
            column: 53,
            span: 5643..5646,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 267,
            column: 54,
            span: 5646..5647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        position: Position {
            line: 268,
            column: 12,
            span: 5654..5659,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 13,
            span: 5659..5660,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 268,
            column: 15,
            span: 5659..5662,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 16,
            span: 5662..5663,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 268,
            column: 17,
            span: 5663..5664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 269,
            column: 13,
            span: 5671..5677,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 269,
            column: 14,
            span: 5677..5678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 269,
            column: 17,
            span: 5678..5681,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 269,
            column: 20,
            span: 5682..5684,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 269,
            column: 24,
            span: 5685..5688,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 269,
            column: 25,
            span: 5688..5689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 270,
            column: 8,
            span: 5696..5697,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 270,
            column: 10,
            span: 5698..5699,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 270,
            column: 0,
            span: 5700..5704,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 271,
            column: 8,
            span: 5709..5712,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 271,
            column: 9,
            span: 5712..5713,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 271,
            column: 13,
            span: 5713..5717,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 14,
            span: 5717..5718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 272,
            column: 11,
            span: 5723..5729,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 12,
            span: 5729..5730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 272,
            column: 13,
            span: 5730..5731,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 272,
            column: 16,
            span: 5732..5734,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 272,
            column: 20,
            span: 5734..5738,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 272,
            column: 21,
            span: 5738..5739,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 272,
            column: 22,
            span: 5739..5740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 272,
            column: 24,
            span: 5741..5742,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 272,
            column: 26,
            span: 5743..5744,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 272,
            column: 30,
            span: 5744..5748,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 272,
            column: 31,
            span: 5748..5749,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 275,
            column: 10,
            span: 5836..5841,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 275,
            column: 19,
            span: 5842..5850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 275,
            column: 23,
            span: 5851..5854,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 275,
            column: 24,
            span: 5854..5855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 275,
            column: 25,
            span: 5855..5856,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 275,
            column: 26,
            span: 5856..5857,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 276,
            column: 12,
            span: 5864..5869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 276,
            column: 14,
            span: 5870..5871,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 276,
            column: 16,
            span: 5872..5873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 276,
            column: 21,
            span: 5873..5878,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 276,
            column: 22,
            span: 5878..5879,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 276,
            column: 24,
            span: 5880..5881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closescope",
        ),
        position: Position {
            line: 276,
            column: 0,
            span: 5882..5892,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 277,
            column: 13,
            span: 5899..5905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 277,
            column: 15,
            span: 5906..5907,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 277,
            column: 16,
            span: 5907..5908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 277,
            column: 18,
            span: 5909..5910,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 277,
            column: 19,
            span: 5910..5911,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 277,
            column: 0,
            span: 5911..5914,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 278,
            column: 0,
            span: 5919..5922,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 280,
            column: 10,
            span: 5928..5933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 280,
            column: 12,
            span: 5934..5935,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 280,
            column: 13,
            span: 5935..5936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 280,
            column: 15,
            span: 5937..5938,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 280,
            column: 16,
            span: 5938..5939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 280,
            column: 18,
            span: 5940..5941,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 280,
            column: 20,
            span: 5942..5943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 280,
            column: 24,
            span: 5944..5947,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 280,
            column: 25,
            span: 5947..5948,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 280,
            column: 28,
            span: 5947..5951,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 280,
            column: 29,
            span: 5951..5952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 281,
            column: 11,
            span: 5957..5963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 12,
            span: 5963..5964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 281,
            column: 13,
            span: 5964..5965,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 16,
            span: 5966..5968,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 281,
            column: 20,
            span: 5968..5972,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 281,
            column: 24,
            span: 5973..5976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 281,
            column: 26,
            span: 5977..5978,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 29,
            span: 5979..5981,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 281,
            column: 35,
            span: 5982..5987,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 281,
            column: 39,
            span: 5988..5991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 281,
            column: 41,
            span: 5992..5993,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 44,
            span: 5994..5996,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 281,
            column: 47,
            span: 5996..5999,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 281,
            column: 51,
            span: 6000..6003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 281,
            column: 53,
            span: 6004..6005,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 56,
            span: 6006..6008,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 281,
            column: 61,
            span: 6009..6013,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 62,
            span: 6013..6014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 283,
            column: 6,
            span: 6020..6021,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 283,
            column: 8,
            span: 6022..6023,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 283,
            column: 0,
            span: 6024..6029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 284,
            column: 8,
            span: 6034..6037,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 284,
            column: 10,
            span: 6038..6039,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 284,
            column: 19,
            span: 6040..6048,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 284,
            column: 20,
            span: 6048..6049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 284,
            column: 21,
            span: 6049..6050,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 284,
            column: 22,
            span: 6050..6051,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 285,
            column: 12,
            span: 6058..6063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 285,
            column: 14,
            span: 6064..6065,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 285,
            column: 16,
            span: 6066..6067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 285,
            column: 21,
            span: 6067..6072,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 285,
            column: 22,
            span: 6072..6073,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 285,
            column: 24,
            span: 6074..6075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 285,
            column: 35,
            span: 6076..6086,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 285,
            column: 36,
            span: 6086..6087,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 285,
            column: 44,
            span: 6087..6095,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 285,
            column: 45,
            span: 6095..6096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 285,
            column: 46,
            span: 6096..6097,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 285,
            column: 47,
            span: 6097..6098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 285,
            column: 51,
            span: 6099..6102,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 285,
            column: 52,
            span: 6102..6103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 288,
            column: 15,
            span: 6215..6221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 288,
            column: 16,
            span: 6221..6222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 288,
            column: 21,
            span: 6222..6227,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 288,
            column: 22,
            span: 6227..6228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 288,
            column: 29,
            span: 6228..6235,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 288,
            column: 30,
            span: 6235..6236,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 288,
            column: 31,
            span: 6235..6237,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 288,
            column: 32,
            span: 6237..6238,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 288,
            column: 33,
            span: 6238..6239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 288,
            column: 37,
            span: 6239..6243,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 288,
            column: 40,
            span: 6244..6246,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"foo\"",
        ),
        position: Position {
            line: 288,
            column: 46,
            span: 6247..6252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 288,
            column: 47,
            span: 6252..6253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 289,
            column: 15,
            span: 6262..6268,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 16,
            span: 6268..6269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 289,
            column: 19,
            span: 6269..6272,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 289,
            column: 22,
            span: 6273..6275,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 289,
            column: 26,
            span: 6276..6279,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 27,
            span: 6279..6280,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 290,
            column: 10,
            span: 6287..6290,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 290,
            column: 11,
            span: 6290..6291,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 291,
            column: 12,
            span: 6298..6303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 291,
            column: 14,
            span: 6304..6305,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 291,
            column: 16,
            span: 6306..6307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 291,
            column: 21,
            span: 6307..6312,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 291,
            column: 22,
            span: 6312..6313,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 291,
            column: 24,
            span: 6314..6315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closescope",
        ),
        position: Position {
            line: 291,
            column: 0,
            span: 6316..6326,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 292,
            column: 12,
            span: 6333..6338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 292,
            column: 14,
            span: 6339..6340,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 292,
            column: 16,
            span: 6341..6342,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 292,
            column: 0,
            span: 6342..6345,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 293,
            column: 13,
            span: 6352..6358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 293,
            column: 0,
            span: 6359..6360,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 294,
            column: 0,
            span: 6365..6368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 296,
            column: 11,
            span: 6374..6380,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 12,
            span: 6380..6381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 296,
            column: 15,
            span: 6381..6384,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 16,
            span: 6384..6385,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 17,
            span: 6385..6386,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 296,
            column: 20,
            span: 6387..6389,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 23,
            span: 6389..6392,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 296,
            column: 27,
            span: 6393..6396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 296,
            column: 29,
            span: 6397..6398,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 296,
            column: 32,
            span: 6399..6401,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 296,
            column: 37,
            span: 6402..6406,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 38,
            span: 6406..6407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 298,
            column: 6,
            span: 6413..6414,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 298,
            column: 8,
            span: 6415..6416,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 298,
            column: 0,
            span: 6417..6422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 299,
            column: 8,
            span: 6427..6430,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 299,
            column: 10,
            span: 6431..6432,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 299,
            column: 19,
            span: 6433..6441,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 299,
            column: 20,
            span: 6441..6442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 299,
            column: 21,
            span: 6442..6443,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 300,
            column: 12,
            span: 6450..6455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 300,
            column: 14,
            span: 6456..6457,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 300,
            column: 16,
            span: 6458..6459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 300,
            column: 21,
            span: 6459..6464,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 300,
            column: 22,
            span: 6464..6465,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 300,
            column: 24,
            span: 6466..6467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closescope",
        ),
        position: Position {
            line: 300,
            column: 0,
            span: 6468..6478,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 301,
            column: 13,
            span: 6485..6491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 301,
            column: 0,
            span: 6492..6493,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 302,
            column: 0,
            span: 6498..6501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 304,
            column: 11,
            span: 6507..6513,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 12,
            span: 6513..6514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 304,
            column: 15,
            span: 6514..6517,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 16,
            span: 6517..6518,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 17,
            span: 6518..6519,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 304,
            column: 20,
            span: 6520..6522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closescope",
        ),
        position: Position {
            line: 304,
            column: 31,
            span: 6523..6533,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 304,
            column: 35,
            span: 6534..6537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 304,
            column: 37,
            span: 6538..6539,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 304,
            column: 40,
            span: 6540..6542,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 304,
            column: 45,
            span: 6543..6547,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 46,
            span: 6547..6548,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 305,
            column: 0,
            span: 6551..6554,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 311,
            column: 0,
            span: 6736..6738,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 312,
            column: 10,
            span: 6743..6748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        position: Position {
            line: 312,
            column: 15,
            span: 6749..6753,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 312,
            column: 17,
            span: 6754..6755,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 312,
            column: 0,
            span: 6756..6761,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 313,
            column: 10,
            span: 6766..6771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 313,
            column: 12,
            span: 6772..6773,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 313,
            column: 14,
            span: 6774..6775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 313,
            column: 27,
            span: 6776..6788,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 313,
            column: 28,
            span: 6788..6789,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 313,
            column: 29,
            span: 6789..6790,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 313,
            column: 30,
            span: 6790..6791,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 31,
            span: 6791..6792,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 314,
            column: 8,
            span: 6799..6800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__close",
        ),
        position: Position {
            line: 314,
            column: 16,
            span: 6801..6808,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 314,
            column: 18,
            span: 6809..6810,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 314,
            column: 27,
            span: 6811..6819,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 314,
            column: 28,
            span: 6819..6820,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 314,
            column: 29,
            span: 6820..6821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 315,
            column: 15,
            span: 6830..6836,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 16,
            span: 6836..6837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        position: Position {
            line: 315,
            column: 20,
            span: 6837..6841,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 315,
            column: 23,
            span: 6842..6844,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 315,
            column: 29,
            span: 6845..6850,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 30,
            span: 6850..6851,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 315,
            column: 31,
            span: 6851..6852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        position: Position {
            line: 315,
            column: 36,
            span: 6853..6857,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 315,
            column: 38,
            span: 6858..6859,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 315,
            column: 0,
            span: 6860..6864,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 316,
            column: 10,
            span: 6871..6874,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 316,
            column: 12,
            span: 6875..6876,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 316,
            column: 13,
            span: 6876..6877,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 317,
            column: 10,
            span: 6882..6887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 317,
            column: 12,
            span: 6888..6889,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 317,
            column: 14,
            span: 6890..6891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 317,
            column: 19,
            span: 6891..6896,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 317,
            column: 20,
            span: 6896..6897,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 317,
            column: 22,
            span: 6898..6899,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 317,
            column: 0,
            span: 6900..6903,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 318,
            column: 10,
            span: 6908..6913,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 318,
            column: 12,
            span: 6914..6915,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 318,
            column: 14,
            span: 6916..6917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 318,
            column: 19,
            span: 6917..6922,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 318,
            column: 20,
            span: 6922..6923,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 318,
            column: 22,
            span: 6924..6925,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 318,
            column: 0,
            span: 6926..6929,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 319,
            column: 0,
            span: 6934..6936,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 320,
            column: 12,
            span: 6943..6948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 320,
            column: 14,
            span: 6949..6950,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 320,
            column: 16,
            span: 6951..6952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 320,
            column: 21,
            span: 6952..6957,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 320,
            column: 22,
            span: 6957..6958,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 320,
            column: 24,
            span: 6959..6960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 320,
            column: 0,
            span: 6961..6962,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 321,
            column: 0,
            span: 6967..6970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 322,
            column: 11,
            span: 6975..6981,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 322,
            column: 12,
            span: 6981..6982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        position: Position {
            line: 322,
            column: 16,
            span: 6982..6986,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 322,
            column: 17,
            span: 6986..6987,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 323,
            column: 0,
            span: 7017..7020,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 325,
            column: 0,
            span: 7024..7026,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 327,
            column: 10,
            span: 7092..7097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        position: Position {
            line: 327,
            column: 15,
            span: 7098..7102,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 327,
            column: 17,
            span: 7103..7104,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 327,
            column: 0,
            span: 7105..7110,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 328,
            column: 10,
            span: 7115..7120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 328,
            column: 12,
            span: 7121..7122,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 328,
            column: 14,
            span: 7123..7124,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 328,
            column: 27,
            span: 7125..7137,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 328,
            column: 28,
            span: 7137..7138,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 328,
            column: 29,
            span: 7138..7139,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 328,
            column: 30,
            span: 7139..7140,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 328,
            column: 31,
            span: 7140..7141,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 329,
            column: 8,
            span: 7148..7149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__close",
        ),
        position: Position {
            line: 329,
            column: 16,
            span: 7150..7157,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 329,
            column: 18,
            span: 7158..7159,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 329,
            column: 27,
            span: 7160..7168,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 329,
            column: 28,
            span: 7168..7169,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 329,
            column: 29,
            span: 7169..7170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 330,
            column: 15,
            span: 7179..7185,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 330,
            column: 16,
            span: 7185..7186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        position: Position {
            line: 330,
            column: 20,
            span: 7186..7190,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 330,
            column: 23,
            span: 7191..7193,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 330,
            column: 29,
            span: 7194..7199,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 330,
            column: 30,
            span: 7199..7200,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 330,
            column: 31,
            span: 7200..7201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        position: Position {
            line: 330,
            column: 36,
            span: 7202..7206,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 330,
            column: 38,
            span: 7207..7208,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 330,
            column: 0,
            span: 7209..7213,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 331,
            column: 10,
            span: 7220..7223,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 331,
            column: 12,
            span: 7224..7225,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 13,
            span: 7225..7226,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 333,
            column: 10,
            span: 7295..7300,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 333,
            column: 19,
            span: 7301..7309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 333,
            column: 21,
            span: 7310..7311,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 333,
            column: 22,
            span: 7311..7312,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 333,
            column: 23,
            span: 7312..7313,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 334,
            column: 13,
            span: 7320..7326,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 15,
            span: 7327..7328,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 334,
            column: 23,
            span: 7328..7336,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 24,
            span: 7336..7337,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 25,
            span: 7337..7338,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 334,
            column: 32,
            span: 7339..7345,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 334,
            column: 36,
            span: 7346..7349,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 334,
            column: 40,
            span: 7350..7353,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 41,
            span: 7353..7354,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 334,
            column: 42,
            span: 7354..7355,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 334,
            column: 46,
            span: 7356..7359,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 334,
            column: 47,
            span: 7359..7360,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 334,
            column: 51,
            span: 7361..7364,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 334,
            column: 52,
            span: 7364..7365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 334,
            column: 0,
            span: 7366..7367,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 335,
            column: 0,
            span: 7372..7375,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 336,
            column: 10,
            span: 7380..7385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 336,
            column: 12,
            span: 7386..7387,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 336,
            column: 14,
            span: 7388..7389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 336,
            column: 19,
            span: 7389..7394,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 336,
            column: 20,
            span: 7394..7395,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 336,
            column: 22,
            span: 7396..7397,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 336,
            column: 0,
            span: 7397..7399,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 337,
            column: 10,
            span: 7404..7409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 337,
            column: 12,
            span: 7410..7411,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 337,
            column: 14,
            span: 7412..7413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 337,
            column: 19,
            span: 7413..7418,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 337,
            column: 20,
            span: 7418..7419,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 337,
            column: 22,
            span: 7420..7421,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 337,
            column: 0,
            span: 7421..7423,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 338,
            column: 10,
            span: 7428..7433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 338,
            column: 12,
            span: 7434..7435,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 338,
            column: 14,
            span: 7436..7437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 338,
            column: 19,
            span: 7437..7442,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 338,
            column: 20,
            span: 7442..7443,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 338,
            column: 22,
            span: 7444..7445,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 338,
            column: 0,
            span: 7445..7447,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 339,
            column: 10,
            span: 7452..7457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 339,
            column: 12,
            span: 7458..7459,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 339,
            column: 14,
            span: 7460..7461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 339,
            column: 19,
            span: 7461..7466,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 339,
            column: 20,
            span: 7466..7467,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 339,
            column: 22,
            span: 7468..7469,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 339,
            column: 0,
            span: 7469..7471,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 340,
            column: 10,
            span: 7476..7481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 340,
            column: 12,
            span: 7482..7483,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 340,
            column: 14,
            span: 7484..7485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "const",
        ),
        position: Position {
            line: 340,
            column: 19,
            span: 7485..7490,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 340,
            column: 20,
            span: 7490..7491,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 340,
            column: 22,
            span: 7492..7493,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 0,
            span: 7493..7495,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 341,
            column: 8,
            span: 7500..7503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 341,
            column: 10,
            span: 7504..7505,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 341,
            column: 13,
            span: 7506..7508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 341,
            column: 15,
            span: 7509..7510,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 16,
            span: 7510..7511,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 17,
            span: 7511..7512,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 341,
            column: 0,
            span: 7513..7515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 342,
            column: 8,
            span: 7522..7523,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 342,
            column: 10,
            span: 7524..7525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 342,
            column: 0,
            span: 7526..7527,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 343,
            column: 8,
            span: 7532..7535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 344,
            column: 11,
            span: 7581..7587,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 344,
            column: 12,
            span: 7587..7588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        position: Position {
            line: 344,
            column: 16,
            span: 7588..7592,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 344,
            column: 17,
            span: 7592..7593,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 345,
            column: 0,
            span: 7623..7626,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 349,
            column: 0,
            span: 7632..7634,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 351,
            column: 10,
            span: 7706..7711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 351,
            column: 12,
            span: 7712..7713,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 13,
            span: 7713..7714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        position: Position {
            line: 351,
            column: 0,
            span: 7715..7716,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 352,
            column: 10,
            span: 7721..7726,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 352,
            column: 19,
            span: 7727..7735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 352,
            column: 23,
            span: 7736..7739,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 352,
            column: 24,
            span: 7739..7740,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 352,
            column: 25,
            span: 7740..7741,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 353,
            column: 12,
            span: 7748..7753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 353,
            column: 14,
            span: 7754..7755,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 353,
            column: 16,
            span: 7756..7757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 353,
            column: 21,
            span: 7757..7762,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 353,
            column: 22,
            span: 7762..7763,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 353,
            column: 24,
            span: 7764..7765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 353,
            column: 35,
            span: 7766..7776,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 353,
            column: 36,
            span: 7776..7777,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 353,
            column: 44,
            span: 7777..7785,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 353,
            column: 45,
            span: 7785..7786,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 353,
            column: 46,
            span: 7786..7787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        position: Position {
            line: 353,
            column: 48,
            span: 7788..7789,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 353,
            column: 50,
            span: 7790..7791,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 353,
            column: 53,
            span: 7791..7794,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 353,
            column: 57,
            span: 7795..7798,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 353,
            column: 58,
            span: 7798..7799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 354,
            column: 13,
            span: 7806..7812,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 354,
            column: 14,
            span: 7812..7813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 354,
            column: 15,
            span: 7813..7814,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 354,
            column: 18,
            span: 7815..7817,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 354,
            column: 23,
            span: 7818..7822,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 354,
            column: 27,
            span: 7823..7826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        position: Position {
            line: 354,
            column: 29,
            span: 7827..7828,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 354,
            column: 32,
            span: 7829..7831,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 354,
            column: 36,
            span: 7832..7835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 354,
            column: 37,
            span: 7835..7836,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 355,
            column: 13,
            span: 7865..7871,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 355,
            column: 15,
            span: 7871..7873,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 355,
            column: 16,
            span: 7873..7874,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 355,
            column: 18,
            span: 7874..7876,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 355,
            column: 19,
            span: 7876..7877,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 355,
            column: 0,
            span: 7877..7879,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 356,
            column: 0,
            span: 7884..7887,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 358,
            column: 10,
            span: 7893..7898,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 358,
            column: 19,
            span: 7899..7907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bar",
        ),
        position: Position {
            line: 358,
            column: 23,
            span: 7908..7911,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 358,
            column: 24,
            span: 7911..7912,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 358,
            column: 25,
            span: 7912..7913,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 359,
            column: 12,
            span: 7920..7925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 359,
            column: 14,
            span: 7926..7927,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 359,
            column: 16,
            span: 7928..7929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 359,
            column: 21,
            span: 7929..7934,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 359,
            column: 22,
            span: 7934..7935,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 359,
            column: 24,
            span: 7936..7937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 359,
            column: 35,
            span: 7938..7948,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 36,
            span: 7948..7949,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 359,
            column: 44,
            span: 7949..7957,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 45,
            span: 7957..7958,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 46,
            span: 7958..7959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 359,
            column: 48,
            span: 7960..7961,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 359,
            column: 50,
            span: 7962..7963,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 359,
            column: 56,
            span: 7964..7969,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 359,
            column: 60,
            span: 7970..7973,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 61,
            span: 7973..7974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 360,
            column: 8,
            span: 7981..7982,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 360,
            column: 10,
            span: 7983..7984,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 360,
            column: 0,
            span: 7985..7989,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 361,
            column: 0,
            span: 7996..7998,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 362,
            column: 15,
            span: 8007..8013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 362,
            column: 19,
            span: 8014..8017,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 20,
            span: 8017..8018,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 21,
            span: 8018..8019,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 363,
            column: 0,
            span: 8046..8049,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 364,
            column: 0,
            span: 8054..8057,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 366,
            column: 10,
            span: 8063..8068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 366,
            column: 12,
            span: 8069..8070,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 366,
            column: 13,
            span: 8070..8071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 366,
            column: 15,
            span: 8072..8073,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 366,
            column: 16,
            span: 8073..8074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 366,
            column: 18,
            span: 8075..8076,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 366,
            column: 19,
            span: 8076..8077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 366,
            column: 21,
            span: 8078..8079,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 366,
            column: 23,
            span: 8080..8081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bar",
        ),
        position: Position {
            line: 366,
            column: 27,
            span: 8082..8085,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 366,
            column: 28,
            span: 8085..8086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 366,
            column: 29,
            span: 8086..8087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 367,
            column: 11,
            span: 8092..8098,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 367,
            column: 12,
            span: 8098..8099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 367,
            column: 13,
            span: 8099..8100,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 367,
            column: 16,
            span: 8101..8103,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 367,
            column: 18,
            span: 8103..8105,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 367,
            column: 22,
            span: 8106..8109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 367,
            column: 24,
            span: 8110..8111,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 367,
            column: 27,
            span: 8112..8114,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 367,
            column: 29,
            span: 8114..8116,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 367,
            column: 33,
            span: 8117..8120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 367,
            column: 35,
            span: 8121..8122,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 367,
            column: 38,
            span: 8123..8125,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 367,
            column: 40,
            span: 8125..8127,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 367,
            column: 44,
            span: 8128..8131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 367,
            column: 46,
            span: 8132..8133,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 367,
            column: 49,
            span: 8134..8136,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 367,
            column: 55,
            span: 8137..8142,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 367,
            column: 59,
            span: 8143..8146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        position: Position {
            line: 367,
            column: 61,
            span: 8147..8148,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 367,
            column: 64,
            span: 8149..8151,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 367,
            column: 67,
            span: 8151..8154,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 367,
            column: 71,
            span: 8155..8158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 367,
            column: 73,
            span: 8159..8160,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 367,
            column: 76,
            span: 8161..8163,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 367,
            column: 80,
            span: 8164..8167,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 81,
            span: 8167..8168,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 368,
            column: 0,
            span: 8171..8174,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 371,
            column: 0,
            span: 8179..8181,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 376,
            column: 10,
            span: 8359..8364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closed",
        ),
        position: Position {
            line: 376,
            column: 17,
            span: 8365..8371,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 376,
            column: 19,
            span: 8372..8373,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 376,
            column: 0,
            span: 8374..8379,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 378,
            column: 10,
            span: 8385..8390,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 378,
            column: 19,
            span: 8391..8399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 378,
            column: 23,
            span: 8400..8403,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 378,
            column: 24,
            span: 8403..8404,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 378,
            column: 25,
            span: 8404..8405,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 379,
            column: 13,
            span: 8412..8418,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 379,
            column: 22,
            span: 8419..8427,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 379,
            column: 23,
            span: 8427..8428,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 379,
            column: 24,
            span: 8428..8429,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 379,
            column: 31,
            span: 8430..8436,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 379,
            column: 36,
            span: 8437..8441,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 379,
            column: 40,
            span: 8442..8445,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 379,
            column: 41,
            span: 8445..8446,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 379,
            column: 43,
            span: 8446..8448,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 379,
            column: 44,
            span: 8448..8449,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 379,
            column: 46,
            span: 8449..8451,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 379,
            column: 47,
            span: 8451..8452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 380,
            column: 21,
            span: 8463..8473,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 380,
            column: 22,
            span: 8473..8474,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 380,
            column: 30,
            span: 8474..8482,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 380,
            column: 31,
            span: 8482..8483,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 380,
            column: 32,
            span: 8483..8484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closed",
        ),
        position: Position {
            line: 380,
            column: 39,
            span: 8485..8491,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 380,
            column: 41,
            span: 8492..8493,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 380,
            column: 46,
            span: 8494..8498,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 380,
            column: 50,
            span: 8499..8502,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 380,
            column: 51,
            span: 8502..8503,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 381,
            column: 0,
            span: 8508..8511,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 383,
            column: 10,
            span: 8517..8522,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 383,
            column: 19,
            span: 8523..8531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        position: Position {
            line: 383,
            column: 24,
            span: 8532..8536,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 383,
            column: 25,
            span: 8536..8537,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 383,
            column: 26,
            span: 8537..8538,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 383,
            column: 33,
            span: 8539..8545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closed",
        ),
        position: Position {
            line: 383,
            column: 40,
            span: 8546..8552,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 383,
            column: 0,
            span: 8553..8556,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 385,
            column: 10,
            span: 8562..8567,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 385,
            column: 19,
            span: 8568..8576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        position: Position {
            line: 385,
            column: 24,
            span: 8577..8581,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 385,
            column: 25,
            span: 8581..8582,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 385,
            column: 26,
            span: 8582..8583,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 386,
            column: 10,
            span: 8590..8593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 386,
            column: 12,
            span: 8594..8595,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 386,
            column: 15,
            span: 8596..8598,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 386,
            column: 19,
            span: 8599..8602,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 20,
            span: 8602..8603,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 21,
            span: 8603..8604,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 386,
            column: 24,
            span: 8605..8607,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 386,
            column: 31,
            span: 8608..8614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        position: Position {
            line: 386,
            column: 36,
            span: 8615..8619,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 37,
            span: 8619..8620,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 38,
            span: 8620..8621,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 386,
            column: 0,
            span: 8622..8625,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 387,
            column: 0,
            span: 8630..8633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 389,
            column: 11,
            span: 8639..8645,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 389,
            column: 12,
            span: 8645..8646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        position: Position {
            line: 389,
            column: 16,
            span: 8646..8650,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 389,
            column: 17,
            span: 8650..8651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 389,
            column: 18,
            span: 8651..8652,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 389,
            column: 21,
            span: 8653..8655,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 389,
            column: 27,
            span: 8656..8661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 389,
            column: 28,
            span: 8661..8662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 390,
            column: 11,
            span: 8667..8673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 390,
            column: 12,
            span: 8673..8674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closed",
        ),
        position: Position {
            line: 390,
            column: 18,
            span: 8674..8680,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 390,
            column: 21,
            span: 8681..8683,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 390,
            column: 26,
            span: 8684..8688,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 390,
            column: 27,
            span: 8688..8689,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 391,
            column: 0,
            span: 8692..8695,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 394,
            column: 0,
            span: 8700..8702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 395,
            column: 10,
            span: 8707..8712,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 395,
            column: 11,
            span: 8712..8713,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing errors in __close\"",
        ),
        position: Position {
            line: 395,
            column: 38,
            span: 8713..8740,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 395,
            column: 39,
            span: 8740..8741,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 398,
            column: 10,
            span: 8783..8788,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 398,
            column: 19,
            span: 8789..8797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 398,
            column: 23,
            span: 8798..8801,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 398,
            column: 24,
            span: 8801..8802,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 398,
            column: 25,
            span: 8802..8803,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 399,
            column: 12,
            span: 8810..8815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 399,
            column: 14,
            span: 8816..8817,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 399,
            column: 16,
            span: 8818..8819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 399,
            column: 21,
            span: 8819..8824,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 399,
            column: 22,
            span: 8824..8825,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 399,
            column: 24,
            span: 8826..8827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 400,
            column: 21,
            span: 8838..8848,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 400,
            column: 22,
            span: 8848..8849,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 400,
            column: 30,
            span: 8849..8857,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 400,
            column: 31,
            span: 8857..8858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 400,
            column: 35,
            span: 8858..8862,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 400,
            column: 36,
            span: 8862..8863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 400,
            column: 40,
            span: 8864..8867,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 400,
            column: 41,
            span: 8867..8868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 401,
            column: 19,
            span: 8881..8887,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 401,
            column: 20,
            span: 8887..8888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 401,
            column: 26,
            span: 8888..8894,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 401,
            column: 27,
            span: 8894..8895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 401,
            column: 31,
            span: 8895..8899,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 401,
            column: 32,
            span: 8899..8900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 401,
            column: 35,
            span: 8900..8903,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 401,
            column: 36,
            span: 8903..8904,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@y\"",
        ),
        position: Position {
            line: 401,
            column: 41,
            span: 8905..8909,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 401,
            column: 42,
            span: 8909..8910,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 401,
            column: 43,
            span: 8910..8911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 402,
            column: 18,
            span: 8924..8929,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 402,
            column: 19,
            span: 8929..8930,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@x\"",
        ),
        position: Position {
            line: 402,
            column: 23,
            span: 8930..8934,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 402,
            column: 24,
            span: 8934..8935,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 403,
            column: 14,
            span: 8946..8949,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 403,
            column: 15,
            span: 8949..8950,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 405,
            column: 12,
            span: 8958..8963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        position: Position {
            line: 405,
            column: 15,
            span: 8964..8966,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 405,
            column: 17,
            span: 8967..8968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 405,
            column: 22,
            span: 8968..8973,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 405,
            column: 23,
            span: 8973..8974,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 405,
            column: 25,
            span: 8975..8976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 406,
            column: 21,
            span: 8987..8997,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 406,
            column: 22,
            span: 8997..8998,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 406,
            column: 30,
            span: 8998..9006,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 406,
            column: 31,
            span: 9006..9007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 406,
            column: 35,
            span: 9007..9011,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 406,
            column: 36,
            span: 9011..9012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 406,
            column: 40,
            span: 9013..9016,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 406,
            column: 41,
            span: 9016..9017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 407,
            column: 19,
            span: 9030..9036,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 407,
            column: 20,
            span: 9036..9037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 407,
            column: 26,
            span: 9037..9043,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 407,
            column: 27,
            span: 9043..9044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 407,
            column: 31,
            span: 9044..9048,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 407,
            column: 32,
            span: 9048..9049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 407,
            column: 35,
            span: 9049..9052,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 407,
            column: 36,
            span: 9052..9053,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@y\"",
        ),
        position: Position {
            line: 407,
            column: 41,
            span: 9054..9058,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 407,
            column: 42,
            span: 9058..9059,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 407,
            column: 43,
            span: 9059..9060,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 408,
            column: 14,
            span: 9071..9074,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 408,
            column: 15,
            span: 9074..9075,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 410,
            column: 12,
            span: 9083..9088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gc",
        ),
        position: Position {
            line: 410,
            column: 15,
            span: 9089..9091,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 410,
            column: 17,
            span: 9092..9093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 410,
            column: 22,
            span: 9093..9098,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 410,
            column: 23,
            span: 9098..9099,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 410,
            column: 25,
            span: 9100..9101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 410,
            column: 36,
            span: 9102..9112,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 410,
            column: 37,
            span: 9112..9113,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 410,
            column: 45,
            span: 9113..9121,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 410,
            column: 46,
            span: 9121..9122,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 410,
            column: 47,
            span: 9122..9123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 410,
            column: 62,
            span: 9124..9138,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 410,
            column: 63,
            span: 9138..9139,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 410,
            column: 64,
            span: 9139..9140,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 410,
            column: 68,
            span: 9141..9144,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 410,
            column: 69,
            span: 9144..9145,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 412,
            column: 12,
            span: 9153..9158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 412,
            column: 14,
            span: 9159..9160,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 412,
            column: 16,
            span: 9161..9162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 412,
            column: 21,
            span: 9162..9167,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 412,
            column: 22,
            span: 9167..9168,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 412,
            column: 24,
            span: 9169..9170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 413,
            column: 21,
            span: 9181..9191,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 413,
            column: 22,
            span: 9191..9192,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 413,
            column: 30,
            span: 9192..9200,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 413,
            column: 31,
            span: 9200..9201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 413,
            column: 35,
            span: 9201..9205,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 413,
            column: 36,
            span: 9205..9206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 413,
            column: 40,
            span: 9207..9210,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 413,
            column: 41,
            span: 9210..9211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 414,
            column: 19,
            span: 9224..9230,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 414,
            column: 20,
            span: 9230..9231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 414,
            column: 26,
            span: 9231..9237,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 414,
            column: 27,
            span: 9237..9238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 414,
            column: 31,
            span: 9238..9242,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 414,
            column: 32,
            span: 9242..9243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 414,
            column: 35,
            span: 9243..9246,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 414,
            column: 36,
            span: 9246..9247,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@z\"",
        ),
        position: Position {
            line: 414,
            column: 41,
            span: 9248..9252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 414,
            column: 42,
            span: 9252..9253,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 414,
            column: 43,
            span: 9253..9254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 415,
            column: 18,
            span: 9283..9288,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 19,
            span: 9288..9289,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@y\"",
        ),
        position: Position {
            line: 415,
            column: 23,
            span: 9289..9293,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 24,
            span: 9293..9294,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 416,
            column: 14,
            span: 9305..9308,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 416,
            column: 15,
            span: 9308..9309,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 418,
            column: 12,
            span: 9317..9322,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 418,
            column: 14,
            span: 9323..9324,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 418,
            column: 16,
            span: 9325..9326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 418,
            column: 21,
            span: 9326..9331,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 418,
            column: 22,
            span: 9331..9332,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 418,
            column: 24,
            span: 9333..9334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 419,
            column: 21,
            span: 9345..9355,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 419,
            column: 22,
            span: 9355..9356,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 419,
            column: 30,
            span: 9356..9364,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 419,
            column: 31,
            span: 9364..9365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 419,
            column: 35,
            span: 9365..9369,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 419,
            column: 36,
            span: 9369..9370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 419,
            column: 40,
            span: 9371..9374,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 419,
            column: 41,
            span: 9374..9375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 420,
            column: 19,
            span: 9388..9394,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 420,
            column: 20,
            span: 9394..9395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 420,
            column: 23,
            span: 9395..9398,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 420,
            column: 26,
            span: 9399..9401,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 420,
            column: 30,
            span: 9402..9405,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 420,
            column: 31,
            span: 9405..9406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 421,
            column: 18,
            span: 9419..9424,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 421,
            column: 19,
            span: 9424..9425,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@z\"",
        ),
        position: Position {
            line: 421,
            column: 23,
            span: 9425..9429,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 421,
            column: 24,
            span: 9429..9430,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 422,
            column: 14,
            span: 9441..9444,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 422,
            column: 15,
            span: 9444..9445,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 424,
            column: 13,
            span: 9453..9459,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 424,
            column: 0,
            span: 9459..9463,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 425,
            column: 0,
            span: 9468..9471,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 427,
            column: 10,
            span: 9477..9482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 427,
            column: 15,
            span: 9483..9487,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 427,
            column: 16,
            span: 9487..9488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 427,
            column: 20,
            span: 9489..9492,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 427,
            column: 22,
            span: 9493..9494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 427,
            column: 28,
            span: 9495..9500,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 427,
            column: 29,
            span: 9500..9501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 427,
            column: 32,
            span: 9501..9504,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 427,
            column: 33,
            span: 9504..9505,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 427,
            column: 39,
            span: 9506..9511,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 427,
            column: 40,
            span: 9511..9512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 428,
            column: 11,
            span: 9517..9523,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 428,
            column: 12,
            span: 9523..9524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 428,
            column: 18,
            span: 9524..9530,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 428,
            column: 19,
            span: 9530..9531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 428,
            column: 23,
            span: 9531..9535,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 428,
            column: 24,
            span: 9535..9536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 428,
            column: 27,
            span: 9536..9539,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 428,
            column: 28,
            span: 9539..9540,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@x\"",
        ),
        position: Position {
            line: 428,
            column: 33,
            span: 9541..9545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 428,
            column: 34,
            span: 9545..9546,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 428,
            column: 35,
            span: 9546..9547,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 432,
            column: 10,
            span: 9591..9596,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 432,
            column: 19,
            span: 9597..9605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 432,
            column: 23,
            span: 9606..9609,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 432,
            column: 24,
            span: 9609..9610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 432,
            column: 25,
            span: 9610..9611,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 433,
            column: 12,
            span: 9618..9623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 433,
            column: 14,
            span: 9624..9625,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 433,
            column: 16,
            span: 9626..9627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 433,
            column: 21,
            span: 9627..9632,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 433,
            column: 22,
            span: 9632..9633,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 433,
            column: 24,
            span: 9634..9635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 434,
            column: 21,
            span: 9646..9656,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 434,
            column: 22,
            span: 9656..9657,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 434,
            column: 30,
            span: 9657..9665,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 434,
            column: 31,
            span: 9665..9666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 434,
            column: 35,
            span: 9666..9670,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 434,
            column: 36,
            span: 9670..9671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 434,
            column: 40,
            span: 9672..9675,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 434,
            column: 41,
            span: 9675..9676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 437,
            column: 19,
            span: 9783..9789,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 437,
            column: 20,
            span: 9789..9790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 437,
            column: 25,
            span: 9790..9795,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 437,
            column: 26,
            span: 9795..9796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 437,
            column: 33,
            span: 9796..9803,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 437,
            column: 34,
            span: 9803..9804,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 437,
            column: 35,
            span: 9803..9805,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 437,
            column: 36,
            span: 9805..9806,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 437,
            column: 37,
            span: 9806..9807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 437,
            column: 41,
            span: 9807..9811,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 437,
            column: 44,
            span: 9812..9814,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pcall\"",
        ),
        position: Position {
            line: 437,
            column: 52,
            span: 9815..9822,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 437,
            column: 53,
            span: 9822..9823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 438,
            column: 19,
            span: 9836..9842,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 438,
            column: 20,
            span: 9842..9843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 438,
            column: 26,
            span: 9843..9849,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 438,
            column: 27,
            span: 9849..9850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 438,
            column: 31,
            span: 9850..9854,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 438,
            column: 32,
            span: 9854..9855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 438,
            column: 35,
            span: 9855..9858,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 438,
            column: 36,
            span: 9858..9859,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@x1\"",
        ),
        position: Position {
            line: 438,
            column: 42,
            span: 9860..9865,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 438,
            column: 43,
            span: 9865..9866,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 438,
            column: 44,
            span: 9866..9867,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 439,
            column: 14,
            span: 9878..9881,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 439,
            column: 15,
            span: 9881..9882,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 441,
            column: 12,
            span: 9890..9895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        position: Position {
            line: 441,
            column: 15,
            span: 9896..9898,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 441,
            column: 17,
            span: 9899..9900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 441,
            column: 22,
            span: 9900..9905,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 441,
            column: 23,
            span: 9905..9906,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 441,
            column: 25,
            span: 9907..9908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 442,
            column: 21,
            span: 9919..9929,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 442,
            column: 22,
            span: 9929..9930,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 442,
            column: 30,
            span: 9930..9938,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 442,
            column: 31,
            span: 9938..9939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 442,
            column: 35,
            span: 9939..9943,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 442,
            column: 36,
            span: 9943..9944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 442,
            column: 40,
            span: 9945..9948,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 442,
            column: 41,
            span: 9948..9949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 443,
            column: 19,
            span: 9962..9968,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 443,
            column: 20,
            span: 9968..9969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 443,
            column: 25,
            span: 9969..9974,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 443,
            column: 26,
            span: 9974..9975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 443,
            column: 33,
            span: 9975..9982,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 443,
            column: 34,
            span: 9982..9983,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 443,
            column: 35,
            span: 9982..9984,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 443,
            column: 36,
            span: 9984..9985,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 443,
            column: 37,
            span: 9985..9986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 443,
            column: 41,
            span: 9986..9990,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 443,
            column: 44,
            span: 9991..9993,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pcall\"",
        ),
        position: Position {
            line: 443,
            column: 52,
            span: 9994..10001,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 443,
            column: 53,
            span: 10001..10002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 444,
            column: 19,
            span: 10015..10021,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 444,
            column: 20,
            span: 10021..10022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 444,
            column: 26,
            span: 10022..10028,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 444,
            column: 27,
            span: 10028..10029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 444,
            column: 31,
            span: 10029..10033,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 444,
            column: 32,
            span: 10033..10034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 444,
            column: 35,
            span: 10034..10037,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 444,
            column: 36,
            span: 10037..10038,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@y\"",
        ),
        position: Position {
            line: 444,
            column: 41,
            span: 10039..10043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 444,
            column: 42,
            span: 10043..10044,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 444,
            column: 43,
            span: 10044..10045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 445,
            column: 18,
            span: 10058..10063,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 445,
            column: 19,
            span: 10063..10064,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@x1\"",
        ),
        position: Position {
            line: 445,
            column: 24,
            span: 10064..10069,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 445,
            column: 25,
            span: 10069..10070,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 446,
            column: 14,
            span: 10081..10084,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 446,
            column: 15,
            span: 10084..10085,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 448,
            column: 12,
            span: 10093..10098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gc",
        ),
        position: Position {
            line: 448,
            column: 15,
            span: 10099..10101,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 448,
            column: 17,
            span: 10102..10103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 448,
            column: 22,
            span: 10103..10108,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 448,
            column: 23,
            span: 10108..10109,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 448,
            column: 25,
            span: 10110..10111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 448,
            column: 36,
            span: 10112..10122,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 448,
            column: 37,
            span: 10122..10123,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 448,
            column: 45,
            span: 10123..10131,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 448,
            column: 46,
            span: 10131..10132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 448,
            column: 47,
            span: 10132..10133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 448,
            column: 62,
            span: 10134..10148,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 448,
            column: 63,
            span: 10148..10149,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 448,
            column: 64,
            span: 10149..10150,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 448,
            column: 68,
            span: 10151..10154,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 448,
            column: 69,
            span: 10154..10155,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 450,
            column: 12,
            span: 10163..10168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 450,
            column: 14,
            span: 10169..10170,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 450,
            column: 16,
            span: 10171..10172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 450,
            column: 21,
            span: 10172..10177,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 450,
            column: 22,
            span: 10177..10178,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 450,
            column: 24,
            span: 10179..10180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 451,
            column: 21,
            span: 10191..10201,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 451,
            column: 22,
            span: 10201..10202,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 451,
            column: 30,
            span: 10202..10210,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 451,
            column: 31,
            span: 10210..10211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 451,
            column: 35,
            span: 10211..10215,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 451,
            column: 36,
            span: 10215..10216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 451,
            column: 40,
            span: 10217..10220,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 451,
            column: 41,
            span: 10220..10221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 452,
            column: 19,
            span: 10234..10240,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 452,
            column: 20,
            span: 10240..10241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 452,
            column: 25,
            span: 10241..10246,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 452,
            column: 26,
            span: 10246..10247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 452,
            column: 33,
            span: 10247..10254,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 452,
            column: 34,
            span: 10254..10255,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 452,
            column: 35,
            span: 10254..10256,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 452,
            column: 36,
            span: 10256..10257,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 452,
            column: 37,
            span: 10257..10258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 452,
            column: 41,
            span: 10258..10262,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 452,
            column: 44,
            span: 10263..10265,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pcall\"",
        ),
        position: Position {
            line: 452,
            column: 52,
            span: 10266..10273,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 452,
            column: 53,
            span: 10273..10274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 453,
            column: 19,
            span: 10287..10293,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 453,
            column: 20,
            span: 10293..10294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 453,
            column: 26,
            span: 10294..10300,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 453,
            column: 27,
            span: 10300..10301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 453,
            column: 31,
            span: 10301..10305,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 453,
            column: 32,
            span: 10305..10306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 453,
            column: 35,
            span: 10306..10309,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 453,
            column: 36,
            span: 10309..10310,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@z\"",
        ),
        position: Position {
            line: 453,
            column: 41,
            span: 10311..10315,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 453,
            column: 42,
            span: 10315..10316,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 453,
            column: 43,
            span: 10316..10317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 454,
            column: 18,
            span: 10330..10335,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 454,
            column: 19,
            span: 10335..10336,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@y\"",
        ),
        position: Position {
            line: 454,
            column: 23,
            span: 10336..10340,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 454,
            column: 24,
            span: 10340..10341,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 455,
            column: 14,
            span: 10352..10355,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 455,
            column: 15,
            span: 10355..10356,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 457,
            column: 12,
            span: 10364..10369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "first",
        ),
        position: Position {
            line: 457,
            column: 18,
            span: 10370..10375,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 457,
            column: 20,
            span: 10376..10377,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 457,
            column: 0,
            span: 10378..10382,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 458,
            column: 12,
            span: 10389..10394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 458,
            column: 14,
            span: 10395..10396,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 458,
            column: 16,
            span: 10397..10398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 458,
            column: 21,
            span: 10398..10403,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 458,
            column: 22,
            span: 10403..10404,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 458,
            column: 24,
            span: 10405..10406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 459,
            column: 21,
            span: 10417..10427,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 459,
            column: 22,
            span: 10427..10428,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 459,
            column: 30,
            span: 10428..10436,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 459,
            column: 31,
            span: 10436..10437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 459,
            column: 35,
            span: 10437..10441,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 459,
            column: 36,
            span: 10441..10442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 459,
            column: 40,
            span: 10443..10446,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 459,
            column: 41,
            span: 10446..10447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 460,
            column: 19,
            span: 10460..10466,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 460,
            column: 20,
            span: 10466..10467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 460,
            column: 25,
            span: 10467..10472,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 460,
            column: 26,
            span: 10472..10473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 460,
            column: 33,
            span: 10473..10480,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 460,
            column: 34,
            span: 10480..10481,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 460,
            column: 35,
            span: 10480..10482,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 460,
            column: 36,
            span: 10482..10483,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 460,
            column: 37,
            span: 10483..10484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 460,
            column: 41,
            span: 10484..10488,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 460,
            column: 44,
            span: 10489..10491,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pcall\"",
        ),
        position: Position {
            line: 460,
            column: 52,
            span: 10492..10499,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 460,
            column: 53,
            span: 10499..10500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 462,
            column: 19,
            span: 10553..10559,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 462,
            column: 20,
            span: 10559..10560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "first",
        ),
        position: Position {
            line: 462,
            column: 25,
            span: 10560..10565,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 462,
            column: 29,
            span: 10566..10569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 462,
            column: 33,
            span: 10570..10573,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 462,
            column: 36,
            span: 10574..10576,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 462,
            column: 38,
            span: 10576..10578,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 462,
            column: 39,
            span: 10578..10579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "first",
        ),
        position: Position {
            line: 463,
            column: 18,
            span: 10592..10597,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 463,
            column: 20,
            span: 10598..10599,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 463,
            column: 0,
            span: 10600..10605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 464,
            column: 18,
            span: 10618..10623,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 464,
            column: 19,
            span: 10623..10624,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@z\"",
        ),
        position: Position {
            line: 464,
            column: 23,
            span: 10624..10628,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 464,
            column: 24,
            span: 10628..10629,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 465,
            column: 14,
            span: 10640..10643,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 465,
            column: 15,
            span: 10643..10644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 467,
            column: 12,
            span: 10652..10657,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 467,
            column: 13,
            span: 10657..10658,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 467,
            column: 14,
            span: 10657..10659,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 467,
            column: 15,
            span: 10659..10660,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 468,
            column: 0,
            span: 10683..10686,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 470,
            column: 10,
            span: 10692..10697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 470,
            column: 15,
            span: 10698..10702,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 470,
            column: 16,
            span: 10702..10703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 470,
            column: 20,
            span: 10704..10707,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 470,
            column: 22,
            span: 10708..10709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 470,
            column: 28,
            span: 10710..10715,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 470,
            column: 29,
            span: 10715..10716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 470,
            column: 32,
            span: 10716..10719,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 470,
            column: 33,
            span: 10719..10720,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 470,
            column: 38,
            span: 10721..10725,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 470,
            column: 39,
            span: 10725..10726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 471,
            column: 11,
            span: 10731..10737,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 471,
            column: 12,
            span: 10737..10738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 471,
            column: 18,
            span: 10738..10744,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 471,
            column: 19,
            span: 10744..10745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 471,
            column: 23,
            span: 10745..10749,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 471,
            column: 24,
            span: 10749..10750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 471,
            column: 27,
            span: 10750..10753,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 471,
            column: 28,
            span: 10753..10754,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@x1\"",
        ),
        position: Position {
            line: 471,
            column: 34,
            span: 10755..10760,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 471,
            column: 35,
            span: 10760..10761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 471,
            column: 36,
            span: 10761..10762,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 474,
            column: 10,
            span: 10797..10802,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 474,
            column: 19,
            span: 10803..10811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 474,
            column: 23,
            span: 10812..10815,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 474,
            column: 24,
            span: 10815..10816,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 474,
            column: 27,
            span: 10816..10819,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 474,
            column: 28,
            span: 10819..10820,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 475,
            column: 0,
            span: 10827..10829,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 476,
            column: 14,
            span: 10838..10843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        position: Position {
            line: 476,
            column: 17,
            span: 10844..10846,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 476,
            column: 19,
            span: 10847..10848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 476,
            column: 24,
            span: 10848..10853,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 476,
            column: 25,
            span: 10853..10854,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 476,
            column: 27,
            span: 10855..10856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 477,
            column: 23,
            span: 10869..10879,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 477,
            column: 24,
            span: 10879..10880,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 477,
            column: 32,
            span: 10880..10888,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 477,
            column: 33,
            span: 10888..10889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 477,
            column: 37,
            span: 10889..10893,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 477,
            column: 38,
            span: 10893..10894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 477,
            column: 42,
            span: 10895..10898,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 477,
            column: 43,
            span: 10898..10899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 478,
            column: 21,
            span: 10914..10920,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 478,
            column: 22,
            span: 10920..10921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 478,
            column: 28,
            span: 10921..10927,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 478,
            column: 29,
            span: 10927..10928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 478,
            column: 33,
            span: 10928..10932,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 478,
            column: 34,
            span: 10932..10933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 478,
            column: 37,
            span: 10933..10936,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 478,
            column: 38,
            span: 10936..10937,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@X\"",
        ),
        position: Position {
            line: 478,
            column: 43,
            span: 10938..10942,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 478,
            column: 44,
            span: 10942..10943,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 478,
            column: 45,
            span: 10943..10944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 479,
            column: 20,
            span: 10959..10964,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 479,
            column: 21,
            span: 10964..10965,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@Y\"",
        ),
        position: Position {
            line: 479,
            column: 25,
            span: 10965..10969,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 479,
            column: 26,
            span: 10969..10970,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 480,
            column: 16,
            span: 10983..10986,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 480,
            column: 17,
            span: 10986..10987,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 482,
            column: 14,
            span: 10997..11002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x123",
        ),
        position: Position {
            line: 482,
            column: 19,
            span: 11003..11007,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 482,
            column: 21,
            span: 11008..11009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 482,
            column: 26,
            span: 11009..11014,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 482,
            column: 27,
            span: 11014..11015,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 482,
            column: 29,
            span: 11016..11017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 483,
            column: 23,
            span: 11030..11040,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 483,
            column: 24,
            span: 11040..11041,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 483,
            column: 32,
            span: 11041..11049,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 483,
            column: 33,
            span: 11049..11050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 483,
            column: 34,
            span: 11050..11051,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 483,
            column: 35,
            span: 11051..11052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 483,
            column: 39,
            span: 11053..11056,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 483,
            column: 40,
            span: 11056..11057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 484,
            column: 21,
            span: 11072..11078,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 484,
            column: 22,
            span: 11078..11079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 484,
            column: 25,
            span: 11079..11082,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 484,
            column: 28,
            span: 11083..11085,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 484,
            column: 32,
            span: 11086..11089,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 484,
            column: 33,
            span: 11089..11090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 485,
            column: 20,
            span: 11105..11110,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 485,
            column: 21,
            span: 11110..11111,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@X\"",
        ),
        position: Position {
            line: 485,
            column: 25,
            span: 11111..11115,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 485,
            column: 26,
            span: 11115..11116,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 486,
            column: 16,
            span: 11129..11132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 486,
            column: 17,
            span: 11132..11133,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 487,
            column: 0,
            span: 11140..11143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 488,
            column: 9,
            span: 11150..11152,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 488,
            column: 10,
            span: 11152..11153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exit",
        ),
        position: Position {
            line: 488,
            column: 14,
            span: 11153..11157,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 488,
            column: 15,
            span: 11157..11158,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 488,
            column: 20,
            span: 11158..11163,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 488,
            column: 21,
            span: 11163..11164,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 489,
            column: 0,
            span: 11187..11190,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 491,
            column: 10,
            span: 11196..11201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 491,
            column: 13,
            span: 11202..11204,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 491,
            column: 14,
            span: 11204..11205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 491,
            column: 18,
            span: 11206..11209,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 491,
            column: 20,
            span: 11210..11211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        position: Position {
            line: 491,
            column: 27,
            span: 11212..11218,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 491,
            column: 28,
            span: 11218..11219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 491,
            column: 31,
            span: 11219..11222,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 491,
            column: 32,
            span: 11222..11223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 491,
            column: 38,
            span: 11224..11229,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 491,
            column: 39,
            span: 11229..11230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 491,
            column: 48,
            span: 11230..11239,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 491,
            column: 49,
            span: 11239..11240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 492,
            column: 11,
            span: 11245..11251,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 492,
            column: 12,
            span: 11251..11252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 492,
            column: 18,
            span: 11252..11258,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 492,
            column: 19,
            span: 11258..11259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 492,
            column: 24,
            span: 11259..11264,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 492,
            column: 25,
            span: 11264..11265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 492,
            column: 28,
            span: 11265..11268,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 492,
            column: 29,
            span: 11268..11269,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^[^ ]* @Y\"",
        ),
        position: Position {
            line: 492,
            column: 41,
            span: 11270..11281,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 492,
            column: 42,
            span: 11281..11282,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 492,
            column: 43,
            span: 11282..11283,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 495,
            column: 10,
            span: 11332..11337,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 495,
            column: 19,
            span: 11338..11346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 495,
            column: 23,
            span: 11347..11350,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 495,
            column: 24,
            span: 11350..11351,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 495,
            column: 27,
            span: 11351..11354,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 495,
            column: 28,
            span: 11354..11355,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 496,
            column: 12,
            span: 11362..11367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x123",
        ),
        position: Position {
            line: 496,
            column: 17,
            span: 11368..11372,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 496,
            column: 19,
            span: 11373..11374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 496,
            column: 24,
            span: 11374..11379,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 496,
            column: 25,
            span: 11379..11380,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 496,
            column: 27,
            span: 11381..11382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 496,
            column: 38,
            span: 11383..11393,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 496,
            column: 39,
            span: 11393..11394,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 496,
            column: 47,
            span: 11394..11402,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 496,
            column: 48,
            span: 11402..11403,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 496,
            column: 49,
            span: 11403..11404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 496,
            column: 55,
            span: 11405..11410,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 496,
            column: 56,
            span: 11410..11411,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@x123\"",
        ),
        position: Position {
            line: 496,
            column: 63,
            span: 11411..11418,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 496,
            column: 64,
            span: 11418..11419,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 496,
            column: 68,
            span: 11420..11423,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 496,
            column: 69,
            span: 11423..11424,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 497,
            column: 0,
            span: 11429..11432,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 499,
            column: 10,
            span: 11438..11443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 499,
            column: 13,
            span: 11444..11446,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 499,
            column: 14,
            span: 11446..11447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 499,
            column: 18,
            span: 11448..11451,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 499,
            column: 20,
            span: 11452..11453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        position: Position {
            line: 499,
            column: 27,
            span: 11454..11460,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 499,
            column: 28,
            span: 11460..11461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 499,
            column: 31,
            span: 11461..11464,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 499,
            column: 32,
            span: 11464..11465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 499,
            column: 38,
            span: 11466..11471,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 499,
            column: 39,
            span: 11471..11472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 499,
            column: 48,
            span: 11472..11481,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 499,
            column: 49,
            span: 11481..11482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 500,
            column: 11,
            span: 11487..11493,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 500,
            column: 12,
            span: 11493..11494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 500,
            column: 18,
            span: 11494..11500,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 500,
            column: 19,
            span: 11500..11501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 500,
            column: 24,
            span: 11501..11506,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 500,
            column: 25,
            span: 11506..11507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 500,
            column: 28,
            span: 11507..11510,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 500,
            column: 29,
            span: 11510..11511,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^[^ ]* @x123\"",
        ),
        position: Position {
            line: 500,
            column: 44,
            span: 11512..11526,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 500,
            column: 45,
            span: 11526..11527,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 500,
            column: 46,
            span: 11527..11528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 501,
            column: 11,
            span: 11533..11539,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 501,
            column: 12,
            span: 11539..11540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 501,
            column: 18,
            span: 11540..11546,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 501,
            column: 19,
            span: 11546..11547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 501,
            column: 23,
            span: 11547..11551,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 501,
            column: 24,
            span: 11551..11552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 501,
            column: 27,
            span: 11552..11555,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 501,
            column: 28,
            span: 11555..11556,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"in metamethod 'close'\"",
        ),
        position: Position {
            line: 501,
            column: 52,
            span: 11557..11580,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 501,
            column: 53,
            span: 11580..11581,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 501,
            column: 54,
            span: 11581..11582,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 502,
            column: 0,
            span: 11585..11588,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 505,
            column: 5,
            span: 11593..11595,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 506,
            column: 10,
            span: 11637..11642,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 506,
            column: 19,
            span: 11643..11651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 506,
            column: 23,
            span: 11652..11655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 506,
            column: 24,
            span: 11655..11656,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 506,
            column: 25,
            span: 11656..11657,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 507,
            column: 12,
            span: 11664..11669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 507,
            column: 14,
            span: 11670..11671,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 507,
            column: 16,
            span: 11672..11673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 507,
            column: 21,
            span: 11673..11678,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 507,
            column: 22,
            span: 11678..11679,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 507,
            column: 24,
            span: 11680..11681,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 507,
            column: 26,
            span: 11682..11683,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 507,
            column: 27,
            span: 11683..11684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 508,
            column: 9,
            span: 11691..11693,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 508,
            column: 10,
            span: 11693..11694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exit",
        ),
        position: Position {
            line: 508,
            column: 14,
            span: 11694..11698,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 508,
            column: 15,
            span: 11698..11699,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 508,
            column: 20,
            span: 11699..11704,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 508,
            column: 21,
            span: 11704..11705,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 509,
            column: 0,
            span: 11728..11731,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 510,
            column: 10,
            span: 11736..11741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 510,
            column: 15,
            span: 11742..11746,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 510,
            column: 16,
            span: 11746..11747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 510,
            column: 20,
            span: 11748..11751,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 510,
            column: 22,
            span: 11752..11753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 510,
            column: 28,
            span: 11754..11759,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 510,
            column: 29,
            span: 11759..11760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 510,
            column: 32,
            span: 11760..11763,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 510,
            column: 33,
            span: 11763..11764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 511,
            column: 11,
            span: 11769..11775,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 511,
            column: 12,
            span: 11775..11776,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 511,
            column: 15,
            span: 11776..11779,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 511,
            column: 20,
            span: 11780..11784,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 511,
            column: 0,
            span: 11785..11788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 512,
            column: 13,
            span: 11795..11801,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 512,
            column: 14,
            span: 11801..11802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 512,
            column: 18,
            span: 11802..11806,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 512,
            column: 19,
            span: 11806..11807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 512,
            column: 22,
            span: 11807..11810,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 512,
            column: 23,
            span: 11810..11811,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"variable 'x' got a non%-closable value\"",
        ),
        position: Position {
            line: 512,
            column: 64,
            span: 11812..11852,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 512,
            column: 65,
            span: 11852..11853,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 512,
            column: 66,
            span: 11853..11854,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 514,
            column: 10,
            span: 11860..11865,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 514,
            column: 19,
            span: 11866..11874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 514,
            column: 23,
            span: 11875..11878,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 514,
            column: 24,
            span: 11878..11879,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 514,
            column: 25,
            span: 11879..11880,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 515,
            column: 12,
            span: 11887..11892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xyz",
        ),
        position: Position {
            line: 515,
            column: 16,
            span: 11893..11896,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 515,
            column: 18,
            span: 11897..11898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 515,
            column: 23,
            span: 11898..11903,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 515,
            column: 24,
            span: 11903..11904,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 515,
            column: 26,
            span: 11905..11906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 515,
            column: 39,
            span: 11907..11919,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 515,
            column: 40,
            span: 11919..11920,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 515,
            column: 41,
            span: 11920..11921,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 515,
            column: 42,
            span: 11921..11922,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 515,
            column: 43,
            span: 11922..11923,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 515,
            column: 45,
            span: 11924..11925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__close",
        ),
        position: Position {
            line: 515,
            column: 53,
            span: 11926..11933,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 515,
            column: 55,
            span: 11934..11935,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 515,
            column: 61,
            span: 11936..11941,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 515,
            column: 63,
            span: 11942..11943,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 515,
            column: 64,
            span: 11943..11944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 516,
            column: 19,
            span: 11951..11963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 516,
            column: 20,
            span: 11963..11964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xyz",
        ),
        position: Position {
            line: 516,
            column: 23,
            span: 11964..11967,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 516,
            column: 24,
            span: 11967..11968,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 516,
            column: 25,
            span: 11968..11969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__close",
        ),
        position: Position {
            line: 516,
            column: 32,
            span: 11969..11976,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 516,
            column: 34,
            span: 11977..11978,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 516,
            column: 38,
            span: 11979..11982,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 517,
            column: 0,
            span: 12008..12011,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 518,
            column: 10,
            span: 12016..12021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 518,
            column: 15,
            span: 12022..12026,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 518,
            column: 16,
            span: 12026..12027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 518,
            column: 20,
            span: 12028..12031,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 518,
            column: 22,
            span: 12032..12033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 518,
            column: 28,
            span: 12034..12039,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 518,
            column: 29,
            span: 12039..12040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 518,
            column: 32,
            span: 12040..12043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 518,
            column: 33,
            span: 12043..12044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 519,
            column: 11,
            span: 12049..12055,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 519,
            column: 12,
            span: 12055..12056,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 519,
            column: 15,
            span: 12056..12059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 519,
            column: 20,
            span: 12060..12064,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 519,
            column: 24,
            span: 12065..12068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 519,
            column: 31,
            span: 12069..12075,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 519,
            column: 32,
            span: 12075..12076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 519,
            column: 36,
            span: 12076..12080,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 519,
            column: 37,
            span: 12080..12081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 519,
            column: 40,
            span: 12081..12084,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 519,
            column: 41,
            span: 12084..12085,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"metamethod 'close'\"",
        ),
        position: Position {
            line: 519,
            column: 62,
            span: 12086..12106,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 519,
            column: 63,
            span: 12106..12107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 519,
            column: 64,
            span: 12107..12108,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 521,
            column: 10,
            span: 12114..12119,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 521,
            column: 19,
            span: 12120..12128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 521,
            column: 23,
            span: 12129..12132,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 521,
            column: 24,
            span: 12132..12133,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 521,
            column: 25,
            span: 12133..12134,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 522,
            column: 12,
            span: 12141..12146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 522,
            column: 15,
            span: 12147..12149,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 522,
            column: 17,
            span: 12150..12151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 522,
            column: 22,
            span: 12151..12156,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 522,
            column: 23,
            span: 12156..12157,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 522,
            column: 25,
            span: 12158..12159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 522,
            column: 36,
            span: 12160..12170,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 522,
            column: 37,
            span: 12170..12171,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 522,
            column: 45,
            span: 12171..12179,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 522,
            column: 46,
            span: 12179..12180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 522,
            column: 47,
            span: 12180..12181,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 522,
            column: 48,
            span: 12181..12182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 522,
            column: 52,
            span: 12183..12186,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 522,
            column: 53,
            span: 12186..12187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 523,
            column: 15,
            span: 12196..12202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 523,
            column: 16,
            span: 12202..12203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 523,
            column: 22,
            span: 12203..12209,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 523,
            column: 23,
            span: 12209..12210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 523,
            column: 27,
            span: 12210..12214,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 523,
            column: 28,
            span: 12214..12215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 523,
            column: 31,
            span: 12215..12218,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 523,
            column: 32,
            span: 12218..12219,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number value\"",
        ),
        position: Position {
            line: 523,
            column: 47,
            span: 12220..12234,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 523,
            column: 48,
            span: 12234..12235,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 523,
            column: 49,
            span: 12235..12236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 524,
            column: 14,
            span: 12245..12250,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 524,
            column: 15,
            span: 12250..12251,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 524,
            column: 17,
            span: 12250..12253,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 524,
            column: 18,
            span: 12253..12254,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 525,
            column: 10,
            span: 12261..12264,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 525,
            column: 11,
            span: 12264..12265,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 526,
            column: 12,
            span: 12272..12277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        position: Position {
            line: 526,
            column: 15,
            span: 12278..12280,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 526,
            column: 17,
            span: 12281..12282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 526,
            column: 22,
            span: 12282..12287,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 526,
            column: 23,
            span: 12287..12288,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 526,
            column: 25,
            span: 12289..12290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 526,
            column: 38,
            span: 12291..12303,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 526,
            column: 39,
            span: 12303..12304,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 526,
            column: 40,
            span: 12304..12305,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 526,
            column: 41,
            span: 12305..12306,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 526,
            column: 42,
            span: 12306..12307,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 526,
            column: 44,
            span: 12308..12309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__close",
        ),
        position: Position {
            line: 526,
            column: 52,
            span: 12310..12317,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 526,
            column: 54,
            span: 12318..12319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 526,
            column: 60,
            span: 12320..12325,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 526,
            column: 62,
            span: 12326..12327,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 526,
            column: 63,
            span: 12327..12328,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 527,
            column: 12,
            span: 12335..12340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 527,
            column: 15,
            span: 12341..12343,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 527,
            column: 17,
            span: 12344..12345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 527,
            column: 22,
            span: 12345..12350,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 527,
            column: 23,
            span: 12350..12351,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 527,
            column: 25,
            span: 12352..12353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 527,
            column: 36,
            span: 12354..12364,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 527,
            column: 37,
            span: 12364..12365,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 527,
            column: 45,
            span: 12365..12373,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 527,
            column: 46,
            span: 12373..12374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 527,
            column: 47,
            span: 12374..12375,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 527,
            column: 48,
            span: 12375..12376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 527,
            column: 52,
            span: 12377..12380,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 527,
            column: 53,
            span: 12380..12381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 528,
            column: 15,
            span: 12390..12396,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 528,
            column: 16,
            span: 12396..12397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 528,
            column: 19,
            span: 12397..12400,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 528,
            column: 22,
            span: 12401..12403,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 528,
            column: 26,
            span: 12404..12407,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 528,
            column: 27,
            span: 12407..12408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 529,
            column: 14,
            span: 12417..12422,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 529,
            column: 15,
            span: 12422..12423,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 529,
            column: 18,
            span: 12422..12426,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 529,
            column: 19,
            span: 12426..12427,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 530,
            column: 10,
            span: 12434..12437,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 530,
            column: 11,
            span: 12437..12438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 531,
            column: 19,
            span: 12445..12457,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 531,
            column: 20,
            span: 12457..12458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        position: Position {
            line: 531,
            column: 22,
            span: 12458..12460,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 531,
            column: 23,
            span: 12460..12461,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 531,
            column: 24,
            span: 12461..12462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__close",
        ),
        position: Position {
            line: 531,
            column: 31,
            span: 12462..12469,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 531,
            column: 33,
            span: 12470..12471,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 531,
            column: 35,
            span: 12471..12473,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 532,
            column: 0,
            span: 12503..12506,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 533,
            column: 10,
            span: 12511..12516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 533,
            column: 15,
            span: 12517..12521,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 533,
            column: 16,
            span: 12521..12522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 533,
            column: 20,
            span: 12523..12526,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 533,
            column: 22,
            span: 12527..12528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 533,
            column: 28,
            span: 12529..12534,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 533,
            column: 29,
            span: 12534..12535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 533,
            column: 32,
            span: 12535..12538,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 533,
            column: 33,
            span: 12538..12539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 534,
            column: 11,
            span: 12544..12550,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 534,
            column: 12,
            span: 12550..12551,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 534,
            column: 15,
            span: 12551..12554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 534,
            column: 20,
            span: 12555..12559,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 534,
            column: 24,
            span: 12560..12563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 534,
            column: 28,
            span: 12564..12567,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 534,
            column: 31,
            span: 12568..12570,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 534,
            column: 34,
            span: 12570..12573,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 534,
            column: 35,
            span: 12573..12574,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 535,
            column: 0,
            span: 12577..12580,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 538,
            column: 5,
            span: 12585..12587,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 539,
            column: 10,
            span: 12620..12625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 539,
            column: 16,
            span: 12626..12631,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 539,
            column: 18,
            span: 12632..12633,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 539,
            column: 20,
            span: 12634..12635,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 539,
            column: 21,
            span: 12635..12636,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 540,
            column: 10,
            span: 12641..12646,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 540,
            column: 19,
            span: 12647..12655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 540,
            column: 23,
            span: 12656..12659,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 540,
            column: 24,
            span: 12659..12660,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 540,
            column: 25,
            span: 12660..12661,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 541,
            column: 12,
            span: 12668..12673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 541,
            column: 14,
            span: 12674..12675,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 541,
            column: 16,
            span: 12676..12677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 541,
            column: 21,
            span: 12677..12682,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 541,
            column: 22,
            span: 12682..12683,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 541,
            column: 24,
            span: 12684..12685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 541,
            column: 35,
            span: 12686..12696,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 541,
            column: 36,
            span: 12696..12697,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 541,
            column: 44,
            span: 12697..12705,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 541,
            column: 45,
            span: 12705..12706,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 541,
            column: 46,
            span: 12706..12707,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 542,
            column: 14,
            span: 12716..12721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xx",
        ),
        position: Position {
            line: 542,
            column: 17,
            span: 12722..12724,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 542,
            column: 19,
            span: 12725..12726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 542,
            column: 24,
            span: 12726..12731,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 542,
            column: 25,
            span: 12731..12732,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 542,
            column: 27,
            span: 12733..12734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 542,
            column: 38,
            span: 12735..12745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 542,
            column: 39,
            span: 12745..12746,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 542,
            column: 47,
            span: 12746..12754,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 542,
            column: 48,
            span: 12754..12755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 542,
            column: 49,
            span: 12755..12756,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 542,
            column: 50,
            span: 12756..12757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 542,
            column: 54,
            span: 12758..12761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 542,
            column: 55,
            span: 12761..12762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 543,
            column: 17,
            span: 12773..12779,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 543,
            column: 18,
            span: 12779..12780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 543,
            column: 21,
            span: 12780..12783,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 543,
            column: 24,
            span: 12784..12786,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 543,
            column: 28,
            span: 12787..12790,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 543,
            column: 29,
            span: 12790..12791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 544,
            column: 16,
            span: 12802..12807,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 544,
            column: 17,
            span: 12807..12808,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 544,
            column: 18,
            span: 12808..12809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 544,
            column: 23,
            span: 12809..12814,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 544,
            column: 25,
            span: 12815..12816,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 544,
            column: 27,
            span: 12816..12818,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 544,
            column: 28,
            span: 12818..12819,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 544,
            column: 30,
            span: 12820..12821,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xx\"",
        ),
        position: Position {
            line: 544,
            column: 35,
            span: 12822..12826,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 545,
            column: 12,
            span: 12835..12838,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 545,
            column: 13,
            span: 12838..12839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 546,
            column: 14,
            span: 12848..12853,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 546,
            column: 15,
            span: 12853..12854,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 546,
            column: 16,
            span: 12854..12855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 546,
            column: 21,
            span: 12855..12860,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 546,
            column: 23,
            span: 12861..12862,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 546,
            column: 25,
            span: 12862..12864,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 546,
            column: 26,
            span: 12864..12865,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 546,
            column: 28,
            span: 12866..12867,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 546,
            column: 32,
            span: 12868..12871,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 547,
            column: 10,
            span: 12878..12881,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 547,
            column: 11,
            span: 12881..12882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 548,
            column: 12,
            span: 12889..12894,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 548,
            column: 13,
            span: 12894..12895,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 548,
            column: 14,
            span: 12895..12896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 548,
            column: 19,
            span: 12896..12901,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 548,
            column: 21,
            span: 12902..12903,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 548,
            column: 23,
            span: 12903..12905,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 548,
            column: 24,
            span: 12905..12906,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 548,
            column: 26,
            span: 12907..12908,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"foo\"",
        ),
        position: Position {
            line: 548,
            column: 32,
            span: 12909..12914,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 549,
            column: 13,
            span: 12921..12927,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 549,
            column: 16,
            span: 12927..12930,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 549,
            column: 17,
            span: 12930..12931,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 549,
            column: 20,
            span: 12931..12934,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 549,
            column: 21,
            span: 12934..12935,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 549,
            column: 0,
            span: 12935..12938,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 550,
            column: 0,
            span: 12943..12946,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 551,
            column: 10,
            span: 12951..12956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 551,
            column: 12,
            span: 12957..12958,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 551,
            column: 13,
            span: 12958..12959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 551,
            column: 15,
            span: 12960..12961,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 551,
            column: 16,
            span: 12961..12962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 551,
            column: 18,
            span: 12963..12964,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 551,
            column: 19,
            span: 12964..12965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 551,
            column: 21,
            span: 12966..12967,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 551,
            column: 23,
            span: 12968..12969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 551,
            column: 27,
            span: 12970..12973,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 551,
            column: 28,
            span: 12973..12974,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 551,
            column: 29,
            span: 12974..12975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 552,
            column: 11,
            span: 12980..12986,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 552,
            column: 12,
            span: 12986..12987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 552,
            column: 13,
            span: 12987..12988,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 552,
            column: 16,
            span: 12989..12991,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 552,
            column: 19,
            span: 12991..12994,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 552,
            column: 23,
            span: 12995..12998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 552,
            column: 25,
            span: 12999..13000,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 552,
            column: 28,
            span: 13001..13003,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 552,
            column: 31,
            span: 13003..13006,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 552,
            column: 35,
            span: 13007..13010,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 552,
            column: 37,
            span: 13011..13012,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 552,
            column: 40,
            span: 13013..13015,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 552,
            column: 43,
            span: 13015..13018,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 552,
            column: 47,
            span: 13019..13022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 552,
            column: 49,
            span: 13023..13024,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 552,
            column: 52,
            span: 13025..13027,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 552,
            column: 56,
            span: 13028..13031,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 552,
            column: 57,
            span: 13031..13032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 553,
            column: 11,
            span: 13037..13043,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 553,
            column: 12,
            span: 13043..13044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 553,
            column: 17,
            span: 13044..13049,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 553,
            column: 18,
            span: 13049..13050,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 553,
            column: 19,
            span: 13049..13051,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 553,
            column: 20,
            span: 13051..13052,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 553,
            column: 23,
            span: 13053..13055,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"foo\"",
        ),
        position: Position {
            line: 553,
            column: 29,
            span: 13056..13061,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 553,
            column: 33,
            span: 13062..13065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 553,
            column: 39,
            span: 13066..13071,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 553,
            column: 40,
            span: 13071..13072,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 553,
            column: 41,
            span: 13071..13073,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 553,
            column: 42,
            span: 13073..13074,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 553,
            column: 45,
            span: 13075..13077,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 553,
            column: 49,
            span: 13078..13081,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 553,
            column: 53,
            span: 13082..13085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 553,
            column: 59,
            span: 13086..13091,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 553,
            column: 60,
            span: 13091..13092,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 553,
            column: 61,
            span: 13091..13093,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 553,
            column: 62,
            span: 13093..13094,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 553,
            column: 65,
            span: 13095..13097,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xx\"",
        ),
        position: Position {
            line: 553,
            column: 70,
            span: 13098..13102,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 553,
            column: 71,
            span: 13102..13103,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 556,
            column: 10,
            span: 13135..13140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 556,
            column: 16,
            span: 13141..13146,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 556,
            column: 18,
            span: 13147..13148,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 556,
            column: 20,
            span: 13149..13150,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 556,
            column: 21,
            span: 13150..13151,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 557,
            column: 10,
            span: 13156..13161,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 557,
            column: 19,
            span: 13162..13170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 557,
            column: 23,
            span: 13171..13174,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 557,
            column: 24,
            span: 13174..13175,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 557,
            column: 25,
            span: 13175..13176,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 558,
            column: 12,
            span: 13183..13188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x0",
        ),
        position: Position {
            line: 558,
            column: 15,
            span: 13189..13191,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 558,
            column: 17,
            span: 13192..13193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 558,
            column: 22,
            span: 13193..13198,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 558,
            column: 23,
            span: 13198..13199,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 558,
            column: 25,
            span: 13200..13201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 558,
            column: 36,
            span: 13202..13212,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 558,
            column: 37,
            span: 13212..13213,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 558,
            column: 45,
            span: 13213..13221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 558,
            column: 46,
            span: 13221..13222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 558,
            column: 47,
            span: 13222..13223,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 558,
            column: 48,
            span: 13223..13224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 558,
            column: 52,
            span: 13225..13228,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 558,
            column: 53,
            span: 13228..13229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 559,
            column: 15,
            span: 13238..13244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 559,
            column: 16,
            span: 13244..13245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 559,
            column: 19,
            span: 13245..13248,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 559,
            column: 22,
            span: 13249..13251,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "202",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 559,
            column: 26,
            span: 13251..13255,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 559,
            column: 27,
            span: 13255..13256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 560,
            column: 14,
            span: 13265..13270,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 560,
            column: 15,
            span: 13270..13271,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 560,
            column: 16,
            span: 13271..13272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 560,
            column: 21,
            span: 13272..13277,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 560,
            column: 23,
            span: 13278..13279,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 560,
            column: 25,
            span: 13279..13281,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 560,
            column: 26,
            span: 13281..13282,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 560,
            column: 28,
            span: 13283..13284,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x0\"",
        ),
        position: Position {
            line: 560,
            column: 33,
            span: 13285..13289,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 561,
            column: 10,
            span: 13296..13299,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 561,
            column: 11,
            span: 13299..13300,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 562,
            column: 12,
            span: 13307..13312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 562,
            column: 14,
            span: 13313..13314,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 562,
            column: 16,
            span: 13315..13316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 562,
            column: 21,
            span: 13316..13321,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 562,
            column: 22,
            span: 13321..13322,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 562,
            column: 24,
            span: 13323..13324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 562,
            column: 35,
            span: 13325..13335,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 562,
            column: 36,
            span: 13335..13336,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 562,
            column: 44,
            span: 13336..13344,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 562,
            column: 45,
            span: 13344..13345,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 562,
            column: 46,
            span: 13345..13346,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 563,
            column: 14,
            span: 13355..13360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xx",
        ),
        position: Position {
            line: 563,
            column: 17,
            span: 13361..13363,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 563,
            column: 19,
            span: 13364..13365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 563,
            column: 24,
            span: 13365..13370,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 563,
            column: 25,
            span: 13370..13371,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 563,
            column: 27,
            span: 13372..13373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 563,
            column: 38,
            span: 13374..13384,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 563,
            column: 39,
            span: 13384..13385,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 563,
            column: 47,
            span: 13385..13393,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 563,
            column: 48,
            span: 13393..13394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 563,
            column: 49,
            span: 13394..13395,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 563,
            column: 50,
            span: 13395..13396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 563,
            column: 54,
            span: 13397..13400,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 563,
            column: 55,
            span: 13400..13401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 564,
            column: 17,
            span: 13412..13418,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 564,
            column: 18,
            span: 13418..13419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 564,
            column: 21,
            span: 13419..13422,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 564,
            column: 24,
            span: 13423..13425,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 564,
            column: 28,
            span: 13425..13429,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 564,
            column: 29,
            span: 13429..13430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 565,
            column: 16,
            span: 13441..13446,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 565,
            column: 17,
            span: 13446..13447,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 565,
            column: 18,
            span: 13447..13448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 565,
            column: 23,
            span: 13448..13453,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 565,
            column: 25,
            span: 13454..13455,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 565,
            column: 27,
            span: 13455..13457,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 565,
            column: 28,
            span: 13457..13458,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 565,
            column: 30,
            span: 13459..13460,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xx\"",
        ),
        position: Position {
            line: 565,
            column: 35,
            span: 13461..13465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 566,
            column: 16,
            span: 13476..13481,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 566,
            column: 17,
            span: 13481..13482,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "202",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 566,
            column: 20,
            span: 13481..13485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 566,
            column: 21,
            span: 13485..13486,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 567,
            column: 12,
            span: 13495..13498,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 567,
            column: 13,
            span: 13498..13499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 568,
            column: 14,
            span: 13508..13513,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 568,
            column: 15,
            span: 13513..13514,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 568,
            column: 16,
            span: 13514..13515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 568,
            column: 21,
            span: 13515..13520,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 568,
            column: 23,
            span: 13521..13522,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 568,
            column: 25,
            span: 13522..13524,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 568,
            column: 26,
            span: 13524..13525,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 568,
            column: 28,
            span: 13526..13527,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 568,
            column: 32,
            span: 13528..13531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 569,
            column: 14,
            span: 13540..13545,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 569,
            column: 15,
            span: 13545..13546,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 569,
            column: 18,
            span: 13545..13549,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 569,
            column: 19,
            span: 13549..13550,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 570,
            column: 10,
            span: 13557..13560,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 570,
            column: 11,
            span: 13560..13561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 571,
            column: 12,
            span: 13568..13573,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 571,
            column: 13,
            span: 13573..13574,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 571,
            column: 14,
            span: 13574..13575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 571,
            column: 19,
            span: 13575..13580,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 571,
            column: 21,
            span: 13581..13582,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 571,
            column: 23,
            span: 13582..13584,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 571,
            column: 24,
            span: 13584..13585,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 571,
            column: 26,
            span: 13586..13587,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"foo\"",
        ),
        position: Position {
            line: 571,
            column: 32,
            span: 13588..13593,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 572,
            column: 13,
            span: 13600..13606,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 572,
            column: 16,
            span: 13606..13609,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 572,
            column: 17,
            span: 13609..13610,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 572,
            column: 20,
            span: 13610..13613,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 572,
            column: 21,
            span: 13613..13614,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 572,
            column: 0,
            span: 13614..13617,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 573,
            column: 0,
            span: 13622..13625,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 574,
            column: 10,
            span: 13630..13635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 574,
            column: 13,
            span: 13636..13638,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 574,
            column: 14,
            span: 13638..13639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 574,
            column: 18,
            span: 13640..13643,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 574,
            column: 20,
            span: 13644..13645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 574,
            column: 26,
            span: 13646..13651,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 574,
            column: 27,
            span: 13651..13652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 574,
            column: 30,
            span: 13652..13655,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 574,
            column: 31,
            span: 13655..13656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 575,
            column: 11,
            span: 13661..13667,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 575,
            column: 12,
            span: 13667..13668,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 575,
            column: 15,
            span: 13668..13671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 575,
            column: 18,
            span: 13672..13674,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 575,
            column: 22,
            span: 13675..13678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 575,
            column: 26,
            span: 13679..13682,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 575,
            column: 29,
            span: 13683..13685,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "202",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 575,
            column: 33,
            span: 13685..13689,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 575,
            column: 34,
            span: 13689..13690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 576,
            column: 11,
            span: 13695..13701,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 576,
            column: 12,
            span: 13701..13702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 576,
            column: 17,
            span: 13702..13707,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 576,
            column: 18,
            span: 13707..13708,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 576,
            column: 19,
            span: 13707..13709,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 576,
            column: 20,
            span: 13709..13710,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 576,
            column: 23,
            span: 13711..13713,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"foo\"",
        ),
        position: Position {
            line: 576,
            column: 29,
            span: 13714..13719,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 576,
            column: 33,
            span: 13720..13723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 576,
            column: 39,
            span: 13724..13729,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 576,
            column: 40,
            span: 13729..13730,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 576,
            column: 41,
            span: 13729..13731,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 576,
            column: 42,
            span: 13731..13732,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 576,
            column: 45,
            span: 13733..13735,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 576,
            column: 49,
            span: 13736..13739,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 576,
            column: 53,
            span: 13740..13743,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 576,
            column: 59,
            span: 13744..13749,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 576,
            column: 60,
            span: 13749..13750,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 576,
            column: 61,
            span: 13749..13751,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 576,
            column: 62,
            span: 13751..13752,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 576,
            column: 65,
            span: 13753..13755,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xx\"",
        ),
        position: Position {
            line: 576,
            column: 70,
            span: 13756..13760,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 576,
            column: 0,
            span: 13761..13764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "track",
        ),
        position: Position {
            line: 577,
            column: 12,
            span: 13771..13776,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 577,
            column: 13,
            span: 13776..13777,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 577,
            column: 14,
            span: 13776..13778,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 577,
            column: 15,
            span: 13778..13779,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 577,
            column: 18,
            span: 13780..13782,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x0\"",
        ),
        position: Position {
            line: 577,
            column: 23,
            span: 13783..13787,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 577,
            column: 24,
            span: 13787..13788,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 578,
            column: 0,
            span: 13791..13794,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 581,
            column: 8,
            span: 13799..13804,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 581,
            column: 17,
            span: 13805..13813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktable",
        ),
        position: Position {
            line: 581,
            column: 28,
            span: 13814..13824,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 581,
            column: 29,
            span: 13824..13825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 581,
            column: 31,
            span: 13825..13827,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 581,
            column: 32,
            span: 13827..13828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 581,
            column: 35,
            span: 13829..13831,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 581,
            column: 36,
            span: 13831..13832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 582,
            column: 11,
            span: 13837..13843,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 582,
            column: 12,
            span: 13843..13844,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 582,
            column: 13,
            span: 13844..13845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 582,
            column: 15,
            span: 13845..13847,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 582,
            column: 18,
            span: 13848..13850,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 582,
            column: 20,
            span: 13851..13852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 582,
            column: 22,
            span: 13852..13854,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 582,
            column: 23,
            span: 13854..13855,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 583,
            column: 8,
            span: 13860..13863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 583,
            column: 10,
            span: 13864..13865,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 583,
            column: 12,
            span: 13866..13867,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 583,
            column: 14,
            span: 13867..13869,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 583,
            column: 15,
            span: 13869..13870,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 583,
            column: 17,
            span: 13871..13872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 583,
            column: 19,
            span: 13872..13874,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 583,
            column: 0,
            span: 13875..13877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 584,
            column: 13,
            span: 13884..13890,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 584,
            column: 14,
            span: 13890..13891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 584,
            column: 16,
            span: 13891..13893,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 584,
            column: 17,
            span: 13893..13894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 584,
            column: 18,
            span: 13894..13895,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 584,
            column: 19,
            span: 13895..13896,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 584,
            column: 22,
            span: 13897..13899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 584,
            column: 25,
            span: 13900..13902,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 584,
            column: 26,
            span: 13902..13903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 584,
            column: 27,
            span: 13903..13904,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 584,
            column: 28,
            span: 13904..13905,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 584,
            column: 29,
            span: 13905..13906,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 585,
            column: 0,
            span: 13911..13914,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 586,
            column: 0,
            span: 13917..13920,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 589,
            column: 5,
            span: 13925..13927,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 591,
            column: 10,
            span: 14017..14022,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 591,
            column: 19,
            span: 14023..14031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "overflow",
        ),
        position: Position {
            line: 591,
            column: 28,
            span: 14032..14040,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 591,
            column: 29,
            span: 14040..14041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 591,
            column: 30,
            span: 14041..14042,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 591,
            column: 31,
            span: 14042..14043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "overflow",
        ),
        position: Position {
            line: 592,
            column: 15,
            span: 14050..14058,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 592,
            column: 16,
            span: 14058..14059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 592,
            column: 17,
            span: 14059..14060,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 592,
            column: 19,
            span: 14061..14062,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 592,
            column: 21,
            span: 14062..14064,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 592,
            column: 22,
            span: 14064..14065,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 593,
            column: 0,
            span: 14070..14073,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 597,
            column: 10,
            span: 14177..14182,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 597,
            column: 19,
            span: 14183..14191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errorh",
        ),
        position: Position {
            line: 597,
            column: 26,
            span: 14192..14198,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 597,
            column: 27,
            span: 14198..14199,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 597,
            column: 28,
            span: 14199..14200,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 597,
            column: 29,
            span: 14200..14201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 598,
            column: 13,
            span: 14208..14214,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 598,
            column: 14,
            span: 14214..14215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 598,
            column: 20,
            span: 14215..14221,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 598,
            column: 21,
            span: 14221..14222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 598,
            column: 25,
            span: 14222..14226,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 598,
            column: 26,
            span: 14226..14227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 598,
            column: 27,
            span: 14227..14228,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 598,
            column: 28,
            span: 14228..14229,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        position: Position {
            line: 598,
            column: 45,
            span: 14230..14246,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 598,
            column: 46,
            span: 14246..14247,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 598,
            column: 47,
            span: 14247..14248,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 599,
            column: 12,
            span: 14255..14260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 599,
            column: 14,
            span: 14261..14262,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 599,
            column: 16,
            span: 14263..14264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 599,
            column: 21,
            span: 14264..14269,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 599,
            column: 22,
            span: 14269..14270,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 599,
            column: 24,
            span: 14271..14272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 599,
            column: 35,
            span: 14273..14283,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 599,
            column: 36,
            span: 14283..14284,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 599,
            column: 44,
            span: 14284..14292,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 599,
            column: 45,
            span: 14292..14293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        position: Position {
            line: 599,
            column: 46,
            span: 14293..14294,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 599,
            column: 47,
            span: 14294..14295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        position: Position {
            line: 599,
            column: 49,
            span: 14296..14297,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 599,
            column: 50,
            span: 14297..14298,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 599,
            column: 51,
            span: 14297..14299,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 599,
            column: 52,
            span: 14299..14300,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 599,
            column: 54,
            span: 14301..14302,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 599,
            column: 57,
            span: 14302..14305,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 599,
            column: 61,
            span: 14306..14309,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 599,
            column: 62,
            span: 14309..14310,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 600,
            column: 13,
            span: 14317..14323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 600,
            column: 0,
            span: 14324..14325,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 601,
            column: 0,
            span: 14330..14333,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 603,
            column: 10,
            span: 14339..14344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        position: Position {
            line: 603,
            column: 0,
            span: 14345..14349,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 604,
            column: 10,
            span: 14354..14359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 604,
            column: 13,
            span: 14360..14362,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 604,
            column: 14,
            span: 14362..14363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 604,
            column: 0,
            span: 14364..14367,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 606,
            column: 10,
            span: 14437..14442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 606,
            column: 13,
            span: 14443..14445,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 606,
            column: 15,
            span: 14446..14447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 606,
            column: 25,
            span: 14448..14457,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 606,
            column: 26,
            span: 14457..14458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 606,
            column: 30,
            span: 14458..14462,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 606,
            column: 31,
            span: 14462..14463,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 606,
            column: 39,
            span: 14463..14471,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 606,
            column: 40,
            span: 14471..14472,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 606,
            column: 41,
            span: 14472..14473,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 608,
            column: 12,
            span: 14517..14522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 608,
            column: 14,
            span: 14523..14524,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 608,
            column: 16,
            span: 14525..14526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 608,
            column: 21,
            span: 14526..14531,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 608,
            column: 22,
            span: 14531..14532,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 608,
            column: 24,
            span: 14533..14534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 608,
            column: 35,
            span: 14535..14545,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 608,
            column: 36,
            span: 14545..14546,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 608,
            column: 44,
            span: 14546..14554,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 608,
            column: 45,
            span: 14554..14555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 608,
            column: 48,
            span: 14555..14558,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 608,
            column: 49,
            span: 14558..14559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 608,
            column: 53,
            span: 14560..14563,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 608,
            column: 54,
            span: 14563..14564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 609,
            column: 15,
            span: 14573..14579,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 609,
            column: 16,
            span: 14579..14580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 609,
            column: 19,
            span: 14580..14583,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 609,
            column: 22,
            span: 14584..14586,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 609,
            column: 26,
            span: 14587..14590,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 609,
            column: 27,
            span: 14590..14591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 610,
            column: 12,
            span: 14600..14603,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 610,
            column: 13,
            span: 14603..14604,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 610,
            column: 14,
            span: 14603..14605,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 610,
            column: 15,
            span: 14605..14606,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 610,
            column: 17,
            span: 14607..14608,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 610,
            column: 0,
            span: 14608..14612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        position: Position {
            line: 611,
            column: 13,
            span: 14621..14625,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 611,
            column: 15,
            span: 14626..14627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 611,
            column: 0,
            span: 14628..14631,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 612,
            column: 10,
            span: 14638..14641,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 612,
            column: 11,
            span: 14641..14642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        position: Position {
            line: 613,
            column: 14,
            span: 14649..14656,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 613,
            column: 15,
            span: 14656..14657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stop",
        ),
        position: Position {
            line: 613,
            column: 19,
            span: 14657..14661,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 613,
            column: 20,
            span: 14661..14662,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 613,
            column: 21,
            span: 14662..14663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 614,
            column: 9,
            span: 14670..14672,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 614,
            column: 10,
            span: 14672..14673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 614,
            column: 14,
            span: 14674..14677,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 614,
            column: 16,
            span: 14678..14679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        position: Position {
            line: 614,
            column: 23,
            span: 14680..14686,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 614,
            column: 24,
            span: 14686..14687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "overflow",
        ),
        position: Position {
            line: 614,
            column: 32,
            span: 14687..14695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 614,
            column: 33,
            span: 14695..14696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errorh",
        ),
        position: Position {
            line: 614,
            column: 40,
            span: 14697..14703,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 614,
            column: 41,
            span: 14703..14704,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 614,
            column: 43,
            span: 14704..14706,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 614,
            column: 44,
            span: 14706..14707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tracegc",
        ),
        position: Position {
            line: 615,
            column: 14,
            span: 14714..14721,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 615,
            column: 15,
            span: 14721..14722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        position: Position {
            line: 615,
            column: 20,
            span: 14722..14727,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 615,
            column: 21,
            span: 14727..14728,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 615,
            column: 22,
            span: 14728..14729,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 616,
            column: 8,
            span: 14734..14737,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 616,
            column: 9,
            span: 14737..14738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 617,
            column: 7,
            span: 14743..14745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 617,
            column: 8,
            span: 14745..14746,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 617,
            column: 9,
            span: 14746..14747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 618,
            column: 11,
            span: 14752..14758,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 618,
            column: 12,
            span: 14758..14759,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 618,
            column: 15,
            span: 14759..14762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 618,
            column: 18,
            span: 14763..14765,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 618,
            column: 22,
            span: 14766..14769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 618,
            column: 26,
            span: 14770..14773,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 618,
            column: 27,
            span: 14773..14774,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 618,
            column: 28,
            span: 14773..14775,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 618,
            column: 29,
            span: 14775..14776,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 618,
            column: 32,
            span: 14777..14779,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 618,
            column: 35,
            span: 14779..14782,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 618,
            column: 39,
            span: 14783..14786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        position: Position {
            line: 618,
            column: 44,
            span: 14787..14791,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 618,
            column: 45,
            span: 14791..14792,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 618,
            column: 46,
            span: 14791..14793,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 618,
            column: 47,
            span: 14793..14794,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 618,
            column: 50,
            span: 14795..14797,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 618,
            column: 54,
            span: 14797..14801,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 618,
            column: 55,
            span: 14801..14802,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 619,
            column: 0,
            span: 14805..14808,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 622,
            column: 5,
            span: 14813..14815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        position: Position {
            line: 622,
            column: 12,
            span: 14816..14822,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 622,
            column: 13,
            span: 14822..14823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 622,
            column: 15,
            span: 14823..14825,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 622,
            column: 16,
            span: 14825..14826,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"T\"",
        ),
        position: Position {
            line: 622,
            column: 20,
            span: 14827..14830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 622,
            column: 21,
            span: 14830..14831,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 622,
            column: 0,
            span: 14832..14836,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 624,
            column: 10,
            span: 14885..14890,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 624,
            column: 19,
            span: 14891..14899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 624,
            column: 23,
            span: 14900..14903,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 624,
            column: 24,
            span: 14903..14904,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 624,
            column: 25,
            span: 14904..14905,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 625,
            column: 12,
            span: 14912..14917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 625,
            column: 14,
            span: 14918..14919,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 625,
            column: 16,
            span: 14920..14921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 625,
            column: 21,
            span: 14921..14926,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 625,
            column: 22,
            span: 14926..14927,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 625,
            column: 24,
            span: 14928..14929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 625,
            column: 35,
            span: 14930..14940,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 625,
            column: 36,
            span: 14940..14941,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 625,
            column: 44,
            span: 14941..14949,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 625,
            column: 45,
            span: 14949..14950,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 625,
            column: 46,
            span: 14950..14951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 625,
            column: 48,
            span: 14952..14953,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 625,
            column: 49,
            span: 14953..14954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alloccount",
        ),
        position: Position {
            line: 625,
            column: 59,
            span: 14954..14964,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 625,
            column: 60,
            span: 14964..14965,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 625,
            column: 61,
            span: 14965..14966,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 625,
            column: 65,
            span: 14967..14970,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 625,
            column: 66,
            span: 14970..14971,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 626,
            column: 12,
            span: 14978..14983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 626,
            column: 14,
            span: 14984..14985,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 626,
            column: 16,
            span: 14986..14987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 626,
            column: 21,
            span: 14987..14992,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 626,
            column: 22,
            span: 14992..14993,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 626,
            column: 24,
            span: 14994..14995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 626,
            column: 37,
            span: 14996..15008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 626,
            column: 38,
            span: 15008..15009,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 626,
            column: 39,
            span: 15009..15010,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 626,
            column: 40,
            span: 15010..15011,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 626,
            column: 41,
            span: 15011..15012,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 626,
            column: 43,
            span: 15013..15014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__close",
        ),
        position: Position {
            line: 627,
            column: 16,
            span: 15023..15030,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 627,
            column: 18,
            span: 15031..15032,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 627,
            column: 27,
            span: 15033..15041,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 627,
            column: 28,
            span: 15041..15042,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 627,
            column: 29,
            span: 15042..15043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 628,
            column: 12,
            span: 15054..15055,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 628,
            column: 13,
            span: 15055..15056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alloccount",
        ),
        position: Position {
            line: 628,
            column: 23,
            span: 15056..15066,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 628,
            column: 24,
            span: 15066..15067,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 628,
            column: 25,
            span: 15066..15068,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 628,
            column: 26,
            span: 15068..15069,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 628,
            column: 27,
            span: 15069..15070,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 628,
            column: 33,
            span: 15071..15076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 628,
            column: 35,
            span: 15077..15078,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 628,
            column: 37,
            span: 15079..15080,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 628,
            column: 39,
            span: 15081..15082,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 628,
            column: 40,
            span: 15082..15083,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 629,
            column: 0,
            span: 15116..15119,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 630,
            column: 8,
            span: 15126..15127,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 630,
            column: 9,
            span: 15127..15128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 631,
            column: 12,
            span: 15135..15140,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 631,
            column: 13,
            span: 15140..15141,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 631,
            column: 17,
            span: 15140..15145,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 631,
            column: 18,
            span: 15145..15146,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 632,
            column: 0,
            span: 15212..15215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        position: Position {
            line: 634,
            column: 10,
            span: 15221..15226,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 634,
            column: 11,
            span: 15226..15227,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 634,
            column: 12,
            span: 15226..15228,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 634,
            column: 13,
            span: 15228..15229,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 638,
            column: 10,
            span: 15368..15373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 638,
            column: 12,
            span: 15374..15375,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 638,
            column: 13,
            span: 15375..15376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 638,
            column: 17,
            span: 15377..15380,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 638,
            column: 19,
            span: 15381..15382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 638,
            column: 25,
            span: 15383..15388,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 638,
            column: 26,
            span: 15388..15389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 638,
            column: 29,
            span: 15389..15392,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 638,
            column: 30,
            span: 15392..15393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 639,
            column: 11,
            span: 15398..15404,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 639,
            column: 12,
            span: 15404..15405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 639,
            column: 15,
            span: 15405..15408,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 639,
            column: 18,
            span: 15409..15411,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not enough memory\"",
        ),
        position: Position {
            line: 639,
            column: 38,
            span: 15412..15431,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 639,
            column: 39,
            span: 15431..15432,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 641,
            column: 10,
            span: 15438..15443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closemsg",
        ),
        position: Position {
            line: 641,
            column: 0,
            span: 15444..15452,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 642,
            column: 10,
            span: 15457..15462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 642,
            column: 16,
            span: 15463..15468,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 642,
            column: 18,
            span: 15469..15470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 642,
            column: 29,
            span: 15471..15481,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 642,
            column: 30,
            span: 15481..15482,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 642,
            column: 38,
            span: 15482..15490,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 642,
            column: 39,
            span: 15490..15491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 642,
            column: 43,
            span: 15491..15495,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 642,
            column: 44,
            span: 15495..15496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 642,
            column: 48,
            span: 15497..15500,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 642,
            column: 49,
            span: 15500..15501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 643,
            column: 8,
            span: 15508..15509,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 643,
            column: 9,
            span: 15509..15510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alloccount",
        ),
        position: Position {
            line: 643,
            column: 19,
            span: 15510..15520,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 643,
            column: 20,
            span: 15520..15521,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 643,
            column: 21,
            span: 15521..15522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closemsg",
        ),
        position: Position {
            line: 644,
            column: 15,
            span: 15529..15537,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 644,
            column: 17,
            span: 15538..15539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 644,
            column: 0,
            span: 15540..15543,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 645,
            column: 8,
            span: 15548..15551,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 645,
            column: 9,
            span: 15551..15552,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 648,
            column: 10,
            span: 15632..15637,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 648,
            column: 19,
            span: 15638..15646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "enter",
        ),
        position: Position {
            line: 648,
            column: 25,
            span: 15647..15652,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 648,
            column: 26,
            span: 15652..15653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 648,
            column: 31,
            span: 15653..15658,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 648,
            column: 32,
            span: 15658..15659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        position: Position {
            line: 649,
            column: 12,
            span: 15666..15671,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 649,
            column: 13,
            span: 15671..15672,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 649,
            column: 15,
            span: 15671..15674,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 649,
            column: 16,
            span: 15674..15675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 650,
            column: 8,
            span: 15710..15711,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 650,
            column: 9,
            span: 15711..15712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alloccount",
        ),
        position: Position {
            line: 650,
            column: 19,
            span: 15712..15722,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 650,
            column: 20,
            span: 15722..15723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 650,
            column: 25,
            span: 15723..15728,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 650,
            column: 26,
            span: 15728..15729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closemsg",
        ),
        position: Position {
            line: 651,
            column: 15,
            span: 15736..15744,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 651,
            column: 17,
            span: 15745..15746,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 651,
            column: 0,
            span: 15747..15750,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 652,
            column: 13,
            span: 15757..15763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 652,
            column: 0,
            span: 15764..15769,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 653,
            column: 0,
            span: 15774..15777,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 655,
            column: 10,
            span: 15783..15788,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 655,
            column: 19,
            span: 15789..15797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 655,
            column: 24,
            span: 15798..15802,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 655,
            column: 25,
            span: 15802..15803,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 655,
            column: 26,
            span: 15803..15804,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 656,
            column: 12,
            span: 15811..15816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 656,
            column: 14,
            span: 15817..15818,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 656,
            column: 16,
            span: 15819..15820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 656,
            column: 21,
            span: 15820..15825,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 656,
            column: 22,
            span: 15825..15826,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 656,
            column: 24,
            span: 15827..15828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "enter",
        ),
        position: Position {
            line: 656,
            column: 30,
            span: 15829..15834,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 656,
            column: 31,
            span: 15834..15835,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 656,
            column: 32,
            span: 15834..15836,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 656,
            column: 33,
            span: 15836..15837,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 657,
            column: 12,
            span: 15866..15871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 657,
            column: 14,
            span: 15872..15873,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 657,
            column: 16,
            span: 15874..15875,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 657,
            column: 18,
            span: 15876..15877,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 657,
            column: 19,
            span: 15877..15878,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 658,
            column: 0,
            span: 15919..15922,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 660,
            column: 10,
            span: 15928..15933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 660,
            column: 12,
            span: 15934..15935,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 660,
            column: 13,
            span: 15935..15936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 660,
            column: 17,
            span: 15937..15940,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 660,
            column: 19,
            span: 15941..15942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 660,
            column: 25,
            span: 15943..15948,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 660,
            column: 26,
            span: 15948..15949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 660,
            column: 30,
            span: 15949..15953,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 660,
            column: 31,
            span: 15953..15954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 661,
            column: 11,
            span: 15959..15965,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 661,
            column: 12,
            span: 15965..15966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 661,
            column: 15,
            span: 15966..15969,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 661,
            column: 18,
            span: 15970..15972,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not enough memory\"",
        ),
        position: Position {
            line: 661,
            column: 38,
            span: 15973..15992,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 661,
            column: 42,
            span: 15993..15996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closemsg",
        ),
        position: Position {
            line: 661,
            column: 51,
            span: 15997..16005,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 661,
            column: 54,
            span: 16006..16008,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not enough memory\"",
        ),
        position: Position {
            line: 661,
            column: 74,
            span: 16009..16028,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 661,
            column: 75,
            span: 16028..16029,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 665,
            column: 10,
            span: 16083..16088,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 665,
            column: 19,
            span: 16089..16097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 665,
            column: 24,
            span: 16098..16102,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 665,
            column: 25,
            span: 16102..16103,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 665,
            column: 26,
            span: 16103..16104,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 666,
            column: 12,
            span: 16111..16116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xxx",
        ),
        position: Position {
            line: 666,
            column: 16,
            span: 16117..16120,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 666,
            column: 18,
            span: 16121..16122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 666,
            column: 23,
            span: 16122..16127,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 666,
            column: 24,
            span: 16127..16128,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 666,
            column: 26,
            span: 16129..16130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 666,
            column: 37,
            span: 16131..16141,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 666,
            column: 38,
            span: 16141..16142,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 666,
            column: 46,
            span: 16142..16150,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 666,
            column: 47,
            span: 16150..16151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 666,
            column: 51,
            span: 16151..16155,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 666,
            column: 52,
            span: 16155..16156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 666,
            column: 56,
            span: 16157..16160,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 666,
            column: 57,
            span: 16160..16161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 667,
            column: 15,
            span: 16170..16176,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 667,
            column: 16,
            span: 16176..16177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 667,
            column: 19,
            span: 16177..16180,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 667,
            column: 22,
            span: 16181..16183,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not enough memory\"",
        ),
        position: Position {
            line: 667,
            column: 42,
            span: 16184..16203,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 667,
            column: 43,
            span: 16203..16204,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 667,
            column: 44,
            span: 16204..16205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 668,
            column: 14,
            span: 16214..16219,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 668,
            column: 15,
            span: 16219..16220,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 668,
            column: 19,
            span: 16219..16224,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 668,
            column: 20,
            span: 16224..16225,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 669,
            column: 10,
            span: 16255..16258,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 669,
            column: 11,
            span: 16258..16259,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 670,
            column: 12,
            span: 16266..16271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xx",
        ),
        position: Position {
            line: 670,
            column: 15,
            span: 16272..16274,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 670,
            column: 17,
            span: 16275..16276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 670,
            column: 22,
            span: 16276..16281,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 670,
            column: 23,
            span: 16281..16282,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 670,
            column: 25,
            span: 16283..16284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 670,
            column: 36,
            span: 16285..16295,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 670,
            column: 37,
            span: 16295..16296,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 670,
            column: 45,
            span: 16296..16304,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 670,
            column: 46,
            span: 16304..16305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 670,
            column: 50,
            span: 16305..16309,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 670,
            column: 51,
            span: 16309..16310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 670,
            column: 55,
            span: 16311..16314,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 670,
            column: 56,
            span: 16314..16315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 671,
            column: 15,
            span: 16324..16330,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 671,
            column: 16,
            span: 16330..16331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 671,
            column: 19,
            span: 16331..16334,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 671,
            column: 22,
            span: 16335..16337,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not enough memory\"",
        ),
        position: Position {
            line: 671,
            column: 42,
            span: 16338..16357,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 671,
            column: 43,
            span: 16357..16358,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 671,
            column: 44,
            span: 16358..16359,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 672,
            column: 10,
            span: 16366..16369,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 672,
            column: 11,
            span: 16369..16370,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 673,
            column: 12,
            span: 16377..16382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 673,
            column: 14,
            span: 16383..16384,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 673,
            column: 16,
            span: 16385..16386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 673,
            column: 21,
            span: 16386..16391,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 673,
            column: 22,
            span: 16391..16392,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 673,
            column: 24,
            span: 16393..16394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "enter",
        ),
        position: Position {
            line: 673,
            column: 30,
            span: 16395..16400,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 673,
            column: 31,
            span: 16400..16401,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 673,
            column: 32,
            span: 16400..16402,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 673,
            column: 33,
            span: 16402..16403,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 674,
            column: 12,
            span: 16432..16437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 674,
            column: 14,
            span: 16438..16439,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 674,
            column: 16,
            span: 16440..16441,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 674,
            column: 18,
            span: 16442..16443,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 674,
            column: 19,
            span: 16443..16444,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 675,
            column: 0,
            span: 16485..16488,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 677,
            column: 10,
            span: 16494..16499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 677,
            column: 12,
            span: 16500..16501,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 677,
            column: 13,
            span: 16501..16502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 677,
            column: 17,
            span: 16503..16506,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 677,
            column: 19,
            span: 16507..16508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 677,
            column: 25,
            span: 16509..16514,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 677,
            column: 26,
            span: 16514..16515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 677,
            column: 30,
            span: 16515..16519,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 677,
            column: 31,
            span: 16519..16520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 678,
            column: 11,
            span: 16525..16531,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 678,
            column: 12,
            span: 16531..16532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 678,
            column: 15,
            span: 16532..16535,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 678,
            column: 18,
            span: 16536..16538,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 678,
            column: 23,
            span: 16538..16543,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 678,
            column: 27,
            span: 16544..16547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closemsg",
        ),
        position: Position {
            line: 678,
            column: 36,
            span: 16548..16556,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 678,
            column: 39,
            span: 16557..16559,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not enough memory\"",
        ),
        position: Position {
            line: 678,
            column: 59,
            span: 16560..16579,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 678,
            column: 60,
            span: 16579..16580,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 680,
            column: 7,
            span: 16586..16588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 681,
            column: 21,
            span: 16665..16679,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 681,
            column: 22,
            span: 16679..16680,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 681,
            column: 23,
            span: 16680..16681,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 682,
            column: 12,
            span: 16688..16693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 682,
            column: 14,
            span: 16694..16695,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 682,
            column: 16,
            span: 16696..16697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 682,
            column: 23,
            span: 16698..16704,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 682,
            column: 24,
            span: 16704..16705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 682,
            column: 27,
            span: 16705..16708,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 682,
            column: 28,
            span: 16708..16709,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 682,
            column: 31,
            span: 16709..16712,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 682,
            column: 32,
            span: 16712..16713,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 682,
            column: 38,
            span: 16713..16719,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 682,
            column: 39,
            span: 16719..16720,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 683,
            column: 12,
            span: 16743..16748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 683,
            column: 14,
            span: 16749..16750,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 683,
            column: 16,
            span: 16751..16752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 683,
            column: 18,
            span: 16753..16754,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 683,
            column: 19,
            span: 16754..16755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 683,
            column: 27,
            span: 16755..16763,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 683,
            column: 28,
            span: 16763..16764,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 683,
            column: 29,
            span: 16764..16765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 684,
            column: 21,
            span: 16772..16786,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 684,
            column: 22,
            span: 16786..16787,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 684,
            column: 28,
            span: 16787..16793,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 684,
            column: 29,
            span: 16793..16794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 685,
            column: 8,
            span: 16801..16802,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 685,
            column: 10,
            span: 16803..16804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 685,
            column: 17,
            span: 16805..16811,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 685,
            column: 18,
            span: 16811..16812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        position: Position {
            line: 685,
            column: 23,
            span: 16812..16817,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 685,
            column: 24,
            span: 16817..16818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 685,
            column: 25,
            span: 16818..16819,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 685,
            column: 26,
            span: 16819..16820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 687,
            column: 13,
            span: 16909..16915,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 687,
            column: 14,
            span: 16915..16916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 687,
            column: 15,
            span: 16916..16917,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 687,
            column: 16,
            span: 16917..16918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 687,
            column: 24,
            span: 16918..16926,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 687,
            column: 25,
            span: 16926..16927,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 687,
            column: 26,
            span: 16927..16928,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 687,
            column: 28,
            span: 16929..16930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 687,
            column: 30,
            span: 16931..16932,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 687,
            column: 33,
            span: 16933..16935,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 687,
            column: 39,
            span: 16935..16941,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 687,
            column: 40,
            span: 16941..16942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 688,
            column: 21,
            span: 16949..16963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 688,
            column: 22,
            span: 16963..16964,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        position: Position {
            line: 688,
            column: 31,
            span: 16964..16973,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 688,
            column: 32,
            span: 16973..16974,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 689,
            column: 0,
            span: 16979..16982,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 691,
            column: 7,
            span: 16988..16990,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 692,
            column: 12,
            span: 17068..17073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 692,
            column: 16,
            span: 17074..17077,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 692,
            column: 18,
            span: 17078..17079,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 692,
            column: 24,
            span: 17079..17085,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 693,
            column: 12,
            span: 17135..17140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        position: Position {
            line: 693,
            column: 18,
            span: 17141..17146,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 693,
            column: 20,
            span: 17147..17148,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 693,
            column: 25,
            span: 17148..17153,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 695,
            column: 12,
            span: 17203..17208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 695,
            column: 14,
            span: 17209..17210,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 695,
            column: 16,
            span: 17211..17212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 695,
            column: 23,
            span: 17213..17219,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 695,
            column: 24,
            span: 17219..17220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 695,
            column: 27,
            span: 17220..17223,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 695,
            column: 28,
            span: 17223..17224,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 695,
            column: 31,
            span: 17224..17227,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 695,
            column: 32,
            span: 17227..17228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 695,
            column: 36,
            span: 17229..17232,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 695,
            column: 37,
            span: 17232..17233,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 698,
            column: 12,
            span: 17312..17317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 698,
            column: 14,
            span: 17318..17319,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 698,
            column: 16,
            span: 17320..17321,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 698,
            column: 18,
            span: 17322..17323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 698,
            column: 20,
            span: 17324..17325,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 698,
            column: 21,
            span: 17325..17326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 698,
            column: 23,
            span: 17327..17328,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 698,
            column: 25,
            span: 17329..17330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 700,
            column: 21,
            span: 17338..17352,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 700,
            column: 22,
            span: 17352..17353,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 700,
            column: 23,
            span: 17353..17354,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 700,
            column: 24,
            span: 17354..17355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 700,
            column: 39,
            span: 17356..17370,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 700,
            column: 40,
            span: 17370..17371,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 700,
            column: 41,
            span: 17371..17372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 702,
            column: 8,
            span: 17380..17381,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 702,
            column: 10,
            span: 17382..17383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 702,
            column: 12,
            span: 17384..17385,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 702,
            column: 13,
            span: 17385..17386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 702,
            column: 21,
            span: 17386..17394,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 702,
            column: 22,
            span: 17394..17395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 702,
            column: 23,
            span: 17395..17396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 703,
            column: 21,
            span: 17403..17417,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 703,
            column: 22,
            span: 17417..17418,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 703,
            column: 28,
            span: 17418..17424,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 703,
            column: 29,
            span: 17424..17425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 706,
            column: 8,
            span: 17479..17480,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 706,
            column: 9,
            span: 17480..17481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 706,
            column: 17,
            span: 17481..17489,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 706,
            column: 18,
            span: 17489..17490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 706,
            column: 19,
            span: 17490..17491,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 706,
            column: 21,
            span: 17492..17493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        position: Position {
            line: 706,
            column: 27,
            span: 17494..17499,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 706,
            column: 28,
            span: 17499..17500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 707,
            column: 13,
            span: 17507..17513,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 707,
            column: 14,
            span: 17513..17514,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 707,
            column: 17,
            span: 17514..17517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 707,
            column: 23,
            span: 17518..17523,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 707,
            column: 24,
            span: 17523..17524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 707,
            column: 29,
            span: 17524..17529,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 707,
            column: 30,
            span: 17529..17530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        position: Position {
            line: 707,
            column: 36,
            span: 17530..17536,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 707,
            column: 37,
            span: 17536..17537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 707,
            column: 39,
            span: 17538..17539,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 707,
            column: 40,
            span: 17539..17540,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 707,
            column: 41,
            span: 17540..17541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 709,
            column: 13,
            span: 17593..17599,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 709,
            column: 14,
            span: 17599..17600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 709,
            column: 15,
            span: 17600..17601,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 709,
            column: 16,
            span: 17601..17602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 709,
            column: 24,
            span: 17602..17610,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 709,
            column: 25,
            span: 17610..17611,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 709,
            column: 26,
            span: 17611..17612,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 709,
            column: 28,
            span: 17613..17614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 709,
            column: 30,
            span: 17615..17616,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 709,
            column: 33,
            span: 17617..17619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        position: Position {
            line: 709,
            column: 39,
            span: 17620..17625,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 709,
            column: 40,
            span: 17625..17626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 712,
            column: 8,
            span: 17681..17682,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 712,
            column: 9,
            span: 17682..17683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 712,
            column: 17,
            span: 17683..17691,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 712,
            column: 18,
            span: 17691..17692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 712,
            column: 19,
            span: 17692..17693,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 712,
            column: 21,
            span: 17694..17695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 712,
            column: 25,
            span: 17696..17699,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 712,
            column: 27,
            span: 17700..17701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        position: Position {
            line: 712,
            column: 33,
            span: 17702..17707,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 712,
            column: 34,
            span: 17707..17708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 713,
            column: 13,
            span: 17715..17721,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 713,
            column: 14,
            span: 17721..17722,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 713,
            column: 17,
            span: 17722..17725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 713,
            column: 23,
            span: 17726..17731,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 713,
            column: 24,
            span: 17731..17732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 713,
            column: 29,
            span: 17732..17737,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 713,
            column: 30,
            span: 17737..17738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        position: Position {
            line: 713,
            column: 36,
            span: 17738..17744,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 713,
            column: 37,
            span: 17744..17745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 713,
            column: 39,
            span: 17746..17747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 713,
            column: 40,
            span: 17747..17748,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 713,
            column: 41,
            span: 17748..17749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 715,
            column: 13,
            span: 17804..17810,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 715,
            column: 14,
            span: 17810..17811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 715,
            column: 15,
            span: 17811..17812,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 715,
            column: 16,
            span: 17812..17813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 715,
            column: 24,
            span: 17813..17821,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 715,
            column: 25,
            span: 17821..17822,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 715,
            column: 26,
            span: 17822..17823,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 715,
            column: 28,
            span: 17824..17825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 715,
            column: 30,
            span: 17826..17827,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 715,
            column: 33,
            span: 17828..17830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        position: Position {
            line: 715,
            column: 39,
            span: 17831..17836,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 715,
            column: 40,
            span: 17836..17837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 718,
            column: 8,
            span: 17888..17889,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 718,
            column: 9,
            span: 17889..17890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 718,
            column: 17,
            span: 17890..17898,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 718,
            column: 18,
            span: 17898..17899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 718,
            column: 19,
            span: 17899..17900,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 718,
            column: 21,
            span: 17901..17902,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 718,
            column: 23,
            span: 17902..17904,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 718,
            column: 25,
            span: 17905..17906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 718,
            column: 29,
            span: 17907..17910,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 718,
            column: 31,
            span: 17911..17912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        position: Position {
            line: 718,
            column: 37,
            span: 17913..17918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 718,
            column: 38,
            span: 17918..17919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 719,
            column: 13,
            span: 17926..17932,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 719,
            column: 14,
            span: 17932..17933,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 719,
            column: 17,
            span: 17933..17936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 719,
            column: 23,
            span: 17937..17942,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 719,
            column: 24,
            span: 17942..17943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 719,
            column: 29,
            span: 17943..17948,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 719,
            column: 30,
            span: 17948..17949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        position: Position {
            line: 719,
            column: 36,
            span: 17949..17955,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 719,
            column: 37,
            span: 17955..17956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 719,
            column: 39,
            span: 17957..17958,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 719,
            column: 40,
            span: 17958..17959,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 719,
            column: 41,
            span: 17959..17960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 721,
            column: 13,
            span: 18016..18022,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 721,
            column: 14,
            span: 18022..18023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 721,
            column: 15,
            span: 18023..18024,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 721,
            column: 16,
            span: 18024..18025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 721,
            column: 24,
            span: 18025..18033,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 721,
            column: 25,
            span: 18033..18034,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 721,
            column: 26,
            span: 18034..18035,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 721,
            column: 28,
            span: 18036..18037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 721,
            column: 30,
            span: 18038..18039,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 721,
            column: 33,
            span: 18040..18042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        position: Position {
            line: 721,
            column: 39,
            span: 18043..18048,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 721,
            column: 40,
            span: 18048..18049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 724,
            column: 8,
            span: 18105..18106,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 724,
            column: 9,
            span: 18106..18107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 724,
            column: 17,
            span: 18107..18115,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 724,
            column: 18,
            span: 18115..18116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 724,
            column: 19,
            span: 18116..18117,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 724,
            column: 21,
            span: 18118..18119,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 724,
            column: 23,
            span: 18119..18121,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 724,
            column: 25,
            span: 18122..18123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 724,
            column: 29,
            span: 18124..18127,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 724,
            column: 31,
            span: 18128..18129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        position: Position {
            line: 724,
            column: 37,
            span: 18130..18135,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 724,
            column: 38,
            span: 18135..18136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 725,
            column: 13,
            span: 18143..18149,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 725,
            column: 14,
            span: 18149..18150,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 725,
            column: 15,
            span: 18150..18151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 725,
            column: 20,
            span: 18151..18156,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 725,
            column: 21,
            span: 18156..18157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        position: Position {
            line: 725,
            column: 27,
            span: 18157..18163,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 725,
            column: 28,
            span: 18163..18164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 725,
            column: 29,
            span: 18164..18165,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 725,
            column: 30,
            span: 18165..18166,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 725,
            column: 33,
            span: 18167..18169,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 725,
            column: 35,
            span: 18169..18171,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 725,
            column: 37,
            span: 18172..18173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 725,
            column: 41,
            span: 18174..18177,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 725,
            column: 42,
            span: 18177..18178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 727,
            column: 8,
            span: 18186..18187,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 727,
            column: 9,
            span: 18187..18188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 727,
            column: 17,
            span: 18188..18196,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 727,
            column: 18,
            span: 18196..18197,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 727,
            column: 19,
            span: 18196..18198,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 727,
            column: 20,
            span: 18198..18199,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 728,
            column: 21,
            span: 18229..18243,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 728,
            column: 22,
            span: 18243..18244,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        position: Position {
            line: 728,
            column: 31,
            span: 18244..18253,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 728,
            column: 32,
            span: 18253..18254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 730,
            column: 12,
            span: 18262..18267,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 730,
            column: 16,
            span: 18268..18271,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 731,
            column: 0,
            span: 18276..18279,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 734,
            column: 0,
            span: 18286..18288,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 736,
            column: 12,
            span: 18346..18351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 736,
            column: 18,
            span: 18352..18357,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 736,
            column: 20,
            span: 18358..18359,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 736,
            column: 22,
            span: 18360..18361,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 736,
            column: 23,
            span: 18361..18362,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 738,
            column: 12,
            span: 18370..18375,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 738,
            column: 21,
            span: 18376..18384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hook",
        ),
        position: Position {
            line: 738,
            column: 26,
            span: 18385..18389,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 738,
            column: 27,
            span: 18389..18390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        position: Position {
            line: 738,
            column: 32,
            span: 18390..18395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 738,
            column: 33,
            span: 18395..18396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 739,
            column: 14,
            span: 18405..18410,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 739,
            column: 15,
            span: 18410..18411,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 739,
            column: 16,
            span: 18411..18412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 739,
            column: 21,
            span: 18412..18417,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 739,
            column: 23,
            span: 18418..18419,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 739,
            column: 25,
            span: 18419..18421,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 739,
            column: 26,
            span: 18421..18422,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 739,
            column: 28,
            span: 18423..18424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        position: Position {
            line: 739,
            column: 34,
            span: 18425..18430,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 739,
            column: 37,
            span: 18431..18433,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" \"",
        ),
        position: Position {
            line: 739,
            column: 41,
            span: 18434..18437,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 739,
            column: 44,
            span: 18438..18440,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 739,
            column: 46,
            span: 18441..18442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 739,
            column: 51,
            span: 18442..18447,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 739,
            column: 52,
            span: 18447..18448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 739,
            column: 59,
            span: 18448..18455,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 739,
            column: 60,
            span: 18455..18456,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 739,
            column: 61,
            span: 18455..18457,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 739,
            column: 62,
            span: 18457..18458,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 739,
            column: 63,
            span: 18458..18459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 739,
            column: 67,
            span: 18459..18463,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 739,
            column: 70,
            span: 18464..18466,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        position: Position {
            line: 739,
            column: 74,
            span: 18467..18470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 739,
            column: 75,
            span: 18470..18471,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 740,
            column: 0,
            span: 18478..18481,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 743,
            column: 12,
            span: 18544..18549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 743,
            column: 14,
            span: 18550..18551,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 743,
            column: 16,
            span: 18552..18553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 743,
            column: 27,
            span: 18554..18564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 743,
            column: 28,
            span: 18564..18565,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 743,
            column: 36,
            span: 18565..18573,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 743,
            column: 37,
            span: 18573..18574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 743,
            column: 38,
            span: 18574..18575,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 743,
            column: 39,
            span: 18575..18576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 743,
            column: 43,
            span: 18577..18580,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 743,
            column: 44,
            span: 18580..18581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 744,
            column: 14,
            span: 18590..18595,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 744,
            column: 15,
            span: 18595..18596,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 744,
            column: 16,
            span: 18596..18597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 744,
            column: 21,
            span: 18597..18602,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 744,
            column: 23,
            span: 18603..18604,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 744,
            column: 25,
            span: 18604..18606,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 744,
            column: 26,
            span: 18606..18607,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 744,
            column: 28,
            span: 18608..18609,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 744,
            column: 32,
            span: 18610..18613,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 745,
            column: 10,
            span: 18620..18623,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 745,
            column: 11,
            span: 18623..18624,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 747,
            column: 12,
            span: 18632..18637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 747,
            column: 14,
            span: 18638..18639,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 747,
            column: 16,
            span: 18640..18641,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 747,
            column: 27,
            span: 18642..18652,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 747,
            column: 28,
            span: 18652..18653,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 747,
            column: 36,
            span: 18653..18661,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 747,
            column: 37,
            span: 18661..18662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 747,
            column: 38,
            span: 18662..18663,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 747,
            column: 39,
            span: 18663..18664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 747,
            column: 43,
            span: 18665..18668,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 747,
            column: 44,
            span: 18668..18669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 748,
            column: 14,
            span: 18678..18683,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 748,
            column: 15,
            span: 18683..18684,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 748,
            column: 16,
            span: 18684..18685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 748,
            column: 21,
            span: 18685..18690,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 748,
            column: 23,
            span: 18691..18692,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 748,
            column: 25,
            span: 18692..18694,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 748,
            column: 26,
            span: 18694..18695,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 748,
            column: 28,
            span: 18696..18697,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 748,
            column: 32,
            span: 18698..18701,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 749,
            column: 10,
            span: 18708..18711,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 749,
            column: 11,
            span: 18711..18712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 751,
            column: 12,
            span: 18720..18725,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 751,
            column: 13,
            span: 18725..18726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 751,
            column: 20,
            span: 18726..18733,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 751,
            column: 21,
            span: 18733..18734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hook",
        ),
        position: Position {
            line: 751,
            column: 25,
            span: 18734..18738,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 751,
            column: 26,
            span: 18738..18739,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        position: Position {
            line: 751,
            column: 30,
            span: 18740..18743,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 751,
            column: 31,
            span: 18743..18744,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 752,
            column: 12,
            span: 18751..18756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 752,
            column: 14,
            span: 18757..18758,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 752,
            column: 16,
            span: 18759..18760,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 752,
            column: 18,
            span: 18761..18762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 752,
            column: 20,
            span: 18763..18764,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 752,
            column: 21,
            span: 18764..18765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 752,
            column: 26,
            span: 18765..18770,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 752,
            column: 27,
            span: 18770..18771,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n       toclose 2      # x\n       pushnum 10\n       pushint 20\n       toclose 3      # y\n       return 2\n    ]]",
        ),
        position: Position {
            line: 758,
            column: 7,
            span: 18771..18884,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 758,
            column: 8,
            span: 18884..18885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 758,
            column: 10,
            span: 18886..18887,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 758,
            column: 11,
            span: 18887..18888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 758,
            column: 13,
            span: 18889..18890,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 758,
            column: 14,
            span: 18890..18891,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 758,
            column: 16,
            span: 18892..18893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 759,
            column: 12,
            span: 18900..18905,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 759,
            column: 13,
            span: 18905..18906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 759,
            column: 20,
            span: 18906..18913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 759,
            column: 21,
            span: 18913..18914,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 759,
            column: 22,
            span: 18914..18915,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktable",
        ),
        position: Position {
            line: 762,
            column: 17,
            span: 18974..18984,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 762,
            column: 18,
            span: 18984..18985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 762,
            column: 23,
            span: 18985..18990,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 762,
            column: 24,
            span: 18990..18991,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 763,
            column: 10,
            span: 19000..19001,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return sethook\"",
        ),
        position: Position {
            line: 763,
            column: 27,
            span: 19002..19018,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 763,
            column: 28,
            span: 19018..19019,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 763,
            column: 32,
            span: 19020..19023,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 763,
            column: 33,
            span: 19023..19024,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return ?\"",
        ),
        position: Position {
            line: 763,
            column: 44,
            span: 19025..19035,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 763,
            column: 45,
            span: 19035..19036,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 763,
            column: 49,
            span: 19037..19040,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 763,
            column: 50,
            span: 19040..19041,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return ?\"",
        ),
        position: Position {
            line: 763,
            column: 61,
            span: 19042..19052,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 763,
            column: 62,
            span: 19052..19053,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return testC\"",
        ),
        position: Position {
            line: 763,
            column: 77,
            span: 19054..19068,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 763,
            column: 79,
            span: 19069..19070,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 763,
            column: 80,
            span: 19070..19071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktable",
        ),
        position: Position {
            line: 765,
            column: 17,
            span: 19107..19117,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 765,
            column: 18,
            span: 19117..19118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 765,
            column: 19,
            span: 19118..19119,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 765,
            column: 20,
            span: 19119..19120,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 765,
            column: 22,
            span: 19121..19122,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 765,
            column: 25,
            span: 19122..19125,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 765,
            column: 26,
            span: 19125..19126,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 765,
            column: 29,
            span: 19126..19129,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 765,
            column: 31,
            span: 19130..19131,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 765,
            column: 32,
            span: 19131..19132,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 766,
            column: 0,
            span: 19137..19140,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 767,
            column: 0,
            span: 19143..19146,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 770,
            column: 5,
            span: 19151..19153,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 771,
            column: 10,
            span: 19205..19210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 771,
            column: 16,
            span: 19211..19216,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 771,
            column: 18,
            span: 19217..19218,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 771,
            column: 20,
            span: 19219..19220,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 771,
            column: 21,
            span: 19220..19221,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 773,
            column: 10,
            span: 19227..19232,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 773,
            column: 19,
            span: 19233..19241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hook",
        ),
        position: Position {
            line: 773,
            column: 24,
            span: 19242..19246,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 773,
            column: 25,
            span: 19246..19247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        position: Position {
            line: 773,
            column: 30,
            span: 19247..19252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 773,
            column: 31,
            span: 19252..19253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 774,
            column: 12,
            span: 19260..19265,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 774,
            column: 13,
            span: 19265..19266,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 774,
            column: 14,
            span: 19266..19267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 774,
            column: 19,
            span: 19267..19272,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 774,
            column: 21,
            span: 19273..19274,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 774,
            column: 23,
            span: 19274..19276,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 774,
            column: 24,
            span: 19276..19277,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 774,
            column: 26,
            span: 19278..19279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        position: Position {
            line: 774,
            column: 32,
            span: 19280..19285,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 774,
            column: 35,
            span: 19286..19288,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" \"",
        ),
        position: Position {
            line: 774,
            column: 39,
            span: 19289..19292,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 774,
            column: 42,
            span: 19293..19295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 774,
            column: 48,
            span: 19296..19301,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 774,
            column: 49,
            span: 19301..19302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 774,
            column: 56,
            span: 19302..19309,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 774,
            column: 57,
            span: 19309..19310,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 774,
            column: 58,
            span: 19309..19311,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 774,
            column: 59,
            span: 19311..19312,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 774,
            column: 60,
            span: 19312..19313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 774,
            column: 0,
            span: 19313..19317,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 775,
            column: 0,
            span: 19322..19325,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 777,
            column: 10,
            span: 19331..19336,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 777,
            column: 19,
            span: 19337..19345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 777,
            column: 23,
            span: 19346..19349,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 777,
            column: 24,
            span: 19349..19350,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 777,
            column: 27,
            span: 19350..19353,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 777,
            column: 28,
            span: 19353..19354,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 778,
            column: 12,
            span: 19361..19366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 778,
            column: 14,
            span: 19367..19368,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 778,
            column: 16,
            span: 19369..19370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 778,
            column: 21,
            span: 19370..19375,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 778,
            column: 22,
            span: 19375..19376,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 778,
            column: 24,
            span: 19377..19378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 778,
            column: 35,
            span: 19379..19389,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 778,
            column: 36,
            span: 19389..19390,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 778,
            column: 44,
            span: 19390..19398,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 778,
            column: 45,
            span: 19398..19399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 778,
            column: 46,
            span: 19399..19400,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 778,
            column: 47,
            span: 19400..19401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 778,
            column: 51,
            span: 19402..19405,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 778,
            column: 52,
            span: 19405..19406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 779,
            column: 14,
            span: 19415..19420,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 779,
            column: 15,
            span: 19420..19421,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 779,
            column: 16,
            span: 19421..19422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 779,
            column: 21,
            span: 19422..19427,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 779,
            column: 23,
            span: 19428..19429,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 779,
            column: 25,
            span: 19429..19431,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 779,
            column: 26,
            span: 19431..19432,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 779,
            column: 28,
            span: 19433..19434,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 779,
            column: 32,
            span: 19435..19438,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 780,
            column: 10,
            span: 19445..19448,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 780,
            column: 11,
            span: 19448..19449,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 782,
            column: 12,
            span: 19457..19462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 782,
            column: 14,
            span: 19463..19464,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 782,
            column: 16,
            span: 19465..19466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 782,
            column: 21,
            span: 19466..19471,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 782,
            column: 22,
            span: 19471..19472,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 782,
            column: 24,
            span: 19473..19474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 782,
            column: 35,
            span: 19475..19485,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 782,
            column: 36,
            span: 19485..19486,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 782,
            column: 44,
            span: 19486..19494,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 782,
            column: 45,
            span: 19494..19495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 782,
            column: 46,
            span: 19495..19496,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 782,
            column: 47,
            span: 19496..19497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 782,
            column: 51,
            span: 19498..19501,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 782,
            column: 52,
            span: 19501..19502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 783,
            column: 14,
            span: 19511..19516,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 783,
            column: 15,
            span: 19516..19517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 783,
            column: 22,
            span: 19517..19524,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 783,
            column: 23,
            span: 19524..19525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hook",
        ),
        position: Position {
            line: 783,
            column: 27,
            span: 19525..19529,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 783,
            column: 28,
            span: 19529..19530,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        position: Position {
            line: 783,
            column: 32,
            span: 19531..19534,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 783,
            column: 33,
            span: 19534..19535,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 784,
            column: 10,
            span: 19542..19545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 784,
            column: 11,
            span: 19545..19546,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 786,
            column: 13,
            span: 19554..19560,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 786,
            column: 17,
            span: 19561..19564,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 787,
            column: 0,
            span: 19569..19572,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 789,
            column: 10,
            span: 19578..19583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 789,
            column: 12,
            span: 19584..19585,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 789,
            column: 14,
            span: 19586..19587,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 789,
            column: 16,
            span: 19588..19589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 789,
            column: 20,
            span: 19590..19593,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 789,
            column: 21,
            span: 19593..19594,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 789,
            column: 23,
            span: 19593..19596,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 789,
            column: 24,
            span: 19596..19597,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 789,
            column: 27,
            span: 19597..19600,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 789,
            column: 28,
            span: 19600..19601,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 789,
            column: 31,
            span: 19601..19604,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 789,
            column: 32,
            span: 19604..19605,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 789,
            column: 34,
            span: 19606..19607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 790,
            column: 10,
            span: 19612..19617,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 790,
            column: 11,
            span: 19617..19618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 790,
            column: 18,
            span: 19618..19625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 790,
            column: 19,
            span: 19625..19626,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 790,
            column: 20,
            span: 19626..19627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktable",
        ),
        position: Position {
            line: 791,
            column: 15,
            span: 19632..19642,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 791,
            column: 16,
            span: 19642..19643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 791,
            column: 17,
            span: 19643..19644,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 791,
            column: 18,
            span: 19644..19645,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 791,
            column: 20,
            span: 19646..19647,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 791,
            column: 23,
            span: 19647..19650,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 791,
            column: 24,
            span: 19650..19651,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 791,
            column: 27,
            span: 19651..19654,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 791,
            column: 28,
            span: 19654..19655,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 791,
            column: 31,
            span: 19655..19658,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 791,
            column: 33,
            span: 19659..19660,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 791,
            column: 34,
            span: 19660..19661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktable",
        ),
        position: Position {
            line: 792,
            column: 15,
            span: 19666..19676,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 792,
            column: 16,
            span: 19676..19677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 792,
            column: 21,
            span: 19677..19682,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 792,
            column: 22,
            span: 19682..19683,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 793,
            column: 8,
            span: 19690..19691,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return sethook\"",
        ),
        position: Position {
            line: 793,
            column: 25,
            span: 19692..19708,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 793,
            column: 26,
            span: 19708..19709,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return close\"",
        ),
        position: Position {
            line: 793,
            column: 41,
            span: 19710..19724,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 793,
            column: 42,
            span: 19724..19725,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 793,
            column: 46,
            span: 19726..19729,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 793,
            column: 47,
            span: 19729..19730,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return close\"",
        ),
        position: Position {
            line: 793,
            column: 62,
            span: 19731..19745,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 793,
            column: 63,
            span: 19745..19746,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return foo\"",
        ),
        position: Position {
            line: 793,
            column: 76,
            span: 19747..19759,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 793,
            column: 78,
            span: 19760..19761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 793,
            column: 79,
            span: 19761..19762,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 794,
            column: 0,
            span: 19765..19768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 797,
            column: 8,
            span: 19773..19778,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"to-be-closed variables in coroutines\"",
        ),
        position: Position {
            line: 797,
            column: 47,
            span: 19779..19817,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 799,
            column: 0,
            span: 19821..19823,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 802,
            column: 10,
            span: 19872..19877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 802,
            column: 16,
            span: 19878..19883,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 802,
            column: 18,
            span: 19884..19885,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 802,
            column: 20,
            span: 19886..19887,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 802,
            column: 21,
            span: 19887..19888,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 803,
            column: 10,
            span: 19893..19898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 803,
            column: 13,
            span: 19899..19901,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 803,
            column: 15,
            span: 19902..19903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 803,
            column: 25,
            span: 19904..19913,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 803,
            column: 26,
            span: 19913..19914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 803,
            column: 30,
            span: 19914..19918,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 803,
            column: 31,
            span: 19918..19919,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 803,
            column: 39,
            span: 19919..19927,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 803,
            column: 40,
            span: 19927..19928,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 803,
            column: 41,
            span: 19928..19929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 804,
            column: 12,
            span: 19936..19941,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 804,
            column: 13,
            span: 19941..19942,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 804,
            column: 14,
            span: 19942..19943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 804,
            column: 19,
            span: 19943..19948,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 804,
            column: 21,
            span: 19949..19950,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 804,
            column: 23,
            span: 19950..19952,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 804,
            column: 24,
            span: 19952..19953,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 804,
            column: 26,
            span: 19954..19955,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nowX\"",
        ),
        position: Position {
            line: 804,
            column: 33,
            span: 19956..19962,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 807,
            column: 12,
            span: 20004..20009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 807,
            column: 14,
            span: 20010..20011,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 807,
            column: 16,
            span: 20012..20013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 807,
            column: 21,
            span: 20013..20018,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 807,
            column: 22,
            span: 20018..20019,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 807,
            column: 24,
            span: 20020..20021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 807,
            column: 35,
            span: 20022..20032,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 807,
            column: 36,
            span: 20032..20033,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 807,
            column: 44,
            span: 20033..20041,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 807,
            column: 45,
            span: 20041..20042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 807,
            column: 46,
            span: 20042..20043,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 807,
            column: 47,
            span: 20043..20044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 807,
            column: 51,
            span: 20045..20048,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 807,
            column: 52,
            span: 20048..20049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 808,
            column: 15,
            span: 20058..20064,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 808,
            column: 16,
            span: 20064..20065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 808,
            column: 19,
            span: 20065..20068,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 808,
            column: 22,
            span: 20069..20071,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 808,
            column: 26,
            span: 20072..20075,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 808,
            column: 27,
            span: 20075..20076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 809,
            column: 14,
            span: 20085..20090,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 809,
            column: 15,
            span: 20090..20091,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 809,
            column: 16,
            span: 20091..20092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 809,
            column: 21,
            span: 20092..20097,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 809,
            column: 23,
            span: 20098..20099,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 809,
            column: 25,
            span: 20099..20101,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 809,
            column: 26,
            span: 20101..20102,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 809,
            column: 28,
            span: 20103..20104,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x1\"",
        ),
        position: Position {
            line: 809,
            column: 33,
            span: 20105..20109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 810,
            column: 18,
            span: 20118..20127,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 810,
            column: 19,
            span: 20127..20128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 810,
            column: 24,
            span: 20128..20133,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 810,
            column: 25,
            span: 20133..20134,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 810,
            column: 28,
            span: 20134..20137,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 810,
            column: 29,
            span: 20137..20138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 811,
            column: 14,
            span: 20147..20152,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 811,
            column: 15,
            span: 20152..20153,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 811,
            column: 16,
            span: 20153..20154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 811,
            column: 21,
            span: 20154..20159,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 811,
            column: 23,
            span: 20160..20161,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 811,
            column: 25,
            span: 20161..20163,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 811,
            column: 26,
            span: 20163..20164,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 811,
            column: 28,
            span: 20165..20166,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x2\"",
        ),
        position: Position {
            line: 811,
            column: 33,
            span: 20167..20171,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 812,
            column: 10,
            span: 20178..20181,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 812,
            column: 11,
            span: 20181..20182,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 814,
            column: 13,
            span: 20190..20196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 814,
            column: 19,
            span: 20197..20202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 814,
            column: 20,
            span: 20202..20203,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 814,
            column: 28,
            span: 20203..20211,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 814,
            column: 29,
            span: 20211..20212,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 814,
            column: 30,
            span: 20212..20213,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 815,
            column: 11,
            span: 20222..20224,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 816,
            column: 16,
            span: 20263..20268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 816,
            column: 18,
            span: 20269..20270,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 816,
            column: 20,
            span: 20271..20272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 816,
            column: 25,
            span: 20272..20277,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 816,
            column: 26,
            span: 20277..20278,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 816,
            column: 28,
            span: 20279..20280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 816,
            column: 39,
            span: 20281..20291,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 816,
            column: 40,
            span: 20291..20292,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 816,
            column: 48,
            span: 20292..20300,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 816,
            column: 49,
            span: 20300..20301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 816,
            column: 50,
            span: 20301..20302,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 816,
            column: 51,
            span: 20302..20303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 816,
            column: 55,
            span: 20304..20307,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 816,
            column: 56,
            span: 20307..20308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 817,
            column: 19,
            span: 20321..20327,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 817,
            column: 20,
            span: 20327..20328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 817,
            column: 23,
            span: 20328..20331,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 817,
            column: 26,
            span: 20332..20334,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 817,
            column: 30,
            span: 20335..20338,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 817,
            column: 31,
            span: 20338..20339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 818,
            column: 18,
            span: 20352..20357,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 818,
            column: 19,
            span: 20357..20358,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 818,
            column: 20,
            span: 20358..20359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 818,
            column: 25,
            span: 20359..20364,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 818,
            column: 27,
            span: 20365..20366,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 818,
            column: 29,
            span: 20366..20368,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 818,
            column: 30,
            span: 20368..20369,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 818,
            column: 32,
            span: 20370..20371,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z1\"",
        ),
        position: Position {
            line: 818,
            column: 37,
            span: 20372..20376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 819,
            column: 22,
            span: 20389..20398,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 819,
            column: 23,
            span: 20398..20399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 819,
            column: 28,
            span: 20399..20404,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 819,
            column: 29,
            span: 20404..20405,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z\"",
        ),
        position: Position {
            line: 819,
            column: 32,
            span: 20405..20408,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 819,
            column: 33,
            span: 20408..20409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 820,
            column: 18,
            span: 20422..20427,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 820,
            column: 19,
            span: 20427..20428,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 820,
            column: 20,
            span: 20428..20429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 820,
            column: 25,
            span: 20429..20434,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 820,
            column: 27,
            span: 20435..20436,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 820,
            column: 29,
            span: 20436..20438,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 820,
            column: 30,
            span: 20438..20439,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 820,
            column: 32,
            span: 20440..20441,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z2\"",
        ),
        position: Position {
            line: 820,
            column: 37,
            span: 20442..20446,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 821,
            column: 14,
            span: 20457..20460,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 821,
            column: 15,
            span: 20460..20461,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 822,
            column: 0,
            span: 20470..20473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 824,
            column: 14,
            span: 20483..20488,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 824,
            column: 15,
            span: 20488..20489,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 824,
            column: 16,
            span: 20489..20490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 824,
            column: 21,
            span: 20490..20495,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 824,
            column: 23,
            span: 20496..20497,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 824,
            column: 25,
            span: 20497..20499,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 824,
            column: 26,
            span: 20499..20500,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 824,
            column: 28,
            span: 20501..20502,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nowY\"",
        ),
        position: Position {
            line: 824,
            column: 35,
            span: 20503..20509,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 827,
            column: 14,
            span: 20555..20560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 827,
            column: 16,
            span: 20561..20562,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 827,
            column: 18,
            span: 20563..20564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 827,
            column: 23,
            span: 20564..20569,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 827,
            column: 24,
            span: 20569..20570,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 827,
            column: 26,
            span: 20571..20572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 827,
            column: 37,
            span: 20573..20583,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 827,
            column: 38,
            span: 20583..20584,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 827,
            column: 46,
            span: 20584..20592,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 827,
            column: 47,
            span: 20592..20593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 827,
            column: 48,
            span: 20593..20594,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 827,
            column: 49,
            span: 20594..20595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 827,
            column: 53,
            span: 20596..20599,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 827,
            column: 54,
            span: 20599..20600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 828,
            column: 17,
            span: 20611..20617,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 828,
            column: 18,
            span: 20617..20618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 828,
            column: 21,
            span: 20618..20621,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 828,
            column: 24,
            span: 20622..20624,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 828,
            column: 28,
            span: 20625..20628,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 828,
            column: 29,
            span: 20628..20629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 829,
            column: 16,
            span: 20640..20645,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 829,
            column: 17,
            span: 20645..20646,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 829,
            column: 18,
            span: 20646..20647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 829,
            column: 23,
            span: 20647..20652,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 829,
            column: 25,
            span: 20653..20654,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 829,
            column: 27,
            span: 20654..20656,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 829,
            column: 28,
            span: 20656..20657,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 829,
            column: 30,
            span: 20658..20659,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y1\"",
        ),
        position: Position {
            line: 829,
            column: 35,
            span: 20660..20664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 830,
            column: 20,
            span: 20675..20684,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 830,
            column: 21,
            span: 20684..20685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 830,
            column: 26,
            span: 20685..20690,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 830,
            column: 27,
            span: 20690..20691,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 830,
            column: 30,
            span: 20691..20694,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 830,
            column: 31,
            span: 20694..20695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 831,
            column: 16,
            span: 20706..20711,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 831,
            column: 17,
            span: 20711..20712,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 831,
            column: 18,
            span: 20712..20713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 831,
            column: 23,
            span: 20713..20718,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 831,
            column: 25,
            span: 20719..20720,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 831,
            column: 27,
            span: 20720..20722,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 831,
            column: 28,
            span: 20722..20723,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 831,
            column: 30,
            span: 20724..20725,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y2\"",
        ),
        position: Position {
            line: 831,
            column: 35,
            span: 20726..20730,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 832,
            column: 12,
            span: 20739..20742,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 832,
            column: 13,
            span: 20742..20743,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 834,
            column: 15,
            span: 20753..20759,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 834,
            column: 18,
            span: 20759..20762,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 834,
            column: 19,
            span: 20762..20763,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 834,
            column: 22,
            span: 20763..20766,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 834,
            column: 23,
            span: 20766..20767,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 834,
            column: 0,
            span: 20767..20770,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 835,
            column: 10,
            span: 20777..20780,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 835,
            column: 11,
            span: 20780..20781,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 836,
            column: 8,
            span: 20786..20789,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 836,
            column: 9,
            span: 20789..20790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 838,
            column: 11,
            span: 20796..20802,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 838,
            column: 12,
            span: 20802..20803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 838,
            column: 14,
            span: 20803..20805,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 838,
            column: 15,
            span: 20805..20806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 838,
            column: 16,
            span: 20806..20807,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 838,
            column: 19,
            span: 20808..20810,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z\"",
        ),
        position: Position {
            line: 838,
            column: 23,
            span: 20811..20814,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 838,
            column: 24,
            span: 20814..20815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 839,
            column: 11,
            span: 20820..20826,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 839,
            column: 12,
            span: 20826..20827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 839,
            column: 14,
            span: 20827..20829,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 839,
            column: 15,
            span: 20829..20830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 839,
            column: 16,
            span: 20830..20831,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 839,
            column: 19,
            span: 20832..20834,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 839,
            column: 23,
            span: 20835..20838,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 839,
            column: 24,
            span: 20838..20839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 840,
            column: 11,
            span: 20844..20850,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 840,
            column: 12,
            span: 20850..20851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 840,
            column: 14,
            span: 20851..20853,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 840,
            column: 15,
            span: 20853..20854,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 840,
            column: 16,
            span: 20854..20855,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 840,
            column: 19,
            span: 20856..20858,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 840,
            column: 23,
            span: 20859..20862,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 840,
            column: 24,
            span: 20862..20863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktable",
        ),
        position: Position {
            line: 841,
            column: 15,
            span: 20868..20878,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 841,
            column: 16,
            span: 20878..20879,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 841,
            column: 17,
            span: 20879..20880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 841,
            column: 20,
            span: 20881..20883,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 841,
            column: 21,
            span: 20883..20884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 841,
            column: 22,
            span: 20884..20885,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 841,
            column: 24,
            span: 20886..20887,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 841,
            column: 25,
            span: 20887..20888,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 841,
            column: 27,
            span: 20889..20890,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 841,
            column: 32,
            span: 20891..20895,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 841,
            column: 33,
            span: 20895..20896,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 841,
            column: 36,
            span: 20896..20899,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 841,
            column: 37,
            span: 20899..20900,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 841,
            column: 40,
            span: 20900..20903,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 841,
            column: 41,
            span: 20903..20904,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 841,
            column: 44,
            span: 20904..20907,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 841,
            column: 46,
            span: 20908..20909,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 841,
            column: 47,
            span: 20909..20910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktable",
        ),
        position: Position {
            line: 842,
            column: 15,
            span: 20915..20925,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 842,
            column: 16,
            span: 20925..20926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trace",
        ),
        position: Position {
            line: 842,
            column: 21,
            span: 20926..20931,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 842,
            column: 22,
            span: 20931..20932,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 842,
            column: 24,
            span: 20933..20934,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nowX\"",
        ),
        position: Position {
            line: 842,
            column: 31,
            span: 20935..20941,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 842,
            column: 32,
            span: 20941..20942,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z1\"",
        ),
        position: Position {
            line: 842,
            column: 37,
            span: 20943..20947,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 842,
            column: 38,
            span: 20947..20948,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z2\"",
        ),
        position: Position {
            line: 842,
            column: 43,
            span: 20949..20953,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 842,
            column: 44,
            span: 20953..20954,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nowY\"",
        ),
        position: Position {
            line: 842,
            column: 51,
            span: 20955..20961,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 842,
            column: 52,
            span: 20961..20962,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y1\"",
        ),
        position: Position {
            line: 842,
            column: 57,
            span: 20963..20967,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 842,
            column: 58,
            span: 20967..20968,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y2\"",
        ),
        position: Position {
            line: 842,
            column: 63,
            span: 20969..20973,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 842,
            column: 64,
            span: 20973..20974,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x1\"",
        ),
        position: Position {
            line: 842,
            column: 69,
            span: 20975..20979,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 842,
            column: 70,
            span: 20979..20980,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x2\"",
        ),
        position: Position {
            line: 842,
            column: 75,
            span: 20981..20985,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 842,
            column: 77,
            span: 20986..20987,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 842,
            column: 78,
            span: 20987..20988,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 843,
            column: 0,
            span: 20991..20994,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 846,
            column: 0,
            span: 20999..21001,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 850,
            column: 10,
            span: 21088..21093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extrares",
        ),
        position: Position {
            line: 850,
            column: 19,
            span: 21094..21102,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 852,
            column: 10,
            span: 21144..21149,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 852,
            column: 19,
            span: 21150..21158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 852,
            column: 25,
            span: 21159..21164,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 852,
            column: 26,
            span: 21164..21165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "body",
        ),
        position: Position {
            line: 852,
            column: 30,
            span: 21165..21169,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 852,
            column: 31,
            span: 21169..21170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        position: Position {
            line: 852,
            column: 37,
            span: 21171..21176,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 852,
            column: 38,
            span: 21176..21177,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 852,
            column: 42,
            span: 21178..21181,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 852,
            column: 43,
            span: 21181..21182,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 853,
            column: 12,
            span: 21189..21194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 853,
            column: 14,
            span: 21195..21196,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 853,
            column: 16,
            span: 21197..21198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 853,
            column: 22,
            span: 21199..21204,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 853,
            column: 23,
            span: 21204..21205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 853,
            column: 27,
            span: 21205..21209,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 853,
            column: 28,
            span: 21209..21210,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 853,
            column: 31,
            span: 21210..21213,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 853,
            column: 32,
            span: 21213..21214,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 854,
            column: 12,
            span: 21241..21246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 854,
            column: 15,
            span: 21247..21249,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 854,
            column: 17,
            span: 21250..21251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 854,
            column: 27,
            span: 21252..21261,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 854,
            column: 28,
            span: 21261..21262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 854,
            column: 32,
            span: 21262..21266,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 854,
            column: 33,
            span: 21266..21267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "body",
        ),
        position: Position {
            line: 854,
            column: 37,
            span: 21267..21271,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 854,
            column: 38,
            span: 21271..21272,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 855,
            column: 9,
            span: 21279..21281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        position: Position {
            line: 855,
            column: 15,
            span: 21282..21287,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 855,
            column: 0,
            span: 21288..21292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extrares",
        ),
        position: Position {
            line: 856,
            column: 17,
            span: 21301..21309,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 856,
            column: 19,
            span: 21310..21311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 856,
            column: 22,
            span: 21312..21314,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 856,
            column: 23,
            span: 21314..21315,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 856,
            column: 24,
            span: 21315..21316,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 857,
            column: 0,
            span: 21367..21370,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 858,
            column: 12,
            span: 21377..21382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 858,
            column: 16,
            span: 21383..21386,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 858,
            column: 18,
            span: 21387..21388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 858,
            column: 24,
            span: 21389..21394,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 858,
            column: 25,
            span: 21394..21395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 858,
            column: 29,
            span: 21395..21399,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 858,
            column: 30,
            span: 21399..21400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 858,
            column: 32,
            span: 21400..21402,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 858,
            column: 33,
            span: 21402..21403,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 858,
            column: 34,
            span: 21403..21404,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 858,
            column: 35,
            span: 21404..21405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 859,
            column: 13,
            span: 21449..21455,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 859,
            column: 14,
            span: 21455..21456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 859,
            column: 17,
            span: 21456..21459,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 859,
            column: 18,
            span: 21459..21460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 859,
            column: 19,
            span: 21460..21461,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 859,
            column: 22,
            span: 21462..21464,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 859,
            column: 24,
            span: 21464..21466,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 859,
            column: 28,
            span: 21467..21470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 859,
            column: 32,
            span: 21471..21474,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 859,
            column: 33,
            span: 21474..21475,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 859,
            column: 34,
            span: 21474..21476,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 859,
            column: 35,
            span: 21476..21477,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 859,
            column: 38,
            span: 21478..21480,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 859,
            column: 42,
            span: 21481..21484,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 859,
            column: 43,
            span: 21484..21485,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 860,
            column: 12,
            span: 21492..21497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 860,
            column: 17,
            span: 21498..21502,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 860,
            column: 19,
            span: 21503..21504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 860,
            column: 25,
            span: 21505..21510,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 860,
            column: 26,
            span: 21510..21511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 860,
            column: 30,
            span: 21511..21515,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 860,
            column: 31,
            span: 21515..21516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 860,
            column: 33,
            span: 21516..21518,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 860,
            column: 34,
            span: 21518..21519,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 860,
            column: 35,
            span: 21519..21520,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 860,
            column: 36,
            span: 21520..21521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 861,
            column: 13,
            span: 21558..21564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 861,
            column: 14,
            span: 21564..21565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 861,
            column: 18,
            span: 21565..21569,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 861,
            column: 19,
            span: 21569..21570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 861,
            column: 20,
            span: 21570..21571,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 861,
            column: 23,
            span: 21572..21574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 861,
            column: 25,
            span: 21575..21576,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 861,
            column: 26,
            span: 21576..21577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 861,
            column: 27,
            span: 21577..21578,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 861,
            column: 28,
            span: 21578..21579,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 862,
            column: 10,
            span: 21586..21589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 862,
            column: 12,
            span: 21590..21591,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 862,
            column: 14,
            span: 21592..21593,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 862,
            column: 16,
            span: 21593..21595,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 862,
            column: 17,
            span: 21595..21596,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 862,
            column: 19,
            span: 21597..21598,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 862,
            column: 20,
            span: 21598..21599,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 862,
            column: 0,
            span: 21600..21602,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 863,
            column: 11,
            span: 21611..21613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 863,
            column: 13,
            span: 21614..21615,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 863,
            column: 14,
            span: 21615..21616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 863,
            column: 15,
            span: 21616..21617,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 863,
            column: 16,
            span: 21617..21618,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 863,
            column: 19,
            span: 21619..21621,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 863,
            column: 23,
            span: 21622..21625,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 863,
            column: 0,
            span: 21626..21630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 864,
            column: 17,
            span: 21641..21647,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 864,
            column: 18,
            span: 21647..21648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 864,
            column: 22,
            span: 21648..21652,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 864,
            column: 23,
            span: 21652..21653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 864,
            column: 24,
            span: 21653..21654,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 864,
            column: 25,
            span: 21654..21655,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 864,
            column: 28,
            span: 21656..21658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 864,
            column: 32,
            span: 21659..21662,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 864,
            column: 33,
            span: 21662..21663,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 864,
            column: 34,
            span: 21662..21664,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 864,
            column: 35,
            span: 21664..21665,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 864,
            column: 36,
            span: 21665..21666,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 865,
            column: 0,
            span: 21700..21704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 866,
            column: 17,
            span: 21715..21721,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 866,
            column: 18,
            span: 21721..21722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 866,
            column: 22,
            span: 21722..21726,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 866,
            column: 23,
            span: 21726..21727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 866,
            column: 24,
            span: 21727..21728,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 866,
            column: 25,
            span: 21728..21729,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 866,
            column: 28,
            span: 21730..21732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 866,
            column: 30,
            span: 21733..21734,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 866,
            column: 31,
            span: 21734..21735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 866,
            column: 32,
            span: 21735..21736,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 866,
            column: 33,
            span: 21736..21737,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 866,
            column: 34,
            span: 21737..21738,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 867,
            column: 0,
            span: 21747..21750,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 868,
            column: 0,
            span: 21757..21760,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 869,
            column: 0,
            span: 21765..21768,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 871,
            column: 10,
            span: 21774..21779,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 871,
            column: 19,
            span: 21780..21788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 871,
            column: 23,
            span: 21789..21792,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 871,
            column: 24,
            span: 21792..21793,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 871,
            column: 25,
            span: 21793..21794,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 872,
            column: 12,
            span: 21801..21806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 872,
            column: 14,
            span: 21807..21808,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 872,
            column: 16,
            span: 21809..21810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 872,
            column: 21,
            span: 21810..21815,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 872,
            column: 22,
            span: 21815..21816,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 872,
            column: 24,
            span: 21817..21818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 872,
            column: 35,
            span: 21819..21829,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 872,
            column: 36,
            span: 21829..21830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 872,
            column: 45,
            span: 21830..21839,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 872,
            column: 46,
            span: 21839..21840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 872,
            column: 51,
            span: 21840..21845,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 872,
            column: 52,
            span: 21845..21846,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 873,
            column: 12,
            span: 21853..21858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        position: Position {
            line: 873,
            column: 18,
            span: 21859..21864,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 873,
            column: 20,
            span: 21865..21866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 873,
            column: 25,
            span: 21866..21871,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 873,
            column: 26,
            span: 21871..21872,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 873,
            column: 28,
            span: 21873..21874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 873,
            column: 39,
            span: 21875..21885,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 873,
            column: 40,
            span: 21885..21886,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 873,
            column: 48,
            span: 21886..21894,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 873,
            column: 49,
            span: 21894..21895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 873,
            column: 53,
            span: 21895..21899,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 873,
            column: 54,
            span: 21899..21900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 874,
            column: 15,
            span: 21909..21915,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 874,
            column: 16,
            span: 21915..21916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 874,
            column: 20,
            span: 21916..21920,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 874,
            column: 23,
            span: 21921..21923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extrares",
        ),
        position: Position {
            line: 874,
            column: 32,
            span: 21924..21932,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 874,
            column: 33,
            span: 21932..21933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 875,
            column: 18,
            span: 21942..21951,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 875,
            column: 19,
            span: 21951..21952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 875,
            column: 24,
            span: 21952..21957,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 875,
            column: 25,
            span: 21957..21958,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 875,
            column: 28,
            span: 21957..21961,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 875,
            column: 29,
            span: 21961..21962,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 876,
            column: 10,
            span: 21969..21972,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 876,
            column: 11,
            span: 21972..21973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extrares",
        ),
        position: Position {
            line: 877,
            column: 15,
            span: 21980..21988,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 877,
            column: 17,
            span: 21989..21990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        position: Position {
            line: 877,
            column: 0,
            span: 21991..21996,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 878,
            column: 13,
            span: 22003..22009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 878,
            column: 19,
            span: 22010..22015,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 878,
            column: 20,
            span: 22015..22016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 878,
            column: 26,
            span: 22016..22022,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 878,
            column: 28,
            span: 22023..22024,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 878,
            column: 31,
            span: 22024..22027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 878,
            column: 32,
            span: 22027..22028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 878,
            column: 34,
            span: 22029..22030,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 878,
            column: 35,
            span: 22030..22031,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 878,
            column: 38,
            span: 22031..22034,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 878,
            column: 40,
            span: 22035..22036,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 879,
            column: 0,
            span: 22041..22044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 880,
            column: 10,
            span: 22049..22054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 880,
            column: 11,
            span: 22054..22055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 880,
            column: 14,
            span: 22055..22058,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 880,
            column: 15,
            span: 22058..22059,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 880,
            column: 20,
            span: 22060..22064,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 880,
            column: 21,
            span: 22064..22065,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 880,
            column: 24,
            span: 22065..22068,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 880,
            column: 25,
            span: 22068..22069,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 880,
            column: 29,
            span: 22070..22073,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 880,
            column: 30,
            span: 22073..22074,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 880,
            column: 33,
            span: 22074..22077,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 880,
            column: 34,
            span: 22077..22078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 881,
            column: 11,
            span: 22083..22089,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 881,
            column: 12,
            span: 22089..22090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extrares",
        ),
        position: Position {
            line: 881,
            column: 20,
            span: 22090..22098,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 881,
            column: 23,
            span: 22099..22101,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 881,
            column: 27,
            span: 22101..22105,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 881,
            column: 28,
            span: 22105..22106,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 883,
            column: 10,
            span: 22112..22117,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 883,
            column: 19,
            span: 22118..22126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 883,
            column: 23,
            span: 22127..22130,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 883,
            column: 24,
            span: 22130..22131,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 883,
            column: 25,
            span: 22131..22132,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 884,
            column: 12,
            span: 22139..22144,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 884,
            column: 14,
            span: 22145..22146,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 884,
            column: 16,
            span: 22147..22148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 884,
            column: 21,
            span: 22148..22153,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 884,
            column: 22,
            span: 22153..22154,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 884,
            column: 24,
            span: 22155..22156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 884,
            column: 35,
            span: 22157..22167,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 884,
            column: 36,
            span: 22167..22168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 884,
            column: 45,
            span: 22168..22177,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 884,
            column: 46,
            span: 22177..22178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 884,
            column: 51,
            span: 22178..22183,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 884,
            column: 52,
            span: 22183..22184,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 885,
            column: 0,
            span: 22191..22197,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 886,
            column: 0,
            span: 22202..22205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 887,
            column: 10,
            span: 22210..22215,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 887,
            column: 11,
            span: 22215..22216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 887,
            column: 14,
            span: 22216..22219,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 887,
            column: 15,
            span: 22219..22220,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 887,
            column: 21,
            span: 22221..22226,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 887,
            column: 22,
            span: 22226..22227,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 889,
            column: 10,
            span: 22233..22238,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 889,
            column: 19,
            span: 22239..22247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 889,
            column: 23,
            span: 22248..22251,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 889,
            column: 24,
            span: 22251..22252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 889,
            column: 25,
            span: 22252..22253,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 890,
            column: 12,
            span: 22260..22265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 890,
            column: 14,
            span: 22266..22267,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 890,
            column: 16,
            span: 22268..22269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 890,
            column: 21,
            span: 22269..22274,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 890,
            column: 22,
            span: 22274..22275,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 890,
            column: 24,
            span: 22276..22277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 890,
            column: 35,
            span: 22278..22288,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 890,
            column: 36,
            span: 22288..22289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 890,
            column: 45,
            span: 22289..22298,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 890,
            column: 46,
            span: 22298..22299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 890,
            column: 51,
            span: 22299..22304,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 890,
            column: 52,
            span: 22304..22305,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 891,
            column: 12,
            span: 22312..22317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 891,
            column: 14,
            span: 22318..22319,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 891,
            column: 15,
            span: 22319..22320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 891,
            column: 17,
            span: 22321..22322,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 891,
            column: 19,
            span: 22323..22324,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 891,
            column: 22,
            span: 22324..22327,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 891,
            column: 23,
            span: 22327..22328,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 891,
            column: 0,
            span: 22328..22331,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 892,
            column: 13,
            span: 22338..22344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 892,
            column: 0,
            span: 22345..22346,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 893,
            column: 0,
            span: 22351..22354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 894,
            column: 10,
            span: 22359..22364,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 894,
            column: 11,
            span: 22364..22365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 894,
            column: 14,
            span: 22365..22368,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 894,
            column: 15,
            span: 22368..22369,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 894,
            column: 21,
            span: 22370..22375,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 894,
            column: 22,
            span: 22375..22376,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 894,
            column: 26,
            span: 22377..22380,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 894,
            column: 27,
            span: 22380..22381,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 896,
            column: 10,
            span: 22387..22392,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 896,
            column: 19,
            span: 22393..22401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 896,
            column: 23,
            span: 22402..22405,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 896,
            column: 24,
            span: 22405..22406,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 896,
            column: 25,
            span: 22406..22407,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 897,
            column: 12,
            span: 22414..22419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 897,
            column: 14,
            span: 22420..22421,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 897,
            column: 16,
            span: 22422..22423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 897,
            column: 21,
            span: 22423..22428,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 897,
            column: 22,
            span: 22428..22429,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 897,
            column: 24,
            span: 22430..22431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 897,
            column: 35,
            span: 22432..22442,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 897,
            column: 36,
            span: 22442..22443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 897,
            column: 45,
            span: 22443..22452,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 897,
            column: 46,
            span: 22452..22453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 897,
            column: 51,
            span: 22453..22458,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 897,
            column: 52,
            span: 22458..22459,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 898,
            column: 12,
            span: 22466..22471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        position: Position {
            line: 898,
            column: 18,
            span: 22472..22477,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 898,
            column: 20,
            span: 22478..22479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 898,
            column: 25,
            span: 22479..22484,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 898,
            column: 26,
            span: 22484..22485,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 898,
            column: 28,
            span: 22486..22487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 898,
            column: 39,
            span: 22488..22498,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 898,
            column: 40,
            span: 22498..22499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 898,
            column: 49,
            span: 22499..22508,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 898,
            column: 50,
            span: 22508..22509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 898,
            column: 55,
            span: 22509..22514,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 898,
            column: 56,
            span: 22514..22515,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 899,
            column: 13,
            span: 22522..22528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 899,
            column: 19,
            span: 22529..22534,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 899,
            column: 20,
            span: 22534..22535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 899,
            column: 26,
            span: 22535..22541,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 899,
            column: 27,
            span: 22541..22542,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 899,
            column: 28,
            span: 22542..22543,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 899,
            column: 29,
            span: 22543..22544,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 899,
            column: 30,
            span: 22544..22545,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 899,
            column: 32,
            span: 22545..22547,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 899,
            column: 33,
            span: 22547..22548,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 899,
            column: 37,
            span: 22548..22552,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 899,
            column: 38,
            span: 22552..22553,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 900,
            column: 0,
            span: 22570..22573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 901,
            column: 10,
            span: 22578..22583,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 901,
            column: 11,
            span: 22583..22584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 901,
            column: 14,
            span: 22584..22587,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 901,
            column: 15,
            span: 22587..22588,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 901,
            column: 20,
            span: 22589..22593,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 901,
            column: 21,
            span: 22593..22594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 901,
            column: 27,
            span: 22595..22600,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 901,
            column: 28,
            span: 22600..22601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 901,
            column: 34,
            span: 22601..22607,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 901,
            column: 35,
            span: 22607..22608,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 901,
            column: 36,
            span: 22608..22609,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 901,
            column: 37,
            span: 22609..22610,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 901,
            column: 38,
            span: 22610..22611,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 901,
            column: 40,
            span: 22611..22613,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 901,
            column: 41,
            span: 22613..22614,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 901,
            column: 45,
            span: 22614..22618,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 901,
            column: 46,
            span: 22618..22619,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 901,
            column: 47,
            span: 22619..22620,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 902,
            column: 0,
            span: 22623..22626,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 904,
            column: 0,
            span: 22630..22632,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 907,
            column: 10,
            span: 22696..22701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 907,
            column: 13,
            span: 22702..22704,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 907,
            column: 15,
            span: 22705..22706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 907,
            column: 25,
            span: 22707..22716,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 907,
            column: 26,
            span: 22716..22717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 907,
            column: 30,
            span: 22717..22721,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 907,
            column: 31,
            span: 22721..22722,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 907,
            column: 39,
            span: 22722..22730,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 907,
            column: 40,
            span: 22730..22731,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 907,
            column: 41,
            span: 22731..22732,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 908,
            column: 12,
            span: 22739..22744,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 908,
            column: 21,
            span: 22745..22753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 908,
            column: 25,
            span: 22754..22757,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 908,
            column: 26,
            span: 22757..22758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 908,
            column: 29,
            span: 22758..22761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 908,
            column: 30,
            span: 22761..22762,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 909,
            column: 14,
            span: 22771..22776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 909,
            column: 16,
            span: 22777..22778,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 909,
            column: 18,
            span: 22779..22780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 909,
            column: 23,
            span: 22780..22785,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 909,
            column: 24,
            span: 22785..22786,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 909,
            column: 26,
            span: 22787..22788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 909,
            column: 37,
            span: 22789..22799,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 909,
            column: 38,
            span: 22799..22800,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 909,
            column: 46,
            span: 22800..22808,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 909,
            column: 47,
            span: 22808..22809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 909,
            column: 48,
            span: 22809..22810,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 909,
            column: 49,
            span: 22810..22811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 909,
            column: 53,
            span: 22812..22815,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 909,
            column: 54,
            span: 22815..22816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 910,
            column: 17,
            span: 22827..22833,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 910,
            column: 18,
            span: 22833..22834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 910,
            column: 21,
            span: 22834..22837,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 910,
            column: 24,
            span: 22838..22840,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 910,
            column: 28,
            span: 22841..22844,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 910,
            column: 31,
            span: 22845..22847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 910,
            column: 35,
            span: 22848..22851,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 910,
            column: 38,
            span: 22852..22854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 910,
            column: 42,
            span: 22855..22858,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 910,
            column: 44,
            span: 22859..22860,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 910,
            column: 47,
            span: 22860..22863,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 910,
            column: 48,
            span: 22863..22864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 911,
            column: 20,
            span: 22875..22884,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 911,
            column: 21,
            span: 22884..22885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 911,
            column: 26,
            span: 22885..22890,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 911,
            column: 27,
            span: 22890..22891,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z\"",
        ),
        position: Position {
            line: 911,
            column: 30,
            span: 22891..22894,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 911,
            column: 31,
            span: 22894..22895,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 912,
            column: 17,
            span: 22906..22912,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 912,
            column: 21,
            span: 22912..22916,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 912,
            column: 22,
            span: 22916..22917,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 912,
            column: 0,
            span: 22917..22921,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 913,
            column: 12,
            span: 22930..22933,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 913,
            column: 13,
            span: 22933..22934,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 915,
            column: 14,
            span: 22944..22949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 915,
            column: 16,
            span: 22950..22951,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 915,
            column: 18,
            span: 22952..22953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 915,
            column: 23,
            span: 22953..22958,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 915,
            column: 24,
            span: 22958..22959,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 915,
            column: 26,
            span: 22960..22961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 915,
            column: 37,
            span: 22962..22972,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 915,
            column: 38,
            span: 22972..22973,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 915,
            column: 46,
            span: 22973..22981,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 915,
            column: 47,
            span: 22981..22982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 915,
            column: 48,
            span: 22982..22983,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 915,
            column: 49,
            span: 22983..22984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 915,
            column: 53,
            span: 22985..22988,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 915,
            column: 54,
            span: 22988..22989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 917,
            column: 17,
            span: 23052..23058,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 917,
            column: 18,
            span: 23058..23059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 917,
            column: 21,
            span: 23059..23062,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 917,
            column: 24,
            span: 23063..23065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 917,
            column: 28,
            span: 23066..23069,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 917,
            column: 31,
            span: 23070..23072,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 917,
            column: 33,
            span: 23073..23074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 917,
            column: 36,
            span: 23074..23077,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 917,
            column: 39,
            span: 23078..23080,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 917,
            column: 43,
            span: 23081..23084,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 917,
            column: 47,
            span: 23085..23088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 917,
            column: 51,
            span: 23089..23092,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 917,
            column: 54,
            span: 23093..23095,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 917,
            column: 56,
            span: 23095..23097,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 917,
            column: 57,
            span: 23097..23098,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 917,
            column: 58,
            span: 23098..23099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 918,
            column: 20,
            span: 23110..23119,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 918,
            column: 21,
            span: 23119..23120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 918,
            column: 26,
            span: 23120..23125,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 918,
            column: 27,
            span: 23125..23126,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 918,
            column: 30,
            span: 23126..23129,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 918,
            column: 31,
            span: 23129..23130,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 919,
            column: 13,
            span: 23141..23143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 919,
            column: 17,
            span: 23144..23147,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 919,
            column: 22,
            span: 23148..23152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 919,
            column: 28,
            span: 23153..23158,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 919,
            column: 29,
            span: 23158..23159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 919,
            column: 32,
            span: 23159..23162,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 919,
            column: 34,
            span: 23163..23164,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 919,
            column: 37,
            span: 23164..23167,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 919,
            column: 38,
            span: 23167..23168,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 919,
            column: 42,
            span: 23169..23172,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 920,
            column: 12,
            span: 23213..23216,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 920,
            column: 13,
            span: 23216..23217,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 922,
            column: 14,
            span: 23227..23232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 922,
            column: 16,
            span: 23233..23234,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 922,
            column: 18,
            span: 23235..23236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 922,
            column: 23,
            span: 23236..23241,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 922,
            column: 24,
            span: 23241..23242,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 922,
            column: 26,
            span: 23243..23244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 922,
            column: 37,
            span: 23245..23255,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 922,
            column: 38,
            span: 23255..23256,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 922,
            column: 46,
            span: 23256..23264,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 922,
            column: 47,
            span: 23264..23265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 922,
            column: 48,
            span: 23265..23266,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 922,
            column: 49,
            span: 23266..23267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 922,
            column: 53,
            span: 23268..23271,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 922,
            column: 54,
            span: 23271..23272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 923,
            column: 17,
            span: 23283..23289,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 923,
            column: 18,
            span: 23289..23290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 923,
            column: 21,
            span: 23290..23293,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 923,
            column: 24,
            span: 23294..23296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 923,
            column: 28,
            span: 23297..23300,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 923,
            column: 31,
            span: 23301..23303,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 923,
            column: 33,
            span: 23304..23305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 923,
            column: 36,
            span: 23305..23308,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 923,
            column: 39,
            span: 23309..23311,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 923,
            column: 43,
            span: 23312..23315,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 923,
            column: 47,
            span: 23316..23319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 923,
            column: 51,
            span: 23320..23323,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 923,
            column: 54,
            span: 23324..23326,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 923,
            column: 56,
            span: 23326..23328,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 923,
            column: 57,
            span: 23328..23329,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 923,
            column: 58,
            span: 23329..23330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 924,
            column: 20,
            span: 23341..23350,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 924,
            column: 21,
            span: 23350..23351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 924,
            column: 26,
            span: 23351..23356,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 924,
            column: 27,
            span: 23356..23357,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 924,
            column: 30,
            span: 23357..23360,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 924,
            column: 31,
            span: 23360..23361,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 925,
            column: 17,
            span: 23372..23378,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 925,
            column: 21,
            span: 23378..23382,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 925,
            column: 22,
            span: 23382..23383,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 925,
            column: 0,
            span: 23383..23387,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 926,
            column: 12,
            span: 23396..23399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 926,
            column: 13,
            span: 23399..23400,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 928,
            column: 11,
            span: 23410..23412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 928,
            column: 15,
            span: 23413..23416,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 928,
            column: 18,
            span: 23417..23419,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 928,
            column: 21,
            span: 23419..23422,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 928,
            column: 26,
            span: 23423..23427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 928,
            column: 32,
            span: 23428..23433,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 928,
            column: 33,
            span: 23433..23434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 928,
            column: 36,
            span: 23434..23437,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 928,
            column: 37,
            span: 23437..23438,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 928,
            column: 42,
            span: 23439..23443,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 928,
            column: 49,
            span: 23444..23450,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 928,
            column: 52,
            span: 23450..23453,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 928,
            column: 53,
            span: 23453..23454,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 928,
            column: 56,
            span: 23454..23457,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 928,
            column: 0,
            span: 23458..23461,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 929,
            column: 0,
            span: 23468..23471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 931,
            column: 16,
            span: 23479..23488,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 931,
            column: 17,
            span: 23488..23489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 931,
            column: 22,
            span: 23489..23494,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 931,
            column: 23,
            span: 23494..23495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 931,
            column: 28,
            span: 23495..23500,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 931,
            column: 29,
            span: 23500..23501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 931,
            column: 32,
            span: 23501..23504,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 931,
            column: 33,
            span: 23504..23505,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 931,
            column: 37,
            span: 23506..23509,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 931,
            column: 38,
            span: 23509..23510,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 931,
            column: 39,
            span: 23510..23511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 932,
            column: 16,
            span: 23530..23539,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 932,
            column: 17,
            span: 23539..23540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 932,
            column: 22,
            span: 23540..23545,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 932,
            column: 23,
            span: 23545..23546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 932,
            column: 28,
            span: 23546..23551,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 932,
            column: 29,
            span: 23551..23552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 932,
            column: 32,
            span: 23552..23555,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 932,
            column: 33,
            span: 23555..23556,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 932,
            column: 35,
            span: 23556..23558,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 932,
            column: 36,
            span: 23558..23559,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 932,
            column: 37,
            span: 23559..23560,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 933,
            column: 13,
            span: 23587..23593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 933,
            column: 19,
            span: 23594..23599,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 933,
            column: 20,
            span: 23599..23600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 933,
            column: 23,
            span: 23600..23603,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 933,
            column: 24,
            span: 23603..23604,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 933,
            column: 27,
            span: 23604..23607,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 933,
            column: 28,
            span: 23607..23608,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 934,
            column: 8,
            span: 23651..23654,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 934,
            column: 9,
            span: 23654..23655,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 936,
            column: 10,
            span: 23661..23666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 936,
            column: 12,
            span: 23667..23668,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 936,
            column: 13,
            span: 23668..23669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 936,
            column: 15,
            span: 23670..23671,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 936,
            column: 17,
            span: 23672..23673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 936,
            column: 20,
            span: 23674..23676,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 936,
            column: 21,
            span: 23676..23677,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 936,
            column: 22,
            span: 23677..23678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 937,
            column: 11,
            span: 23720..23726,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 937,
            column: 12,
            span: 23726..23727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 937,
            column: 13,
            span: 23727..23728,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 937,
            column: 16,
            span: 23729..23731,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 937,
            column: 20,
            span: 23732..23735,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 937,
            column: 24,
            span: 23736..23739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 937,
            column: 26,
            span: 23740..23741,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 937,
            column: 29,
            span: 23742..23744,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 937,
            column: 33,
            span: 23745..23748,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 937,
            column: 34,
            span: 23748..23749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 938,
            column: 6,
            span: 23781..23782,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 938,
            column: 7,
            span: 23782..23783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 938,
            column: 9,
            span: 23784..23785,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 938,
            column: 11,
            span: 23786..23787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 938,
            column: 14,
            span: 23788..23790,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 938,
            column: 15,
            span: 23790..23791,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 938,
            column: 16,
            span: 23791..23792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 939,
            column: 11,
            span: 23797..23803,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 939,
            column: 12,
            span: 23803..23804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 939,
            column: 13,
            span: 23804..23805,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 939,
            column: 16,
            span: 23806..23808,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 939,
            column: 20,
            span: 23809..23812,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 939,
            column: 24,
            span: 23813..23816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 939,
            column: 26,
            span: 23817..23818,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 939,
            column: 29,
            span: 23819..23821,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 939,
            column: 33,
            span: 23822..23825,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 939,
            column: 34,
            span: 23825..23826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 940,
            column: 6,
            span: 23858..23859,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 940,
            column: 7,
            span: 23859..23860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 940,
            column: 9,
            span: 23861..23862,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 940,
            column: 11,
            span: 23863..23864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 940,
            column: 14,
            span: 23865..23867,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 940,
            column: 15,
            span: 23867..23868,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 940,
            column: 16,
            span: 23868..23869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 941,
            column: 11,
            span: 23874..23880,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 941,
            column: 12,
            span: 23880..23881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 941,
            column: 13,
            span: 23881..23882,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 941,
            column: 16,
            span: 23883..23885,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z\"",
        ),
        position: Position {
            line: 941,
            column: 20,
            span: 23886..23889,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 941,
            column: 24,
            span: 23890..23893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 941,
            column: 26,
            span: 23894..23895,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 941,
            column: 29,
            span: 23896..23898,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 941,
            column: 33,
            span: 23899..23902,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 941,
            column: 34,
            span: 23902..23903,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 942,
            column: 10,
            span: 23935..23940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 942,
            column: 12,
            span: 23941..23942,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 942,
            column: 13,
            span: 23942..23943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 942,
            column: 15,
            span: 23944..23945,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 942,
            column: 16,
            span: 23945..23946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 942,
            column: 18,
            span: 23947..23948,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 942,
            column: 20,
            span: 23949..23950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 942,
            column: 23,
            span: 23951..23953,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 942,
            column: 24,
            span: 23953..23954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 942,
            column: 25,
            span: 23954..23955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 943,
            column: 11,
            span: 23960..23966,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 943,
            column: 12,
            span: 23966..23967,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 943,
            column: 13,
            span: 23967..23968,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 943,
            column: 17,
            span: 23969..23972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 943,
            column: 19,
            span: 23973..23974,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 943,
            column: 22,
            span: 23975..23977,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 943,
            column: 25,
            span: 23977..23980,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 943,
            column: 29,
            span: 23981..23984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 943,
            column: 31,
            span: 23985..23986,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 943,
            column: 34,
            span: 23987..23989,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 943,
            column: 37,
            span: 23989..23992,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 943,
            column: 38,
            span: 23992..23993,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 945,
            column: 10,
            span: 24033..24038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 945,
            column: 12,
            span: 24039..24040,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 945,
            column: 13,
            span: 24040..24041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 945,
            column: 15,
            span: 24042..24043,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 945,
            column: 17,
            span: 24044..24045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 945,
            column: 20,
            span: 24046..24048,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 945,
            column: 21,
            span: 24048..24049,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 945,
            column: 22,
            span: 24049..24050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 946,
            column: 11,
            span: 24101..24107,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 946,
            column: 12,
            span: 24107..24108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 946,
            column: 13,
            span: 24108..24109,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 946,
            column: 16,
            span: 24110..24112,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 946,
            column: 20,
            span: 24113..24116,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 946,
            column: 24,
            span: 24117..24120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 946,
            column: 26,
            span: 24121..24122,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 946,
            column: 29,
            span: 24123..24125,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 946,
            column: 33,
            span: 24126..24129,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 946,
            column: 34,
            span: 24129..24130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 947,
            column: 6,
            span: 24162..24163,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 947,
            column: 7,
            span: 24163..24164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 947,
            column: 9,
            span: 24165..24166,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 947,
            column: 11,
            span: 24167..24168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 947,
            column: 14,
            span: 24169..24171,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 947,
            column: 15,
            span: 24171..24172,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 947,
            column: 16,
            span: 24172..24173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 948,
            column: 11,
            span: 24178..24184,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 948,
            column: 12,
            span: 24184..24185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 948,
            column: 13,
            span: 24185..24186,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 948,
            column: 16,
            span: 24187..24189,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 948,
            column: 20,
            span: 24190..24193,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 948,
            column: 24,
            span: 24194..24197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 948,
            column: 26,
            span: 24198..24199,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 948,
            column: 29,
            span: 24200..24202,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 948,
            column: 33,
            span: 24203..24206,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 948,
            column: 34,
            span: 24206..24207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 949,
            column: 6,
            span: 24239..24240,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 949,
            column: 7,
            span: 24240..24241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 949,
            column: 9,
            span: 24242..24243,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 949,
            column: 11,
            span: 24244..24245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 949,
            column: 14,
            span: 24246..24248,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 949,
            column: 15,
            span: 24248..24249,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 949,
            column: 16,
            span: 24249..24250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 950,
            column: 11,
            span: 24255..24261,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 950,
            column: 12,
            span: 24261..24262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 950,
            column: 13,
            span: 24262..24263,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 950,
            column: 16,
            span: 24264..24266,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z\"",
        ),
        position: Position {
            line: 950,
            column: 20,
            span: 24267..24270,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 950,
            column: 24,
            span: 24271..24274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 950,
            column: 26,
            span: 24275..24276,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 950,
            column: 29,
            span: 24277..24279,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 950,
            column: 33,
            span: 24280..24283,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 950,
            column: 34,
            span: 24283..24284,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 951,
            column: 10,
            span: 24316..24321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 951,
            column: 13,
            span: 24322..24324,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 951,
            column: 14,
            span: 24324..24325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 951,
            column: 18,
            span: 24326..24329,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 951,
            column: 20,
            span: 24330..24331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 951,
            column: 23,
            span: 24332..24334,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 951,
            column: 24,
            span: 24334..24335,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 951,
            column: 25,
            span: 24335..24336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 952,
            column: 11,
            span: 24380..24386,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 952,
            column: 12,
            span: 24386..24387,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 952,
            column: 15,
            span: 24387..24390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 952,
            column: 18,
            span: 24391..24393,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 952,
            column: 22,
            span: 24394..24397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 952,
            column: 26,
            span: 24398..24401,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 952,
            column: 29,
            span: 24402..24404,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "21",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 952,
            column: 32,
            span: 24404..24407,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 952,
            column: 33,
            span: 24407..24408,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 954,
            column: 10,
            span: 24414..24419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 954,
            column: 12,
            span: 24420..24421,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 954,
            column: 13,
            span: 24421..24422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 954,
            column: 15,
            span: 24423..24424,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 954,
            column: 17,
            span: 24425..24426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 954,
            column: 20,
            span: 24427..24429,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 954,
            column: 21,
            span: 24429..24430,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 954,
            column: 22,
            span: 24430..24431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 955,
            column: 11,
            span: 24483..24489,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 955,
            column: 12,
            span: 24489..24490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 955,
            column: 13,
            span: 24490..24491,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 955,
            column: 16,
            span: 24492..24494,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 955,
            column: 20,
            span: 24495..24498,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 955,
            column: 24,
            span: 24499..24502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 955,
            column: 26,
            span: 24503..24504,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 955,
            column: 29,
            span: 24505..24507,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 955,
            column: 33,
            span: 24508..24511,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 955,
            column: 34,
            span: 24511..24512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 956,
            column: 6,
            span: 24542..24543,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 956,
            column: 7,
            span: 24543..24544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 956,
            column: 9,
            span: 24545..24546,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 956,
            column: 11,
            span: 24547..24548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 956,
            column: 14,
            span: 24549..24551,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 956,
            column: 15,
            span: 24551..24552,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 956,
            column: 16,
            span: 24552..24553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 957,
            column: 11,
            span: 24558..24564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 957,
            column: 12,
            span: 24564..24565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 957,
            column: 13,
            span: 24565..24566,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 957,
            column: 16,
            span: 24567..24569,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 957,
            column: 20,
            span: 24570..24573,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 957,
            column: 24,
            span: 24574..24577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 957,
            column: 26,
            span: 24578..24579,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 957,
            column: 29,
            span: 24580..24582,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 957,
            column: 33,
            span: 24583..24586,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 957,
            column: 34,
            span: 24586..24587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 958,
            column: 6,
            span: 24617..24618,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 958,
            column: 7,
            span: 24618..24619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 958,
            column: 9,
            span: 24620..24621,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 958,
            column: 11,
            span: 24622..24623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 958,
            column: 14,
            span: 24624..24626,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 958,
            column: 15,
            span: 24626..24627,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 958,
            column: 16,
            span: 24627..24628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 959,
            column: 11,
            span: 24633..24639,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 959,
            column: 12,
            span: 24639..24640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 959,
            column: 13,
            span: 24640..24641,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 959,
            column: 16,
            span: 24642..24644,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z\"",
        ),
        position: Position {
            line: 959,
            column: 20,
            span: 24645..24648,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 959,
            column: 24,
            span: 24649..24652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 959,
            column: 26,
            span: 24653..24654,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 959,
            column: 29,
            span: 24655..24657,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 959,
            column: 33,
            span: 24658..24661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 959,
            column: 34,
            span: 24661..24662,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 960,
            column: 10,
            span: 24692..24697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 960,
            column: 13,
            span: 24698..24700,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 960,
            column: 14,
            span: 24700..24701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 960,
            column: 18,
            span: 24702..24705,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 960,
            column: 20,
            span: 24706..24707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 960,
            column: 23,
            span: 24708..24710,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 960,
            column: 24,
            span: 24710..24711,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 960,
            column: 25,
            span: 24711..24712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 961,
            column: 11,
            span: 24744..24750,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 961,
            column: 12,
            span: 24750..24751,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 961,
            column: 15,
            span: 24751..24754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 961,
            column: 18,
            span: 24755..24757,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 961,
            column: 22,
            span: 24758..24761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 961,
            column: 26,
            span: 24762..24765,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 961,
            column: 29,
            span: 24766..24768,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 961,
            column: 32,
            span: 24768..24771,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 961,
            column: 34,
            span: 24772..24773,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 961,
            column: 37,
            span: 24773..24776,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 961,
            column: 38,
            span: 24776..24777,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 962,
            column: 0,
            span: 24780..24783,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 965,
            column: 0,
            span: 24788..24790,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 967,
            column: 10,
            span: 24851..24856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 967,
            column: 12,
            span: 24857..24858,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 967,
            column: 14,
            span: 24859..24860,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 967,
            column: 0,
            span: 24861..24866,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 968,
            column: 10,
            span: 24871..24876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 968,
            column: 12,
            span: 24877..24878,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 968,
            column: 14,
            span: 24879..24880,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 968,
            column: 0,
            span: 24881..24886,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 969,
            column: 10,
            span: 24891..24896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 969,
            column: 13,
            span: 24897..24899,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 969,
            column: 15,
            span: 24900..24901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 969,
            column: 25,
            span: 24902..24911,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 969,
            column: 26,
            span: 24911..24912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 969,
            column: 30,
            span: 24912..24916,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 969,
            column: 31,
            span: 24916..24917,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 969,
            column: 39,
            span: 24917..24925,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 969,
            column: 40,
            span: 24925..24926,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 969,
            column: 41,
            span: 24926..24927,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 970,
            column: 12,
            span: 24934..24939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xv",
        ),
        position: Position {
            line: 970,
            column: 15,
            span: 24940..24942,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 970,
            column: 17,
            span: 24943..24944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 970,
            column: 22,
            span: 24944..24949,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 970,
            column: 23,
            span: 24949..24950,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 970,
            column: 25,
            span: 24951..24952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 970,
            column: 36,
            span: 24953..24963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 970,
            column: 37,
            span: 24963..24964,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 970,
            column: 45,
            span: 24964..24972,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 970,
            column: 46,
            span: 24972..24973,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 970,
            column: 47,
            span: 24973..24974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 970,
            column: 49,
            span: 24975..24976,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 970,
            column: 51,
            span: 24977..24978,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 970,
            column: 56,
            span: 24979..24983,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 970,
            column: 60,
            span: 24984..24987,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 970,
            column: 61,
            span: 24987..24988,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 971,
            column: 0,
            span: 24995..24997,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 972,
            column: 14,
            span: 25006..25011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yv",
        ),
        position: Position {
            line: 972,
            column: 17,
            span: 25012..25014,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 972,
            column: 19,
            span: 25015..25016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 972,
            column: 24,
            span: 25016..25021,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 972,
            column: 25,
            span: 25021..25022,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 972,
            column: 27,
            span: 25023..25024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 972,
            column: 38,
            span: 25025..25035,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 972,
            column: 39,
            span: 25035..25036,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 972,
            column: 47,
            span: 25036..25044,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 972,
            column: 48,
            span: 25044..25045,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 972,
            column: 49,
            span: 25045..25046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 972,
            column: 51,
            span: 25047..25048,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 972,
            column: 53,
            span: 25049..25050,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 972,
            column: 58,
            span: 25051..25055,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 972,
            column: 62,
            span: 25056..25059,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 972,
            column: 63,
            span: 25059..25060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 973,
            column: 18,
            span: 25069..25078,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 973,
            column: 19,
            span: 25078..25079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 973,
            column: 24,
            span: 25079..25084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 973,
            column: 25,
            span: 25084..25085,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 973,
            column: 28,
            span: 25084..25088,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 973,
            column: 29,
            span: 25088..25089,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 974,
            column: 0,
            span: 25128..25131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 975,
            column: 16,
            span: 25138..25147,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 975,
            column: 17,
            span: 25147..25148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 975,
            column: 22,
            span: 25148..25153,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 975,
            column: 23,
            span: 25153..25154,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 975,
            column: 26,
            span: 25153..25157,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 975,
            column: 27,
            span: 25157..25158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 976,
            column: 12,
            span: 25197..25202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 976,
            column: 13,
            span: 25202..25203,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 976,
            column: 15,
            span: 25202..25205,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 976,
            column: 16,
            span: 25205..25206,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 977,
            column: 8,
            span: 25236..25239,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 977,
            column: 9,
            span: 25239..25240,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 979,
            column: 10,
            span: 25246..25251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 979,
            column: 12,
            span: 25252..25253,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 979,
            column: 14,
            span: 25254..25255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 979,
            column: 17,
            span: 25256..25258,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 979,
            column: 18,
            span: 25258..25259,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 979,
            column: 19,
            span: 25259..25260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 980,
            column: 11,
            span: 25265..25271,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 980,
            column: 12,
            span: 25271..25272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 980,
            column: 13,
            span: 25272..25273,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 980,
            column: 16,
            span: 25274..25276,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 980,
            column: 20,
            span: 25276..25280,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 980,
            column: 24,
            span: 25281..25284,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 980,
            column: 28,
            span: 25285..25288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 980,
            column: 30,
            span: 25289..25290,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 980,
            column: 34,
            span: 25291..25294,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 980,
            column: 38,
            span: 25295..25298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 980,
            column: 40,
            span: 25299..25300,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 980,
            column: 41,
            span: 25300..25301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 981,
            column: 6,
            span: 25306..25307,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 981,
            column: 8,
            span: 25308..25309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 981,
            column: 11,
            span: 25310..25312,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 981,
            column: 12,
            span: 25312..25313,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 981,
            column: 13,
            span: 25313..25314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 982,
            column: 11,
            span: 25319..25325,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 982,
            column: 12,
            span: 25325..25326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 982,
            column: 13,
            span: 25326..25327,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 982,
            column: 16,
            span: 25328..25330,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 982,
            column: 20,
            span: 25330..25334,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 982,
            column: 24,
            span: 25335..25338,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 982,
            column: 28,
            span: 25339..25342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 982,
            column: 30,
            span: 25343..25344,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 982,
            column: 34,
            span: 25345..25348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 982,
            column: 36,
            span: 25349..25350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 982,
            column: 37,
            span: 25350..25351,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 983,
            column: 10,
            span: 25356..25361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 983,
            column: 12,
            span: 25362..25363,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 983,
            column: 13,
            span: 25363..25364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 983,
            column: 15,
            span: 25365..25366,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 983,
            column: 17,
            span: 25367..25368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 983,
            column: 23,
            span: 25369..25374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 983,
            column: 24,
            span: 25374..25375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 983,
            column: 26,
            span: 25375..25377,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 983,
            column: 27,
            span: 25377..25378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 984,
            column: 11,
            span: 25383..25389,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 984,
            column: 12,
            span: 25389..25390,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 984,
            column: 15,
            span: 25390..25393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 984,
            column: 17,
            span: 25394..25395,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 984,
            column: 21,
            span: 25396..25399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 984,
            column: 23,
            span: 25400..25401,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 984,
            column: 26,
            span: 25402..25404,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 984,
            column: 29,
            span: 25404..25407,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 984,
            column: 33,
            span: 25408..25411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 984,
            column: 35,
            span: 25412..25413,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 984,
            column: 39,
            span: 25414..25417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 984,
            column: 41,
            span: 25418..25419,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 984,
            column: 42,
            span: 25419..25420,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 985,
            column: 0,
            span: 25423..25426,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 988,
            column: 0,
            span: 25431..25433,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 990,
            column: 10,
            span: 25513..25518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 990,
            column: 12,
            span: 25519..25520,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 990,
            column: 14,
            span: 25521..25522,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 990,
            column: 0,
            span: 25522..25524,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 991,
            column: 10,
            span: 25529..25534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 991,
            column: 13,
            span: 25535..25537,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 991,
            column: 15,
            span: 25538..25539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 991,
            column: 25,
            span: 25540..25549,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 991,
            column: 26,
            span: 25549..25550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 991,
            column: 30,
            span: 25550..25554,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 991,
            column: 31,
            span: 25554..25555,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 991,
            column: 39,
            span: 25555..25563,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 991,
            column: 40,
            span: 25563..25564,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 991,
            column: 41,
            span: 25564..25565,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 992,
            column: 12,
            span: 25572..25577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xx",
        ),
        position: Position {
            line: 992,
            column: 15,
            span: 25578..25580,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 992,
            column: 17,
            span: 25581..25582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 992,
            column: 22,
            span: 25582..25587,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 992,
            column: 23,
            span: 25587..25588,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 992,
            column: 25,
            span: 25589..25590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 992,
            column: 36,
            span: 25591..25601,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 992,
            column: 37,
            span: 25601..25602,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 992,
            column: 45,
            span: 25602..25610,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 992,
            column: 46,
            span: 25610..25611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 992,
            column: 47,
            span: 25611..25612,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 992,
            column: 48,
            span: 25612..25613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 992,
            column: 52,
            span: 25614..25617,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 992,
            column: 53,
            span: 25617..25618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 993,
            column: 10,
            span: 25627..25628,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 993,
            column: 12,
            span: 25629..25630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 993,
            column: 14,
            span: 25631..25632,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 993,
            column: 16,
            span: 25633..25634,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 993,
            column: 18,
            span: 25634..25636,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 993,
            column: 19,
            span: 25636..25637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 994,
            column: 15,
            span: 25646..25652,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 994,
            column: 16,
            span: 25652..25653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 994,
            column: 22,
            span: 25653..25659,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 994,
            column: 23,
            span: 25659..25660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 994,
            column: 27,
            span: 25660..25664,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 994,
            column: 28,
            span: 25664..25665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 994,
            column: 31,
            span: 25665..25668,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 994,
            column: 32,
            span: 25668..25669,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@XXX\"",
        ),
        position: Position {
            line: 994,
            column: 39,
            span: 25670..25676,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 994,
            column: 40,
            span: 25676..25677,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 994,
            column: 41,
            span: 25677..25678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 995,
            column: 14,
            span: 25687..25692,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 995,
            column: 15,
            span: 25692..25693,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@YYY\"",
        ),
        position: Position {
            line: 995,
            column: 21,
            span: 25693..25699,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 995,
            column: 22,
            span: 25699..25700,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 996,
            column: 10,
            span: 25707..25710,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 996,
            column: 11,
            span: 25710..25711,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 997,
            column: 12,
            span: 25718..25723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xv",
        ),
        position: Position {
            line: 997,
            column: 15,
            span: 25724..25726,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 997,
            column: 17,
            span: 25727..25728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 997,
            column: 22,
            span: 25728..25733,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 997,
            column: 23,
            span: 25733..25734,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 997,
            column: 25,
            span: 25735..25736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 997,
            column: 36,
            span: 25737..25747,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 997,
            column: 37,
            span: 25747..25748,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 997,
            column: 45,
            span: 25748..25756,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 997,
            column: 46,
            span: 25756..25757,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 997,
            column: 47,
            span: 25757..25758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 998,
            column: 10,
            span: 25767..25768,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 998,
            column: 12,
            span: 25769..25770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 998,
            column: 14,
            span: 25771..25772,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 998,
            column: 16,
            span: 25773..25774,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 998,
            column: 18,
            span: 25774..25776,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 998,
            column: 19,
            span: 25776..25777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 998,
            column: 25,
            span: 25778..25783,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 998,
            column: 26,
            span: 25783..25784,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@XXX\"",
        ),
        position: Position {
            line: 998,
            column: 32,
            span: 25784..25790,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 998,
            column: 33,
            span: 25790..25791,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 999,
            column: 10,
            span: 25798..25801,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 999,
            column: 11,
            span: 25801..25802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1000,
            column: 16,
            span: 25809..25818,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1000,
            column: 17,
            span: 25818..25819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 1000,
            column: 22,
            span: 25819..25824,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1000,
            column: 23,
            span: 25824..25825,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1000,
            column: 26,
            span: 25824..25828,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1000,
            column: 27,
            span: 25828..25829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 1001,
            column: 12,
            span: 25836..25841,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1001,
            column: 13,
            span: 25841..25842,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1001,
            column: 16,
            span: 25841..25845,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1001,
            column: 17,
            span: 25845..25846,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1002,
            column: 8,
            span: 25851..25854,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1002,
            column: 9,
            span: 25854..25855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1003,
            column: 11,
            span: 25860..25866,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1003,
            column: 12,
            span: 25866..25867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1003,
            column: 14,
            span: 25867..25869,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1003,
            column: 15,
            span: 25869..25870,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1003,
            column: 16,
            span: 25870..25871,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1003,
            column: 19,
            span: 25872..25874,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1003,
            column: 23,
            span: 25874..25878,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1003,
            column: 24,
            span: 25878..25879,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1003,
            column: 25,
            span: 25879..25880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1003,
            column: 32,
            span: 25881..25887,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1003,
            column: 33,
            span: 25887..25888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1003,
            column: 34,
            span: 25888..25889,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1003,
            column: 37,
            span: 25890..25892,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1003,
            column: 39,
            span: 25892..25894,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1003,
            column: 40,
            span: 25894..25895,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1004,
            column: 10,
            span: 25900..25905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 1004,
            column: 13,
            span: 25906..25908,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1004,
            column: 14,
            span: 25908..25909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 1004,
            column: 18,
            span: 25910..25913,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1004,
            column: 20,
            span: 25914..25915,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 1004,
            column: 26,
            span: 25916..25921,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1004,
            column: 27,
            span: 25921..25922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1004,
            column: 29,
            span: 25922..25924,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1004,
            column: 30,
            span: 25924..25925,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1004,
            column: 31,
            span: 25925..25926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1004,
            column: 38,
            span: 25927..25933,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1004,
            column: 39,
            span: 25933..25934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1004,
            column: 40,
            span: 25934..25935,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1004,
            column: 43,
            span: 25936..25938,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1004,
            column: 45,
            span: 25938..25940,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1004,
            column: 46,
            span: 25940..25941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1005,
            column: 11,
            span: 25946..25952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1005,
            column: 12,
            span: 25952..25953,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1005,
            column: 15,
            span: 25953..25956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 1005,
            column: 18,
            span: 25957..25959,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1005,
            column: 22,
            span: 25960..25963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1005,
            column: 29,
            span: 25964..25970,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1005,
            column: 30,
            span: 25970..25971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 1005,
            column: 34,
            span: 25971..25975,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1005,
            column: 35,
            span: 25975..25976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 1005,
            column: 38,
            span: 25976..25979,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1005,
            column: 39,
            span: 25979..25980,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@YYY\"",
        ),
        position: Position {
            line: 1005,
            column: 46,
            span: 25981..25987,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1005,
            column: 47,
            span: 25987..25988,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1005,
            column: 48,
            span: 25988..25989,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1007,
            column: 10,
            span: 26022..26027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1007,
            column: 12,
            span: 26028..26029,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1007,
            column: 14,
            span: 26030..26031,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1007,
            column: 0,
            span: 26031..26033,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1008,
            column: 10,
            span: 26038..26043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 1008,
            column: 12,
            span: 26044..26045,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1008,
            column: 14,
            span: 26046..26047,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1008,
            column: 0,
            span: 26047..26049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1009,
            column: 7,
            span: 26054..26056,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1009,
            column: 9,
            span: 26057..26058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1009,
            column: 19,
            span: 26059..26068,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1009,
            column: 20,
            span: 26068..26069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 1009,
            column: 24,
            span: 26069..26073,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1009,
            column: 25,
            span: 26073..26074,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1009,
            column: 33,
            span: 26074..26082,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1009,
            column: 34,
            span: 26082..26083,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1009,
            column: 35,
            span: 26083..26084,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1010,
            column: 12,
            span: 26091..26096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xx",
        ),
        position: Position {
            line: 1010,
            column: 15,
            span: 26097..26099,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 1010,
            column: 17,
            span: 26100..26101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 1010,
            column: 22,
            span: 26101..26106,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 1010,
            column: 23,
            span: 26106..26107,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1010,
            column: 25,
            span: 26108..26109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 1010,
            column: 36,
            span: 26110..26120,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1010,
            column: 37,
            span: 26120..26121,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1010,
            column: 45,
            span: 26121..26129,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1010,
            column: 46,
            span: 26129..26130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 1010,
            column: 47,
            span: 26130..26131,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1010,
            column: 48,
            span: 26131..26132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 1010,
            column: 52,
            span: 26133..26136,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1010,
            column: 53,
            span: 26136..26137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 1011,
            column: 10,
            span: 26146..26147,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1011,
            column: 12,
            span: 26148..26149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 1011,
            column: 14,
            span: 26150..26151,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1011,
            column: 16,
            span: 26152..26153,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1011,
            column: 18,
            span: 26153..26155,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1011,
            column: 19,
            span: 26155..26156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1012,
            column: 15,
            span: 26165..26171,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1012,
            column: 16,
            span: 26171..26172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1012,
            column: 22,
            span: 26172..26178,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1012,
            column: 23,
            span: 26178..26179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 1012,
            column: 27,
            span: 26179..26183,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1012,
            column: 28,
            span: 26183..26184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 1012,
            column: 31,
            span: 26184..26187,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1012,
            column: 32,
            span: 26187..26188,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXX\"",
        ),
        position: Position {
            line: 1012,
            column: 38,
            span: 26189..26194,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1012,
            column: 39,
            span: 26194..26195,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1012,
            column: 40,
            span: 26195..26196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 1013,
            column: 14,
            span: 26205..26210,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1013,
            column: 15,
            span: 26210..26211,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"YYY\"",
        ),
        position: Position {
            line: 1013,
            column: 20,
            span: 26211..26216,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1013,
            column: 21,
            span: 26216..26217,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1014,
            column: 10,
            span: 26224..26227,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1014,
            column: 11,
            span: 26227..26228,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1015,
            column: 12,
            span: 26235..26240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xv",
        ),
        position: Position {
            line: 1015,
            column: 15,
            span: 26241..26243,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 1015,
            column: 17,
            span: 26244..26245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 1015,
            column: 22,
            span: 26245..26250,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 1015,
            column: 23,
            span: 26250..26251,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1015,
            column: 25,
            span: 26252..26253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 1015,
            column: 36,
            span: 26254..26264,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1015,
            column: 37,
            span: 26264..26265,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1015,
            column: 45,
            span: 26265..26273,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1015,
            column: 46,
            span: 26273..26274,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1015,
            column: 47,
            span: 26274..26275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1016,
            column: 10,
            span: 26284..26285,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1016,
            column: 12,
            span: 26286..26287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1016,
            column: 14,
            span: 26288..26289,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1016,
            column: 16,
            span: 26290..26291,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1016,
            column: 18,
            span: 26291..26293,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1016,
            column: 19,
            span: 26293..26294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 1016,
            column: 25,
            span: 26295..26300,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1016,
            column: 26,
            span: 26300..26301,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXX\"",
        ),
        position: Position {
            line: 1016,
            column: 31,
            span: 26301..26306,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1016,
            column: 32,
            span: 26306..26307,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1017,
            column: 10,
            span: 26314..26317,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1017,
            column: 11,
            span: 26317..26318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1018,
            column: 16,
            span: 26325..26334,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1018,
            column: 17,
            span: 26334..26335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 1018,
            column: 22,
            span: 26335..26340,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1018,
            column: 23,
            span: 26340..26341,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1018,
            column: 26,
            span: 26340..26344,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1018,
            column: 27,
            span: 26344..26345,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1019,
            column: 13,
            span: 26352..26358,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1019,
            column: 0,
            span: 26358..26362,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1020,
            column: 8,
            span: 26367..26370,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1020,
            column: 9,
            span: 26370..26371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1021,
            column: 11,
            span: 26376..26382,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1021,
            column: 12,
            span: 26382..26383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1021,
            column: 14,
            span: 26383..26385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1021,
            column: 15,
            span: 26385..26386,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1021,
            column: 16,
            span: 26386..26387,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1021,
            column: 19,
            span: 26388..26390,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1021,
            column: 23,
            span: 26390..26394,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1021,
            column: 24,
            span: 26394..26395,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1021,
            column: 25,
            span: 26395..26396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1021,
            column: 32,
            span: 26397..26403,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1021,
            column: 33,
            span: 26403..26404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1021,
            column: 34,
            span: 26404..26405,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1021,
            column: 37,
            span: 26406..26408,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1021,
            column: 39,
            span: 26408..26410,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1021,
            column: 40,
            span: 26410..26411,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1022,
            column: 10,
            span: 26416..26421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 1022,
            column: 13,
            span: 26422..26424,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1022,
            column: 14,
            span: 26424..26425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 1022,
            column: 18,
            span: 26426..26429,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1022,
            column: 20,
            span: 26430..26431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 1022,
            column: 26,
            span: 26432..26437,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1022,
            column: 27,
            span: 26437..26438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1022,
            column: 29,
            span: 26438..26440,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1022,
            column: 30,
            span: 26440..26441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1023,
            column: 11,
            span: 26446..26452,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1023,
            column: 12,
            span: 26452..26453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1023,
            column: 13,
            span: 26453..26454,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1023,
            column: 16,
            span: 26455..26457,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1023,
            column: 18,
            span: 26457..26459,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1023,
            column: 22,
            span: 26460..26463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 1023,
            column: 24,
            span: 26464..26465,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1023,
            column: 27,
            span: 26466..26468,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1023,
            column: 29,
            span: 26468..26470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1023,
            column: 30,
            span: 26470..26471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1025,
            column: 11,
            span: 26513..26519,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1025,
            column: 12,
            span: 26519..26520,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1025,
            column: 15,
            span: 26520..26523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 1025,
            column: 18,
            span: 26524..26526,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1025,
            column: 22,
            span: 26527..26530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1025,
            column: 29,
            span: 26531..26537,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1025,
            column: 30,
            span: 26537..26538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 1025,
            column: 34,
            span: 26538..26542,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1025,
            column: 35,
            span: 26542..26543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 1025,
            column: 38,
            span: 26543..26546,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1025,
            column: 39,
            span: 26546..26547,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+%.%w+:%d+: YYY\"",
        ),
        position: Position {
            line: 1025,
            column: 59,
            span: 26548..26567,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1025,
            column: 60,
            span: 26567..26568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1025,
            column: 61,
            span: 26568..26569,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1026,
            column: 0,
            span: 26572..26575,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1030,
            column: 8,
            span: 26653..26658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1030,
            column: 0,
            span: 26659..26661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1031,
            column: 5,
            span: 26664..26666,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1031,
            column: 7,
            span: 26667..26668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1031,
            column: 17,
            span: 26669..26678,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1031,
            column: 18,
            span: 26678..26679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 1031,
            column: 22,
            span: 26679..26683,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1031,
            column: 23,
            span: 26683..26684,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1031,
            column: 31,
            span: 26684..26692,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1031,
            column: 32,
            span: 26692..26693,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1031,
            column: 33,
            span: 26693..26694,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1033,
            column: 10,
            span: 26721..26726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1033,
            column: 12,
            span: 26727..26728,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 1033,
            column: 14,
            span: 26729..26730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 1033,
            column: 19,
            span: 26730..26735,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 1033,
            column: 20,
            span: 26735..26736,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1033,
            column: 22,
            span: 26737..26738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 1033,
            column: 33,
            span: 26739..26749,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1033,
            column: 34,
            span: 26749..26750,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1033,
            column: 42,
            span: 26750..26758,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1033,
            column: 43,
            span: 26758..26759,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1033,
            column: 44,
            span: 26759..26760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 1033,
            column: 47,
            span: 26761..26763,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1033,
            column: 48,
            span: 26763..26764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exit",
        ),
        position: Position {
            line: 1033,
            column: 52,
            span: 26764..26768,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1033,
            column: 53,
            span: 26768..26769,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 1033,
            column: 58,
            span: 26769..26774,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1033,
            column: 59,
            span: 26774..26775,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1033,
            column: 63,
            span: 26776..26779,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1033,
            column: 64,
            span: 26779..26780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1034,
            column: 7,
            span: 26785..26787,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1034,
            column: 9,
            span: 26788..26789,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1034,
            column: 0,
            span: 26790..26793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1035,
            column: 14,
            span: 26798..26807,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1035,
            column: 15,
            span: 26807..26808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 1035,
            column: 20,
            span: 26808..26813,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1035,
            column: 21,
            span: 26813..26814,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1035,
            column: 22,
            span: 26814..26815,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1036,
            column: 6,
            span: 26818..26821,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1036,
            column: 7,
            span: 26821..26822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1037,
            column: 5,
            span: 26825..26827,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1037,
            column: 6,
            span: 26827..26828,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1037,
            column: 7,
            span: 26828..26829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1038,
            column: 9,
            span: 26862..26868,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1038,
            column: 10,
            span: 26868..26869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1038,
            column: 12,
            span: 26869..26871,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1038,
            column: 15,
            span: 26872..26874,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1038,
            column: 19,
            span: 26875..26878,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1038,
            column: 20,
            span: 26878..26879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1039,
            column: 17,
            span: 26917..26931,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1039,
            column: 18,
            span: 26931..26932,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1039,
            column: 19,
            span: 26932..26933,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 1042,
            column: 5,
            span: 26938..26940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        position: Position {
            line: 1042,
            column: 12,
            span: 26941..26947,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1042,
            column: 13,
            span: 26947..26948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 1042,
            column: 15,
            span: 26948..26950,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1042,
            column: 16,
            span: 26950..26951,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"T\"",
        ),
        position: Position {
            line: 1042,
            column: 20,
            span: 26952..26955,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1042,
            column: 21,
            span: 26955..26956,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 1042,
            column: 0,
            span: 26957..26961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1043,
            column: 10,
            span: 26966..26971,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1043,
            column: 11,
            span: 26971..26972,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"to-be-closed variables x coroutines in C\"",
        ),
        position: Position {
            line: 1043,
            column: 53,
            span: 26972..27014,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1043,
            column: 54,
            span: 27014..27015,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1044,
            column: 0,
            span: 27020..27022,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1045,
            column: 12,
            span: 27029..27034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        position: Position {
            line: 1045,
            column: 18,
            span: 27035..27040,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1045,
            column: 20,
            span: 27041..27042,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1045,
            column: 0,
            span: 27042..27044,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1046,
            column: 12,
            span: 27051..27056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 1046,
            column: 18,
            span: 27057..27062,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1046,
            column: 20,
            span: 27063..27064,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1046,
            column: 0,
            span: 27064..27066,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1047,
            column: 12,
            span: 27073..27078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1047,
            column: 14,
            span: 27079..27080,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1047,
            column: 16,
            span: 27081..27082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1047,
            column: 18,
            span: 27083..27084,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1047,
            column: 19,
            span: 27084..27085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 1047,
            column: 28,
            span: 27085..27094,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n      toclose 1\n      toclose 2\n      return .\n    ]]",
        ),
        position: Position {
            line: 1051,
            column: 7,
            span: 27095..27151,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1053,
            column: 12,
            span: 27159..27164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 1053,
            column: 16,
            span: 27165..27168,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1053,
            column: 18,
            span: 27169..27170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 1053,
            column: 29,
            span: 27171..27181,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1053,
            column: 30,
            span: 27181..27182,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1053,
            column: 38,
            span: 27182..27190,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1053,
            column: 39,
            span: 27190..27191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 1053,
            column: 40,
            span: 27191..27192,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1053,
            column: 41,
            span: 27192..27193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 1053,
            column: 45,
            span: 27194..27197,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1053,
            column: 46,
            span: 27197..27198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 1054,
            column: 14,
            span: 27207..27212,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1054,
            column: 16,
            span: 27213..27214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 1054,
            column: 22,
            span: 27215..27220,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1054,
            column: 24,
            span: 27221..27222,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1054,
            column: 0,
            span: 27222..27224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        position: Position {
            line: 1055,
            column: 14,
            span: 27233..27238,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1055,
            column: 16,
            span: 27239..27240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1055,
            column: 26,
            span: 27241..27250,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1055,
            column: 27,
            span: 27250..27251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 1055,
            column: 32,
            span: 27251..27256,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1055,
            column: 33,
            span: 27256..27257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 1055,
            column: 38,
            span: 27257..27262,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1055,
            column: 39,
            span: 27262..27263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        position: Position {
            line: 1055,
            column: 45,
            span: 27264..27269,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1055,
            column: 46,
            span: 27269..27270,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1056,
            column: 10,
            span: 27277..27280,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1056,
            column: 11,
            span: 27280..27281,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1058,
            column: 12,
            span: 27289..27294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1058,
            column: 15,
            span: 27295..27297,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1058,
            column: 17,
            span: 27298..27299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1058,
            column: 27,
            span: 27300..27309,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1058,
            column: 28,
            span: 27309..27310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 1058,
            column: 32,
            span: 27310..27314,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1058,
            column: 33,
            span: 27314..27315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1058,
            column: 34,
            span: 27315..27316,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1058,
            column: 35,
            span: 27316..27317,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1059,
            column: 12,
            span: 27324..27329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ct",
        ),
        position: Position {
            line: 1059,
            column: 15,
            span: 27330..27332,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1059,
            column: 16,
            span: 27332..27333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1059,
            column: 20,
            span: 27334..27337,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1059,
            column: 22,
            span: 27338..27339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1059,
            column: 25,
            span: 27340..27342,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1059,
            column: 26,
            span: 27342..27343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 1059,
            column: 29,
            span: 27343..27346,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1059,
            column: 30,
            span: 27346..27347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 1059,
            column: 34,
            span: 27348..27351,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1059,
            column: 35,
            span: 27351..27352,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1059,
            column: 38,
            span: 27352..27355,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1059,
            column: 39,
            span: 27355..27356,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1059,
            column: 42,
            span: 27356..27359,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1059,
            column: 43,
            span: 27359..27360,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1059,
            column: 46,
            span: 27360..27363,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1059,
            column: 47,
            span: 27363..27364,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1059,
            column: 49,
            span: 27364..27366,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1059,
            column: 50,
            span: 27366..27367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1061,
            column: 13,
            span: 27452..27458,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1061,
            column: 14,
            span: 27458..27459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ct",
        ),
        position: Position {
            line: 1061,
            column: 16,
            span: 27459..27461,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1061,
            column: 19,
            span: 27462..27464,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1061,
            column: 21,
            span: 27464..27466,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1061,
            column: 25,
            span: 27467..27470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1061,
            column: 29,
            span: 27471..27474,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1061,
            column: 32,
            span: 27475..27477,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1061,
            column: 34,
            span: 27477..27479,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1061,
            column: 35,
            span: 27479..27480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ct",
        ),
        position: Position {
            line: 1063,
            column: 9,
            span: 27533..27535,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1063,
            column: 10,
            span: 27535..27536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1063,
            column: 14,
            span: 27537..27540,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1063,
            column: 16,
            span: 27541..27542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1063,
            column: 19,
            span: 27543..27545,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1063,
            column: 20,
            span: 27545..27546,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1063,
            column: 23,
            span: 27545..27549,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1063,
            column: 24,
            span: 27549..27550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1064,
            column: 13,
            span: 27557..27563,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1064,
            column: 14,
            span: 27563..27564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ct",
        ),
        position: Position {
            line: 1064,
            column: 16,
            span: 27564..27566,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1064,
            column: 19,
            span: 27567..27569,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1064,
            column: 21,
            span: 27569..27571,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1064,
            column: 25,
            span: 27572..27575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1064,
            column: 29,
            span: 27576..27579,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1064,
            column: 32,
            span: 27580..27582,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1064,
            column: 36,
            span: 27582..27586,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1064,
            column: 37,
            span: 27586..27587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1065,
            column: 10,
            span: 27594..27597,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1065,
            column: 12,
            span: 27598..27599,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1065,
            column: 14,
            span: 27600..27601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1065,
            column: 17,
            span: 27602..27604,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1065,
            column: 18,
            span: 27604..27605,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1065,
            column: 21,
            span: 27604..27608,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1065,
            column: 22,
            span: 27608..27609,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1065,
            column: 24,
            span: 27610..27611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1066,
            column: 13,
            span: 27635..27641,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1066,
            column: 14,
            span: 27641..27642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1066,
            column: 17,
            span: 27642..27645,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1066,
            column: 18,
            span: 27645..27646,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1066,
            column: 19,
            span: 27645..27647,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1066,
            column: 20,
            span: 27647..27648,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1066,
            column: 23,
            span: 27649..27651,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1066,
            column: 26,
            span: 27651..27654,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1066,
            column: 30,
            span: 27655..27658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1066,
            column: 34,
            span: 27659..27662,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1066,
            column: 35,
            span: 27662..27663,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1066,
            column: 36,
            span: 27662..27664,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1066,
            column: 37,
            span: 27664..27665,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1066,
            column: 40,
            span: 27666..27668,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1066,
            column: 43,
            span: 27668..27671,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1066,
            column: 47,
            span: 27672..27675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1066,
            column: 51,
            span: 27676..27679,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1066,
            column: 52,
            span: 27679..27680,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1066,
            column: 53,
            span: 27679..27681,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1066,
            column: 54,
            span: 27681..27682,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1066,
            column: 57,
            span: 27683..27685,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1066,
            column: 60,
            span: 27685..27688,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1066,
            column: 64,
            span: 27689..27692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1066,
            column: 68,
            span: 27693..27696,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1066,
            column: 69,
            span: 27696..27697,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1066,
            column: 70,
            span: 27696..27698,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1066,
            column: 71,
            span: 27698..27699,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1066,
            column: 74,
            span: 27700..27702,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1066,
            column: 78,
            span: 27703..27706,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1066,
            column: 79,
            span: 27706..27707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1067,
            column: 13,
            span: 27714..27720,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1067,
            column: 14,
            span: 27720..27721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        position: Position {
            line: 1067,
            column: 19,
            span: 27721..27726,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1067,
            column: 22,
            span: 27727..27729,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1067,
            column: 26,
            span: 27729..27733,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1067,
            column: 27,
            span: 27733..27734,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1068,
            column: 0,
            span: 27739..27742,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1070,
            column: 0,
            span: 27748..27750,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1071,
            column: 12,
            span: 27757..27762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1071,
            column: 14,
            span: 27763..27764,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1071,
            column: 16,
            span: 27765..27766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1071,
            column: 18,
            span: 27767..27768,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1071,
            column: 19,
            span: 27768..27769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 1071,
            column: 28,
            span: 27769..27778,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n      toclose 1\n      return .\n    ]]",
        ),
        position: Position {
            line: 1074,
            column: 7,
            span: 27779..27819,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1076,
            column: 12,
            span: 27827..27832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 1076,
            column: 16,
            span: 27833..27836,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1076,
            column: 18,
            span: 27837..27838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 1076,
            column: 29,
            span: 27839..27849,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1076,
            column: 30,
            span: 27849..27850,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1076,
            column: 38,
            span: 27850..27858,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1076,
            column: 39,
            span: 27858..27859,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1076,
            column: 40,
            span: 27859..27860,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1077,
            column: 14,
            span: 27869..27874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "temp",
        ),
        position: Position {
            line: 1077,
            column: 0,
            span: 27875..27879,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1078,
            column: 14,
            span: 27888..27893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1078,
            column: 16,
            span: 27894..27895,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 1078,
            column: 18,
            span: 27896..27897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 1078,
            column: 23,
            span: 27897..27902,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 1078,
            column: 24,
            span: 27902..27903,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1078,
            column: 26,
            span: 27904..27905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 1078,
            column: 37,
            span: 27906..27916,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1078,
            column: 38,
            span: 27916..27917,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1078,
            column: 46,
            span: 27917..27925,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1078,
            column: 47,
            span: 27925..27926,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1078,
            column: 48,
            span: 27926..27927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1079,
            column: 20,
            span: 27938..27947,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1079,
            column: 21,
            span: 27947..27948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 1079,
            column: 26,
            span: 27948..27953,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1079,
            column: 27,
            span: 27953..27954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "temp",
        ),
        position: Position {
            line: 1079,
            column: 31,
            span: 27954..27958,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1079,
            column: 32,
            span: 27958..27959,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1080,
            column: 17,
            span: 27970..27976,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1080,
            column: 19,
            span: 27976..27978,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1080,
            column: 20,
            span: 27978..27979,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1080,
            column: 22,
            span: 27979..27981,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1080,
            column: 23,
            span: 27981..27982,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1080,
            column: 25,
            span: 27982..27984,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1081,
            column: 12,
            span: 28010..28013,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1081,
            column: 13,
            span: 28013..28014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "temp",
        ),
        position: Position {
            line: 1082,
            column: 13,
            span: 28023..28027,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1082,
            column: 15,
            span: 28028..28029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1082,
            column: 25,
            span: 28030..28039,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1082,
            column: 26,
            span: 28039..28040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 1082,
            column: 31,
            span: 28040..28045,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1082,
            column: 32,
            span: 28045..28046,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"closing obj\"",
        ),
        position: Position {
            line: 1082,
            column: 45,
            span: 28046..28059,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1082,
            column: 46,
            span: 28059..28060,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1083,
            column: 15,
            span: 28069..28075,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1083,
            column: 17,
            span: 28075..28077,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1083,
            column: 18,
            span: 28077..28078,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1083,
            column: 20,
            span: 28078..28080,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1083,
            column: 21,
            span: 28080..28081,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1083,
            column: 23,
            span: 28081..28083,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1084,
            column: 10,
            span: 28107..28110,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1084,
            column: 11,
            span: 28110..28111,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1086,
            column: 12,
            span: 28119..28124,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1086,
            column: 15,
            span: 28125..28127,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1086,
            column: 17,
            span: 28128..28129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1086,
            column: 27,
            span: 28130..28139,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1086,
            column: 28,
            span: 28139..28140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 1086,
            column: 32,
            span: 28140..28144,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1086,
            column: 33,
            span: 28144..28145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1086,
            column: 34,
            span: 28145..28146,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1086,
            column: 35,
            span: 28146..28147,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1087,
            column: 12,
            span: 28154..28159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1087,
            column: 16,
            span: 28160..28163,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1087,
            column: 18,
            span: 28164..28165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1087,
            column: 21,
            span: 28166..28168,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1087,
            column: 22,
            span: 28168..28169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 1087,
            column: 25,
            span: 28169..28172,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1087,
            column: 26,
            span: 28172..28173,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1087,
            column: 29,
            span: 28173..28176,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1087,
            column: 30,
            span: 28176..28177,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1087,
            column: 33,
            span: 28177..28180,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1087,
            column: 34,
            span: 28180..28181,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1087,
            column: 36,
            span: 28181..28183,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1087,
            column: 37,
            span: 28183..28184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1088,
            column: 13,
            span: 28214..28220,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1088,
            column: 14,
            span: 28220..28221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1088,
            column: 17,
            span: 28221..28224,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1088,
            column: 20,
            span: 28225..28227,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"closing obj\"",
        ),
        position: Position {
            line: 1088,
            column: 34,
            span: 28228..28241,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1088,
            column: 35,
            span: 28241..28242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1089,
            column: 10,
            span: 28249..28252,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1089,
            column: 12,
            span: 28253..28254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1089,
            column: 15,
            span: 28255..28257,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1089,
            column: 16,
            span: 28257..28258,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"closing x\"",
        ),
        position: Position {
            line: 1089,
            column: 27,
            span: 28258..28269,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1089,
            column: 28,
            span: 28269..28270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1090,
            column: 13,
            span: 28277..28283,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1090,
            column: 14,
            span: 28283..28284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1090,
            column: 17,
            span: 28284..28287,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1090,
            column: 20,
            span: 28288..28290,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"closing x\"",
        ),
        position: Position {
            line: 1090,
            column: 32,
            span: 28291..28302,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1090,
            column: 33,
            span: 28302..28303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1091,
            column: 10,
            span: 28310..28313,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1091,
            column: 12,
            span: 28314..28315,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1091,
            column: 14,
            span: 28316..28317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1091,
            column: 17,
            span: 28318..28320,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1091,
            column: 18,
            span: 28320..28321,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1091,
            column: 19,
            span: 28321..28322,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1091,
            column: 21,
            span: 28323..28324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1092,
            column: 13,
            span: 28331..28337,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1092,
            column: 14,
            span: 28337..28338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1092,
            column: 17,
            span: 28338..28341,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1092,
            column: 18,
            span: 28341..28342,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1092,
            column: 19,
            span: 28341..28343,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1092,
            column: 20,
            span: 28343..28344,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1092,
            column: 23,
            span: 28345..28347,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1092,
            column: 26,
            span: 28347..28350,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1092,
            column: 30,
            span: 28351..28354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1092,
            column: 34,
            span: 28355..28358,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1092,
            column: 35,
            span: 28358..28359,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1092,
            column: 36,
            span: 28358..28360,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1092,
            column: 37,
            span: 28360..28361,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1092,
            column: 40,
            span: 28362..28364,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1092,
            column: 44,
            span: 28365..28368,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1092,
            column: 45,
            span: 28368..28369,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1093,
            column: 0,
            span: 28374..28377,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1095,
            column: 0,
            span: 28383..28385,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1097,
            column: 12,
            span: 28439..28444,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1097,
            column: 14,
            span: 28445..28446,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1097,
            column: 16,
            span: 28447..28448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1097,
            column: 18,
            span: 28449..28450,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1097,
            column: 19,
            span: 28450..28451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 1097,
            column: 28,
            span: 28451..28460,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n      toclose 1\n      closeslot 1\n    ]]",
        ),
        position: Position {
            line: 1100,
            column: 7,
            span: 28461..28504,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1101,
            column: 12,
            span: 28511..28516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 1101,
            column: 16,
            span: 28517..28520,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1101,
            column: 18,
            span: 28521..28522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 1101,
            column: 29,
            span: 28523..28533,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1101,
            column: 30,
            span: 28533..28534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1101,
            column: 39,
            span: 28534..28543,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1101,
            column: 40,
            span: 28543..28544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 1101,
            column: 45,
            span: 28544..28549,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1101,
            column: 46,
            span: 28549..28550,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1102,
            column: 12,
            span: 28557..28562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1102,
            column: 15,
            span: 28563..28565,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1102,
            column: 17,
            span: 28566..28567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1102,
            column: 27,
            span: 28568..28577,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1102,
            column: 28,
            span: 28577..28578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 1102,
            column: 34,
            span: 28578..28584,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1102,
            column: 35,
            span: 28584..28585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1102,
            column: 36,
            span: 28585..28586,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1102,
            column: 37,
            span: 28586..28587,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1103,
            column: 12,
            span: 28594..28599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 1103,
            column: 15,
            span: 28600..28602,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1103,
            column: 16,
            span: 28602..28603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 1103,
            column: 20,
            span: 28604..28607,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1103,
            column: 22,
            span: 28608..28609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1103,
            column: 32,
            span: 28610..28619,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1103,
            column: 33,
            span: 28619..28620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 1103,
            column: 39,
            span: 28620..28626,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1103,
            column: 40,
            span: 28626..28627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 1103,
            column: 42,
            span: 28627..28629,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1103,
            column: 43,
            span: 28629..28630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 1103,
            column: 47,
            span: 28631..28634,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1103,
            column: 48,
            span: 28634..28635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1104,
            column: 13,
            span: 28642..28648,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1104,
            column: 14,
            span: 28648..28649,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1104,
            column: 17,
            span: 28649..28652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 1104,
            column: 20,
            span: 28653..28655,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1104,
            column: 24,
            span: 28656..28659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1104,
            column: 31,
            span: 28660..28666,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1104,
            column: 32,
            span: 28666..28667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 1104,
            column: 36,
            span: 28667..28671,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1104,
            column: 37,
            span: 28671..28672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 1104,
            column: 40,
            span: 28672..28675,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1104,
            column: 41,
            span: 28675..28676,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to yield across\"",
        ),
        position: Position {
            line: 1104,
            column: 67,
            span: 28677..28702,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1104,
            column: 68,
            span: 28702..28703,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1104,
            column: 69,
            span: 28703..28704,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1107,
            column: 12,
            span: 28745..28750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1107,
            column: 14,
            span: 28751..28752,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1107,
            column: 16,
            span: 28753..28754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1107,
            column: 18,
            span: 28755..28756,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1107,
            column: 19,
            span: 28756..28757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 1107,
            column: 28,
            span: 28757..28766,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n      toclose 1\n    ]]",
        ),
        position: Position {
            line: 1109,
            column: 7,
            span: 28767..28792,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1110,
            column: 12,
            span: 28799..28804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 1110,
            column: 15,
            span: 28805..28807,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1110,
            column: 16,
            span: 28807..28808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 1110,
            column: 20,
            span: 28809..28812,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1110,
            column: 22,
            span: 28813..28814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 1110,
            column: 28,
            span: 28815..28820,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1110,
            column: 29,
            span: 28820..28821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1110,
            column: 30,
            span: 28821..28822,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1110,
            column: 31,
            span: 28822..28823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "obj",
        ),
        position: Position {
            line: 1110,
            column: 35,
            span: 28824..28827,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1110,
            column: 36,
            span: 28827..28828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1111,
            column: 13,
            span: 28835..28841,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1111,
            column: 14,
            span: 28841..28842,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1111,
            column: 17,
            span: 28842..28845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 1111,
            column: 20,
            span: 28846..28848,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1111,
            column: 24,
            span: 28849..28852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1111,
            column: 31,
            span: 28853..28859,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1111,
            column: 32,
            span: 28859..28860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 1111,
            column: 36,
            span: 28860..28864,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1111,
            column: 37,
            span: 28864..28865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 1111,
            column: 40,
            span: 28865..28868,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1111,
            column: 41,
            span: 28868..28869,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to yield from outside\"",
        ),
        position: Position {
            line: 1111,
            column: 73,
            span: 28870..28901,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1111,
            column: 74,
            span: 28901..28902,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1111,
            column: 75,
            span: 28902..28903,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1112,
            column: 0,
            span: 28908..28911,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1113,
            column: 0,
            span: 28914..28917,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1118,
            column: 0,
            span: 28972..28974,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1119,
            column: 10,
            span: 28979..28984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numopen",
        ),
        position: Position {
            line: 1119,
            column: 18,
            span: 28985..28992,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1119,
            column: 20,
            span: 28993..28994,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1119,
            column: 0,
            span: 28994..28996,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1120,
            column: 10,
            span: 29001..29006,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1120,
            column: 19,
            span: 29007..29015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 1120,
            column: 24,
            span: 29016..29020,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1120,
            column: 25,
            span: 29020..29021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1120,
            column: 26,
            span: 29021..29022,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1120,
            column: 27,
            span: 29022..29023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numopen",
        ),
        position: Position {
            line: 1121,
            column: 14,
            span: 29030..29037,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1121,
            column: 16,
            span: 29038..29039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numopen",
        ),
        position: Position {
            line: 1121,
            column: 24,
            span: 29040..29047,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1121,
            column: 26,
            span: 29048..29049,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1121,
            column: 0,
            span: 29049..29051,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1122,
            column: 0,
            span: 29058..29064,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1123,
            column: 19,
            span: 29075..29083,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1123,
            column: 20,
            span: 29083..29084,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1123,
            column: 21,
            span: 29084..29085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1124,
            column: 14,
            span: 29121..29122,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1124,
            column: 16,
            span: 29123..29124,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1124,
            column: 18,
            span: 29125..29126,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 1124,
            column: 20,
            span: 29127..29128,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1124,
            column: 0,
            span: 29128..29130,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 1125,
            column: 15,
            span: 29143..29145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1125,
            column: 17,
            span: 29146..29147,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 1125,
            column: 19,
            span: 29148..29149,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1125,
            column: 21,
            span: 29149..29151,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 1125,
            column: 26,
            span: 29152..29156,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1125,
            column: 33,
            span: 29157..29163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1125,
            column: 35,
            span: 29164..29165,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1125,
            column: 0,
            span: 29166..29169,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1126,
            column: 14,
            span: 29180..29183,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1126,
            column: 15,
            span: 29183..29184,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1127,
            column: 14,
            span: 29195..29198,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1127,
            column: 15,
            span: 29198..29199,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1128,
            column: 14,
            span: 29260..29263,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1128,
            column: 15,
            span: 29263..29264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func2close",
        ),
        position: Position {
            line: 1129,
            column: 21,
            span: 29336..29346,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1129,
            column: 22,
            span: 29346..29347,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1129,
            column: 30,
            span: 29347..29355,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1129,
            column: 31,
            span: 29355..29356,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1129,
            column: 32,
            span: 29356..29357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numopen",
        ),
        position: Position {
            line: 1129,
            column: 40,
            span: 29358..29365,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1129,
            column: 42,
            span: 29366..29367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numopen",
        ),
        position: Position {
            line: 1129,
            column: 50,
            span: 29368..29375,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 1129,
            column: 52,
            span: 29376..29377,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1129,
            column: 54,
            span: 29377..29379,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1129,
            column: 58,
            span: 29380..29383,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1129,
            column: 59,
            span: 29383..29384,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1130,
            column: 0,
            span: 29409..29412,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1132,
            column: 10,
            span: 29418..29423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1132,
            column: 12,
            span: 29424..29425,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1132,
            column: 14,
            span: 29426..29427,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1132,
            column: 0,
            span: 29427..29429,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 1133,
            column: 8,
            span: 29434..29437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1133,
            column: 10,
            span: 29438..29439,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 1133,
            column: 13,
            span: 29440..29442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 1133,
            column: 18,
            span: 29443..29447,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1133,
            column: 19,
            span: 29447..29448,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1133,
            column: 21,
            span: 29447..29450,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1133,
            column: 22,
            span: 29450..29451,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1133,
            column: 0,
            span: 29452..29454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1134,
            column: 8,
            span: 29461..29462,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1134,
            column: 10,
            span: 29463..29464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1134,
            column: 12,
            span: 29465..29466,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1134,
            column: 14,
            span: 29467..29468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1134,
            column: 0,
            span: 29469..29470,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1135,
            column: 0,
            span: 29475..29478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1136,
            column: 11,
            span: 29483..29489,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1136,
            column: 12,
            span: 29489..29490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1136,
            column: 13,
            span: 29490..29491,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1136,
            column: 16,
            span: 29492..29494,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1136,
            column: 19,
            span: 29494..29497,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1136,
            column: 23,
            span: 29498..29501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numopen",
        ),
        position: Position {
            line: 1136,
            column: 31,
            span: 29502..29509,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1136,
            column: 34,
            span: 29510..29512,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1136,
            column: 36,
            span: 29512..29514,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1136,
            column: 37,
            span: 29514..29515,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1138,
            column: 10,
            span: 29521..29526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1138,
            column: 12,
            span: 29527..29528,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1138,
            column: 14,
            span: 29529..29530,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1138,
            column: 0,
            span: 29530..29532,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 1139,
            column: 8,
            span: 29537..29540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1139,
            column: 10,
            span: 29541..29542,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 1139,
            column: 13,
            span: 29543..29545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 1139,
            column: 18,
            span: 29546..29550,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1139,
            column: 19,
            span: 29550..29551,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1139,
            column: 21,
            span: 29550..29553,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1139,
            column: 22,
            span: 29553..29554,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1139,
            column: 0,
            span: 29555..29557,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 1140,
            column: 9,
            span: 29564..29566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1140,
            column: 11,
            span: 29567..29568,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 1140,
            column: 13,
            span: 29569..29570,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1140,
            column: 15,
            span: 29570..29572,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 1140,
            column: 20,
            span: 29573..29577,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 1140,
            column: 26,
            span: 29578..29583,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1140,
            column: 0,
            span: 29584..29587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1141,
            column: 8,
            span: 29594..29595,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1141,
            column: 10,
            span: 29596..29597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1141,
            column: 12,
            span: 29598..29599,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1141,
            column: 14,
            span: 29600..29601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1141,
            column: 0,
            span: 29602..29603,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1142,
            column: 0,
            span: 29608..29611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1143,
            column: 11,
            span: 29616..29622,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1143,
            column: 12,
            span: 29622..29623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1143,
            column: 13,
            span: 29623..29624,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1143,
            column: 16,
            span: 29625..29627,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1143,
            column: 19,
            span: 29627..29630,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1143,
            column: 23,
            span: 29631..29634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numopen",
        ),
        position: Position {
            line: 1143,
            column: 31,
            span: 29635..29642,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1143,
            column: 34,
            span: 29643..29645,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1143,
            column: 36,
            span: 29645..29647,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1143,
            column: 37,
            span: 29647..29648,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1145,
            column: 10,
            span: 29654..29659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1145,
            column: 12,
            span: 29660..29661,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1145,
            column: 14,
            span: 29662..29663,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1145,
            column: 0,
            span: 29663..29665,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 1146,
            column: 8,
            span: 29670..29673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1146,
            column: 10,
            span: 29674..29675,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 1146,
            column: 13,
            span: 29676..29678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 1146,
            column: 18,
            span: 29679..29683,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1146,
            column: 19,
            span: 29683..29684,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1146,
            column: 21,
            span: 29683..29686,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1146,
            column: 22,
            span: 29686..29687,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1146,
            column: 0,
            span: 29688..29690,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 1147,
            column: 10,
            span: 29697..29700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 1147,
            column: 12,
            span: 29701..29702,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 1147,
            column: 15,
            span: 29703..29705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 1147,
            column: 20,
            span: 29706..29710,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1147,
            column: 21,
            span: 29710..29711,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1147,
            column: 23,
            span: 29710..29713,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1147,
            column: 24,
            span: 29713..29714,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1147,
            column: 0,
            span: 29715..29717,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 1148,
            column: 11,
            span: 29726..29728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1148,
            column: 13,
            span: 29729..29730,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1148,
            column: 15,
            span: 29731..29732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 1148,
            column: 17,
            span: 29733..29734,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 1148,
            column: 19,
            span: 29735..29736,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1148,
            column: 21,
            span: 29736..29738,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 1148,
            column: 26,
            span: 29739..29743,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1148,
            column: 0,
            span: 29744..29747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1149,
            column: 10,
            span: 29756..29757,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1149,
            column: 12,
            span: 29758..29759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1149,
            column: 14,
            span: 29760..29761,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1149,
            column: 16,
            span: 29762..29763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1149,
            column: 0,
            span: 29764..29765,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1150,
            column: 0,
            span: 29772..29775,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1151,
            column: 0,
            span: 29780..29783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1153,
            column: 11,
            span: 29789..29795,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1153,
            column: 12,
            span: 29795..29796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1153,
            column: 13,
            span: 29796..29797,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1153,
            column: 16,
            span: 29798..29800,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "375",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1153,
            column: 20,
            span: 29800..29804,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1153,
            column: 24,
            span: 29805..29808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numopen",
        ),
        position: Position {
            line: 1153,
            column: 32,
            span: 29809..29816,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1153,
            column: 35,
            span: 29817..29819,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1153,
            column: 37,
            span: 29819..29821,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1153,
            column: 38,
            span: 29821..29822,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1154,
            column: 0,
            span: 29825..29828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1156,
            column: 8,
            span: 29832..29837,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1156,
            column: 9,
            span: 29837..29838,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 1156,
            column: 13,
            span: 29838..29842,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1156,
            column: 14,
            span: 29842..29843,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1158,
            column: 9,
            span: 29847..29853,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1158,
            column: 11,
            span: 29853..29855,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1158,
            column: 12,
            span: 29855..29856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1158,
            column: 0,
            span: 29857..29858,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1159,
            column: 4,
            span: 29859..29862,
        },
    },
]
