---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/files.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 4,
        column: 6,
        span: 68..73,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 4,
        column: 12,
        span: 74..79,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 4,
        column: 14,
        span: 80..81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 4,
        column: 22,
        span: 82..89,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 4,
        column: 30,
        span: 90..97,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 99..104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 6,
        column: 13,
        span: 105..111,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 15,
        span: 112..113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 6,
        column: 20,
        span: 114..118,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 6,
        column: 21,
        span: 118..119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        line: 6,
        column: 0,
        span: 119..129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 7,
        span: 131..137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 8,
        span: 137..138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 8,
        column: 12,
        span: 138..142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 13,
        span: 142..143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 8,
        column: 15,
        span: 143..145,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 8,
        column: 16,
        span: 145..146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getenv",
        ),
        line: 8,
        column: 22,
        span: 146..152,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"PATH\"",
        ),
        line: 8,
        column: 28,
        span: 152..158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 29,
        span: 158..159,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 8,
        column: 32,
        span: 160..162,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 8,
        column: 41,
        span: 163..171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 42,
        span: 171..172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
        column: 7,
        span: 174..180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 8,
        span: 180..181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 10,
        column: 10,
        span: 181..183,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 10,
        column: 11,
        span: 183..184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 10,
        column: 16,
        span: 184..189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 17,
        span: 189..190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 10,
        column: 19,
        span: 190..192,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 10,
        column: 20,
        span: 192..193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 10,
        column: 25,
        span: 193..198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 26,
        span: 198..199,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
        column: 29,
        span: 200..202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 10,
        column: 32,
        span: 203..205,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 10,
        column: 33,
        span: 205..206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 10,
        column: 38,
        span: 206..211,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 39,
        span: 211..212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 11,
        column: 7,
        span: 213..219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 8,
        span: 219..220,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 11,
        column: 11,
        span: 220..223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 11,
        column: 17,
        span: 224..229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 18,
        span: 229..230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 11,
        column: 20,
        span: 230..232,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 11,
        column: 21,
        span: 232..233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 11,
        column: 26,
        span: 233..238,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 11,
        column: 27,
        span: 238..239,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"non-existent-file\"",
        ),
        line: 11,
        column: 47,
        span: 240..259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 48,
        span: 259..260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 49,
        span: 260..261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 12,
        column: 7,
        span: 262..268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 8,
        span: 268..269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 12,
        column: 10,
        span: 269..271,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 12,
        column: 11,
        span: 271..272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 12,
        column: 17,
        span: 272..278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 18,
        span: 278..279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 12,
        column: 20,
        span: 279..281,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 12,
        column: 21,
        span: 281..282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 12,
        column: 27,
        span: 282..288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 28,
        span: 288..289,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 12,
        column: 31,
        span: 290..292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 12,
        column: 34,
        span: 293..295,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 12,
        column: 35,
        span: 295..296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 12,
        column: 41,
        span: 296..302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 42,
        span: 302..303,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 15,
        column: 6,
        span: 306..311,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 15,
        column: 15,
        span: 312..320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testerr",
        ),
        line: 15,
        column: 23,
        span: 321..328,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 25,
        span: 329..330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 15,
        column: 28,
        span: 330..333,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
        column: 29,
        span: 333..334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 15,
        column: 31,
        span: 335..336,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
        column: 32,
        span: 336..337,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 15,
        column: 36,
        span: 338..341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 37,
        span: 341..342,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 16,
        column: 8,
        span: 345..350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        line: 16,
        column: 13,
        span: 351..355,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 14,
        span: 355..356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 16,
        column: 18,
        span: 357..360,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 20,
        span: 361..362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 16,
        column: 26,
        span: 363..368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 27,
        span: 368..369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 16,
        column: 28,
        span: 369..370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 29,
        span: 370..371,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 16,
        column: 33,
        span: 372..375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 34,
        span: 375..376,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 17,
        column: 9,
        span: 379..385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 11,
        span: 386..387,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 17,
        column: 14,
        span: 387..390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        line: 17,
        column: 19,
        span: 391..395,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 17,
        column: 23,
        span: 396..399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 17,
        column: 30,
        span: 400..406,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 17,
        column: 31,
        span: 406..407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 17,
        column: 35,
        span: 407..411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 36,
        span: 411..412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 17,
        column: 39,
        span: 412..415,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 17,
        column: 40,
        span: 415..416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 17,
        column: 44,
        span: 417..420,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 17,
        column: 45,
        span: 420..421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 17,
        column: 47,
        span: 421..423,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 17,
        column: 48,
        span: 423..424,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 17,
        column: 53,
        span: 425..429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 54,
        span: 429..430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 55,
        span: 430..431,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 18,
        column: 0,
        span: 432..435,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 21,
        column: 6,
        span: 438..443,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 21,
        column: 15,
        span: 444..452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 21,
        column: 24,
        span: 453..461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 26,
        span: 462..463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 21,
        column: 29,
        span: 463..466,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 30,
        span: 466..467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 21,
        column: 32,
        span: 468..469,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 33,
        span: 469..470,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 21,
        column: 37,
        span: 471..474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 38,
        span: 474..475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 22,
        column: 9,
        span: 478..484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 10,
        span: 484..485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testerr",
        ),
        line: 22,
        column: 17,
        span: 485..492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 18,
        span: 492..493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 22,
        column: 21,
        span: 493..496,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 22,
        span: 496..497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 22,
        column: 24,
        span: 498..499,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 25,
        span: 499..500,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 22,
        column: 29,
        span: 501..504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 30,
        span: 504..505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 31,
        span: 505..506,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 23,
        column: 0,
        span: 507..510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 27,
        column: 7,
        span: 544..550,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 8,
        span: 550..551,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 27,
        column: 11,
        span: 551..554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 27,
        column: 14,
        span: 555..557,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
        column: 15,
        span: 557..558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 27,
        column: 20,
        span: 558..563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 21,
        span: 563..564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 27,
        column: 23,
        span: 564..566,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
        column: 24,
        span: 566..567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 27,
        column: 29,
        span: 567..572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 30,
        span: 572..573,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 27,
        column: 0,
        span: 574..577,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 28,
        column: 11,
        span: 585..588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 28,
        column: 14,
        span: 589..591,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 28,
        column: 15,
        span: 591..592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 28,
        column: 21,
        span: 592..598,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 28,
        column: 22,
        span: 598..599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 28,
        column: 27,
        span: 599..604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 28,
        span: 604..605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 29,
        span: 605..606,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 28,
        column: 0,
        span: 607..610,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 29,
        column: 11,
        span: 618..621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 29,
        column: 14,
        span: 622..624,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 29,
        column: 15,
        span: 624..625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        line: 29,
        column: 21,
        span: 625..631,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 29,
        column: 22,
        span: 631..632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 29,
        column: 27,
        span: 632..637,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 28,
        span: 637..638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 29,
        span: 638..639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 30,
        span: 639..640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 32,
        column: 9,
        span: 705..713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 10,
        span: 713..714,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"got no value\"",
        ),
        line: 32,
        column: 24,
        span: 714..728,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 25,
        span: 728..729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 32,
        column: 28,
        span: 730..732,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 32,
        column: 29,
        span: 732..733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 32,
        column: 34,
        span: 733..738,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 32,
        column: 35,
        span: 738..739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 32,
        column: 40,
        span: 739..744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 41,
        span: 744..745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 7,
        span: 748..754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 8,
        span: 754..755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 35,
        column: 12,
        span: 755..759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 13,
        span: 759..760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 35,
        column: 15,
        span: 760..762,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 35,
        column: 16,
        span: 762..763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 35,
        column: 21,
        span: 763..768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 22,
        span: 768..769,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 23,
        span: 769..770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 24,
        span: 770..771,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 27,
        span: 772..774,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        line: 35,
        column: 38,
        span: 775..785,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 35,
        column: 42,
        span: 786..789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 35,
        column: 45,
        span: 790..792,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 35,
        column: 46,
        span: 792..793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 35,
        column: 50,
        span: 793..797,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 51,
        span: 797..798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 35,
        column: 53,
        span: 798..800,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 35,
        column: 54,
        span: 800..801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 35,
        column: 60,
        span: 801..807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 61,
        span: 807..808,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 62,
        span: 808..809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 63,
        span: 809..810,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 66,
        span: 811..813,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file\"",
        ),
        line: 35,
        column: 73,
        span: 814..820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 74,
        span: 820..821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
        column: 7,
        span: 822..828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 8,
        span: 828..829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 36,
        column: 12,
        span: 829..833,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 13,
        span: 833..834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 36,
        column: 15,
        span: 834..836,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 36,
        column: 16,
        span: 836..837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 36,
        column: 21,
        span: 837..842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 22,
        span: 842..843,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
        column: 25,
        span: 844..846,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        line: 36,
        column: 36,
        span: 847..857,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 36,
        column: 40,
        span: 858..861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 36,
        column: 43,
        span: 862..864,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 36,
        column: 44,
        span: 864..865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 36,
        column: 48,
        span: 865..869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 49,
        span: 869..870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 36,
        column: 51,
        span: 870..872,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 36,
        column: 52,
        span: 872..873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        line: 36,
        column: 58,
        span: 873..879,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 59,
        span: 879..880,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
        column: 62,
        span: 881..883,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file\"",
        ),
        line: 36,
        column: 69,
        span: 884..890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 70,
        span: 890..891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
        column: 7,
        span: 892..898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 8,
        span: 898..899,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 37,
        column: 11,
        span: 899..902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 37,
        column: 14,
        span: 903..905,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
        column: 15,
        span: 905..906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 37,
        column: 19,
        span: 906..910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 20,
        span: 910..911,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 21,
        span: 910..912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 22,
        span: 912..913,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 23,
        span: 913..914,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 38,
        column: 6,
        span: 915..920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 8,
        span: 921..922,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
        column: 10,
        span: 923..924,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 38,
        column: 12,
        span: 925..926,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 38,
        column: 13,
        span: 926..927,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 38,
        column: 14,
        span: 927..928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 38,
        column: 27,
        span: 929..941,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 28,
        span: 941..942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 29,
        span: 942..943,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 30,
        span: 943..944,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 38,
        column: 32,
        span: 945..946,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 38,
        column: 33,
        span: 946..947,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 34,
        span: 947..948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 7,
        span: 949..955,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 8,
        span: 955..956,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 39,
        column: 11,
        span: 956..959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 39,
        column: 14,
        span: 960..962,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 15,
        span: 962..963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 39,
        column: 19,
        span: 963..967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 20,
        span: 967..968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 39,
        column: 21,
        span: 968..969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 22,
        span: 969..970,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 23,
        span: 970..971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 7,
        span: 973..979,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 8,
        span: 979..980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 41,
        column: 20,
        span: 980..992,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 21,
        span: 992..993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 41,
        column: 23,
        span: 993..995,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 24,
        span: 995..996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 41,
        column: 29,
        span: 996..1001,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 30,
        span: 1001..1002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 31,
        span: 1002..1003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 32,
        span: 1003..1004,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 33,
        span: 1004..1005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__name",
        ),
        line: 41,
        column: 39,
        span: 1005..1011,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 42,
        span: 1012..1014,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"FILE*\"",
        ),
        line: 41,
        column: 50,
        span: 1015..1022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 51,
        span: 1022..1023,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 43,
        column: 6,
        span: 1025..1030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 43,
        column: 8,
        span: 1031..1032,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 9,
        span: 1032..1033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 43,
        column: 10,
        span: 1033..1034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 11,
        span: 1034..1035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 43,
        column: 12,
        span: 1035..1036,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 43,
        column: 14,
        span: 1037..1038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 43,
        column: 17,
        span: 1039..1041,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 18,
        span: 1041..1042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 43,
        column: 22,
        span: 1042..1046,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 23,
        span: 1046..1047,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu_nao_existe'",
        ),
        line: 43,
        column: 40,
        span: 1047..1064,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 41,
        span: 1064..1065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 44,
        column: 7,
        span: 1066..1072,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 8,
        span: 1072..1073,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 44,
        column: 11,
        span: 1073..1076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 44,
        column: 13,
        span: 1077..1078,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 44,
        column: 17,
        span: 1079..1082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 44,
        column: 22,
        span: 1083..1087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 23,
        span: 1087..1088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 44,
        column: 24,
        span: 1088..1089,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 25,
        span: 1089..1090,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 44,
        column: 28,
        span: 1091..1093,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 44,
        column: 37,
        span: 1094..1102,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 44,
        column: 41,
        span: 1103..1106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 44,
        column: 46,
        span: 1107..1111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 47,
        span: 1111..1112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 44,
        column: 48,
        span: 1112..1113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 49,
        span: 1113..1114,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 44,
        column: 52,
        span: 1115..1117,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 44,
        column: 61,
        span: 1118..1126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 62,
        span: 1126..1127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 46,
        column: 2,
        span: 1129..1130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 3,
        span: 1130..1131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 46,
        column: 4,
        span: 1131..1132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 5,
        span: 1132..1133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 46,
        column: 6,
        span: 1133..1134,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
        column: 8,
        span: 1135..1136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 46,
        column: 11,
        span: 1137..1139,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
        column: 12,
        span: 1139..1140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 46,
        column: 16,
        span: 1140..1144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 17,
        span: 1144..1145,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'/a/b/c/d'",
        ),
        line: 46,
        column: 27,
        span: 1145..1155,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 28,
        span: 1155..1156,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        line: 46,
        column: 32,
        span: 1157..1160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 33,
        span: 1160..1161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 7,
        span: 1162..1168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 8,
        span: 1168..1169,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 47,
        column: 11,
        span: 1169..1172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 47,
        column: 13,
        span: 1173..1174,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 47,
        column: 17,
        span: 1175..1178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 47,
        column: 22,
        span: 1179..1183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 23,
        span: 1183..1184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 47,
        column: 24,
        span: 1184..1185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 25,
        span: 1185..1186,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 47,
        column: 28,
        span: 1187..1189,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 47,
        column: 37,
        span: 1190..1198,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 47,
        column: 41,
        span: 1199..1202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 47,
        column: 46,
        span: 1203..1207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 47,
        span: 1207..1208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 47,
        column: 48,
        span: 1208..1209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 49,
        span: 1209..1210,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 47,
        column: 52,
        span: 1211..1213,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 47,
        column: 61,
        span: 1214..1222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 62,
        span: 1222..1223,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 49,
        column: 6,
        span: 1225..1230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 49,
        column: 11,
        span: 1231..1235,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 13,
        span: 1236..1237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 49,
        column: 16,
        span: 1238..1240,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 49,
        column: 17,
        span: 1240..1241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 49,
        column: 24,
        span: 1241..1248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 25,
        span: 1248..1249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 26,
        span: 1249..1250,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 50,
        column: 6,
        span: 1251..1256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 50,
        column: 8,
        span: 1257..1258,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 9,
        span: 1258..1259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 50,
        column: 13,
        span: 1260..1263,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 50,
        column: 15,
        span: 1264..1265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 50,
        column: 18,
        span: 1266..1268,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 50,
        column: 19,
        span: 1268..1269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 50,
        column: 23,
        span: 1269..1273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 24,
        span: 1273..1274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 50,
        column: 28,
        span: 1274..1278,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 29,
        span: 1278..1279,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 50,
        column: 33,
        span: 1280..1283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 34,
        span: 1283..1284,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 51,
        column: 3,
        span: 1285..1287,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 51,
        column: 7,
        span: 1288..1291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 51,
        column: 9,
        span: 1292..1293,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 51,
        column: 0,
        span: 1294..1298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 4,
        span: 1301..1302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 52,
        column: 11,
        span: 1302..1309,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 52,
        column: 14,
        span: 1310..1312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 52,
        column: 20,
        span: 1313..1318,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 21,
        span: 1318..1319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 22,
        span: 1319..1320,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'os.tmpname' file cannot be open; skipping file tests\"",
        ),
        line: 52,
        column: 77,
        span: 1320..1375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 78,
        span: 1375..1376,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 54,
        column: 5,
        span: 1378..1382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 55,
        column: 2,
        span: 1418..1419,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 55,
        column: 3,
        span: 1419..1420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 55,
        column: 8,
        span: 1420..1425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 9,
        span: 1425..1426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 10,
        span: 1426..1427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 57,
        column: 6,
        span: 1429..1434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 7,
        span: 1434..1435,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing i/o'",
        ),
        line: 57,
        column: 20,
        span: 1435..1448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 21,
        span: 1448..1449,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 59,
        column: 6,
        span: 1451..1456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 59,
        column: 16,
        span: 1457..1466,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 59,
        column: 18,
        span: 1467..1468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 59,
        column: 21,
        span: 1469..1471,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 22,
        span: 1471..1472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 59,
        column: 29,
        span: 1472..1479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 30,
        span: 1479..1480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 31,
        span: 1480..1481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 61,
        column: 9,
        span: 1483..1491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 10,
        span: 1491..1492,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid mode\"",
        ),
        line: 61,
        column: 24,
        span: 1492..1506,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 25,
        span: 1506..1507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 61,
        column: 28,
        span: 1508..1510,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 29,
        span: 1510..1511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 61,
        column: 33,
        span: 1511..1515,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 34,
        span: 1515..1516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 61,
        column: 39,
        span: 1517..1521,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 40,
        span: 1521..1522,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rw\"",
        ),
        line: 61,
        column: 45,
        span: 1523..1527,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 46,
        span: 1527..1528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 62,
        column: 9,
        span: 1529..1537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 10,
        span: 1537..1538,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid mode\"",
        ),
        line: 62,
        column: 24,
        span: 1538..1552,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 25,
        span: 1552..1553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 62,
        column: 28,
        span: 1554..1556,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 62,
        column: 29,
        span: 1556..1557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 62,
        column: 33,
        span: 1557..1561,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 34,
        span: 1561..1562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 62,
        column: 39,
        span: 1563..1567,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 40,
        span: 1567..1568,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rb+\"",
        ),
        line: 62,
        column: 46,
        span: 1569..1574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 47,
        span: 1574..1575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 63,
        column: 9,
        span: 1576..1584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 10,
        span: 1584..1585,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid mode\"",
        ),
        line: 63,
        column: 24,
        span: 1585..1599,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 25,
        span: 1599..1600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 63,
        column: 28,
        span: 1601..1603,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 63,
        column: 29,
        span: 1603..1604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 63,
        column: 33,
        span: 1604..1608,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 34,
        span: 1608..1609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 63,
        column: 39,
        span: 1610..1614,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 40,
        span: 1614..1615,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r+bk\"",
        ),
        line: 63,
        column: 47,
        span: 1616..1622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 48,
        span: 1622..1623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 64,
        column: 9,
        span: 1624..1632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 10,
        span: 1632..1633,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid mode\"",
        ),
        line: 64,
        column: 24,
        span: 1633..1647,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 25,
        span: 1647..1648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 64,
        column: 28,
        span: 1649..1651,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 64,
        column: 29,
        span: 1651..1652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 64,
        column: 33,
        span: 1652..1656,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 34,
        span: 1656..1657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 64,
        column: 39,
        span: 1658..1662,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 40,
        span: 1662..1663,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 64,
        column: 43,
        span: 1664..1666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 44,
        span: 1666..1667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 65,
        column: 9,
        span: 1668..1676,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 10,
        span: 1676..1677,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid mode\"",
        ),
        line: 65,
        column: 24,
        span: 1677..1691,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 25,
        span: 1691..1692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 65,
        column: 28,
        span: 1693..1695,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
        column: 29,
        span: 1695..1696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 65,
        column: 33,
        span: 1696..1700,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 34,
        span: 1700..1701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 65,
        column: 39,
        span: 1702..1706,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 40,
        span: 1706..1707,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 65,
        column: 44,
        span: 1708..1711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 45,
        span: 1711..1712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 66,
        column: 9,
        span: 1713..1721,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 10,
        span: 1721..1722,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid mode\"",
        ),
        line: 66,
        column: 24,
        span: 1722..1736,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 25,
        span: 1736..1737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 66,
        column: 28,
        span: 1738..1740,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 66,
        column: 29,
        span: 1740..1741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 66,
        column: 33,
        span: 1741..1745,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 34,
        span: 1745..1746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 66,
        column: 39,
        span: 1747..1751,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 40,
        span: 1751..1752,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 66,
        column: 44,
        span: 1753..1756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 45,
        span: 1756..1757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 67,
        column: 7,
        span: 1758..1764,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 8,
        span: 1764..1765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 67,
        column: 10,
        span: 1765..1767,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 11,
        span: 1767..1768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 67,
        column: 15,
        span: 1768..1772,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 16,
        span: 1772..1773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 67,
        column: 20,
        span: 1773..1777,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 21,
        span: 1777..1778,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r+b\"",
        ),
        line: 67,
        column: 27,
        span: 1779..1784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 28,
        span: 1784..1785,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 29,
        span: 1785..1786,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 67,
        column: 30,
        span: 1786..1787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 67,
        column: 35,
        span: 1787..1792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 36,
        span: 1792..1793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 37,
        span: 1793..1794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 68,
        column: 7,
        span: 1795..1801,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 8,
        span: 1801..1802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 68,
        column: 10,
        span: 1802..1804,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 68,
        column: 11,
        span: 1804..1805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 68,
        column: 15,
        span: 1805..1809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 16,
        span: 1809..1810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 68,
        column: 20,
        span: 1810..1814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 21,
        span: 1814..1815,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r+\"",
        ),
        line: 68,
        column: 26,
        span: 1816..1820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 27,
        span: 1820..1821,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 28,
        span: 1821..1822,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 68,
        column: 29,
        span: 1822..1823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 68,
        column: 34,
        span: 1823..1828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 35,
        span: 1828..1829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 36,
        span: 1829..1830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
        column: 7,
        span: 1831..1837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 8,
        span: 1837..1838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 69,
        column: 10,
        span: 1838..1840,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 11,
        span: 1840..1841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 69,
        column: 15,
        span: 1841..1845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 16,
        span: 1845..1846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 69,
        column: 20,
        span: 1846..1850,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 21,
        span: 1850..1851,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rb\"",
        ),
        line: 69,
        column: 26,
        span: 1852..1856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 27,
        span: 1856..1857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 28,
        span: 1857..1858,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 69,
        column: 29,
        span: 1858..1859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 69,
        column: 34,
        span: 1859..1864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 35,
        span: 1864..1865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 36,
        span: 1865..1866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 7,
        span: 1868..1874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 8,
        span: 1874..1875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 71,
        column: 10,
        span: 1875..1877,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 11,
        span: 1877..1878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 71,
        column: 20,
        span: 1878..1887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 21,
        span: 1887..1888,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'C'",
        ),
        line: 71,
        column: 24,
        span: 1888..1891,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 25,
        span: 1891..1892,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'all'",
        ),
        line: 71,
        column: 31,
        span: 1893..1898,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 32,
        span: 1898..1899,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 33,
        span: 1899..1900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 73,
        column: 3,
        span: 1902..1904,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 73,
        column: 4,
        span: 1904..1905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 73,
        column: 9,
        span: 1905..1910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 10,
        span: 1910..1911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 73,
        column: 12,
        span: 1911..1913,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 73,
        column: 13,
        span: 1913..1914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 73,
        column: 18,
        span: 1914..1919,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 19,
        span: 1919..1920,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 73,
        column: 20,
        span: 1920..1921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 73,
        column: 23,
        span: 1922..1924,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 73,
        column: 24,
        span: 1924..1925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 73,
        column: 30,
        span: 1925..1931,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 31,
        span: 1931..1932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 73,
        column: 33,
        span: 1932..1934,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 73,
        column: 34,
        span: 1934..1935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 73,
        column: 40,
        span: 1935..1941,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 41,
        span: 1941..1942,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 73,
        column: 42,
        span: 1942..1943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 75,
        column: 3,
        span: 1945..1947,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 75,
        column: 4,
        span: 1947..1948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 75,
        column: 10,
        span: 1948..1954,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 11,
        span: 1954..1955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 75,
        column: 15,
        span: 1955..1959,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 16,
        span: 1959..1960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 76,
        column: 7,
        span: 1961..1967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 8,
        span: 1967..1968,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 76,
        column: 11,
        span: 1968..1971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 76,
        column: 20,
        span: 1972..1980,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 21,
        span: 1980..1981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 76,
        column: 25,
        span: 1981..1985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 26,
        span: 1985..1986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 27,
        span: 1986..1987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 77,
        column: 9,
        span: 1988..1996,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 10,
        span: 1996..1997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 77,
        column: 12,
        span: 1997..1999,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 13,
        span: 1999..2000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 77,
        column: 20,
        span: 2001..2007,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 21,
        span: 2007..2008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 77,
        column: 26,
        span: 2009..2013,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 27,
        span: 2013..2014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 78,
        column: 7,
        span: 2015..2021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 8,
        span: 2021..2022,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 78,
        column: 11,
        span: 2022..2025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 78,
        column: 14,
        span: 2026..2028,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 78,
        column: 15,
        span: 2028..2029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 78,
        column: 19,
        span: 2029..2033,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 20,
        span: 2033..2034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 78,
        column: 24,
        span: 2034..2038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 25,
        span: 2038..2039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 26,
        span: 2039..2040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 79,
        column: 3,
        span: 2041..2043,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 79,
        column: 4,
        span: 2043..2044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 79,
        column: 10,
        span: 2044..2050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 11,
        span: 2050..2051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 79,
        column: 15,
        span: 2051..2055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 16,
        span: 2055..2056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 80,
        column: 7,
        span: 2057..2063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 8,
        span: 2063..2064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 80,
        column: 10,
        span: 2064..2066,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 80,
        column: 11,
        span: 2066..2067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 80,
        column: 17,
        span: 2067..2073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 18,
        span: 2073..2074,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 19,
        span: 2074..2075,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 80,
        column: 22,
        span: 2076..2078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 80,
        column: 25,
        span: 2079..2081,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 80,
        column: 26,
        span: 2081..2082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 80,
        column: 32,
        span: 2082..2088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 33,
        span: 2088..2089,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 82,
        column: 3,
        span: 2091..2093,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 82,
        column: 7,
        span: 2094..2097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 82,
        column: 13,
        span: 2098..2103,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 82,
        column: 18,
        span: 2104..2108,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 83,
        column: 8,
        span: 2129..2134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        line: 83,
        column: 15,
        span: 2135..2141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 16,
        span: 2141..2142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 83,
        column: 20,
        span: 2143..2146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 21,
        span: 2146..2147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 83,
        column: 26,
        span: 2148..2152,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 83,
        column: 28,
        span: 2153..2154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 83,
        column: 31,
        span: 2155..2157,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 83,
        column: 32,
        span: 2157..2158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 83,
        column: 37,
        span: 2158..2163,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 83,
        column: 38,
        span: 2163..2164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 83,
        column: 42,
        span: 2164..2168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 43,
        span: 2168..2169,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 83,
        column: 48,
        span: 2169..2174,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 49,
        span: 2174..2175,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 54,
        span: 2175..2180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 55,
        span: 2180..2181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 84,
        column: 9,
        span: 2184..2190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 10,
        span: 2190..2191,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 84,
        column: 13,
        span: 2191..2194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        line: 84,
        column: 20,
        span: 2195..2201,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 84,
        column: 24,
        span: 2202..2205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 84,
        column: 29,
        span: 2206..2210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 30,
        span: 2210..2211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 84,
        column: 33,
        span: 2211..2214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 34,
        span: 2214..2215,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 84,
        column: 37,
        span: 2216..2218,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 84,
        column: 46,
        span: 2219..2227,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 84,
        column: 50,
        span: 2228..2231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 84,
        column: 55,
        span: 2232..2236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 56,
        span: 2236..2237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 84,
        column: 60,
        span: 2237..2241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 61,
        span: 2241..2242,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 84,
        column: 64,
        span: 2243..2245,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 84,
        column: 73,
        span: 2246..2254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 74,
        span: 2254..2255,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 85,
        column: 0,
        span: 2256..2259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 87,
        column: 7,
        span: 2261..2267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 8,
        span: 2267..2268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 87,
        column: 10,
        span: 2268..2270,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 87,
        column: 11,
        span: 2270..2271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 87,
        column: 17,
        span: 2271..2277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 18,
        span: 2277..2278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 19,
        span: 2278..2279,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 87,
        column: 20,
        span: 2279..2280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 87,
        column: 24,
        span: 2280..2284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 25,
        span: 2284..2285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 26,
        span: 2285..2286,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
        column: 29,
        span: 2287..2289,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
        column: 31,
        span: 2289..2291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 32,
        span: 2291..2292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 88,
        column: 7,
        span: 2293..2299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 8,
        span: 2299..2300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 88,
        column: 10,
        span: 2300..2302,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 11,
        span: 2302..2303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 88,
        column: 16,
        span: 2303..2308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 17,
        span: 2308..2309,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 88,
        column: 26,
        span: 2309..2318,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 27,
        span: 2318..2319,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 88,
        column: 28,
        span: 2319..2320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 88,
        column: 32,
        span: 2320..2324,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 33,
        span: 2324..2325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 34,
        span: 2325..2326,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 37,
        span: 2327..2329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 88,
        column: 44,
        span: 2330..2336,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 45,
        span: 2336..2337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 88,
        column: 48,
        span: 2337..2340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 49,
        span: 2340..2341,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 88,
        column: 58,
        span: 2341..2350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 59,
        span: 2350..2351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 60,
        span: 2351..2352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 89,
        column: 7,
        span: 2353..2359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 8,
        span: 2359..2360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 89,
        column: 10,
        span: 2360..2362,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 89,
        column: 11,
        span: 2362..2363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 89,
        column: 17,
        span: 2363..2369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 18,
        span: 2369..2370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 19,
        span: 2370..2371,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 89,
        column: 20,
        span: 2371..2372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 89,
        column: 24,
        span: 2372..2376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 25,
        span: 2376..2377,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cur\"",
        ),
        line: 89,
        column: 30,
        span: 2377..2382,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 31,
        span: 2382..2383,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 89,
        column: 33,
        span: 2384..2385,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 34,
        span: 2384..2386,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 35,
        span: 2386..2387,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 89,
        column: 38,
        span: 2388..2390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 89,
        column: 45,
        span: 2391..2397,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 89,
        column: 46,
        span: 2397..2398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 89,
        column: 49,
        span: 2398..2401,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 50,
        span: 2401..2402,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 89,
        column: 59,
        span: 2402..2411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 60,
        span: 2411..2412,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 89,
        column: 61,
        span: 2412..2413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 62,
        span: 2412..2414,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 63,
        span: 2414..2415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 90,
        column: 7,
        span: 2416..2422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 8,
        span: 2422..2423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 90,
        column: 10,
        span: 2423..2425,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 90,
        column: 11,
        span: 2425..2426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 90,
        column: 16,
        span: 2426..2431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 17,
        span: 2431..2432,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"joao\"",
        ),
        line: 90,
        column: 23,
        span: 2432..2438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 24,
        span: 2438..2439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 25,
        span: 2439..2440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 91,
        column: 7,
        span: 2441..2447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 8,
        span: 2447..2448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 91,
        column: 10,
        span: 2448..2450,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 91,
        column: 11,
        span: 2450..2451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 91,
        column: 17,
        span: 2451..2457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 18,
        span: 2457..2458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 19,
        span: 2458..2459,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 91,
        column: 20,
        span: 2459..2460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 91,
        column: 24,
        span: 2460..2464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 25,
        span: 2464..2465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"end\"",
        ),
        line: 91,
        column: 30,
        span: 2465..2470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 31,
        span: 2470..2471,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 91,
        column: 34,
        span: 2472..2474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 91,
        column: 41,
        span: 2475..2481,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 91,
        column: 42,
        span: 2481..2482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 91,
        column: 45,
        span: 2482..2485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 46,
        span: 2485..2486,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo joao\"",
        ),
        line: 91,
        column: 56,
        span: 2486..2496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 57,
        span: 2496..2497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 58,
        span: 2497..2498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 93,
        column: 7,
        span: 2500..2506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 8,
        span: 2506..2507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 93,
        column: 10,
        span: 2507..2509,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
        column: 11,
        span: 2509..2510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 93,
        column: 17,
        span: 2510..2516,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 18,
        span: 2516..2517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 19,
        span: 2517..2518,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 93,
        column: 20,
        span: 2518..2519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 93,
        column: 24,
        span: 2519..2523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 25,
        span: 2523..2524,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 93,
        column: 30,
        span: 2524..2529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 31,
        span: 2529..2530,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 93,
        column: 34,
        span: 2531..2533,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 93,
        column: 36,
        span: 2533..2535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 37,
        span: 2535..2536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 95,
        column: 7,
        span: 2538..2544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 8,
        span: 2544..2545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 95,
        column: 10,
        span: 2545..2547,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 95,
        column: 11,
        span: 2547..2548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 95,
        column: 16,
        span: 2548..2553,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 17,
        span: 2553..2554,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"álo\"'",
        ),
        line: 95,
        column: 24,
        span: 2554..2561,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 25,
        span: 2561..2562,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"{a}\\n\"",
        ),
        line: 95,
        column: 33,
        span: 2563..2570,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 34,
        span: 2570..2571,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second line\\n\"",
        ),
        line: 95,
        column: 50,
        span: 2572..2587,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 51,
        span: 2587..2588,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"third line \\n\"",
        ),
        line: 95,
        column: 67,
        span: 2589..2604,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 68,
        span: 2604..2605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 69,
        span: 2605..2606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 96,
        column: 7,
        span: 2607..2613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 8,
        span: 2613..2614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 96,
        column: 10,
        span: 2614..2616,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 96,
        column: 11,
        span: 2616..2617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 96,
        column: 16,
        span: 2617..2622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 17,
        span: 2622..2623,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'çfourth_line'",
        ),
        line: 96,
        column: 31,
        span: 2623..2637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 32,
        span: 2637..2638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 33,
        span: 2638..2639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 97,
        column: 3,
        span: 2640..2642,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 97,
        column: 4,
        span: 2642..2643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 97,
        column: 10,
        span: 2643..2649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 11,
        span: 2649..2650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 97,
        column: 13,
        span: 2650..2652,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 97,
        column: 14,
        span: 2652..2653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 97,
        column: 20,
        span: 2653..2659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 21,
        span: 2659..2660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 98,
        column: 15,
        span: 2661..2675,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 16,
        span: 2675..2676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 17,
        span: 2676..2677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 99,
        column: 7,
        span: 2710..2716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 8,
        span: 2716..2717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 99,
        column: 10,
        span: 2717..2719,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 11,
        span: 2719..2720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 99,
        column: 16,
        span: 2720..2725,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 17,
        span: 2725..2726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 18,
        span: 2726..2727,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 99,
        column: 21,
        span: 2728..2730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 99,
        column: 24,
        span: 2731..2733,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 25,
        span: 2733..2734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 99,
        column: 30,
        span: 2734..2739,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 99,
        column: 34,
        span: 2740..2743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawequal",
        ),
        line: 99,
        column: 43,
        span: 2744..2752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 44,
        span: 2752..2753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 99,
        column: 46,
        span: 2753..2755,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 47,
        span: 2755..2756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 99,
        column: 53,
        span: 2756..2762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 54,
        span: 2762..2763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 55,
        span: 2763..2764,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 56,
        span: 2764..2765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 99,
        column: 59,
        span: 2766..2768,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 60,
        span: 2768..2769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 99,
        column: 66,
        span: 2769..2775,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 67,
        span: 2775..2776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 68,
        span: 2776..2777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 100,
        column: 6,
        span: 2778..2783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 7,
        span: 2783..2784,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 100,
        column: 10,
        span: 2784..2787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 11,
        span: 2787..2788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 103,
        column: 15,
        span: 2811..2825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 16,
        span: 2825..2826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 17,
        span: 2826..2827,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 104,
        column: 4,
        span: 2828..2831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 104,
        column: 6,
        span: 2832..2833,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 104,
        column: 7,
        span: 2833..2834,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 8,
        span: 2833..2835,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 104,
        column: 9,
        span: 2835..2836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 12,
        span: 2835..2839,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 104,
        column: 0,
        span: 2840..2842,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 105,
        column: 6,
        span: 2845..2848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 105,
        column: 8,
        span: 2849..2850,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 9,
        span: 2850..2851,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 10,
        span: 2850..2852,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 11,
        span: 2852..2853,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 12,
        span: 2852..2854,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 105,
        column: 0,
        span: 2855..2857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 106,
        column: 7,
        span: 2862..2864,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 106,
        column: 8,
        span: 2864..2865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 106,
        column: 13,
        span: 2865..2870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 14,
        span: 2870..2871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 106,
        column: 18,
        span: 2871..2875,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 19,
        span: 2875..2876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 107,
        column: 11,
        span: 2881..2887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 12,
        span: 2887..2888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 107,
        column: 14,
        span: 2888..2890,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 107,
        column: 15,
        span: 2890..2891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 107,
        column: 19,
        span: 2891..2895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 20,
        span: 2895..2896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 107,
        column: 24,
        span: 2896..2900,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 107,
        column: 25,
        span: 2900..2901,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        line: 107,
        column: 29,
        span: 2902..2905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 30,
        span: 2905..2906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 31,
        span: 2906..2907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 108,
        column: 7,
        span: 2912..2914,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 108,
        column: 8,
        span: 2914..2915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 108,
        column: 13,
        span: 2915..2920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 14,
        span: 2920..2921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 108,
        column: 18,
        span: 2921..2925,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 19,
        span: 2925..2926,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 109,
        column: 0,
        span: 2929..2932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 110,
        column: 17,
        span: 2935..2949,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 18,
        span: 2949..2950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 19,
        span: 2950..2951,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 111,
        column: 0,
        span: 2952..2955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 113,
        column: 3,
        span: 2957..2959,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 113,
        column: 4,
        span: 2959..2960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 113,
        column: 9,
        span: 2960..2965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 10,
        span: 2965..2966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 11,
        span: 2966..2967,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 113,
        column: 12,
        span: 2967..2968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 113,
        column: 17,
        span: 2968..2973,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 18,
        span: 2973..2974,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 19,
        span: 2974..2975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 114,
        column: 3,
        span: 2976..2978,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 114,
        column: 4,
        span: 2978..2979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 114,
        column: 9,
        span: 2979..2984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 10,
        span: 2984..2985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 11,
        span: 2985..2986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 116,
        column: 7,
        span: 2988..2994,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 8,
        span: 2994..2995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 116,
        column: 10,
        span: 2995..2997,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 116,
        column: 11,
        span: 2997..2998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rename",
        ),
        line: 116,
        column: 17,
        span: 2998..3004,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 18,
        span: 3004..3005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 116,
        column: 22,
        span: 3005..3009,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 23,
        span: 3009..3010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 116,
        column: 33,
        span: 3011..3020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 34,
        span: 3020..3021,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 35,
        span: 3021..3022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 117,
        column: 7,
        span: 3023..3029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 8,
        span: 3029..3030,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 117,
        column: 11,
        span: 3030..3033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 117,
        column: 14,
        span: 3034..3036,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 117,
        column: 15,
        span: 3036..3037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rename",
        ),
        line: 117,
        column: 21,
        span: 3037..3043,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 22,
        span: 3043..3044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 117,
        column: 26,
        span: 3044..3048,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 27,
        span: 3048..3049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 117,
        column: 37,
        span: 3050..3059,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 38,
        span: 3059..3060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 39,
        span: 3060..3061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 119,
        column: 3,
        span: 3063..3065,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 119,
        column: 4,
        span: 3065..3066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 119,
        column: 10,
        span: 3066..3072,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 11,
        span: 3072..3073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 119,
        column: 13,
        span: 3073..3075,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 119,
        column: 14,
        span: 3075..3076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 119,
        column: 18,
        span: 3076..3080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 19,
        span: 3080..3081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 119,
        column: 28,
        span: 3081..3090,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 29,
        span: 3090..3091,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\"",
        ),
        line: 119,
        column: 34,
        span: 3092..3096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 35,
        span: 3096..3097,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 36,
        span: 3097..3098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 120,
        column: 7,
        span: 3099..3105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 8,
        span: 3105..3106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 120,
        column: 10,
        span: 3106..3108,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 120,
        column: 11,
        span: 3108..3109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 120,
        column: 16,
        span: 3109..3114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 17,
        span: 3114..3115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\n\\t\\t  \"",
        ),
        line: 120,
        column: 29,
        span: 3115..3127,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 30,
        span: 3127..3128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3450",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 35,
        span: 3128..3133,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 36,
        span: 3133..3134,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 120,
        column: 41,
        span: 3135..3139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 42,
        span: 3139..3140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 43,
        span: 3140..3141,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 120,
        column: 44,
        span: 3141..3142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 121,
        column: 3,
        span: 3143..3145,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 121,
        column: 4,
        span: 3145..3146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 121,
        column: 9,
        span: 3146..3151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 10,
        span: 3151..3152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 11,
        span: 3152..3153,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 124,
        column: 0,
        span: 3156..3158,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 126,
        column: 8,
        span: 3188..3193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 126,
        column: 10,
        span: 3194..3195,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 126,
        column: 12,
        span: 3196..3197,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 126,
        column: 0,
        span: 3198..3201,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 127,
        column: 0,
        span: 3204..3206,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 128,
        column: 10,
        span: 3211..3216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 128,
        column: 12,
        span: 3217..3218,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 128,
        column: 14,
        span: 3219..3220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 128,
        column: 19,
        span: 3220..3225,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 128,
        column: 20,
        span: 3225..3226,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
        column: 22,
        span: 3227..3228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 128,
        column: 29,
        span: 3229..3235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 30,
        span: 3235..3236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 128,
        column: 32,
        span: 3236..3238,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 128,
        column: 33,
        span: 3238..3239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 128,
        column: 37,
        span: 3239..3243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 38,
        span: 3243..3244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 128,
        column: 42,
        span: 3244..3248,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 43,
        span: 3248..3249,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 128,
        column: 47,
        span: 3250..3253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 48,
        span: 3253..3254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 49,
        span: 3254..3255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 129,
        column: 6,
        span: 3260..3261,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
        column: 8,
        span: 3262..3263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 129,
        column: 0,
        span: 3264..3265,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 130,
        column: 0,
        span: 3268..3271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 131,
        column: 9,
        span: 3274..3280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 10,
        span: 3280..3281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 131,
        column: 18,
        span: 3281..3289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 19,
        span: 3289..3290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 131,
        column: 20,
        span: 3290..3291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 21,
        span: 3291..3292,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
        column: 24,
        span: 3293..3295,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file (closed)\"",
        ),
        line: 131,
        column: 40,
        span: 3296..3311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 41,
        span: 3311..3312,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 132,
        column: 0,
        span: 3313..3316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 133,
        column: 7,
        span: 3317..3323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 8,
        span: 3323..3324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 133,
        column: 10,
        span: 3324..3326,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 133,
        column: 11,
        span: 3326..3327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 133,
        column: 17,
        span: 3327..3333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 18,
        span: 3333..3334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 133,
        column: 22,
        span: 3334..3338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 23,
        span: 3338..3339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 24,
        span: 3339..3340,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 136,
        column: 0,
        span: 3343..3345,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 138,
        column: 8,
        span: 3382..3387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 138,
        column: 10,
        span: 3388..3389,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 138,
        column: 12,
        span: 3390..3391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 138,
        column: 17,
        span: 3391..3396,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 138,
        column: 18,
        span: 3396..3397,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 138,
        column: 20,
        span: 3398..3399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
        column: 27,
        span: 3400..3406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 28,
        span: 3406..3407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 138,
        column: 30,
        span: 3407..3409,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 138,
        column: 31,
        span: 3409..3410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 138,
        column: 35,
        span: 3410..3414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 36,
        span: 3414..3415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 138,
        column: 40,
        span: 3415..3419,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 41,
        span: 3419..3420,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 138,
        column: 45,
        span: 3421..3424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 46,
        span: 3424..3425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 47,
        span: 3425..3426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 139,
        column: 4,
        span: 3429..3430,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 139,
        column: 5,
        span: 3430..3431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 139,
        column: 10,
        span: 3431..3436,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 11,
        span: 3436..3437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 139,
        column: 17,
        span: 3437..3443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 18,
        span: 3443..3444,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        line: 139,
        column: 23,
        span: 3445..3449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 24,
        span: 3449..3450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 140,
        column: 4,
        span: 3453..3454,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 140,
        column: 5,
        span: 3454..3455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 140,
        column: 10,
        span: 3455..3460,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 11,
        span: 3460..3461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 140,
        column: 17,
        span: 3461..3467,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 140,
        column: 18,
        span: 3467..3468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 140,
        column: 24,
        span: 3468..3474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 25,
        span: 3474..3475,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0X%x\\n\"",
        ),
        line: 140,
        column: 33,
        span: 3475..3483,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 34,
        span: 3483..3484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 140,
        column: 41,
        span: 3485..3491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 42,
        span: 3491..3492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 43,
        span: 3492..3493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 141,
        column: 4,
        span: 3496..3497,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 141,
        column: 5,
        span: 3497..3498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 141,
        column: 10,
        span: 3498..3503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 11,
        span: 3503..3504,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0xABCp-3\"",
        ),
        line: 141,
        column: 21,
        span: 3504..3514,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 22,
        span: 3514..3515,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        line: 141,
        column: 27,
        span: 3516..3520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 28,
        span: 3520..3521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 142,
        column: 4,
        span: 3524..3525,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 142,
        column: 5,
        span: 3525..3526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 142,
        column: 10,
        span: 3526..3531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 11,
        span: 3531..3532,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 12,
        span: 3531..3533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 13,
        span: 3533..3534,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        line: 142,
        column: 18,
        span: 3535..3539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 19,
        span: 3539..3540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 143,
        column: 4,
        span: 3543..3544,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 143,
        column: 5,
        span: 3544..3545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 143,
        column: 10,
        span: 3545..3550,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 11,
        span: 3550..3551,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 143,
        column: 12,
        span: 3551..3552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 143,
        column: 18,
        span: 3552..3558,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 19,
        span: 3558..3559,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        line: 143,
        column: 24,
        span: 3560..3564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 25,
        span: 3564..3565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 144,
        column: 4,
        span: 3568..3569,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 144,
        column: 5,
        span: 3569..3570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 144,
        column: 10,
        span: 3570..3575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 11,
        span: 3575..3576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 144,
        column: 17,
        span: 3576..3582,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 144,
        column: 18,
        span: 3582..3583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 144,
        column: 24,
        span: 3583..3589,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 25,
        span: 3589..3590,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x%X\\n\"",
        ),
        line: 144,
        column: 33,
        span: 3590..3598,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 144,
        column: 34,
        span: 3598..3599,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 144,
        column: 36,
        span: 3600..3601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 144,
        column: 42,
        span: 3601..3607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 43,
        span: 3607..3608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 44,
        span: 3608..3609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 145,
        column: 4,
        span: 3612..3613,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 145,
        column: 5,
        span: 3613..3614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 145,
        column: 10,
        span: 3614..3619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 11,
        span: 3619..3620,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-0xABCp-3\"",
        ),
        line: 145,
        column: 22,
        span: 3620..3631,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 23,
        span: 3631..3632,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        line: 145,
        column: 28,
        span: 3633..3637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 29,
        span: 3637..3638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 146,
        column: 9,
        span: 3641..3647,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 10,
        span: 3647..3648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 146,
        column: 11,
        span: 3648..3649,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 146,
        column: 12,
        span: 3649..3650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 146,
        column: 17,
        span: 3650..3655,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 18,
        span: 3655..3656,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 19,
        span: 3656..3657,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 20,
        span: 3657..3658,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 147,
        column: 8,
        span: 3661..3666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 147,
        column: 10,
        span: 3667..3668,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 147,
        column: 12,
        span: 3669..3670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 147,
        column: 17,
        span: 3670..3675,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 147,
        column: 18,
        span: 3675..3676,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 147,
        column: 20,
        span: 3677..3678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
        column: 27,
        span: 3679..3685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 28,
        span: 3685..3686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 147,
        column: 30,
        span: 3686..3688,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 147,
        column: 31,
        span: 3688..3689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 147,
        column: 35,
        span: 3689..3693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 36,
        span: 3693..3694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 147,
        column: 40,
        span: 3694..3698,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
        column: 41,
        span: 3698..3699,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        line: 147,
        column: 45,
        span: 3700..3703,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 46,
        span: 3703..3704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 47,
        span: 3704..3705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 148,
        column: 9,
        span: 3708..3714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 10,
        span: 3714..3715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 148,
        column: 11,
        span: 3715..3716,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 148,
        column: 12,
        span: 3716..3717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 148,
        column: 16,
        span: 3717..3721,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 17,
        span: 3721..3722,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 148,
        column: 20,
        span: 3722..3725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 21,
        span: 3725..3726,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 148,
        column: 24,
        span: 3727..3729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 148,
        column: 31,
        span: 3730..3736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 32,
        span: 3736..3737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 149,
        column: 9,
        span: 3740..3746,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 10,
        span: 3746..3747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 149,
        column: 11,
        span: 3747..3748,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 149,
        column: 12,
        span: 3748..3749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 149,
        column: 16,
        span: 3749..3753,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 17,
        span: 3753..3754,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 149,
        column: 20,
        span: 3754..3757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 21,
        span: 3757..3758,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 149,
        column: 24,
        span: 3759..3761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 149,
        column: 31,
        span: 3762..3768,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 32,
        span: 3768..3769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 150,
        column: 9,
        span: 3772..3778,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 10,
        span: 3778..3779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 150,
        column: 11,
        span: 3779..3780,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 150,
        column: 12,
        span: 3780..3781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 150,
        column: 16,
        span: 3781..3785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 17,
        span: 3785..3786,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 150,
        column: 20,
        span: 3786..3789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 21,
        span: 3789..3790,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
        column: 24,
        span: 3791..3793,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "0ABC",
                    after_decimal: "",
                },
                exponent: "-3",
            },
        ),
        line: 150,
        column: 33,
        span: 3793..3802,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 34,
        span: 3802..3803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 151,
        column: 9,
        span: 3806..3812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 10,
        span: 3812..3813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 151,
        column: 11,
        span: 3813..3814,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 151,
        column: 12,
        span: 3814..3815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 151,
        column: 16,
        span: 3815..3819,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 17,
        span: 3819..3820,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 151,
        column: 20,
        span: 3820..3823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 21,
        span: 3823..3824,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 151,
        column: 24,
        span: 3825..3827,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
        column: 26,
        span: 3827..3829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 27,
        span: 3829..3830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 152,
        column: 9,
        span: 3833..3839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 10,
        span: 3839..3840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 152,
        column: 11,
        span: 3840..3841,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 152,
        column: 12,
        span: 3841..3842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 152,
        column: 16,
        span: 3842..3846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 17,
        span: 3846..3847,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*n\"",
        ),
        line: 152,
        column: 21,
        span: 3847..3851,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 22,
        span: 3851..3852,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 152,
        column: 25,
        span: 3853..3855,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 152,
        column: 27,
        span: 3856..3857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 152,
        column: 33,
        span: 3857..3863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 34,
        span: 3863..3864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 153,
        column: 9,
        span: 3908..3914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 10,
        span: 3914..3915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 153,
        column: 11,
        span: 3915..3916,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 153,
        column: 12,
        span: 3916..3917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 153,
        column: 16,
        span: 3917..3921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 17,
        span: 3921..3922,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 153,
        column: 20,
        span: 3922..3925,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 21,
        span: 3925..3926,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 153,
        column: 24,
        span: 3927..3929,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 153,
        column: 26,
        span: 3930..3931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 153,
        column: 32,
        span: 3931..3937,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 33,
        span: 3937..3938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
        column: 9,
        span: 3941..3947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 10,
        span: 3947..3948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 154,
        column: 11,
        span: 3948..3949,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 154,
        column: 12,
        span: 3949..3950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 154,
        column: 16,
        span: 3950..3954,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 17,
        span: 3954..3955,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*n\"",
        ),
        line: 154,
        column: 21,
        span: 3955..3959,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 22,
        span: 3959..3960,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 25,
        span: 3961..3963,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 154,
        column: 27,
        span: 3964..3965,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "0ABC",
                    after_decimal: "",
                },
                exponent: "-3",
            },
        ),
        line: 154,
        column: 35,
        span: 3964..3973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 36,
        span: 3973..3974,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 155,
        column: 0,
        span: 4016..4019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 156,
        column: 7,
        span: 4020..4026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 8,
        span: 4026..4027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 156,
        column: 10,
        span: 4027..4029,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 156,
        column: 11,
        span: 4029..4030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 156,
        column: 17,
        span: 4030..4036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 18,
        span: 4036..4037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 156,
        column: 22,
        span: 4037..4041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 23,
        span: 4041..4042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 24,
        span: 4042..4043,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 160,
        column: 0,
        span: 4087..4089,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 161,
        column: 8,
        span: 4092..4097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 161,
        column: 10,
        span: 4098..4099,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 161,
        column: 12,
        span: 4100..4101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 161,
        column: 17,
        span: 4101..4106,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 161,
        column: 18,
        span: 4106..4107,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
        column: 20,
        span: 4108..4109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 161,
        column: 27,
        span: 4110..4116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 28,
        span: 4116..4117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 161,
        column: 30,
        span: 4117..4119,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 161,
        column: 31,
        span: 4119..4120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 161,
        column: 35,
        span: 4120..4124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 36,
        span: 4124..4125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 161,
        column: 40,
        span: 4125..4129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 41,
        span: 4129..4130,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 161,
        column: 45,
        span: 4131..4134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 46,
        span: 4134..4135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 47,
        span: 4135..4136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 162,
        column: 4,
        span: 4139..4140,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 162,
        column: 5,
        span: 4140..4141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 162,
        column: 10,
        span: 4141..4146,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\na line\nanother line\n1234\n3.45\none\ntwo\nthree\n]]",
        ),
        line: 170,
        column: 3,
        span: 4146..4195,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 171,
        column: 8,
        span: 4198..4203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 171,
        column: 11,
        span: 4204..4206,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 12,
        span: 4206..4207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l2",
        ),
        line: 171,
        column: 15,
        span: 4208..4210,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 16,
        span: 4210..4211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l3",
        ),
        line: 171,
        column: 19,
        span: 4212..4214,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 20,
        span: 4214..4215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l4",
        ),
        line: 171,
        column: 23,
        span: 4216..4218,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 24,
        span: 4218..4219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n1",
        ),
        line: 171,
        column: 27,
        span: 4220..4222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 28,
        span: 4222..4223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n2",
        ),
        line: 171,
        column: 31,
        span: 4224..4226,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 32,
        span: 4226..4227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 171,
        column: 34,
        span: 4228..4229,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 35,
        span: 4229..4230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 171,
        column: 0,
        span: 4231..4236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 172,
        column: 9,
        span: 4239..4245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 10,
        span: 4245..4246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 172,
        column: 11,
        span: 4246..4247,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 172,
        column: 12,
        span: 4247..4248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 172,
        column: 17,
        span: 4248..4253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 18,
        span: 4253..4254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 19,
        span: 4254..4255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 20,
        span: 4255..4256,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 173,
        column: 8,
        span: 4259..4264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 173,
        column: 10,
        span: 4265..4266,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 173,
        column: 12,
        span: 4267..4268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 173,
        column: 17,
        span: 4268..4273,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 173,
        column: 18,
        span: 4273..4274,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
        column: 20,
        span: 4275..4276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 173,
        column: 27,
        span: 4277..4283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 28,
        span: 4283..4284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 173,
        column: 30,
        span: 4284..4286,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 173,
        column: 31,
        span: 4286..4287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 173,
        column: 35,
        span: 4287..4291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 36,
        span: 4291..4292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 173,
        column: 40,
        span: 4292..4296,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 41,
        span: 4296..4297,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        line: 173,
        column: 45,
        span: 4298..4301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 46,
        span: 4301..4302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 47,
        span: 4302..4303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 174,
        column: 5,
        span: 4306..4308,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 6,
        span: 4308..4309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l2",
        ),
        line: 174,
        column: 9,
        span: 4310..4312,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 10,
        span: 4312..4313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n1",
        ),
        line: 174,
        column: 13,
        span: 4314..4316,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 14,
        span: 4316..4317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n2",
        ),
        line: 174,
        column: 17,
        span: 4318..4320,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 18,
        span: 4320..4321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 174,
        column: 24,
        span: 4322..4327,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 174,
        column: 26,
        span: 4328..4329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 174,
        column: 28,
        span: 4330..4331,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 174,
        column: 29,
        span: 4331..4332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 174,
        column: 33,
        span: 4332..4336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 34,
        span: 4336..4337,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 174,
        column: 37,
        span: 4337..4340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 38,
        span: 4340..4341,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 174,
        column: 42,
        span: 4342..4345,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 43,
        span: 4345..4346,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 174,
        column: 47,
        span: 4347..4350,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 48,
        span: 4350..4351,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 174,
        column: 52,
        span: 4352..4355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 53,
        span: 4355..4356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 175,
        column: 9,
        span: 4359..4365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 10,
        span: 4365..4366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 175,
        column: 12,
        span: 4366..4368,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 15,
        span: 4369..4371,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a line\"",
        ),
        line: 175,
        column: 24,
        span: 4372..4380,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 175,
        column: 28,
        span: 4381..4384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l2",
        ),
        line: 175,
        column: 31,
        span: 4385..4387,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 34,
        span: 4388..4390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"another line\\n\"",
        ),
        line: 175,
        column: 51,
        span: 4391..4407,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 175,
        column: 0,
        span: 4408..4411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n1",
        ),
        line: 176,
        column: 12,
        span: 4421..4423,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 176,
        column: 15,
        span: 4424..4426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1234",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 20,
        span: 4426..4431,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 176,
        column: 24,
        span: 4432..4435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n2",
        ),
        line: 176,
        column: 27,
        span: 4436..4438,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 176,
        column: 30,
        span: 4439..4441,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".45",
                },
            ),
        ),
        line: 176,
        column: 35,
        span: 4441..4446,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 176,
        column: 39,
        span: 4447..4450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 176,
        column: 45,
        span: 4451..4456,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 176,
        column: 48,
        span: 4457..4459,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 176,
        column: 52,
        span: 4460..4463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 53,
        span: 4463..4464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 177,
        column: 9,
        span: 4467..4473,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 10,
        span: 4473..4474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 177,
        column: 11,
        span: 4474..4475,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 177,
        column: 12,
        span: 4475..4476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 177,
        column: 17,
        span: 4476..4481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 18,
        span: 4481..4482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 19,
        span: 4482..4483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 20,
        span: 4483..4484,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 178,
        column: 8,
        span: 4487..4492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 178,
        column: 10,
        span: 4493..4494,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 178,
        column: 12,
        span: 4495..4496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 178,
        column: 17,
        span: 4496..4501,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 178,
        column: 18,
        span: 4501..4502,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 178,
        column: 20,
        span: 4503..4504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 178,
        column: 27,
        span: 4505..4511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 28,
        span: 4511..4512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 178,
        column: 30,
        span: 4512..4514,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 178,
        column: 31,
        span: 4514..4515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 178,
        column: 35,
        span: 4515..4519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 36,
        span: 4519..4520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 178,
        column: 40,
        span: 4520..4524,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 41,
        span: 4524..4525,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        line: 178,
        column: 45,
        span: 4526..4529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 46,
        span: 4529..4530,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 47,
        span: 4530..4531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 179,
        column: 5,
        span: 4534..4536,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 6,
        span: 4536..4537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l2",
        ),
        line: 179,
        column: 9,
        span: 4538..4540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 10,
        span: 4540..4541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n1",
        ),
        line: 179,
        column: 13,
        span: 4542..4544,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 14,
        span: 4544..4545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n2",
        ),
        line: 179,
        column: 17,
        span: 4546..4548,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 18,
        span: 4548..4549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 179,
        column: 20,
        span: 4550..4551,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 21,
        span: 4551..4552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l3",
        ),
        line: 179,
        column: 24,
        span: 4553..4555,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 25,
        span: 4555..4556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l4",
        ),
        line: 179,
        column: 28,
        span: 4557..4559,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 29,
        span: 4559..4560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 179,
        column: 35,
        span: 4561..4566,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 179,
        column: 37,
        span: 4567..4568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 179,
        column: 39,
        span: 4569..4570,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 179,
        column: 40,
        span: 4570..4571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 179,
        column: 44,
        span: 4571..4575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 45,
        span: 4575..4576,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 46,
        span: 4575..4577,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 47,
        span: 4577..4578,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 179,
        column: 51,
        span: 4579..4582,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 52,
        span: 4582..4583,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 179,
        column: 56,
        span: 4584..4587,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 57,
        span: 4587..4588,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 179,
        column: 61,
        span: 4589..4592,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 62,
        span: 4592..4593,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 64,
        span: 4593..4595,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 65,
        span: 4595..4596,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 179,
        column: 69,
        span: 4597..4600,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 70,
        span: 4600..4601,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 179,
        column: 74,
        span: 4602..4605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 75,
        span: 4605..4606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 180,
        column: 9,
        span: 4609..4615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 10,
        span: 4615..4616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 180,
        column: 12,
        span: 4616..4618,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 180,
        column: 15,
        span: 4619..4621,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a line\\n\"",
        ),
        line: 180,
        column: 26,
        span: 4622..4632,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 180,
        column: 30,
        span: 4633..4636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l2",
        ),
        line: 180,
        column: 33,
        span: 4637..4639,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 180,
        column: 36,
        span: 4640..4642,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"another line\"",
        ),
        line: 180,
        column: 51,
        span: 4643..4657,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 180,
        column: 55,
        span: 4658..4661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 180,
        column: 57,
        span: 4662..4663,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 180,
        column: 60,
        span: 4664..4666,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        line: 180,
        column: 65,
        span: 4667..4671,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 180,
        column: 0,
        span: 4672..4675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n1",
        ),
        line: 181,
        column: 12,
        span: 4685..4687,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 181,
        column: 15,
        span: 4688..4690,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1234",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 20,
        span: 4690..4695,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 181,
        column: 24,
        span: 4696..4699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n2",
        ),
        line: 181,
        column: 27,
        span: 4700..4702,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 181,
        column: 30,
        span: 4703..4705,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".45",
                },
            ),
        ),
        line: 181,
        column: 35,
        span: 4705..4710,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 181,
        column: 39,
        span: 4711..4714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l3",
        ),
        line: 181,
        column: 42,
        span: 4715..4717,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 181,
        column: 45,
        span: 4718..4720,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"one\"",
        ),
        line: 181,
        column: 51,
        span: 4721..4726,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 181,
        column: 55,
        span: 4727..4730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l4",
        ),
        line: 181,
        column: 58,
        span: 4731..4733,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 181,
        column: 61,
        span: 4734..4736,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"two\"",
        ),
        line: 181,
        column: 67,
        span: 4737..4742,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 182,
        column: 13,
        span: 4752..4755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 182,
        column: 19,
        span: 4756..4761,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 182,
        column: 22,
        span: 4762..4764,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 182,
        column: 26,
        span: 4765..4768,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 27,
        span: 4768..4769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 183,
        column: 9,
        span: 4772..4778,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 10,
        span: 4778..4779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 183,
        column: 11,
        span: 4779..4780,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 183,
        column: 12,
        span: 4780..4781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 183,
        column: 17,
        span: 4781..4786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 18,
        span: 4786..4787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 19,
        span: 4787..4788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 20,
        span: 4788..4789,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 184,
        column: 8,
        span: 4792..4797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 184,
        column: 10,
        span: 4798..4799,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 184,
        column: 12,
        span: 4800..4801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 184,
        column: 17,
        span: 4801..4806,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 184,
        column: 18,
        span: 4806..4807,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 184,
        column: 20,
        span: 4808..4809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 184,
        column: 27,
        span: 4810..4816,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 28,
        span: 4816..4817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 184,
        column: 30,
        span: 4817..4819,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 184,
        column: 31,
        span: 4819..4820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 184,
        column: 35,
        span: 4820..4824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 36,
        span: 4824..4825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 184,
        column: 40,
        span: 4825..4829,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 41,
        span: 4829..4830,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        line: 184,
        column: 45,
        span: 4831..4834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 46,
        span: 4834..4835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 47,
        span: 4835..4836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 186,
        column: 5,
        span: 4864..4866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 6,
        span: 4866..4867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n1",
        ),
        line: 186,
        column: 9,
        span: 4868..4870,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 10,
        span: 4870..4871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n2",
        ),
        line: 186,
        column: 13,
        span: 4872..4874,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 14,
        span: 4874..4875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 186,
        column: 20,
        span: 4876..4881,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 186,
        column: 22,
        span: 4882..4883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 186,
        column: 24,
        span: 4884..4885,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 186,
        column: 25,
        span: 4885..4886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 186,
        column: 29,
        span: 4886..4890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 30,
        span: 4890..4891,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 186,
        column: 33,
        span: 4891..4894,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 34,
        span: 4894..4895,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 186,
        column: 38,
        span: 4896..4899,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 39,
        span: 4899..4900,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 186,
        column: 43,
        span: 4901..4904,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 44,
        span: 4904..4905,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 186,
        column: 48,
        span: 4906..4909,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 49,
        span: 4909..4910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 187,
        column: 9,
        span: 4913..4919,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 10,
        span: 4919..4920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 187,
        column: 12,
        span: 4920..4922,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
        column: 15,
        span: 4923..4925,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a line\"",
        ),
        line: 187,
        column: 24,
        span: 4926..4934,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 187,
        column: 28,
        span: 4935..4938,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 187,
        column: 32,
        span: 4939..4942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n1",
        ),
        line: 187,
        column: 35,
        span: 4943..4945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 36,
        span: 4945..4946,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 188,
        column: 0,
        span: 4947..4950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 189,
        column: 7,
        span: 4951..4957,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 8,
        span: 4957..4958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 189,
        column: 10,
        span: 4958..4960,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 189,
        column: 11,
        span: 4960..4961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 189,
        column: 17,
        span: 4961..4967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 18,
        span: 4967..4968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 189,
        column: 22,
        span: 4968..4972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 23,
        span: 4972..4973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 24,
        span: 4973..4974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 194,
        column: 2,
        span: 5011..5012,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 194,
        column: 4,
        span: 5013..5014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 194,
        column: 11,
        span: 5015..5021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 12,
        span: 5021..5022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 194,
        column: 14,
        span: 5022..5024,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 194,
        column: 15,
        span: 5024..5025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 194,
        column: 19,
        span: 5025..5029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 20,
        span: 5029..5030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 194,
        column: 24,
        span: 5030..5034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
        column: 25,
        span: 5034..5035,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 194,
        column: 29,
        span: 5036..5039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 30,
        span: 5039..5040,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 31,
        span: 5040..5041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 195,
        column: 2,
        span: 5042..5043,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 195,
        column: 3,
        span: 5043..5044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 195,
        column: 8,
        span: 5044..5049,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal x, z = coroutine.yield(10)\nlocal y = coroutine.yield(20)\nreturn x + y * z\n]]",
        ),
        line: 199,
        column: 3,
        span: 5049..5134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 200,
        column: 7,
        span: 5135..5141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 8,
        span: 5141..5142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 200,
        column: 9,
        span: 5142..5143,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 200,
        column: 10,
        span: 5143..5144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 200,
        column: 15,
        span: 5144..5149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 16,
        span: 5149..5150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 17,
        span: 5150..5151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 18,
        span: 5151..5152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 201,
        column: 2,
        span: 5153..5154,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 201,
        column: 4,
        span: 5155..5156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 201,
        column: 14,
        span: 5157..5166,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 201,
        column: 15,
        span: 5166..5167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 201,
        column: 19,
        span: 5167..5171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 20,
        span: 5171..5172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 201,
        column: 26,
        span: 5172..5178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 27,
        span: 5178..5179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 202,
        column: 7,
        span: 5180..5186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 8,
        span: 5186..5187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 202,
        column: 9,
        span: 5187..5188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 10,
        span: 5188..5189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 202,
        column: 14,
        span: 5189..5193,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 15,
        span: 5193..5194,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 202,
        column: 18,
        span: 5195..5197,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 202,
        column: 21,
        span: 5197..5200,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 22,
        span: 5200..5201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 203,
        column: 7,
        span: 5202..5208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 8,
        span: 5208..5209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 203,
        column: 9,
        span: 5209..5210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 10,
        span: 5210..5211,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 13,
        span: 5210..5214,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 14,
        span: 5214..5215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 18,
        span: 5215..5219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 19,
        span: 5219..5220,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 203,
        column: 22,
        span: 5221..5223,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 25,
        span: 5223..5226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 26,
        span: 5226..5227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
        column: 7,
        span: 5228..5234,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 8,
        span: 5234..5235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 204,
        column: 9,
        span: 5235..5236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 10,
        span: 5236..5237,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 13,
        span: 5236..5240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 14,
        span: 5240..5241,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 17,
        span: 5242..5244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 21,
        span: 5244..5248,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 204,
        column: 23,
        span: 5249..5250,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 27,
        span: 5250..5254,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 204,
        column: 29,
        span: 5255..5256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 33,
        span: 5256..5260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 34,
        span: 5260..5261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
        column: 7,
        span: 5262..5268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 8,
        span: 5268..5269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 205,
        column: 10,
        span: 5269..5271,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 205,
        column: 11,
        span: 5271..5272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 205,
        column: 17,
        span: 5272..5278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 18,
        span: 5278..5279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 205,
        column: 22,
        span: 5279..5283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 23,
        span: 5283..5284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 24,
        span: 5284..5285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 208,
        column: 2,
        span: 5288..5289,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 208,
        column: 4,
        span: 5290..5291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 208,
        column: 11,
        span: 5292..5298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 12,
        span: 5298..5299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 208,
        column: 14,
        span: 5299..5301,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 208,
        column: 15,
        span: 5301..5302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 208,
        column: 19,
        span: 5302..5306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 20,
        span: 5306..5307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 208,
        column: 24,
        span: 5307..5311,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 25,
        span: 5311..5312,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 208,
        column: 29,
        span: 5313..5316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 30,
        span: 5316..5317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 31,
        span: 5317..5318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 210,
        column: 2,
        span: 5346..5347,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 210,
        column: 3,
        span: 5347..5348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 210,
        column: 8,
        span: 5348..5353,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n-12.3-\t-0xffff+  .3|5.E-3X  +234e+13E 0xDEADBEEFDEADBEEFx\n0x1.13Ap+3e\n]]",
        ),
        line: 213,
        column: 3,
        span: 5353..5428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 215,
        column: 2,
        span: 5449..5450,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 215,
        column: 3,
        span: 5450..5451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 215,
        column: 8,
        span: 5451..5456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 9,
        span: 5456..5457,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234\"",
        ),
        line: 215,
        column: 15,
        span: 5457..5463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 16,
        span: 5463..5464,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 215,
        column: 17,
        span: 5464..5465,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 215,
        column: 21,
        span: 5466..5469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 215,
        column: 23,
        span: 5470..5471,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 215,
        column: 25,
        span: 5472..5473,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 27,
        span: 5473..5475,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
        column: 28,
        span: 5475..5476,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 33,
        span: 5476..5481,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 215,
        column: 36,
        span: 5482..5484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 215,
        column: 38,
        span: 5485..5486,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 215,
        column: 39,
        span: 5486..5487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 215,
        column: 44,
        span: 5487..5492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 45,
        span: 5492..5493,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 215,
        column: 48,
        span: 5493..5496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 49,
        span: 5496..5497,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 215,
        column: 53,
        span: 5498..5501,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 215,
        column: 54,
        span: 5501..5502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 215,
        column: 57,
        span: 5504..5505,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 215,
        column: 58,
        span: 5505..5506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 215,
        column: 63,
        span: 5506..5511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 64,
        span: 5511..5512,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 215,
        column: 68,
        span: 5512..5516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 69,
        span: 5516..5517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 217,
        column: 2,
        span: 5578..5579,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 217,
        column: 3,
        span: 5579..5580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 217,
        column: 8,
        span: 5580..5585,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n.e+\t0.e;\t--;  0xX;\n]]",
        ),
        line: 219,
        column: 3,
        span: 5585..5609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 220,
        column: 7,
        span: 5610..5616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 8,
        span: 5616..5617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 220,
        column: 9,
        span: 5617..5618,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 220,
        column: 10,
        span: 5618..5619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 220,
        column: 15,
        span: 5619..5624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 16,
        span: 5624..5625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 17,
        span: 5625..5626,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 18,
        span: 5626..5627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 221,
        column: 2,
        span: 5628..5629,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 221,
        column: 4,
        span: 5630..5631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 221,
        column: 11,
        span: 5632..5638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 12,
        span: 5638..5639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 221,
        column: 14,
        span: 5639..5641,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 221,
        column: 15,
        span: 5641..5642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 221,
        column: 19,
        span: 5642..5646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 20,
        span: 5646..5647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 221,
        column: 24,
        span: 5647..5651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 221,
        column: 25,
        span: 5651..5652,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        line: 221,
        column: 29,
        span: 5653..5656,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 30,
        span: 5656..5657,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 31,
        span: 5657..5658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 222,
        column: 7,
        span: 5659..5665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 8,
        span: 5665..5666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 222,
        column: 9,
        span: 5666..5667,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 222,
        column: 10,
        span: 5667..5668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 222,
        column: 14,
        span: 5668..5672,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 15,
        span: 5672..5673,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 222,
        column: 18,
        span: 5673..5676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 19,
        span: 5676..5677,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 222,
        column: 22,
        span: 5678..5680,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 222,
        column: 24,
        span: 5681..5682,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 222,
        column: 28,
        span: 5681..5686,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 29,
        span: 5686..5687,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 222,
        column: 30,
        span: 5687..5688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 222,
        column: 37,
        span: 5689..5695,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 38,
        span: 5695..5696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 222,
        column: 39,
        span: 5696..5697,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 222,
        column: 40,
        span: 5697..5698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 222,
        column: 44,
        span: 5698..5702,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 45,
        span: 5702..5703,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 222,
        column: 46,
        span: 5702..5704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 47,
        span: 5704..5705,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 222,
        column: 50,
        span: 5706..5708,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        line: 222,
        column: 54,
        span: 5709..5712,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 55,
        span: 5712..5713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 223,
        column: 7,
        span: 5714..5720,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 8,
        span: 5720..5721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 223,
        column: 9,
        span: 5721..5722,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 223,
        column: 10,
        span: 5722..5723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 223,
        column: 14,
        span: 5723..5727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 15,
        span: 5727..5728,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 223,
        column: 18,
        span: 5728..5731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 19,
        span: 5731..5732,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 223,
        column: 22,
        span: 5733..5735,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 223,
        column: 24,
        span: 5736..5737,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffff",
            ),
        ),
        line: 223,
        column: 30,
        span: 5736..5743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 31,
        span: 5743..5744,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 223,
        column: 32,
        span: 5744..5745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 223,
        column: 39,
        span: 5746..5752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 40,
        span: 5752..5753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 223,
        column: 41,
        span: 5753..5754,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 223,
        column: 42,
        span: 5754..5755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 223,
        column: 46,
        span: 5755..5759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 47,
        span: 5759..5760,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 48,
        span: 5759..5761,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 49,
        span: 5761..5762,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 223,
        column: 52,
        span: 5763..5765,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+ \"",
        ),
        line: 223,
        column: 57,
        span: 5766..5770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 58,
        span: 5770..5771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 224,
        column: 7,
        span: 5772..5778,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 8,
        span: 5778..5779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 224,
        column: 9,
        span: 5779..5780,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 224,
        column: 10,
        span: 5780..5781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 224,
        column: 14,
        span: 5781..5785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 15,
        span: 5785..5786,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 224,
        column: 18,
        span: 5786..5789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 19,
        span: 5789..5790,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 224,
        column: 22,
        span: 5791..5793,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 224,
        column: 26,
        span: 5793..5797,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 27,
        span: 5797..5798,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 224,
        column: 28,
        span: 5798..5799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 224,
        column: 35,
        span: 5800..5806,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 36,
        span: 5806..5807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 224,
        column: 37,
        span: 5807..5808,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 224,
        column: 38,
        span: 5808..5809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 224,
        column: 42,
        span: 5809..5813,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 43,
        span: 5813..5814,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 224,
        column: 44,
        span: 5813..5815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 45,
        span: 5815..5816,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 224,
        column: 48,
        span: 5817..5819,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"|\"",
        ),
        line: 224,
        column: 52,
        span: 5820..5823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 53,
        span: 5823..5824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 225,
        column: 7,
        span: 5825..5831,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 8,
        span: 5831..5832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 225,
        column: 9,
        span: 5832..5833,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 225,
        column: 10,
        span: 5833..5834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 225,
        column: 14,
        span: 5834..5838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 15,
        span: 5838..5839,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 225,
        column: 18,
        span: 5839..5842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 19,
        span: 5842..5843,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 225,
        column: 22,
        span: 5844..5846,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
                exponent: "-3",
            },
        ),
        line: 225,
        column: 27,
        span: 5846..5851,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 28,
        span: 5851..5852,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 225,
        column: 29,
        span: 5852..5853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 225,
        column: 36,
        span: 5854..5860,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 37,
        span: 5860..5861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 225,
        column: 38,
        span: 5861..5862,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 225,
        column: 39,
        span: 5862..5863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 225,
        column: 43,
        span: 5863..5867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 44,
        span: 5867..5868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 225,
        column: 45,
        span: 5867..5869,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 46,
        span: 5869..5870,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 225,
        column: 49,
        span: 5871..5873,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 225,
        column: 53,
        span: 5874..5877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 54,
        span: 5877..5878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 226,
        column: 7,
        span: 5879..5885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 8,
        span: 5885..5886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 226,
        column: 9,
        span: 5886..5887,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 226,
        column: 10,
        span: 5887..5888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 226,
        column: 14,
        span: 5888..5892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 15,
        span: 5892..5893,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 226,
        column: 18,
        span: 5893..5896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 19,
        span: 5896..5897,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 226,
        column: 22,
        span: 5898..5900,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "234",
                    after_decimal: "",
                },
                exponent: "13",
            },
        ),
        line: 226,
        column: 29,
        span: 5900..5907,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 30,
        span: 5907..5908,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 226,
        column: 31,
        span: 5908..5909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 226,
        column: 38,
        span: 5910..5916,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 39,
        span: 5916..5917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 226,
        column: 40,
        span: 5917..5918,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 226,
        column: 41,
        span: 5918..5919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 226,
        column: 45,
        span: 5919..5923,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 46,
        span: 5923..5924,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 47,
        span: 5923..5925,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 48,
        span: 5925..5926,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 226,
        column: 51,
        span: 5927..5929,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"E\"",
        ),
        line: 226,
        column: 55,
        span: 5930..5933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 56,
        span: 5933..5934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 227,
        column: 7,
        span: 5935..5941,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 8,
        span: 5941..5942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 227,
        column: 9,
        span: 5942..5943,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 227,
        column: 10,
        span: 5943..5944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 227,
        column: 14,
        span: 5944..5948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 15,
        span: 5948..5949,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 227,
        column: 18,
        span: 5949..5952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 19,
        span: 5952..5953,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 227,
        column: 22,
        span: 5954..5956,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0Xdeadbeefdeadbeef",
            ),
        ),
        line: 227,
        column: 41,
        span: 5956..5975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 42,
        span: 5975..5976,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 227,
        column: 43,
        span: 5976..5977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 227,
        column: 50,
        span: 5978..5984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 51,
        span: 5984..5985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 227,
        column: 52,
        span: 5985..5986,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 227,
        column: 53,
        span: 5986..5987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 227,
        column: 57,
        span: 5987..5991,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 58,
        span: 5991..5992,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 59,
        span: 5991..5993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 60,
        span: 5993..5994,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 227,
        column: 63,
        span: 5995..5997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\\n\"",
        ),
        line: 227,
        column: 69,
        span: 5998..6003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 70,
        span: 6003..6004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 228,
        column: 7,
        span: 6005..6011,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 8,
        span: 6011..6012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 228,
        column: 9,
        span: 6012..6013,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 228,
        column: 10,
        span: 6013..6014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 228,
        column: 14,
        span: 6014..6018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 15,
        span: 6018..6019,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 228,
        column: 18,
        span: 6019..6022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 19,
        span: 6022..6023,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 228,
        column: 22,
        span: 6024..6026,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "01",
                    after_decimal: ".13a",
                },
                exponent: "3",
            },
        ),
        line: 228,
        column: 32,
        span: 6026..6036,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 33,
        span: 6036..6037,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 228,
        column: 34,
        span: 6037..6038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 228,
        column: 41,
        span: 6039..6045,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 42,
        span: 6045..6046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 228,
        column: 43,
        span: 6046..6047,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 228,
        column: 44,
        span: 6047..6048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 228,
        column: 48,
        span: 6048..6052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 49,
        span: 6052..6053,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
        column: 50,
        span: 6052..6054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 51,
        span: 6054..6055,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 228,
        column: 54,
        span: 6056..6058,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"e\"",
        ),
        line: 228,
        column: 58,
        span: 6059..6062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 59,
        span: 6062..6063,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 230,
        column: 3,
        span: 6065..6067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 231,
        column: 9,
        span: 6107..6113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 10,
        span: 6113..6114,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 231,
        column: 13,
        span: 6114..6117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 231,
        column: 15,
        span: 6118..6119,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 231,
        column: 16,
        span: 6119..6120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 231,
        column: 20,
        span: 6120..6124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 21,
        span: 6124..6125,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 231,
        column: 24,
        span: 6125..6128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 25,
        span: 6128..6129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 26,
        span: 6129..6130,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 232,
        column: 8,
        span: 6143..6148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 232,
        column: 10,
        span: 6149..6150,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 232,
        column: 12,
        span: 6151..6152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 232,
        column: 14,
        span: 6153..6154,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 232,
        column: 15,
        span: 6154..6155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 232,
        column: 19,
        span: 6155..6159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 20,
        span: 6159..6160,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 232,
        column: 23,
        span: 6160..6163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 24,
        span: 6163..6164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 233,
        column: 9,
        span: 6190..6196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 10,
        span: 6196..6197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 233,
        column: 16,
        span: 6197..6203,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 233,
        column: 17,
        span: 6203..6204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 233,
        column: 21,
        span: 6204..6208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 22,
        span: 6208..6209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 233,
        column: 23,
        span: 6209..6210,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 24,
        span: 6210..6211,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^00*\\n$\"",
        ),
        line: 233,
        column: 34,
        span: 6212..6221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 35,
        span: 6221..6222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 36,
        span: 6222..6223,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 234,
        column: 0,
        span: 6245..6248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 236,
        column: 7,
        span: 6250..6256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 8,
        span: 6256..6257,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 236,
        column: 11,
        span: 6257..6260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 236,
        column: 13,
        span: 6261..6262,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 236,
        column: 14,
        span: 6262..6263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 236,
        column: 18,
        span: 6263..6267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 19,
        span: 6267..6268,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 236,
        column: 22,
        span: 6268..6271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 23,
        span: 6271..6272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 24,
        span: 6272..6273,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 236,
        column: 25,
        span: 6273..6274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 236,
        column: 32,
        span: 6275..6281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 33,
        span: 6281..6282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 236,
        column: 34,
        span: 6282..6283,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 236,
        column: 35,
        span: 6283..6284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 236,
        column: 39,
        span: 6284..6288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 40,
        span: 6288..6289,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 236,
        column: 41,
        span: 6288..6290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 42,
        span: 6290..6291,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 236,
        column: 45,
        span: 6292..6294,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"e+\"",
        ),
        line: 236,
        column: 50,
        span: 6295..6299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 51,
        span: 6299..6300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 237,
        column: 7,
        span: 6301..6307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 8,
        span: 6307..6308,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 237,
        column: 11,
        span: 6308..6311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 237,
        column: 13,
        span: 6312..6313,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 237,
        column: 14,
        span: 6313..6314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 237,
        column: 18,
        span: 6314..6318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 19,
        span: 6318..6319,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 237,
        column: 22,
        span: 6319..6322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 23,
        span: 6322..6323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 24,
        span: 6323..6324,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 237,
        column: 25,
        span: 6324..6325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 237,
        column: 32,
        span: 6326..6332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 33,
        span: 6332..6333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 237,
        column: 34,
        span: 6333..6334,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 237,
        column: 35,
        span: 6334..6335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 237,
        column: 39,
        span: 6335..6339,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 40,
        span: 6339..6340,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 237,
        column: 41,
        span: 6339..6341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 42,
        span: 6341..6342,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 237,
        column: 45,
        span: 6343..6345,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 237,
        column: 49,
        span: 6346..6349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 50,
        span: 6349..6350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 238,
        column: 7,
        span: 6351..6357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 8,
        span: 6357..6358,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 238,
        column: 11,
        span: 6358..6361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 238,
        column: 13,
        span: 6362..6363,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 238,
        column: 14,
        span: 6363..6364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 238,
        column: 18,
        span: 6364..6368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 19,
        span: 6368..6369,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 238,
        column: 22,
        span: 6369..6372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 23,
        span: 6372..6373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 24,
        span: 6373..6374,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 238,
        column: 25,
        span: 6374..6375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 238,
        column: 32,
        span: 6376..6382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 33,
        span: 6382..6383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 238,
        column: 34,
        span: 6383..6384,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 238,
        column: 35,
        span: 6384..6385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 238,
        column: 39,
        span: 6385..6389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 40,
        span: 6389..6390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 238,
        column: 41,
        span: 6389..6391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 42,
        span: 6391..6392,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 238,
        column: 45,
        span: 6393..6395,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-;\"",
        ),
        line: 238,
        column: 50,
        span: 6396..6400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 51,
        span: 6400..6401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
        column: 7,
        span: 6402..6408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 8,
        span: 6408..6409,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 239,
        column: 11,
        span: 6409..6412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 239,
        column: 13,
        span: 6413..6414,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 239,
        column: 14,
        span: 6414..6415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 239,
        column: 18,
        span: 6415..6419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 19,
        span: 6419..6420,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 239,
        column: 22,
        span: 6420..6423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 23,
        span: 6423..6424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 24,
        span: 6424..6425,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 239,
        column: 25,
        span: 6425..6426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
        column: 32,
        span: 6427..6433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 33,
        span: 6433..6434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 239,
        column: 34,
        span: 6434..6435,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 239,
        column: 35,
        span: 6435..6436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 239,
        column: 39,
        span: 6436..6440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 40,
        span: 6440..6441,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 41,
        span: 6440..6442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 42,
        span: 6442..6443,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 239,
        column: 45,
        span: 6444..6446,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 239,
        column: 49,
        span: 6447..6450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 50,
        span: 6450..6451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 7,
        span: 6452..6458,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 8,
        span: 6458..6459,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 240,
        column: 11,
        span: 6459..6462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 240,
        column: 13,
        span: 6463..6464,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 240,
        column: 14,
        span: 6464..6465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 240,
        column: 18,
        span: 6465..6469,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 19,
        span: 6469..6470,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 240,
        column: 22,
        span: 6470..6473,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 23,
        span: 6473..6474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 24,
        span: 6474..6475,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 240,
        column: 25,
        span: 6475..6476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 32,
        span: 6477..6483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 33,
        span: 6483..6484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 240,
        column: 34,
        span: 6484..6485,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 240,
        column: 35,
        span: 6485..6486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 240,
        column: 39,
        span: 6486..6490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 40,
        span: 6490..6491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 41,
        span: 6490..6492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 42,
        span: 6492..6493,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 240,
        column: 45,
        span: 6494..6496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 240,
        column: 49,
        span: 6497..6500,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 50,
        span: 6500..6501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 241,
        column: 7,
        span: 6502..6508,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 8,
        span: 6508..6509,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 241,
        column: 11,
        span: 6509..6512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 241,
        column: 13,
        span: 6513..6514,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 241,
        column: 14,
        span: 6514..6515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 241,
        column: 18,
        span: 6515..6519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 19,
        span: 6519..6520,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 241,
        column: 22,
        span: 6520..6523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 23,
        span: 6523..6524,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 24,
        span: 6524..6525,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 241,
        column: 25,
        span: 6525..6526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 241,
        column: 32,
        span: 6527..6533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 33,
        span: 6533..6534,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 241,
        column: 36,
        span: 6534..6537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 241,
        column: 38,
        span: 6538..6539,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 241,
        column: 39,
        span: 6539..6540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 241,
        column: 43,
        span: 6540..6544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 44,
        span: 6544..6545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 241,
        column: 45,
        span: 6544..6546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 46,
        span: 6546..6547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 47,
        span: 6547..6548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 242,
        column: 7,
        span: 6566..6572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 8,
        span: 6572..6573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 242,
        column: 9,
        span: 6573..6574,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 242,
        column: 10,
        span: 6574..6575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 242,
        column: 15,
        span: 6575..6580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 16,
        span: 6580..6581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 17,
        span: 6581..6582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 18,
        span: 6582..6583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 243,
        column: 7,
        span: 6584..6590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 8,
        span: 6590..6591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 243,
        column: 10,
        span: 6591..6593,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 243,
        column: 11,
        span: 6593..6594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 243,
        column: 17,
        span: 6594..6600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 18,
        span: 6600..6601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 243,
        column: 22,
        span: 6601..6605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 23,
        span: 6605..6606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 24,
        span: 6606..6607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 247,
        column: 7,
        span: 6634..6640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 8,
        span: 6640..6641,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 247,
        column: 11,
        span: 6641..6644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 247,
        column: 17,
        span: 6645..6650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 18,
        span: 6650..6651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 247,
        column: 20,
        span: 6651..6653,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 247,
        column: 21,
        span: 6653..6654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 247,
        column: 26,
        span: 6654..6659,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 27,
        span: 6659..6660,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"non-existent-file\"",
        ),
        line: 247,
        column: 47,
        span: 6661..6680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 48,
        span: 6680..6681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 49,
        span: 6681..6682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 248,
        column: 7,
        span: 6683..6689,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 8,
        span: 6689..6690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 248,
        column: 10,
        span: 6690..6692,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 248,
        column: 11,
        span: 6692..6693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rename",
        ),
        line: 248,
        column: 17,
        span: 6693..6699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 18,
        span: 6699..6700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 248,
        column: 27,
        span: 6700..6709,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 28,
        span: 6709..6710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 248,
        column: 33,
        span: 6711..6715,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 34,
        span: 6715..6716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 35,
        span: 6716..6717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 249,
        column: 3,
        span: 6718..6720,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 249,
        column: 4,
        span: 6720..6721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 249,
        column: 10,
        span: 6721..6727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 11,
        span: 6727..6728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 249,
        column: 20,
        span: 6728..6737,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 21,
        span: 6737..6738,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 250,
        column: 6,
        span: 6739..6744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 250,
        column: 8,
        span: 6745..6746,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 250,
        column: 10,
        span: 6747..6748,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 250,
        column: 0,
        span: 6748..6750,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 251,
        column: 6,
        span: 6751..6756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 251,
        column: 8,
        span: 6757..6758,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 251,
        column: 10,
        span: 6759..6760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 251,
        column: 13,
        span: 6761..6763,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 251,
        column: 14,
        span: 6763..6764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 251,
        column: 19,
        span: 6764..6769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 20,
        span: 6769..6770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 251,
        column: 24,
        span: 6770..6774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 25,
        span: 6774..6775,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 252,
        column: 6,
        span: 6776..6781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 252,
        column: 8,
        span: 6782..6783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 9,
        span: 6783..6784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 10,
        span: 6784..6785,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 252,
        column: 13,
        span: 6786..6788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 252,
        column: 15,
        span: 6789..6790,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 17,
        span: 6791..6792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 252,
        column: 19,
        span: 6793..6794,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 252,
        column: 21,
        span: 6795..6796,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 23,
        span: 6796..6798,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 252,
        column: 27,
        span: 6799..6802,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 252,
        column: 28,
        span: 6802..6803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
        column: 7,
        span: 6804..6810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 8,
        span: 6810..6811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 253,
        column: 9,
        span: 6811..6812,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 253,
        column: 12,
        span: 6813..6815,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 14,
        span: 6815..6817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 15,
        span: 6817..6818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 254,
        column: 9,
        span: 6852..6860,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 10,
        span: 6860..6861,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file is already closed\"",
        ),
        line: 254,
        column: 34,
        span: 6861..6885,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 35,
        span: 6885..6886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 254,
        column: 37,
        span: 6887..6888,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 38,
        span: 6888..6889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 255,
        column: 9,
        span: 6890..6898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 10,
        span: 6898..6899,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file is already closed\"",
        ),
        line: 255,
        column: 34,
        span: 6899..6923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 35,
        span: 6923..6924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 255,
        column: 37,
        span: 6925..6926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 38,
        span: 6926..6927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 257,
        column: 2,
        span: 6959..6960,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 257,
        column: 4,
        span: 6961..6962,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 0,
        span: 6962..6964,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 258,
        column: 4,
        span: 6965..6968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 258,
        column: 6,
        span: 6969..6970,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 258,
        column: 9,
        span: 6971..6973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 258,
        column: 12,
        span: 6974..6976,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 258,
        column: 13,
        span: 6976..6977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 258,
        column: 18,
        span: 6977..6982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 19,
        span: 6982..6983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 258,
        column: 23,
        span: 6983..6987,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 24,
        span: 6987..6988,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 258,
        column: 27,
        span: 6989..6991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 258,
        column: 30,
        span: 6992..6994,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 258,
        column: 31,
        span: 6994..6995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 258,
        column: 36,
        span: 6995..7000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 37,
        span: 7000..7001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 258,
        column: 38,
        span: 7001..7002,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 39,
        span: 7002..7003,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 258,
        column: 44,
        span: 7004..7008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 45,
        span: 7008..7009,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 258,
        column: 46,
        span: 7009..7010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 258,
        column: 48,
        span: 7011..7012,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 258,
        column: 50,
        span: 7013..7014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 258,
        column: 52,
        span: 7015..7016,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 258,
        column: 54,
        span: 7017..7018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 56,
        span: 7018..7020,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 258,
        column: 0,
        span: 7021..7024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 259,
        column: 3,
        span: 7025..7027,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 259,
        column: 4,
        span: 7027..7028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 259,
        column: 9,
        span: 7028..7033,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 10,
        span: 7033..7034,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 11,
        span: 7034..7035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 260,
        column: 7,
        span: 7036..7042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 8,
        span: 7042..7043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 260,
        column: 9,
        span: 7043..7044,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 260,
        column: 12,
        span: 7045..7047,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 260,
        column: 14,
        span: 7047..7049,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 15,
        span: 7049..7050,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 262,
        column: 6,
        span: 7087..7092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 262,
        column: 8,
        span: 7093..7094,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
        column: 10,
        span: 7095..7096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 262,
        column: 17,
        span: 7097..7103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 18,
        span: 7103..7104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 262,
        column: 20,
        span: 7104..7106,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 262,
        column: 21,
        span: 7106..7107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 262,
        column: 25,
        span: 7107..7111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 26,
        span: 7111..7112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 262,
        column: 35,
        span: 7112..7121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 36,
        span: 7121..7122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 37,
        span: 7122..7123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 263,
        column: 7,
        span: 7124..7130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 8,
        span: 7130..7131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 263,
        column: 10,
        span: 7131..7133,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 263,
        column: 11,
        span: 7133..7134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 263,
        column: 15,
        span: 7134..7138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 16,
        span: 7138..7139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 263,
        column: 17,
        span: 7139..7140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 18,
        span: 7140..7141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
        column: 21,
        span: 7142..7144,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file\"",
        ),
        line: 263,
        column: 28,
        span: 7145..7151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 29,
        span: 7151..7152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 264,
        column: 3,
        span: 7153..7155,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 264,
        column: 4,
        span: 7155..7156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 264,
        column: 10,
        span: 7156..7162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 11,
        span: 7162..7163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 264,
        column: 15,
        span: 7163..7167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 16,
        span: 7167..7168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 265,
        column: 7,
        span: 7169..7175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 8,
        span: 7175..7176,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 265,
        column: 11,
        span: 7176..7179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 265,
        column: 14,
        span: 7180..7182,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 265,
        column: 15,
        span: 7182..7183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 265,
        column: 21,
        span: 7183..7189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 22,
        span: 7189..7190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 23,
        span: 7190..7191,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 265,
        column: 24,
        span: 7191..7192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 265,
        column: 28,
        span: 7192..7196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 29,
        span: 7196..7197,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 30,
        span: 7197..7198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 31,
        span: 7198..7199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 266,
        column: 2,
        span: 7200..7201,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 266,
        column: 4,
        span: 7202..7203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 266,
        column: 0,
        span: 7203..7205,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 267,
        column: 4,
        span: 7206..7209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 267,
        column: 6,
        span: 7210..7211,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 267,
        column: 9,
        span: 7212..7214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 267,
        column: 11,
        span: 7215..7216,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 267,
        column: 12,
        span: 7216..7217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 267,
        column: 17,
        span: 7217..7222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 18,
        span: 7222..7223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 19,
        span: 7223..7224,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 267,
        column: 22,
        span: 7225..7227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 267,
        column: 25,
        span: 7228..7230,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 267,
        column: 26,
        span: 7230..7231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 267,
        column: 31,
        span: 7231..7236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 32,
        span: 7236..7237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 267,
        column: 33,
        span: 7237..7238,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
        column: 34,
        span: 7238..7239,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 267,
        column: 39,
        span: 7240..7244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 40,
        span: 7244..7245,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 267,
        column: 41,
        span: 7245..7246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 267,
        column: 43,
        span: 7247..7248,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 267,
        column: 45,
        span: 7249..7250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 267,
        column: 47,
        span: 7251..7252,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 267,
        column: 49,
        span: 7253..7254,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 267,
        column: 51,
        span: 7254..7256,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 267,
        column: 0,
        span: 7257..7260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 268,
        column: 7,
        span: 7261..7267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 8,
        span: 7267..7268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 268,
        column: 16,
        span: 7268..7276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 17,
        span: 7276..7277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 268,
        column: 18,
        span: 7277..7278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 19,
        span: 7278..7279,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 268,
        column: 20,
        span: 7279..7280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 268,
        column: 23,
        span: 7280..7283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 24,
        span: 7283..7284,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 268,
        column: 25,
        span: 7283..7285,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 26,
        span: 7285..7286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 268,
        column: 28,
        span: 7286..7288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 29,
        span: 7288..7289,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 268,
        column: 32,
        span: 7290..7292,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file \"",
        ),
        line: 268,
        column: 40,
        span: 7293..7300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 41,
        span: 7300..7301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 269,
        column: 7,
        span: 7302..7308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 8,
        span: 7308..7309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 269,
        column: 9,
        span: 7309..7310,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 269,
        column: 10,
        span: 7310..7311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 269,
        column: 15,
        span: 7311..7316,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 16,
        span: 7316..7317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 17,
        span: 7317..7318,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 18,
        span: 7318..7319,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 269,
        column: 19,
        span: 7319..7320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 269,
        column: 22,
        span: 7321..7323,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
        column: 23,
        span: 7323..7324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 269,
        column: 28,
        span: 7324..7329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 29,
        span: 7329..7330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 30,
        span: 7330..7331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 270,
        column: 7,
        span: 7332..7338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 8,
        span: 7338..7339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 270,
        column: 9,
        span: 7339..7340,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 270,
        column: 12,
        span: 7341..7343,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 14,
        span: 7343..7345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 15,
        span: 7345..7346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 271,
        column: 9,
        span: 7347..7355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 10,
        span: 7355..7356,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"closed file\"",
        ),
        line: 271,
        column: 23,
        span: 7356..7369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 24,
        span: 7369..7370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 271,
        column: 27,
        span: 7371..7373,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 271,
        column: 28,
        span: 7373..7374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 271,
        column: 33,
        span: 7374..7379,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 34,
        span: 7379..7380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 271,
        column: 36,
        span: 7381..7382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 37,
        span: 7382..7383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 272,
        column: 7,
        span: 7384..7390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 272,
        column: 8,
        span: 7390..7391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 272,
        column: 16,
        span: 7391..7399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 272,
        column: 17,
        span: 7399..7400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 272,
        column: 18,
        span: 7400..7401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 272,
        column: 19,
        span: 7401..7402,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 272,
        column: 22,
        span: 7403..7405,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file (closed)\"",
        ),
        line: 272,
        column: 38,
        span: 7406..7421,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 272,
        column: 39,
        span: 7421..7422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 273,
        column: 7,
        span: 7423..7429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 8,
        span: 7429..7430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 273,
        column: 10,
        span: 7430..7432,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 273,
        column: 11,
        span: 7432..7433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 273,
        column: 15,
        span: 7433..7437,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 16,
        span: 7437..7438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 273,
        column: 17,
        span: 7438..7439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 18,
        span: 7439..7440,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 273,
        column: 21,
        span: 7441..7443,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"closed file\"",
        ),
        line: 273,
        column: 35,
        span: 7444..7457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 36,
        span: 7457..7458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 274,
        column: 3,
        span: 7459..7461,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 274,
        column: 4,
        span: 7461..7462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 274,
        column: 9,
        span: 7462..7467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 10,
        span: 7467..7468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 274,
        column: 14,
        span: 7468..7472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 15,
        span: 7472..7473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 275,
        column: 2,
        span: 7474..7475,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 275,
        column: 4,
        span: 7476..7477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 275,
        column: 7,
        span: 7478..7480,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 275,
        column: 8,
        span: 7480..7481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 275,
        column: 12,
        span: 7481..7485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 13,
        span: 7485..7486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 275,
        column: 22,
        span: 7486..7495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 23,
        span: 7495..7496,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 275,
        column: 24,
        span: 7496..7497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 275,
        column: 29,
        span: 7497..7502,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 30,
        span: 7502..7503,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 31,
        span: 7503..7504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 276,
        column: 2,
        span: 7505..7506,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 276,
        column: 4,
        span: 7507..7508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 0,
        span: 7508..7510,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 277,
        column: 4,
        span: 7511..7514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 277,
        column: 6,
        span: 7515..7516,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 277,
        column: 9,
        span: 7517..7519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 277,
        column: 12,
        span: 7520..7522,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
        column: 13,
        span: 7522..7523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 277,
        column: 18,
        span: 7523..7528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 19,
        span: 7528..7529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 20,
        span: 7529..7530,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 277,
        column: 23,
        span: 7531..7533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 277,
        column: 30,
        span: 7534..7540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 31,
        span: 7540..7541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 277,
        column: 32,
        span: 7541..7542,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 277,
        column: 35,
        span: 7543..7545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 277,
        column: 37,
        span: 7546..7547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 38,
        span: 7547..7548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 39,
        span: 7548..7549,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 40,
        span: 7549..7550,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 277,
        column: 41,
        span: 7550..7551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 277,
        column: 43,
        span: 7552..7553,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 277,
        column: 45,
        span: 7554..7555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 277,
        column: 47,
        span: 7556..7557,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 277,
        column: 49,
        span: 7558..7559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 51,
        span: 7559..7561,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 277,
        column: 0,
        span: 7562..7565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 278,
        column: 2,
        span: 7566..7567,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 278,
        column: 4,
        span: 7568..7569,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 278,
        column: 8,
        span: 7570..7573,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 278,
        column: 9,
        span: 7573..7574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 278,
        column: 24,
        span: 7575..7589,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 25,
        span: 7589..7590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 26,
        span: 7590..7591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 279,
        column: 7,
        span: 7592..7598,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 8,
        span: 7598..7599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 279,
        column: 9,
        span: 7599..7600,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 279,
        column: 12,
        span: 7601..7603,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 14,
        span: 7603..7605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 15,
        span: 7605..7606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 280,
        column: 7,
        span: 7607..7613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 8,
        span: 7613..7614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 280,
        column: 10,
        span: 7614..7616,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 280,
        column: 11,
        span: 7616..7617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 280,
        column: 17,
        span: 7617..7623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 18,
        span: 7623..7624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 280,
        column: 27,
        span: 7624..7633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 28,
        span: 7633..7634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 29,
        span: 7634..7635,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 282,
        column: 3,
        span: 7637..7639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 283,
        column: 5,
        span: 7659..7661,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 283,
        column: 6,
        span: 7661..7662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 283,
        column: 12,
        span: 7662..7668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 13,
        span: 7668..7669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 283,
        column: 22,
        span: 7669..7678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 23,
        span: 7678..7679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 284,
        column: 5,
        span: 7682..7684,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 284,
        column: 6,
        span: 7684..7685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 284,
        column: 11,
        span: 7685..7690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 12,
        span: 7690..7691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 284,
        column: 18,
        span: 7691..7697,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 284,
        column: 19,
        span: 7697..7698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 284,
        column: 22,
        span: 7698..7701,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 23,
        span: 7701..7702,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 284,
        column: 26,
        span: 7702..7705,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 284,
        column: 27,
        span: 7705..7706,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 284,
        column: 31,
        span: 7706..7710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 32,
        span: 7710..7711,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 284,
        column: 33,
        span: 7711..7712,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 284,
        column: 38,
        span: 7713..7717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 39,
        span: 7717..7718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 285,
        column: 5,
        span: 7721..7723,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 285,
        column: 6,
        span: 7723..7724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 285,
        column: 11,
        span: 7724..7729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 12,
        span: 7729..7730,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 13,
        span: 7730..7731,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 286,
        column: 8,
        span: 7734..7739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 286,
        column: 10,
        span: 7740..7741,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 286,
        column: 12,
        span: 7742..7743,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 286,
        column: 13,
        span: 7743..7744,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 286,
        column: 14,
        span: 7744..7745,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 286,
        column: 15,
        span: 7745..7746,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 286,
        column: 19,
        span: 7747..7750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 286,
        column: 21,
        span: 7751..7752,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 286,
        column: 23,
        span: 7753..7754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 25,
        span: 7754..7756,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 26,
        span: 7756..7757,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "250",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 30,
        span: 7757..7761,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 286,
        column: 33,
        span: 7762..7764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 286,
        column: 35,
        span: 7765..7766,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 286,
        column: 36,
        span: 7766..7767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 286,
        column: 37,
        span: 7767..7768,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 286,
        column: 38,
        span: 7768..7769,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 286,
        column: 40,
        span: 7770..7771,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 42,
        span: 7771..7773,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 286,
        column: 0,
        span: 7774..7777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 287,
        column: 4,
        span: 7780..7781,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 287,
        column: 6,
        span: 7782..7783,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 287,
        column: 8,
        span: 7784..7785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 287,
        column: 10,
        span: 7785..7787,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 287,
        column: 11,
        span: 7787..7788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 287,
        column: 16,
        span: 7788..7793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 17,
        span: 7793..7794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 287,
        column: 26,
        span: 7794..7803,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 27,
        span: 7803..7804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 287,
        column: 33,
        span: 7805..7810,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 287,
        column: 34,
        span: 7810..7811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 287,
        column: 40,
        span: 7811..7817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 41,
        span: 7817..7818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 287,
        column: 42,
        span: 7818..7819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 43,
        span: 7819..7820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 44,
        span: 7820..7821,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 45,
        span: 7821..7822,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 46,
        span: 7822..7823,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 287,
        column: 47,
        span: 7823..7824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 289,
        column: 9,
        span: 7851..7857,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 10,
        span: 7857..7858,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 289,
        column: 11,
        span: 7858..7859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 289,
        column: 12,
        span: 7859..7860,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 289,
        column: 15,
        span: 7861..7863,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "250",
                    after_decimal: "",
                },
            ),
        ),
        line: 289,
        column: 19,
        span: 7863..7867,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 289,
        column: 23,
        span: 7868..7871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 289,
        column: 25,
        span: 7872..7873,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 289,
        column: 26,
        span: 7873..7874,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 289,
        column: 27,
        span: 7873..7875,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 289,
        column: 28,
        span: 7875..7876,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 289,
        column: 31,
        span: 7877..7879,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 289,
        column: 35,
        span: 7880..7883,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 289,
        column: 39,
        span: 7884..7887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 289,
        column: 41,
        span: 7888..7889,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 289,
        column: 42,
        span: 7889..7890,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 289,
        column: 43,
        span: 7890..7891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 289,
        column: 44,
        span: 7891..7892,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 289,
        column: 45,
        span: 7892..7893,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 289,
        column: 48,
        span: 7894..7896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 289,
        column: 52,
        span: 7897..7900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 53,
        span: 7900..7901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 290,
        column: 4,
        span: 7904..7905,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 290,
        column: 5,
        span: 7905..7906,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 290,
        column: 6,
        span: 7906..7907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 290,
        column: 7,
        span: 7907..7908,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 290,
        column: 9,
        span: 7909..7910,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 290,
        column: 11,
        span: 7910..7912,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 290,
        column: 12,
        span: 7912..7913,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 290,
        column: 14,
        span: 7914..7915,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 290,
        column: 16,
        span: 7915..7917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 291,
        column: 11,
        span: 7939..7947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 12,
        span: 7947..7948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many arguments\"",
        ),
        line: 291,
        column: 32,
        span: 7948..7968,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
        column: 33,
        span: 7968..7969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 291,
        column: 36,
        span: 7970..7972,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 291,
        column: 37,
        span: 7972..7973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 291,
        column: 42,
        span: 7973..7978,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
        column: 43,
        span: 7978..7979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 291,
        column: 53,
        span: 7980..7989,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
        column: 54,
        span: 7989..7990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 291,
        column: 60,
        span: 7991..7996,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 291,
        column: 61,
        span: 7996..7997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 291,
        column: 67,
        span: 7997..8003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 68,
        span: 8003..8004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 291,
        column: 69,
        span: 8004..8005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 70,
        span: 8005..8006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 71,
        span: 8006..8007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 292,
        column: 17,
        span: 8010..8024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 18,
        span: 8024..8025,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 19,
        span: 8025..8026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 293,
        column: 9,
        span: 8063..8069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 10,
        span: 8069..8070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 293,
        column: 12,
        span: 8070..8072,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 293,
        column: 13,
        span: 8072..8073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 293,
        column: 19,
        span: 8073..8079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 20,
        span: 8079..8080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 293,
        column: 29,
        span: 8080..8089,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 30,
        span: 8089..8090,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 31,
        span: 8090..8091,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 294,
        column: 0,
        span: 8092..8095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 296,
        column: 3,
        span: 8097..8099,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 296,
        column: 4,
        span: 8099..8100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 296,
        column: 9,
        span: 8100..8105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 10,
        span: 8105..8106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 296,
        column: 14,
        span: 8106..8110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 15,
        span: 8110..8111,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 297,
        column: 3,
        span: 8112..8114,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 298,
        column: 8,
        span: 8140..8145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 298,
        column: 10,
        span: 8146..8147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 298,
        column: 11,
        span: 8147..8148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 298,
        column: 12,
        span: 8148..8149,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 298,
        column: 13,
        span: 8149..8150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 298,
        column: 14,
        span: 8150..8151,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 298,
        column: 16,
        span: 8152..8153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 298,
        column: 19,
        span: 8154..8156,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
        column: 20,
        span: 8156..8157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 298,
        column: 25,
        span: 8157..8162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 26,
        span: 8162..8163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 27,
        span: 8163..8164,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 298,
        column: 28,
        span: 8164..8165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 298,
        column: 33,
        span: 8165..8170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 34,
        span: 8170..8171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 298,
        column: 40,
        span: 8171..8177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 41,
        span: 8177..8178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 299,
        column: 9,
        span: 8181..8187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 10,
        span: 8187..8188,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 299,
        column: 13,
        span: 8188..8191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 299,
        column: 15,
        span: 8192..8193,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 299,
        column: 19,
        span: 8194..8197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 299,
        column: 24,
        span: 8198..8202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 25,
        span: 8202..8203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 299,
        column: 26,
        span: 8203..8204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 27,
        span: 8204..8205,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 299,
        column: 30,
        span: 8206..8208,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 299,
        column: 39,
        span: 8209..8217,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 299,
        column: 43,
        span: 8218..8221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 299,
        column: 48,
        span: 8222..8226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 49,
        span: 8226..8227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 299,
        column: 50,
        span: 8227..8228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 51,
        span: 8228..8229,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 299,
        column: 54,
        span: 8230..8232,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 299,
        column: 63,
        span: 8233..8241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 64,
        span: 8241..8242,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 300,
        column: 0,
        span: 8243..8246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 301,
        column: 9,
        span: 8247..8255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 10,
        span: 8255..8256,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid format\"",
        ),
        line: 301,
        column: 26,
        span: 8256..8272,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 27,
        span: 8272..8273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 301,
        column: 30,
        span: 8274..8276,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 301,
        column: 31,
        span: 8276..8277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 301,
        column: 35,
        span: 8277..8281,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 36,
        span: 8281..8282,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 301,
        column: 40,
        span: 8283..8286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 41,
        span: 8286..8287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 302,
        column: 7,
        span: 8288..8294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 8,
        span: 8294..8295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 302,
        column: 10,
        span: 8295..8297,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 302,
        column: 11,
        span: 8297..8298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 302,
        column: 15,
        span: 8298..8302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 16,
        span: 8302..8303,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 302,
        column: 17,
        span: 8302..8304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 18,
        span: 8304..8305,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 302,
        column: 21,
        span: 8306..8308,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 302,
        column: 24,
        span: 8309..8311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 25,
        span: 8311..8312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 303,
        column: 7,
        span: 8326..8332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 8,
        span: 8332..8333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 303,
        column: 10,
        span: 8333..8335,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 303,
        column: 11,
        span: 8335..8336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 303,
        column: 15,
        span: 8336..8340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 16,
        span: 8340..8341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 303,
        column: 17,
        span: 8340..8342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 303,
        column: 18,
        span: 8342..8343,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        line: 303,
        column: 22,
        span: 8344..8347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 23,
        span: 8347..8348,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 303,
        column: 26,
        span: 8349..8351,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"álo\"'",
        ),
        line: 303,
        column: 34,
        span: 8352..8359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 35,
        span: 8359..8360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 304,
        column: 7,
        span: 8361..8367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 8,
        span: 8367..8368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 304,
        column: 10,
        span: 8368..8370,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 304,
        column: 11,
        span: 8370..8371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 304,
        column: 15,
        span: 8371..8375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 16,
        span: 8375..8376,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 304,
        column: 17,
        span: 8375..8377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 18,
        span: 8377..8378,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 304,
        column: 21,
        span: 8379..8381,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 304,
        column: 24,
        span: 8382..8384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 25,
        span: 8384..8385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 305,
        column: 7,
        span: 8386..8392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 8,
        span: 8392..8393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 305,
        column: 10,
        span: 8393..8395,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 305,
        column: 11,
        span: 8395..8396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 305,
        column: 15,
        span: 8396..8400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 16,
        span: 8400..8401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 17,
        span: 8401..8402,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 305,
        column: 20,
        span: 8403..8405,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second line\"",
        ),
        line: 305,
        column: 34,
        span: 8406..8419,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 35,
        span: 8419..8420,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 306,
        column: 6,
        span: 8421..8426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 306,
        column: 8,
        span: 8427..8428,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 306,
        column: 10,
        span: 8429..8430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 306,
        column: 13,
        span: 8431..8433,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 306,
        column: 14,
        span: 8433..8434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 306,
        column: 19,
        span: 8434..8439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 20,
        span: 8439..8440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 21,
        span: 8440..8441,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 306,
        column: 22,
        span: 8441..8442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 306,
        column: 26,
        span: 8442..8446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 27,
        span: 8446..8447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 28,
        span: 8447..8448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 307,
        column: 7,
        span: 8449..8455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 8,
        span: 8455..8456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 307,
        column: 10,
        span: 8456..8458,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 307,
        column: 11,
        span: 8458..8459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 307,
        column: 15,
        span: 8459..8463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 16,
        span: 8463..8464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 17,
        span: 8464..8465,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 307,
        column: 20,
        span: 8466..8468,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"third line \"",
        ),
        line: 307,
        column: 34,
        span: 8469..8482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 35,
        span: 8482..8483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 308,
        column: 7,
        span: 8484..8490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 8,
        span: 8490..8491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 308,
        column: 10,
        span: 8491..8493,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 308,
        column: 11,
        span: 8493..8494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 308,
        column: 16,
        span: 8494..8499,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 17,
        span: 8499..8500,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 18,
        span: 8500..8501,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 308,
        column: 19,
        span: 8501..8502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 308,
        column: 23,
        span: 8502..8506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 24,
        span: 8506..8507,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 308,
        column: 29,
        span: 8507..8512,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 30,
        span: 8512..8513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 308,
        column: 32,
        span: 8514..8515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 33,
        span: 8515..8516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 34,
        span: 8516..8517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 309,
        column: 7,
        span: 8518..8524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 8,
        span: 8524..8525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 309,
        column: 10,
        span: 8525..8527,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 309,
        column: 11,
        span: 8527..8528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 309,
        column: 15,
        span: 8528..8532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 16,
        span: 8532..8533,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'L'",
        ),
        line: 309,
        column: 19,
        span: 8533..8536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 20,
        span: 8536..8537,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 309,
        column: 23,
        span: 8538..8540,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"third line \\n\"",
        ),
        line: 309,
        column: 39,
        span: 8541..8556,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 40,
        span: 8556..8557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 310,
        column: 7,
        span: 8558..8564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 8,
        span: 8564..8565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 310,
        column: 10,
        span: 8565..8567,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 310,
        column: 11,
        span: 8567..8568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 310,
        column: 15,
        span: 8568..8572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 16,
        span: 8572..8573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
        column: 17,
        span: 8572..8574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 18,
        span: 8574..8575,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 310,
        column: 21,
        span: 8576..8578,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ç\"",
        ),
        line: 310,
        column: 25,
        span: 8579..8582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 26,
        span: 8582..8583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 311,
        column: 7,
        span: 8584..8590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 8,
        span: 8590..8591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 311,
        column: 10,
        span: 8591..8593,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 311,
        column: 11,
        span: 8593..8594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 311,
        column: 15,
        span: 8594..8598,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 16,
        span: 8598..8599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 311,
        column: 22,
        span: 8599..8605,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 311,
        column: 23,
        span: 8605..8606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 311,
        column: 26,
        span: 8606..8609,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fourth_line\"",
        ),
        line: 311,
        column: 39,
        span: 8609..8622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 40,
        span: 8622..8623,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 311,
        column: 43,
        span: 8624..8626,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fourth_line\"",
        ),
        line: 311,
        column: 57,
        span: 8627..8640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 58,
        span: 8640..8641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 312,
        column: 7,
        span: 8642..8648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 8,
        span: 8648..8649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 312,
        column: 10,
        span: 8649..8651,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 312,
        column: 11,
        span: 8651..8652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 312,
        column: 16,
        span: 8652..8657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 17,
        span: 8657..8658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 18,
        span: 8658..8659,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 312,
        column: 19,
        span: 8659..8660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 312,
        column: 23,
        span: 8660..8664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 24,
        span: 8664..8665,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cur\"",
        ),
        line: 312,
        column: 29,
        span: 8665..8670,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 312,
        column: 30,
        span: 8670..8671,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 312,
        column: 32,
        span: 8672..8673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 312,
        column: 38,
        span: 8673..8679,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 312,
        column: 39,
        span: 8679..8680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 312,
        column: 42,
        span: 8680..8683,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fourth_line\"",
        ),
        line: 312,
        column: 55,
        span: 8683..8696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 56,
        span: 8696..8697,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 57,
        span: 8697..8698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 313,
        column: 7,
        span: 8699..8705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 8,
        span: 8705..8706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 313,
        column: 10,
        span: 8706..8708,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 313,
        column: 11,
        span: 8708..8709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 313,
        column: 15,
        span: 8709..8713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 16,
        span: 8713..8714,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 17,
        span: 8714..8715,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 313,
        column: 20,
        span: 8716..8718,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fourth_line\"",
        ),
        line: 313,
        column: 34,
        span: 8719..8732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 35,
        span: 8732..8733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 314,
        column: 7,
        span: 8734..8740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 8,
        span: 8740..8741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 314,
        column: 10,
        span: 8741..8743,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 314,
        column: 11,
        span: 8743..8744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 314,
        column: 15,
        span: 8744..8748,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 16,
        span: 8748..8749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 17,
        span: 8749..8750,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 314,
        column: 20,
        span: 8751..8753,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 314,
        column: 23,
        span: 8754..8756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 24,
        span: 8756..8757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 315,
        column: 7,
        span: 8773..8779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 8,
        span: 8779..8780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 315,
        column: 10,
        span: 8780..8782,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 315,
        column: 11,
        span: 8782..8783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 315,
        column: 15,
        span: 8783..8787,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 16,
        span: 8787..8788,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'n'",
        ),
        line: 315,
        column: 19,
        span: 8788..8791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 20,
        span: 8791..8792,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 315,
        column: 23,
        span: 8793..8795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3450",
                    after_decimal: "",
                },
            ),
        ),
        line: 315,
        column: 28,
        span: 8795..8800,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 29,
        span: 8800..8801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 316,
        column: 7,
        span: 8802..8808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 8,
        span: 8808..8809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 316,
        column: 10,
        span: 8809..8811,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 316,
        column: 11,
        span: 8811..8812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 316,
        column: 15,
        span: 8812..8816,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 16,
        span: 8816..8817,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 17,
        span: 8816..8818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 18,
        span: 8818..8819,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 316,
        column: 21,
        span: 8820..8822,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        line: 316,
        column: 26,
        span: 8823..8827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 27,
        span: 8827..8828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 317,
        column: 7,
        span: 8829..8835,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 8,
        span: 8835..8836,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 317,
        column: 11,
        span: 8836..8839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 317,
        column: 14,
        span: 8840..8842,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 317,
        column: 15,
        span: 8842..8843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 317,
        column: 19,
        span: 8843..8847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 20,
        span: 8847..8848,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 21,
        span: 8847..8849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 22,
        span: 8849..8850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 23,
        span: 8850..8851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 318,
        column: 7,
        span: 8868..8874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 8,
        span: 8874..8875,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 318,
        column: 11,
        span: 8875..8878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 318,
        column: 14,
        span: 8879..8881,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 318,
        column: 15,
        span: 8881..8882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 318,
        column: 19,
        span: 8882..8886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 20,
        span: 8886..8887,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 21,
        span: 8886..8888,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 22,
        span: 8888..8889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 23,
        span: 8889..8890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 319,
        column: 7,
        span: 8907..8913,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 8,
        span: 8913..8914,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 319,
        column: 11,
        span: 8914..8917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 319,
        column: 14,
        span: 8918..8920,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 319,
        column: 15,
        span: 8920..8921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 319,
        column: 19,
        span: 8921..8925,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 20,
        span: 8925..8926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        line: 319,
        column: 25,
        span: 8925..8931,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 26,
        span: 8931..8932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 27,
        span: 8932..8933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 320,
        column: 7,
        span: 8950..8956,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 8,
        span: 8956..8957,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 9,
        span: 8957..8958,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 320,
        column: 10,
        span: 8958..8959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 320,
        column: 12,
        span: 8959..8961,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 320,
        column: 13,
        span: 8961..8962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 320,
        column: 17,
        span: 8962..8966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 18,
        span: 8966..8967,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 19,
        span: 8966..8968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 20,
        span: 8968..8969,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 320,
        column: 21,
        span: 8969..8970,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 22,
        span: 8970..8971,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 320,
        column: 23,
        span: 8971..8972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 24,
        span: 8971..8973,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 320,
        column: 25,
        span: 8973..8974,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 320,
        column: 28,
        span: 8975..8977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 320,
        column: 34,
        span: 8978..8983,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 35,
        span: 8983..8984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 321,
        column: 7,
        span: 8985..8991,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 8,
        span: 8991..8992,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 321,
        column: 11,
        span: 8992..8995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 321,
        column: 14,
        span: 8996..8998,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 321,
        column: 15,
        span: 8998..8999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 321,
        column: 19,
        span: 8999..9003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 20,
        span: 9003..9004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 21,
        span: 9004..9005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 22,
        span: 9005..9006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 322,
        column: 7,
        span: 9023..9029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 8,
        span: 9029..9030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 9,
        span: 9030..9031,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 322,
        column: 10,
        span: 9031..9032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 322,
        column: 12,
        span: 9032..9034,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 322,
        column: 13,
        span: 9034..9035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 322,
        column: 17,
        span: 9035..9039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 18,
        span: 9039..9040,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 19,
        span: 9040..9041,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 322,
        column: 20,
        span: 9041..9042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 21,
        span: 9042..9043,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 322,
        column: 22,
        span: 9043..9044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 322,
        column: 23,
        span: 9043..9045,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 322,
        column: 24,
        span: 9045..9046,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 322,
        column: 27,
        span: 9047..9049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 322,
        column: 33,
        span: 9050..9055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 34,
        span: 9055..9056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 323,
        column: 7,
        span: 9057..9063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 8,
        span: 9063..9064,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 323,
        column: 11,
        span: 9064..9067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 323,
        column: 14,
        span: 9068..9070,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 323,
        column: 15,
        span: 9070..9071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 323,
        column: 19,
        span: 9071..9075,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 20,
        span: 9075..9076,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'n'",
        ),
        line: 323,
        column: 23,
        span: 9076..9079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 24,
        span: 9079..9080,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 25,
        span: 9080..9081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 324,
        column: 7,
        span: 9098..9104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 324,
        column: 8,
        span: 9104..9105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 324,
        column: 9,
        span: 9105..9106,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 324,
        column: 10,
        span: 9106..9107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 324,
        column: 12,
        span: 9107..9109,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 324,
        column: 13,
        span: 9109..9110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 324,
        column: 17,
        span: 9110..9114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 324,
        column: 18,
        span: 9114..9115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'n'",
        ),
        line: 324,
        column: 21,
        span: 9115..9118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 22,
        span: 9118..9119,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 324,
        column: 23,
        span: 9119..9120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 24,
        span: 9120..9121,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 324,
        column: 25,
        span: 9121..9122,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 324,
        column: 26,
        span: 9121..9123,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 324,
        column: 27,
        span: 9123..9124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 324,
        column: 30,
        span: 9125..9127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 324,
        column: 36,
        span: 9128..9133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 37,
        span: 9133..9134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 325,
        column: 7,
        span: 9135..9141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 8,
        span: 9141..9142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 325,
        column: 10,
        span: 9142..9144,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 325,
        column: 11,
        span: 9144..9145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 325,
        column: 15,
        span: 9145..9149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 16,
        span: 9149..9150,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 325,
        column: 19,
        span: 9150..9153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 20,
        span: 9153..9154,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 325,
        column: 23,
        span: 9155..9157,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 325,
        column: 26,
        span: 9158..9160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 27,
        span: 9160..9161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 326,
        column: 7,
        span: 9191..9197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 8,
        span: 9197..9198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 326,
        column: 10,
        span: 9198..9200,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 326,
        column: 11,
        span: 9200..9201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 326,
        column: 15,
        span: 9201..9205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 16,
        span: 9205..9206,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 326,
        column: 19,
        span: 9206..9209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 20,
        span: 9209..9210,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 326,
        column: 23,
        span: 9211..9213,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 326,
        column: 26,
        span: 9214..9216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 27,
        span: 9216..9217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 327,
        column: 15,
        span: 9247..9261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 16,
        span: 9261..9262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 17,
        span: 9262..9263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 328,
        column: 6,
        span: 9264..9269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 328,
        column: 7,
        span: 9269..9270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 328,
        column: 10,
        span: 9270..9273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 11,
        span: 9273..9274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 329,
        column: 3,
        span: 9275..9277,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 329,
        column: 4,
        span: 9277..9278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 329,
        column: 9,
        span: 9278..9283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 10,
        span: 9283..9284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 329,
        column: 12,
        span: 9284..9286,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 329,
        column: 13,
        span: 9286..9287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 329,
        column: 18,
        span: 9287..9292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 19,
        span: 9292..9293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 20,
        span: 9293..9294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 21,
        span: 9294..9295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 330,
        column: 9,
        span: 9296..9304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 10,
        span: 9304..9305,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" input file is closed\"",
        ),
        line: 330,
        column: 33,
        span: 9305..9328,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
        column: 34,
        span: 9328..9329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 330,
        column: 37,
        span: 9330..9332,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 330,
        column: 38,
        span: 9332..9333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 330,
        column: 42,
        span: 9333..9337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 43,
        span: 9337..9338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 332,
        column: 7,
        span: 9340..9346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 8,
        span: 9346..9347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 332,
        column: 10,
        span: 9347..9349,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 332,
        column: 11,
        span: 9349..9350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 332,
        column: 17,
        span: 9350..9356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 18,
        span: 9356..9357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 332,
        column: 22,
        span: 9357..9361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 23,
        span: 9361..9362,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 24,
        span: 9362..9363,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 334,
        column: 6,
        span: 9365..9370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 334,
        column: 8,
        span: 9371..9372,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 334,
        column: 10,
        span: 9373..9374,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0123456789'",
        ),
        line: 334,
        column: 23,
        span: 9375..9387,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 335,
        column: 4,
        span: 9388..9391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 335,
        column: 6,
        span: 9392..9393,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 335,
        column: 7,
        span: 9393..9394,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 335,
        column: 8,
        span: 9393..9395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 335,
        column: 9,
        span: 9395..9396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 335,
        column: 11,
        span: 9395..9398,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 335,
        column: 14,
        span: 9399..9401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 335,
        column: 16,
        span: 9402..9403,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 335,
        column: 18,
        span: 9404..9405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 335,
        column: 20,
        span: 9406..9407,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 335,
        column: 22,
        span: 9407..9409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 335,
        column: 23,
        span: 9409..9410,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 335,
        column: 24,
        span: 9410..9411,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 335,
        column: 0,
        span: 9412..9415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 336,
        column: 7,
        span: 9416..9422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 8,
        span: 9422..9423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 336,
        column: 14,
        span: 9423..9429,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 336,
        column: 15,
        span: 9429..9430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 336,
        column: 18,
        span: 9430..9433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 19,
        span: 9433..9434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 336,
        column: 20,
        span: 9434..9435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 21,
        span: 9435..9436,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 336,
        column: 24,
        span: 9437..9439,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 336,
        column: 27,
        span: 9439..9442,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 336,
        column: 28,
        span: 9442..9443,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 336,
        column: 29,
        span: 9442..9444,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 336,
        column: 30,
        span: 9444..9445,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 336,
        column: 32,
        span: 9444..9447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 33,
        span: 9447..9448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 338,
        column: 3,
        span: 9450..9452,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 338,
        column: 4,
        span: 9452..9453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 338,
        column: 10,
        span: 9453..9459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
        column: 11,
        span: 9459..9460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 338,
        column: 15,
        span: 9460..9464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
        column: 16,
        span: 9464..9465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 339,
        column: 3,
        span: 9466..9468,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 339,
        column: 4,
        span: 9468..9469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 339,
        column: 9,
        span: 9469..9474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
        column: 10,
        span: 9474..9475,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 339,
        column: 15,
        span: 9475..9480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
        column: 16,
        span: 9480..9481,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 339,
        column: 17,
        span: 9481..9482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 339,
        column: 22,
        span: 9482..9487,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
        column: 23,
        span: 9487..9488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 339,
        column: 27,
        span: 9488..9492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
        column: 28,
        span: 9492..9493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 340,
        column: 3,
        span: 9494..9496,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 340,
        column: 4,
        span: 9496..9497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 340,
        column: 9,
        span: 9497..9502,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 10,
        span: 9502..9503,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 11,
        span: 9503..9504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 341,
        column: 9,
        span: 9505..9513,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 10,
        span: 9513..9514,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" output file is closed\"",
        ),
        line: 341,
        column: 34,
        span: 9514..9538,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 341,
        column: 35,
        span: 9538..9539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 341,
        column: 38,
        span: 9540..9542,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 341,
        column: 39,
        span: 9542..9543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 341,
        column: 44,
        span: 9543..9548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 45,
        span: 9548..9549,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 342,
        column: 6,
        span: 9550..9555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 342,
        column: 8,
        span: 9556..9557,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 342,
        column: 10,
        span: 9558..9559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 342,
        column: 13,
        span: 9560..9562,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 342,
        column: 14,
        span: 9562..9563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 342,
        column: 18,
        span: 9563..9567,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 19,
        span: 9567..9568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 342,
        column: 23,
        span: 9568..9572,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 24,
        span: 9572..9573,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a+b\"",
        ),
        line: 342,
        column: 30,
        span: 9574..9579,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 31,
        span: 9579..9580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 343,
        column: 3,
        span: 9581..9583,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 343,
        column: 4,
        span: 9583..9584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 343,
        column: 10,
        span: 9584..9590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 11,
        span: 9590..9591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 343,
        column: 12,
        span: 9591..9592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 13,
        span: 9592..9593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 344,
        column: 15,
        span: 9594..9608,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
        column: 16,
        span: 9608..9609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
        column: 17,
        span: 9609..9610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 346,
        column: 7,
        span: 9612..9618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 8,
        span: 9618..9619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 346,
        column: 10,
        span: 9619..9621,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 346,
        column: 11,
        span: 9621..9622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 346,
        column: 16,
        span: 9622..9627,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 17,
        span: 9627..9628,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 346,
        column: 20,
        span: 9628..9631,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 346,
        column: 23,
        span: 9632..9634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 346,
        column: 25,
        span: 9635..9636,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 346,
        column: 28,
        span: 9637..9639,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 346,
        column: 32,
        span: 9640..9643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 33,
        span: 9643..9644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 34,
        span: 9644..9645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 347,
        column: 7,
        span: 9646..9652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 8,
        span: 9652..9653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 347,
        column: 10,
        span: 9653..9655,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 347,
        column: 11,
        span: 9655..9656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 347,
        column: 16,
        span: 9656..9661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 17,
        span: 9661..9662,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "';'",
        ),
        line: 347,
        column: 20,
        span: 9662..9665,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 21,
        span: 9665..9666,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'end of file\\n'",
        ),
        line: 347,
        column: 37,
        span: 9667..9682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 38,
        span: 9682..9683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 39,
        span: 9683..9684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 348,
        column: 2,
        span: 9685..9686,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 348,
        column: 3,
        span: 9686..9687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flush",
        ),
        line: 348,
        column: 8,
        span: 9687..9692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 9,
        span: 9692..9693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 10,
        span: 9693..9694,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 348,
        column: 11,
        span: 9694..9695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 348,
        column: 14,
        span: 9696..9698,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 348,
        column: 15,
        span: 9698..9699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flush",
        ),
        line: 348,
        column: 20,
        span: 9699..9704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 21,
        span: 9704..9705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 22,
        span: 9705..9706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 349,
        column: 2,
        span: 9707..9708,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 349,
        column: 3,
        span: 9708..9709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 349,
        column: 8,
        span: 9709..9714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 9,
        span: 9714..9715,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 10,
        span: 9715..9716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 350,
        column: 6,
        span: 9717..9722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 7,
        span: 9722..9723,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 350,
        column: 10,
        span: 9723..9726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 11,
        span: 9726..9727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 352,
        column: 3,
        span: 9729..9731,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 352,
        column: 4,
        span: 9731..9732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 352,
        column: 9,
        span: 9732..9737,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 10,
        span: 9737..9738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 352,
        column: 14,
        span: 9738..9742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 15,
        span: 9742..9743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 353,
        column: 7,
        span: 9744..9750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 8,
        span: 9750..9751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 353,
        column: 10,
        span: 9751..9753,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 353,
        column: 11,
        span: 9753..9754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 353,
        column: 15,
        span: 9754..9758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 16,
        span: 9758..9759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 17,
        span: 9759..9760,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 353,
        column: 20,
        span: 9761..9763,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 353,
        column: 26,
        span: 9764..9769,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 27,
        span: 9769..9770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 354,
        column: 7,
        span: 9771..9777,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 8,
        span: 9777..9778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 354,
        column: 10,
        span: 9778..9780,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 354,
        column: 11,
        span: 9780..9781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 354,
        column: 15,
        span: 9781..9785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 16,
        span: 9785..9786,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 354,
        column: 17,
        span: 9785..9787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 18,
        span: 9787..9788,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 354,
        column: 21,
        span: 9789..9791,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 354,
        column: 25,
        span: 9792..9795,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 26,
        span: 9795..9796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 355,
        column: 7,
        span: 9797..9803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 8,
        span: 9803..9804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 355,
        column: 10,
        span: 9804..9806,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 355,
        column: 11,
        span: 9806..9807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 355,
        column: 15,
        span: 9807..9811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 16,
        span: 9811..9812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 355,
        column: 22,
        span: 9812..9818,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 355,
        column: 23,
        span: 9818..9819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 355,
        column: 26,
        span: 9819..9822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 27,
        span: 9822..9823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 355,
        column: 28,
        span: 9823..9824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 29,
        span: 9824..9825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 30,
        span: 9825..9826,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 355,
        column: 33,
        span: 9827..9829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 355,
        column: 35,
        span: 9830..9831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 36,
        span: 9831..9832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 356,
        column: 7,
        span: 9833..9839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 8,
        span: 9839..9840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 356,
        column: 10,
        span: 9840..9842,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 356,
        column: 11,
        span: 9842..9843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 356,
        column: 15,
        span: 9843..9847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 16,
        span: 9847..9848,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 356,
        column: 17,
        span: 9847..9849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 18,
        span: 9849..9850,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 356,
        column: 21,
        span: 9851..9853,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 356,
        column: 25,
        span: 9854..9857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 26,
        span: 9857..9858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 357,
        column: 7,
        span: 9859..9865,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 8,
        span: 9865..9866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 357,
        column: 10,
        span: 9866..9868,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 357,
        column: 11,
        span: 9868..9869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 357,
        column: 15,
        span: 9869..9873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 16,
        span: 9873..9874,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 357,
        column: 17,
        span: 9873..9875,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 18,
        span: 9875..9876,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 19,
        span: 9876..9877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 358,
        column: 7,
        span: 9878..9884,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 8,
        span: 9884..9885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 358,
        column: 10,
        span: 9885..9887,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 358,
        column: 11,
        span: 9887..9888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 358,
        column: 15,
        span: 9888..9892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 16,
        span: 9892..9893,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 358,
        column: 19,
        span: 9893..9896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 20,
        span: 9896..9897,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 358,
        column: 23,
        span: 9898..9900,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "';end of file\\n'",
        ),
        line: 358,
        column: 40,
        span: 9901..9917,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 41,
        span: 9917..9918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 359,
        column: 7,
        span: 9919..9925,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 8,
        span: 9925..9926,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 359,
        column: 11,
        span: 9926..9929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 359,
        column: 14,
        span: 9930..9932,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 359,
        column: 15,
        span: 9932..9933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 359,
        column: 19,
        span: 9933..9937,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 20,
        span: 9937..9938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 359,
        column: 21,
        span: 9937..9939,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 22,
        span: 9939..9940,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 23,
        span: 9940..9941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 360,
        column: 7,
        span: 9942..9948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 8,
        span: 9948..9949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 360,
        column: 10,
        span: 9949..9951,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 360,
        column: 11,
        span: 9951..9952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 360,
        column: 16,
        span: 9952..9957,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 17,
        span: 9957..9958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 360,
        column: 19,
        span: 9958..9960,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 360,
        column: 20,
        span: 9960..9961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 360,
        column: 25,
        span: 9961..9966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 26,
        span: 9966..9967,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 27,
        span: 9967..9968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 28,
        span: 9968..9969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 29,
        span: 9969..9970,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 364,
        column: 0,
        span: 10002..10004,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 365,
        column: 8,
        span: 10007..10012,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 365,
        column: 17,
        span: 10013..10021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ismsg",
        ),
        line: 365,
        column: 23,
        span: 10022..10027,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 25,
        span: 10028..10029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 365,
        column: 26,
        span: 10029..10030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 27,
        span: 10030..10031,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 367,
        column: 11,
        span: 10078..10084,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 13,
        span: 10085..10086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 367,
        column: 17,
        span: 10086..10090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 18,
        span: 10090..10091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 367,
        column: 19,
        span: 10091..10092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 20,
        span: 10092..10093,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 367,
        column: 23,
        span: 10094..10096,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 367,
        column: 32,
        span: 10097..10105,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 367,
        column: 36,
        span: 10106..10109,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 367,
        column: 40,
        span: 10110..10113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 367,
        column: 49,
        span: 10114..10122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 50,
        span: 10122..10123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 367,
        column: 51,
        span: 10123..10124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 52,
        span: 10124..10125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 53,
        span: 10125..10126,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 368,
        column: 0,
        span: 10129..10132,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 371,
        column: 8,
        span: 10146..10151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 371,
        column: 10,
        span: 10152..10153,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 371,
        column: 12,
        span: 10154..10155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 371,
        column: 15,
        span: 10156..10158,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 371,
        column: 16,
        span: 10158..10159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 371,
        column: 20,
        span: 10159..10163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 21,
        span: 10163..10164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 371,
        column: 25,
        span: 10164..10168,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 371,
        column: 26,
        span: 10168..10169,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 371,
        column: 30,
        span: 10170..10173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 31,
        span: 10173..10174,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 372,
        column: 8,
        span: 10177..10182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 372,
        column: 10,
        span: 10183..10184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 372,
        column: 11,
        span: 10184..10185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 372,
        column: 13,
        span: 10186..10187,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 372,
        column: 14,
        span: 10187..10188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 372,
        column: 16,
        span: 10189..10190,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 372,
        column: 18,
        span: 10191..10192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 372,
        column: 20,
        span: 10193..10194,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 372,
        column: 21,
        span: 10194..10195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 372,
        column: 25,
        span: 10195..10199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 26,
        span: 10199..10200,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 27,
        span: 10200..10201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 373,
        column: 9,
        span: 10204..10210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 373,
        column: 10,
        span: 10210..10211,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 373,
        column: 13,
        span: 10211..10214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 373,
        column: 15,
        span: 10215..10216,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 373,
        column: 19,
        span: 10217..10220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ismsg",
        ),
        line: 373,
        column: 25,
        span: 10221..10226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 373,
        column: 26,
        span: 10226..10227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 373,
        column: 27,
        span: 10227..10228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 373,
        column: 28,
        span: 10228..10229,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 373,
        column: 32,
        span: 10230..10233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 373,
        column: 37,
        span: 10234..10238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 373,
        column: 38,
        span: 10238..10239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 373,
        column: 39,
        span: 10239..10240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 373,
        column: 40,
        span: 10240..10241,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 373,
        column: 43,
        span: 10242..10244,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 373,
        column: 52,
        span: 10245..10253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 373,
        column: 53,
        span: 10253..10254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 374,
        column: 9,
        span: 10257..10263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
        column: 10,
        span: 10263..10264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 374,
        column: 11,
        span: 10264..10265,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 374,
        column: 12,
        span: 10265..10266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 374,
        column: 17,
        span: 10266..10271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
        column: 18,
        span: 10271..10272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
        column: 19,
        span: 10272..10273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
        column: 20,
        span: 10273..10274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 376,
        column: 4,
        span: 10288..10289,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 376,
        column: 6,
        span: 10290..10291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 376,
        column: 9,
        span: 10292..10294,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 376,
        column: 10,
        span: 10294..10295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 376,
        column: 14,
        span: 10295..10299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 15,
        span: 10299..10300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 376,
        column: 19,
        span: 10300..10304,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 20,
        span: 10304..10305,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        line: 376,
        column: 24,
        span: 10306..10309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 25,
        span: 10309..10310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 377,
        column: 4,
        span: 10313..10314,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 377,
        column: 5,
        span: 10314..10315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 377,
        column: 7,
        span: 10316..10317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 377,
        column: 8,
        span: 10317..10318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 377,
        column: 10,
        span: 10319..10320,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 377,
        column: 12,
        span: 10321..10322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 377,
        column: 14,
        span: 10323..10324,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 377,
        column: 15,
        span: 10324..10325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 377,
        column: 20,
        span: 10325..10330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 21,
        span: 10330..10331,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"whatever\"",
        ),
        line: 377,
        column: 31,
        span: 10331..10341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 32,
        span: 10341..10342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 378,
        column: 9,
        span: 10345..10351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
        column: 10,
        span: 10351..10352,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 378,
        column: 13,
        span: 10352..10355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 378,
        column: 15,
        span: 10356..10357,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 378,
        column: 19,
        span: 10358..10361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ismsg",
        ),
        line: 378,
        column: 25,
        span: 10362..10367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
        column: 26,
        span: 10367..10368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 378,
        column: 27,
        span: 10368..10369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
        column: 28,
        span: 10369..10370,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 378,
        column: 32,
        span: 10371..10374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 378,
        column: 37,
        span: 10375..10379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
        column: 38,
        span: 10379..10380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 378,
        column: 39,
        span: 10380..10381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
        column: 40,
        span: 10381..10382,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 378,
        column: 43,
        span: 10383..10385,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 378,
        column: 52,
        span: 10386..10394,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
        column: 53,
        span: 10394..10395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 379,
        column: 9,
        span: 10398..10404,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 10,
        span: 10404..10405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 379,
        column: 11,
        span: 10405..10406,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 379,
        column: 12,
        span: 10406..10407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 379,
        column: 17,
        span: 10407..10412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 18,
        span: 10412..10413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 19,
        span: 10413..10414,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 20,
        span: 10414..10415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 381,
        column: 4,
        span: 10429..10430,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 381,
        column: 6,
        span: 10431..10432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 381,
        column: 9,
        span: 10433..10435,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 381,
        column: 10,
        span: 10435..10436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 381,
        column: 14,
        span: 10436..10440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 381,
        column: 15,
        span: 10440..10441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 381,
        column: 19,
        span: 10441..10445,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 381,
        column: 20,
        span: 10445..10446,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 381,
        column: 24,
        span: 10447..10450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 381,
        column: 25,
        span: 10450..10451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 382,
        column: 4,
        span: 10454..10455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 382,
        column: 5,
        span: 10455..10456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 382,
        column: 7,
        span: 10457..10458,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 382,
        column: 9,
        span: 10459..10460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 382,
        column: 15,
        span: 10461..10466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 16,
        span: 10466..10467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 382,
        column: 17,
        span: 10467..10468,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 382,
        column: 18,
        span: 10468..10469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 382,
        column: 23,
        span: 10469..10474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 24,
        span: 10474..10475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 25,
        span: 10475..10476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 26,
        span: 10476..10477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 383,
        column: 9,
        span: 10480..10486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 10,
        span: 10486..10487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 383,
        column: 11,
        span: 10487..10488,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 383,
        column: 14,
        span: 10489..10491,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 383,
        column: 20,
        span: 10492..10497,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 383,
        column: 24,
        span: 10498..10501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ismsg",
        ),
        line: 383,
        column: 30,
        span: 10502..10507,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 31,
        span: 10507..10508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 383,
        column: 32,
        span: 10508..10509,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 33,
        span: 10509..10510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 34,
        span: 10510..10511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 384,
        column: 9,
        span: 10514..10520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
        column: 10,
        span: 10520..10521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 384,
        column: 11,
        span: 10521..10522,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 384,
        column: 12,
        span: 10522..10523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 384,
        column: 17,
        span: 10523..10528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
        column: 18,
        span: 10528..10529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
        column: 19,
        span: 10529..10530,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
        column: 20,
        span: 10530..10531,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 385,
        column: 0,
        span: 10532..10535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 387,
        column: 7,
        span: 10537..10543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 8,
        span: 10543..10544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 387,
        column: 10,
        span: 10544..10546,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 387,
        column: 11,
        span: 10546..10547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 387,
        column: 17,
        span: 10547..10553,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 18,
        span: 10553..10554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 387,
        column: 22,
        span: 10554..10558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 23,
        span: 10558..10559,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 24,
        span: 10559..10560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 390,
        column: 3,
        span: 10583..10585,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 390,
        column: 4,
        span: 10585..10586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 390,
        column: 10,
        span: 10586..10592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 11,
        span: 10592..10593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 390,
        column: 15,
        span: 10593..10597,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 16,
        span: 10597..10598,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 390,
        column: 17,
        span: 10598..10599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 390,
        column: 20,
        span: 10600..10602,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 390,
        column: 21,
        span: 10602..10603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 390,
        column: 26,
        span: 10603..10608,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\nline\\nother\"",
        ),
        line: 390,
        column: 43,
        span: 10608..10625,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 390,
        column: 44,
        span: 10625..10626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 390,
        column: 49,
        span: 10626..10631,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 50,
        span: 10631..10632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 51,
        span: 10632..10633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 391,
        column: 3,
        span: 10634..10636,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 391,
        column: 4,
        span: 10636..10637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 391,
        column: 9,
        span: 10637..10642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
        column: 10,
        span: 10642..10643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 391,
        column: 14,
        span: 10643..10647,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
        column: 15,
        span: 10647..10648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 392,
        column: 7,
        span: 10649..10655,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 8,
        span: 10655..10656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 392,
        column: 10,
        span: 10656..10658,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 392,
        column: 11,
        span: 10658..10659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 392,
        column: 15,
        span: 10659..10663,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 392,
        column: 18,
        span: 10663..10666,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 392,
        column: 21,
        span: 10667..10669,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 392,
        column: 26,
        span: 10670..10674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
        column: 27,
        span: 10674..10675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 393,
        column: 7,
        span: 10676..10682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 8,
        span: 10682..10683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 393,
        column: 10,
        span: 10683..10685,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 393,
        column: 11,
        span: 10685..10686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 393,
        column: 15,
        span: 10686..10690,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 393,
        column: 18,
        span: 10690..10693,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 393,
        column: 21,
        span: 10694..10696,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 393,
        column: 26,
        span: 10697..10701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 27,
        span: 10701..10702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 394,
        column: 7,
        span: 10703..10709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 8,
        span: 10709..10710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 394,
        column: 10,
        span: 10710..10712,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 394,
        column: 11,
        span: 10712..10713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 394,
        column: 15,
        span: 10713..10717,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 394,
        column: 18,
        span: 10717..10720,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 394,
        column: 21,
        span: 10721..10723,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\\n\"",
        ),
        line: 394,
        column: 30,
        span: 10724..10732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 31,
        span: 10732..10733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 395,
        column: 7,
        span: 10734..10740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 8,
        span: 10740..10741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 395,
        column: 10,
        span: 10741..10743,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 395,
        column: 11,
        span: 10743..10744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 395,
        column: 15,
        span: 10744..10748,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 395,
        column: 18,
        span: 10748..10751,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 395,
        column: 21,
        span: 10752..10754,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"other\"",
        ),
        line: 395,
        column: 29,
        span: 10755..10762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 30,
        span: 10762..10763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 396,
        column: 7,
        span: 10764..10770,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 8,
        span: 10770..10771,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 396,
        column: 11,
        span: 10771..10774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 396,
        column: 14,
        span: 10775..10777,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 396,
        column: 15,
        span: 10777..10778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 396,
        column: 19,
        span: 10778..10782,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 396,
        column: 22,
        span: 10782..10785,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 23,
        span: 10785..10786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 397,
        column: 3,
        span: 10787..10789,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 397,
        column: 4,
        span: 10789..10790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 397,
        column: 9,
        span: 10790..10795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 10,
        span: 10795..10796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 11,
        span: 10796..10797,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 397,
        column: 12,
        span: 10797..10798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 397,
        column: 17,
        span: 10798..10803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 18,
        span: 10803..10804,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 19,
        span: 10804..10805,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 399,
        column: 6,
        span: 10807..10812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 399,
        column: 8,
        span: 10813..10814,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 399,
        column: 10,
        span: 10815..10816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 399,
        column: 17,
        span: 10817..10823,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 18,
        span: 10823..10824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 399,
        column: 20,
        span: 10824..10826,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 399,
        column: 21,
        span: 10826..10827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 399,
        column: 25,
        span: 10827..10831,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 26,
        span: 10831..10832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 399,
        column: 30,
        span: 10832..10836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 31,
        span: 10836..10837,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 32,
        span: 10837..10838,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 400,
        column: 6,
        span: 10839..10844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 400,
        column: 8,
        span: 10845..10846,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 400,
        column: 10,
        span: 10847..10848,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 400,
        column: 13,
        span: 10849..10851,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 401,
        column: 4,
        span: 10852..10855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 401,
        column: 6,
        span: 10856..10857,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 401,
        column: 9,
        span: 10858..10860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 401,
        column: 11,
        span: 10861..10862,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 401,
        column: 12,
        span: 10862..10863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 401,
        column: 17,
        span: 10863..10868,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 401,
        column: 18,
        span: 10868..10869,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 401,
        column: 21,
        span: 10869..10872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 401,
        column: 22,
        span: 10872..10873,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 401,
        column: 25,
        span: 10874..10876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 401,
        column: 27,
        span: 10877..10878,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 401,
        column: 29,
        span: 10879..10880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 401,
        column: 31,
        span: 10881..10882,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 401,
        column: 34,
        span: 10883..10885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 401,
        column: 36,
        span: 10886..10887,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 401,
        column: 0,
        span: 10888..10891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 402,
        column: 7,
        span: 10892..10898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 402,
        column: 8,
        span: 10898..10899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 402,
        column: 9,
        span: 10899..10900,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 402,
        column: 12,
        span: 10901..10903,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\nline\\nother\"",
        ),
        line: 402,
        column: 30,
        span: 10904..10921,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 402,
        column: 31,
        span: 10921..10922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 403,
        column: 2,
        span: 10923..10924,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 403,
        column: 3,
        span: 10924..10925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 403,
        column: 8,
        span: 10925..10930,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
        column: 9,
        span: 10930..10931,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
        column: 10,
        span: 10931..10932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 405,
        column: 3,
        span: 10934..10936,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 405,
        column: 4,
        span: 10936..10937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 405,
        column: 9,
        span: 10937..10942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 405,
        column: 10,
        span: 10942..10943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 405,
        column: 14,
        span: 10943..10947,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 405,
        column: 15,
        span: 10947..10948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 406,
        column: 2,
        span: 10949..10950,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 406,
        column: 4,
        span: 10951..10952,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 406,
        column: 7,
        span: 10953..10955,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 407,
        column: 4,
        span: 10956..10959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 407,
        column: 6,
        span: 10960..10961,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 407,
        column: 9,
        span: 10962..10964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 407,
        column: 12,
        span: 10965..10967,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 407,
        column: 13,
        span: 10967..10968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 407,
        column: 18,
        span: 10968..10973,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 19,
        span: 10973..10974,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 407,
        column: 22,
        span: 10974..10977,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 407,
        column: 23,
        span: 10977..10978,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 407,
        column: 27,
        span: 10979..10982,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 28,
        span: 10982..10983,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 407,
        column: 31,
        span: 10984..10986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 407,
        column: 33,
        span: 10987..10988,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 407,
        column: 35,
        span: 10989..10990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 407,
        column: 37,
        span: 10991..10992,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 407,
        column: 40,
        span: 10993..10995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 407,
        column: 42,
        span: 10996..10997,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 407,
        column: 0,
        span: 10998..11001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 408,
        column: 7,
        span: 11002..11008,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 8,
        span: 11008..11009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 408,
        column: 9,
        span: 11009..11010,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 408,
        column: 12,
        span: 11011..11013,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\nline\\nother\"",
        ),
        line: 408,
        column: 30,
        span: 11014..11031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 31,
        span: 11031..11032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 409,
        column: 3,
        span: 11033..11035,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 409,
        column: 4,
        span: 11035..11036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 409,
        column: 9,
        span: 11036..11041,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 10,
        span: 11041..11042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 11,
        span: 11042..11043,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 409,
        column: 12,
        span: 11043..11044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 409,
        column: 17,
        span: 11044..11049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 18,
        span: 11049..11050,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 19,
        span: 11050..11051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 411,
        column: 2,
        span: 11053..11054,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 411,
        column: 4,
        span: 11055..11056,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 411,
        column: 7,
        span: 11057..11059,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 412,
        column: 4,
        span: 11060..11063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 412,
        column: 6,
        span: 11064..11065,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 412,
        column: 9,
        span: 11066..11068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 412,
        column: 12,
        span: 11069..11071,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 412,
        column: 13,
        span: 11071..11072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 412,
        column: 18,
        span: 11072..11077,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 19,
        span: 11077..11078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 412,
        column: 23,
        span: 11078..11082,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
        column: 24,
        span: 11082..11083,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 412,
        column: 28,
        span: 11084..11087,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 29,
        span: 11087..11088,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 412,
        column: 32,
        span: 11089..11091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 412,
        column: 34,
        span: 11092..11093,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 412,
        column: 36,
        span: 11094..11095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 412,
        column: 38,
        span: 11096..11097,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 412,
        column: 41,
        span: 11098..11100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 412,
        column: 43,
        span: 11101..11102,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 412,
        column: 0,
        span: 11103..11106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 413,
        column: 7,
        span: 11107..11113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
        column: 8,
        span: 11113..11114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 413,
        column: 9,
        span: 11114..11115,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 413,
        column: 12,
        span: 11116..11118,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\nline\\nother\"",
        ),
        line: 413,
        column: 30,
        span: 11119..11136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 31,
        span: 11136..11137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 415,
        column: 2,
        span: 11139..11140,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 415,
        column: 4,
        span: 11141..11142,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 415,
        column: 7,
        span: 11143..11145,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 416,
        column: 4,
        span: 11146..11149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 416,
        column: 6,
        span: 11150..11151,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 416,
        column: 9,
        span: 11152..11154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 416,
        column: 12,
        span: 11155..11157,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 416,
        column: 13,
        span: 11157..11158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 416,
        column: 18,
        span: 11158..11163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 19,
        span: 11163..11164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 416,
        column: 23,
        span: 11164..11168,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 416,
        column: 24,
        span: 11168..11169,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 416,
        column: 28,
        span: 11170..11173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 29,
        span: 11173..11174,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 416,
        column: 32,
        span: 11175..11177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 416,
        column: 34,
        span: 11178..11179,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 416,
        column: 36,
        span: 11180..11181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 416,
        column: 38,
        span: 11182..11183,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 416,
        column: 41,
        span: 11184..11186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 416,
        column: 43,
        span: 11187..11188,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 416,
        column: 0,
        span: 11189..11192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 417,
        column: 7,
        span: 11193..11199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 8,
        span: 11199..11200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 417,
        column: 9,
        span: 11200..11201,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 417,
        column: 12,
        span: 11202..11204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lineother\"",
        ),
        line: 417,
        column: 24,
        span: 11205..11216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 25,
        span: 11216..11217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 419,
        column: 3,
        span: 11219..11221,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 419,
        column: 4,
        span: 11221..11222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 419,
        column: 10,
        span: 11222..11228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 11,
        span: 11228..11229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 419,
        column: 15,
        span: 11229..11233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 16,
        span: 11233..11234,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 419,
        column: 17,
        span: 11234..11235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 419,
        column: 20,
        span: 11236..11238,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 419,
        column: 21,
        span: 11238..11239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 419,
        column: 26,
        span: 11239..11244,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 10 + 34\\na = 2*a\\na = -a\\n\"",
        ),
        line: 419,
        column: 58,
        span: 11244..11276,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 419,
        column: 59,
        span: 11276..11277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 419,
        column: 64,
        span: 11277..11282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 65,
        span: 11282..11283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 66,
        span: 11283..11284,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 420,
        column: 6,
        span: 11285..11290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 420,
        column: 8,
        span: 11291..11292,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 420,
        column: 10,
        span: 11293..11294,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 420,
        column: 12,
        span: 11295..11296,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 420,
        column: 13,
        span: 11296..11297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 421,
        column: 7,
        span: 11298..11304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 421,
        column: 8,
        span: 11304..11305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 421,
        column: 12,
        span: 11305..11309,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 421,
        column: 13,
        span: 11309..11310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 421,
        column: 15,
        span: 11310..11312,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 421,
        column: 16,
        span: 11312..11313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 421,
        column: 21,
        span: 11313..11318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 421,
        column: 22,
        span: 11318..11319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 421,
        column: 26,
        span: 11319..11323,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 421,
        column: 27,
        span: 11323..11324,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 421,
        column: 31,
        span: 11325..11328,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 421,
        column: 32,
        span: 11328..11329,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 421,
        column: 33,
        span: 11329..11330,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 421,
        column: 37,
        span: 11331..11334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 421,
        column: 38,
        span: 11334..11335,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 421,
        column: 42,
        span: 11336..11339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 421,
        column: 43,
        span: 11339..11340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 421,
        column: 45,
        span: 11341..11342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 421,
        column: 46,
        span: 11342..11343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 421,
        column: 47,
        span: 11343..11344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 421,
        column: 48,
        span: 11344..11345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 421,
        column: 49,
        span: 11345..11346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 422,
        column: 7,
        span: 11347..11353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
        column: 8,
        span: 11353..11354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 422,
        column: 9,
        span: 11354..11355,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 422,
        column: 10,
        span: 11355..11356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 422,
        column: 11,
        span: 11356..11357,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 422,
        column: 14,
        span: 11358..11360,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 422,
        column: 16,
        span: 11361..11362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
        column: 17,
        span: 11362..11363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
        column: 18,
        span: 11363..11364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 20,
        span: 11363..11366,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 422,
        column: 22,
        span: 11367..11368,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 25,
        span: 11368..11371,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
        column: 26,
        span: 11371..11372,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 422,
        column: 28,
        span: 11373..11374,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 30,
        span: 11374..11376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
        column: 31,
        span: 11376..11377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
        column: 32,
        span: 11377..11378,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 425,
        column: 3,
        span: 11381..11383,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 428,
        column: 8,
        span: 11478..11483,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 428,
        column: 17,
        span: 11484..11492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gettoclose",
        ),
        line: 428,
        column: 28,
        span: 11493..11503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 30,
        span: 11504..11505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lv",
        ),
        line: 428,
        column: 32,
        span: 11505..11507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 33,
        span: 11507..11508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lv",
        ),
        line: 429,
        column: 7,
        span: 11513..11515,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 429,
        column: 9,
        span: 11516..11517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lv",
        ),
        line: 429,
        column: 12,
        span: 11518..11520,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 429,
        column: 14,
        span: 11521..11522,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
        column: 0,
        span: 11522..11524,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 430,
        column: 10,
        span: 11529..11534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stvar",
        ),
        line: 430,
        column: 16,
        span: 11535..11540,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 430,
        column: 18,
        span: 11541..11542,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 430,
        column: 20,
        span: 11542..11544,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 431,
        column: 8,
        span: 11601..11604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 431,
        column: 10,
        span: 11605..11606,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 431,
        column: 12,
        span: 11607..11608,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 431,
        column: 14,
        span: 11608..11610,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 431,
        column: 15,
        span: 11610..11611,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 431,
        column: 20,
        span: 11611..11616,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 431,
        column: 0,
        span: 11617..11619,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 432,
        column: 12,
        span: 11626..11631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 432,
        column: 14,
        span: 11632..11633,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 432,
        column: 15,
        span: 11633..11634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 432,
        column: 17,
        span: 11635..11636,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 432,
        column: 19,
        span: 11637..11638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 432,
        column: 25,
        span: 11639..11644,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 432,
        column: 26,
        span: 11644..11645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 432,
        column: 34,
        span: 11645..11653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 35,
        span: 11653..11654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lv",
        ),
        line: 432,
        column: 37,
        span: 11654..11656,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 432,
        column: 38,
        span: 11656..11657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 432,
        column: 40,
        span: 11658..11659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 41,
        span: 11659..11660,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 433,
        column: 9,
        span: 11667..11669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 433,
        column: 11,
        span: 11670..11671,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 433,
        column: 14,
        span: 11672..11674,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(for state)\"",
        ),
        line: 433,
        column: 28,
        span: 11675..11688,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 433,
        column: 0,
        span: 11689..11693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stvar",
        ),
        line: 434,
        column: 14,
        span: 11702..11707,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 434,
        column: 16,
        span: 11708..11709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stvar",
        ),
        line: 434,
        column: 22,
        span: 11710..11715,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 434,
        column: 24,
        span: 11716..11717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 434,
        column: 0,
        span: 11717..11719,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 435,
        column: 11,
        span: 11728..11730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stvar",
        ),
        line: 435,
        column: 17,
        span: 11731..11736,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 435,
        column: 20,
        span: 11737..11739,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 435,
        column: 22,
        span: 11739..11741,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 435,
        column: 27,
        span: 11742..11746,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 435,
        column: 34,
        span: 11747..11753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 435,
        column: 36,
        span: 11754..11755,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 435,
        column: 0,
        span: 11756..11759,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 436,
        column: 0,
        span: 11766..11769,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 437,
        column: 0,
        span: 11774..11777,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 438,
        column: 0,
        span: 11780..11783,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 440,
        column: 8,
        span: 11787..11792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 440,
        column: 0,
        span: 11793..11794,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 441,
        column: 6,
        span: 11797..11800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 441,
        column: 8,
        span: 11801..11802,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 441,
        column: 11,
        span: 11803..11805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 441,
        column: 14,
        span: 11806..11808,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 441,
        column: 15,
        span: 11808..11809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 441,
        column: 20,
        span: 11809..11814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 441,
        column: 21,
        span: 11814..11815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 441,
        column: 25,
        span: 11815..11819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 441,
        column: 26,
        span: 11819..11820,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 441,
        column: 0,
        span: 11821..11823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 442,
        column: 6,
        span: 11828..11829,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 442,
        column: 8,
        span: 11830..11831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gettoclose",
        ),
        line: 442,
        column: 19,
        span: 11832..11842,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 442,
        column: 20,
        span: 11842..11843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 442,
        column: 21,
        span: 11842..11844,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 442,
        column: 22,
        span: 11844..11845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 443,
        column: 11,
        span: 11850..11856,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 443,
        column: 12,
        span: 11856..11857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 443,
        column: 14,
        span: 11857..11859,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 443,
        column: 15,
        span: 11859..11860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 443,
        column: 19,
        span: 11860..11864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 443,
        column: 20,
        span: 11864..11865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 443,
        column: 21,
        span: 11865..11866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 443,
        column: 22,
        span: 11866..11867,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 443,
        column: 25,
        span: 11868..11870,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file\"",
        ),
        line: 443,
        column: 32,
        span: 11871..11877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 443,
        column: 33,
        span: 11877..11878,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 444,
        column: 0,
        span: 11883..11888,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 445,
        column: 0,
        span: 11891..11894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 446,
        column: 9,
        span: 11897..11903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
        column: 10,
        span: 11903..11904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 446,
        column: 12,
        span: 11904..11906,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 446,
        column: 13,
        span: 11906..11907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 446,
        column: 17,
        span: 11907..11911,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
        column: 18,
        span: 11911..11912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 446,
        column: 19,
        span: 11912..11913,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
        column: 20,
        span: 11913..11914,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 446,
        column: 23,
        span: 11915..11917,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"closed file\"",
        ),
        line: 446,
        column: 37,
        span: 11918..11931,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
        column: 38,
        span: 11931..11932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 448,
        column: 4,
        span: 11936..11937,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 448,
        column: 6,
        span: 11938..11939,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 448,
        column: 0,
        span: 11940..11943,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 449,
        column: 8,
        span: 11946..11951,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 449,
        column: 17,
        span: 11952..11960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 449,
        column: 21,
        span: 11961..11964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
        column: 23,
        span: 11965..11966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 449,
        column: 27,
        span: 11966..11970,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
        column: 28,
        span: 11970..11971,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 450,
        column: 8,
        span: 11976..11979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 450,
        column: 10,
        span: 11980..11981,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 450,
        column: 13,
        span: 11982..11984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 450,
        column: 16,
        span: 11985..11987,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 450,
        column: 17,
        span: 11987..11988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 450,
        column: 22,
        span: 11988..11993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 23,
        span: 11993..11994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 450,
        column: 27,
        span: 11994..11998,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 28,
        span: 11998..11999,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 450,
        column: 0,
        span: 12000..12002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 451,
        column: 8,
        span: 12009..12010,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 451,
        column: 10,
        span: 12011..12012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gettoclose",
        ),
        line: 451,
        column: 21,
        span: 12013..12023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 22,
        span: 12023..12024,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 451,
        column: 23,
        span: 12023..12025,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 24,
        span: 12025..12026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 452,
        column: 13,
        span: 12033..12039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
        column: 14,
        span: 12039..12040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 452,
        column: 16,
        span: 12040..12042,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 452,
        column: 17,
        span: 12042..12043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 452,
        column: 21,
        span: 12043..12047,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
        column: 22,
        span: 12047..12048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 452,
        column: 23,
        span: 12048..12049,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
        column: 24,
        span: 12049..12050,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 452,
        column: 27,
        span: 12051..12053,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file\"",
        ),
        line: 452,
        column: 34,
        span: 12054..12060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
        column: 35,
        span: 12060..12061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 453,
        column: 12,
        span: 12068..12073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
        column: 13,
        span: 12073..12074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 453,
        column: 14,
        span: 12074..12075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
        column: 15,
        span: 12075..12076,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 454,
        column: 0,
        span: 12110..12113,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 455,
        column: 0,
        span: 12116..12119,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 456,
        column: 8,
        span: 12122..12127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 456,
        column: 11,
        span: 12128..12130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 456,
        column: 12,
        span: 12130..12131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 456,
        column: 16,
        span: 12132..12135,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 456,
        column: 18,
        span: 12136..12137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 456,
        column: 24,
        span: 12138..12143,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 25,
        span: 12143..12144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 456,
        column: 28,
        span: 12144..12147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 456,
        column: 29,
        span: 12147..12148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 456,
        column: 34,
        span: 12149..12153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 35,
        span: 12153..12154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 457,
        column: 9,
        span: 12157..12163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 10,
        span: 12163..12164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 457,
        column: 12,
        span: 12164..12166,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 457,
        column: 15,
        span: 12167..12169,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 457,
        column: 21,
        span: 12170..12175,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 457,
        column: 25,
        span: 12176..12179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 457,
        column: 28,
        span: 12180..12182,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 457,
        column: 29,
        span: 12182..12183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 457,
        column: 33,
        span: 12183..12187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 34,
        span: 12187..12188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 457,
        column: 37,
        span: 12188..12191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
        column: 38,
        span: 12191..12192,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 457,
        column: 41,
        span: 12193..12195,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"closed file\"",
        ),
        line: 457,
        column: 55,
        span: 12196..12209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
        column: 56,
        span: 12209..12210,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 459,
        column: 0,
        span: 12212..12215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 463,
        column: 3,
        span: 12259..12261,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 463,
        column: 4,
        span: 12261..12262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 463,
        column: 10,
        span: 12262..12268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
        column: 11,
        span: 12268..12269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 463,
        column: 15,
        span: 12269..12273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
        column: 16,
        span: 12273..12274,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 463,
        column: 17,
        span: 12274..12275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 463,
        column: 20,
        span: 12276..12278,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 463,
        column: 21,
        span: 12278..12279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 463,
        column: 26,
        span: 12279..12284,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456789\\n\"",
        ),
        line: 463,
        column: 40,
        span: 12284..12298,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 463,
        column: 41,
        span: 12298..12299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 463,
        column: 46,
        span: 12299..12304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
        column: 47,
        span: 12304..12305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
        column: 48,
        span: 12305..12306,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 464,
        column: 4,
        span: 12307..12310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 464,
        column: 6,
        span: 12311..12312,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 464,
        column: 7,
        span: 12312..12313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 464,
        column: 8,
        span: 12313..12314,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 464,
        column: 11,
        span: 12315..12317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 464,
        column: 14,
        span: 12318..12320,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 464,
        column: 15,
        span: 12320..12321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 464,
        column: 20,
        span: 12321..12326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
        column: 21,
        span: 12326..12327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 464,
        column: 25,
        span: 12327..12331,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 464,
        column: 26,
        span: 12331..12332,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 464,
        column: 28,
        span: 12332..12334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 464,
        column: 29,
        span: 12334..12335,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 464,
        column: 31,
        span: 12335..12337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 32,
        span: 12337..12338,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 464,
        column: 0,
        span: 12339..12341,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 465,
        column: 5,
        span: 12344..12346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 465,
        column: 7,
        span: 12347..12348,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 465,
        column: 10,
        span: 12349..12351,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 465,
        column: 15,
        span: 12352..12356,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 465,
        column: 20,
        span: 12357..12361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 465,
        column: 27,
        span: 12362..12368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
        column: 28,
        span: 12368..12369,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 465,
        column: 31,
        span: 12369..12372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 465,
        column: 33,
        span: 12373..12374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
        column: 34,
        span: 12374..12375,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 466,
        column: 7,
        span: 12378..12382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 466,
        column: 14,
        span: 12383..12389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 15,
        span: 12389..12390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 466,
        column: 23,
        span: 12390..12398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 24,
        span: 12398..12399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 466,
        column: 25,
        span: 12399..12400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 26,
        span: 12400..12401,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 466,
        column: 29,
        span: 12402..12404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 466,
        column: 38,
        span: 12405..12413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 39,
        span: 12413..12414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 466,
        column: 40,
        span: 12414..12415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 41,
        span: 12415..12416,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 466,
        column: 43,
        span: 12417..12418,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 466,
        column: 45,
        span: 12418..12420,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 46,
        span: 12420..12421,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 467,
        column: 0,
        span: 12424..12427,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 468,
        column: 0,
        span: 12428..12431,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 470,
        column: 4,
        span: 12433..12436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 470,
        column: 6,
        span: 12437..12438,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 470,
        column: 7,
        span: 12438..12439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 470,
        column: 8,
        span: 12439..12440,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 470,
        column: 9,
        span: 12440..12441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 470,
        column: 10,
        span: 12441..12442,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 470,
        column: 13,
        span: 12443..12445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 470,
        column: 16,
        span: 12446..12448,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 470,
        column: 17,
        span: 12448..12449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 470,
        column: 22,
        span: 12449..12454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
        column: 23,
        span: 12454..12455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 470,
        column: 27,
        span: 12455..12459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 470,
        column: 28,
        span: 12459..12460,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 470,
        column: 30,
        span: 12460..12462,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 470,
        column: 31,
        span: 12462..12463,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 470,
        column: 33,
        span: 12463..12465,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 470,
        column: 34,
        span: 12465..12466,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 470,
        column: 38,
        span: 12467..12470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
        column: 39,
        span: 12470..12471,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 470,
        column: 0,
        span: 12472..12474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 471,
        column: 9,
        span: 12477..12483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 471,
        column: 10,
        span: 12483..12484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 471,
        column: 11,
        span: 12484..12485,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 471,
        column: 14,
        span: 12486..12488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 471,
        column: 18,
        span: 12489..12492,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 471,
        column: 22,
        span: 12493..12496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 471,
        column: 24,
        span: 12497..12498,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 471,
        column: 27,
        span: 12499..12501,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"12\"",
        ),
        line: 471,
        column: 32,
        span: 12502..12506,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 471,
        column: 36,
        span: 12507..12510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 471,
        column: 38,
        span: 12511..12512,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 471,
        column: 41,
        span: 12513..12515,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3456789\\n\"",
        ),
        line: 471,
        column: 53,
        span: 12516..12527,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 471,
        column: 54,
        span: 12527..12528,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 472,
        column: 0,
        span: 12529..12532,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 474,
        column: 4,
        span: 12534..12537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 474,
        column: 6,
        span: 12538..12539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 474,
        column: 7,
        span: 12539..12540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 474,
        column: 8,
        span: 12540..12541,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 474,
        column: 9,
        span: 12541..12542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 474,
        column: 10,
        span: 12542..12543,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 474,
        column: 13,
        span: 12544..12546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 474,
        column: 16,
        span: 12547..12549,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 474,
        column: 17,
        span: 12549..12550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 474,
        column: 22,
        span: 12550..12555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 474,
        column: 23,
        span: 12555..12556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 474,
        column: 27,
        span: 12556..12560,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 474,
        column: 28,
        span: 12560..12561,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 474,
        column: 32,
        span: 12562..12565,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 474,
        column: 33,
        span: 12565..12566,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 474,
        column: 35,
        span: 12566..12568,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 474,
        column: 36,
        span: 12568..12569,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 474,
        column: 38,
        span: 12569..12571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 474,
        column: 39,
        span: 12571..12572,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 474,
        column: 0,
        span: 12573..12575,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 475,
        column: 5,
        span: 12578..12580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 475,
        column: 7,
        span: 12581..12582,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 475,
        column: 10,
        span: 12583..12585,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 475,
        column: 13,
        span: 12586..12588,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 475,
        column: 18,
        span: 12589..12593,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 475,
        column: 24,
        span: 12594..12599,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 475,
        column: 0,
        span: 12600..12603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 476,
        column: 9,
        span: 12606..12612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 476,
        column: 10,
        span: 12612..12613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 476,
        column: 11,
        span: 12613..12614,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 476,
        column: 14,
        span: 12615..12617,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456789\\n\"",
        ),
        line: 476,
        column: 29,
        span: 12618..12632,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 476,
        column: 33,
        span: 12633..12636,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 476,
        column: 37,
        span: 12637..12640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 476,
        column: 39,
        span: 12641..12642,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 476,
        column: 43,
        span: 12643..12646,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 476,
        column: 47,
        span: 12647..12650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 476,
        column: 49,
        span: 12651..12652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 476,
        column: 50,
        span: 12652..12653,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 477,
        column: 0,
        span: 12654..12657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 478,
        column: 15,
        span: 12658..12672,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
        column: 16,
        span: 12672..12673,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
        column: 17,
        span: 12673..12674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 480,
        column: 3,
        span: 12717..12719,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 480,
        column: 4,
        span: 12719..12720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 480,
        column: 10,
        span: 12720..12726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 11,
        span: 12726..12727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 480,
        column: 15,
        span: 12727..12731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
        column: 16,
        span: 12731..12732,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 480,
        column: 17,
        span: 12732..12733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 480,
        column: 20,
        span: 12734..12736,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 480,
        column: 21,
        span: 12736..12737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 480,
        column: 26,
        span: 12737..12742,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"00\\n10\\n20\\n30\\n40\\n\"",
        ),
        line: 480,
        column: 48,
        span: 12742..12764,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 480,
        column: 49,
        span: 12764..12765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 480,
        column: 54,
        span: 12765..12770,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 55,
        span: 12770..12771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
        column: 56,
        span: 12771..12772,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 481,
        column: 4,
        span: 12773..12776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 481,
        column: 6,
        span: 12777..12778,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 481,
        column: 7,
        span: 12778..12779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 481,
        column: 9,
        span: 12780..12781,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 481,
        column: 12,
        span: 12782..12784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 481,
        column: 15,
        span: 12785..12787,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 481,
        column: 16,
        span: 12787..12788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 481,
        column: 21,
        span: 12788..12793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 481,
        column: 22,
        span: 12793..12794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 481,
        column: 26,
        span: 12794..12798,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 481,
        column: 27,
        span: 12798..12799,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 481,
        column: 31,
        span: 12800..12803,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 481,
        column: 32,
        span: 12803..12804,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 481,
        column: 36,
        span: 12805..12808,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 481,
        column: 37,
        span: 12808..12809,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 481,
        column: 0,
        span: 12810..12812,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 482,
        column: 5,
        span: 12815..12817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 482,
        column: 7,
        span: 12818..12819,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 482,
        column: 10,
        span: 12820..12822,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 482,
        column: 13,
        span: 12822..12825,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 482,
        column: 18,
        span: 12826..12830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 482,
        column: 25,
        span: 12831..12837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
        column: 26,
        span: 12837..12838,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 482,
        column: 29,
        span: 12838..12841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 482,
        column: 31,
        span: 12842..12843,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
        column: 32,
        span: 12843..12844,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 483,
        column: 7,
        span: 12847..12851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 483,
        column: 14,
        span: 12852..12858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 483,
        column: 15,
        span: 12858..12859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 483,
        column: 16,
        span: 12859..12860,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 483,
        column: 19,
        span: 12861..12863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 483,
        column: 21,
        span: 12864..12865,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 483,
        column: 23,
        span: 12866..12867,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 483,
        column: 26,
        span: 12867..12870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 483,
        column: 27,
        span: 12870..12871,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 484,
        column: 0,
        span: 12874..12877,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 485,
        column: 0,
        span: 12878..12881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 489,
        column: 3,
        span: 12905..12907,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 489,
        column: 4,
        span: 12907..12908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 489,
        column: 10,
        span: 12908..12914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 489,
        column: 11,
        span: 12914..12915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 489,
        column: 15,
        span: 12915..12919,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 489,
        column: 16,
        span: 12919..12920,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 489,
        column: 17,
        span: 12920..12921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 490,
        column: 3,
        span: 12922..12924,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 490,
        column: 4,
        span: 12924..12925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 490,
        column: 9,
        span: 12925..12930,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal y\n= X\nX =\nX *\n2 +\nX;\nX =\nX\n-                                   y;\n]]",
        ),
        line: 500,
        column: 3,
        span: 12930..13007,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 500,
        column: 4,
        span: 13007..13008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 500,
        column: 9,
        span: 13008..13013,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 500,
        column: 10,
        span: 13013..13014,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 500,
        column: 11,
        span: 13014..13015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 501,
        column: 3,
        span: 13016..13018,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 501,
        column: 4,
        span: 13018..13019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 501,
        column: 5,
        span: 13019..13020,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 501,
        column: 7,
        span: 13021..13022,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 501,
        column: 0,
        span: 13022..13024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 502,
        column: 7,
        span: 13025..13031,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 502,
        column: 8,
        span: 13031..13032,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 502,
        column: 11,
        span: 13032..13035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 502,
        column: 16,
        span: 13036..13040,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 502,
        column: 17,
        span: 13040..13041,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 502,
        column: 18,
        span: 13041..13042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 502,
        column: 20,
        span: 13042..13044,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 502,
        column: 21,
        span: 13044..13045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 502,
        column: 26,
        span: 13045..13050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 502,
        column: 27,
        span: 13050..13051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 502,
        column: 31,
        span: 13051..13055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 502,
        column: 32,
        span: 13055..13056,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 502,
        column: 33,
        span: 13056..13057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 502,
        column: 34,
        span: 13057..13058,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 502,
        column: 35,
        span: 13058..13059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 503,
        column: 15,
        span: 13060..13074,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 503,
        column: 16,
        span: 13074..13075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 503,
        column: 17,
        span: 13075..13076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 504,
        column: 5,
        span: 13118..13122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 504,
        column: 6,
        span: 13122..13123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 504,
        column: 7,
        span: 13123..13124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 504,
        column: 9,
        span: 13124..13126,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 504,
        column: 10,
        span: 13126..13127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 504,
        column: 15,
        span: 13127..13132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 504,
        column: 16,
        span: 13132..13133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 504,
        column: 20,
        span: 13133..13137,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 504,
        column: 21,
        span: 13137..13138,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 504,
        column: 25,
        span: 13139..13142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 504,
        column: 26,
        span: 13142..13143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 504,
        column: 27,
        span: 13143..13144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 504,
        column: 28,
        span: 13144..13145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 504,
        column: 29,
        span: 13145..13146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 504,
        column: 30,
        span: 13146..13147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 505,
        column: 7,
        span: 13148..13154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 505,
        column: 8,
        span: 13154..13155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 505,
        column: 10,
        span: 13155..13157,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 505,
        column: 11,
        span: 13157..13158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 505,
        column: 12,
        span: 13158..13159,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 505,
        column: 15,
        span: 13160..13162,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 505,
        column: 17,
        span: 13162..13164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 505,
        column: 18,
        span: 13164..13165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 506,
        column: 5,
        span: 13166..13170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
        column: 6,
        span: 13170..13171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
        column: 7,
        span: 13171..13172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 506,
        column: 9,
        span: 13172..13174,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 506,
        column: 10,
        span: 13174..13175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 506,
        column: 15,
        span: 13175..13180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
        column: 16,
        span: 13180..13181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 506,
        column: 20,
        span: 13181..13185,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 506,
        column: 21,
        span: 13185..13186,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 506,
        column: 23,
        span: 13186..13188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 506,
        column: 24,
        span: 13188..13189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 506,
        column: 25,
        span: 13189..13190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 506,
        column: 26,
        span: 13190..13191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
        column: 27,
        span: 13191..13192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 506,
        column: 28,
        span: 13192..13193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 507,
        column: 7,
        span: 13194..13200,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 507,
        column: 8,
        span: 13200..13201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 507,
        column: 10,
        span: 13201..13203,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 507,
        column: 11,
        span: 13203..13204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 507,
        column: 12,
        span: 13204..13205,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 507,
        column: 15,
        span: 13206..13208,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 507,
        column: 17,
        span: 13208..13210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 507,
        column: 18,
        span: 13210..13211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 508,
        column: 5,
        span: 13212..13216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 508,
        column: 6,
        span: 13216..13217,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 508,
        column: 7,
        span: 13217..13218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 508,
        column: 9,
        span: 13218..13220,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 508,
        column: 10,
        span: 13220..13221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 508,
        column: 15,
        span: 13221..13226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 508,
        column: 16,
        span: 13226..13227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 508,
        column: 20,
        span: 13227..13231,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 508,
        column: 21,
        span: 13231..13232,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 508,
        column: 23,
        span: 13232..13234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 508,
        column: 24,
        span: 13234..13235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 508,
        column: 25,
        span: 13235..13236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 508,
        column: 26,
        span: 13236..13237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 508,
        column: 27,
        span: 13237..13238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 508,
        column: 28,
        span: 13238..13239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 509,
        column: 7,
        span: 13240..13246,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 509,
        column: 8,
        span: 13246..13247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 509,
        column: 10,
        span: 13247..13249,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 509,
        column: 11,
        span: 13249..13250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 509,
        column: 12,
        span: 13250..13251,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 509,
        column: 15,
        span: 13252..13254,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 509,
        column: 17,
        span: 13254..13256,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 509,
        column: 18,
        span: 13256..13257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 511,
        column: 6,
        span: 13259..13264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 511,
        column: 7,
        span: 13264..13265,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 511,
        column: 10,
        span: 13265..13268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 511,
        column: 11,
        span: 13268..13269,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 513,
        column: 6,
        span: 13271..13276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 513,
        column: 9,
        span: 13277..13279,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 513,
        column: 11,
        span: 13280..13281,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\\n\\n\\\\com \\\"\\\"''coisas [[estranhas]] ]]'\"",
        ),
        line: 513,
        column: 60,
        span: 13282..13330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 514,
        column: 3,
        span: 13331..13333,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 514,
        column: 4,
        span: 13333..13334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 514,
        column: 10,
        span: 13334..13340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 514,
        column: 11,
        span: 13340..13341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 514,
        column: 15,
        span: 13341..13345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 514,
        column: 16,
        span: 13345..13346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 515,
        column: 7,
        span: 13347..13353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 515,
        column: 8,
        span: 13353..13354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 515,
        column: 10,
        span: 13354..13356,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 515,
        column: 11,
        span: 13356..13357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 515,
        column: 16,
        span: 13357..13362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 515,
        column: 17,
        span: 13362..13363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 515,
        column: 23,
        span: 13363..13369,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 515,
        column: 24,
        span: 13369..13370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 515,
        column: 30,
        span: 13370..13376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 515,
        column: 31,
        span: 13376..13377,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x2 = %q\\n-- comment without ending EOS\"",
        ),
        line: 515,
        column: 71,
        span: 13377..13417,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 515,
        column: 72,
        span: 13417..13418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 515,
        column: 75,
        span: 13419..13421,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 515,
        column: 76,
        span: 13421..13422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 515,
        column: 77,
        span: 13422..13423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 515,
        column: 78,
        span: 13423..13424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 516,
        column: 3,
        span: 13425..13427,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 516,
        column: 4,
        span: 13427..13428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 516,
        column: 9,
        span: 13428..13433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 516,
        column: 10,
        span: 13433..13434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 516,
        column: 11,
        span: 13434..13435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 517,
        column: 7,
        span: 13436..13442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 517,
        column: 8,
        span: 13442..13443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 517,
        column: 16,
        span: 13443..13451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 517,
        column: 17,
        span: 13451..13452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 517,
        column: 21,
        span: 13452..13456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 517,
        column: 22,
        span: 13456..13457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 517,
        column: 23,
        span: 13457..13458,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 517,
        column: 24,
        span: 13458..13459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 517,
        column: 25,
        span: 13459..13460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 518,
        column: 7,
        span: 13461..13467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 518,
        column: 8,
        span: 13467..13468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 518,
        column: 10,
        span: 13468..13470,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 518,
        column: 13,
        span: 13471..13473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 518,
        column: 16,
        span: 13474..13476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 518,
        column: 17,
        span: 13476..13477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 519,
        column: 6,
        span: 13478..13483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 519,
        column: 7,
        span: 13483..13484,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 519,
        column: 10,
        span: 13484..13487,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 519,
        column: 11,
        span: 13487..13488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 520,
        column: 7,
        span: 13489..13495,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 520,
        column: 8,
        span: 13495..13496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 520,
        column: 10,
        span: 13496..13498,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 520,
        column: 11,
        span: 13498..13499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 520,
        column: 17,
        span: 13499..13505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 520,
        column: 18,
        span: 13505..13506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 520,
        column: 22,
        span: 13506..13510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 520,
        column: 23,
        span: 13510..13511,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 520,
        column: 24,
        span: 13511..13512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 521,
        column: 7,
        span: 13513..13519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 521,
        column: 8,
        span: 13519..13520,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 521,
        column: 11,
        span: 13520..13523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 521,
        column: 14,
        span: 13524..13526,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 521,
        column: 15,
        span: 13526..13527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 521,
        column: 21,
        span: 13527..13533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 521,
        column: 22,
        span: 13533..13534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 521,
        column: 26,
        span: 13534..13538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 521,
        column: 27,
        span: 13538..13539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 521,
        column: 28,
        span: 13539..13540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 522,
        column: 7,
        span: 13541..13547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 522,
        column: 8,
        span: 13547..13548,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 522,
        column: 11,
        span: 13548..13551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 522,
        column: 14,
        span: 13552..13554,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 522,
        column: 15,
        span: 13554..13555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 522,
        column: 21,
        span: 13555..13561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 522,
        column: 22,
        span: 13561..13562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 522,
        column: 31,
        span: 13562..13571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
        column: 32,
        span: 13571..13572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
        column: 33,
        span: 13572..13573,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 525,
        column: 6,
        span: 13595..13600,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 525,
        column: 15,
        span: 13601..13609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        line: 525,
        column: 28,
        span: 13610..13622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 525,
        column: 30,
        span: 13623..13624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 525,
        column: 31,
        span: 13624..13625,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 525,
        column: 32,
        span: 13625..13626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expres",
        ),
        line: 525,
        column: 39,
        span: 13627..13633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 525,
        column: 40,
        span: 13633..13634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 526,
        column: 5,
        span: 13637..13639,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 526,
        column: 6,
        span: 13639..13640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 526,
        column: 12,
        span: 13640..13646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 526,
        column: 13,
        span: 13646..13647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 526,
        column: 17,
        span: 13647..13651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 526,
        column: 18,
        span: 13651..13652,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 527,
        column: 5,
        span: 13655..13657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 527,
        column: 7,
        span: 13658..13659,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 527,
        column: 12,
        span: 13660..13664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 527,
        column: 15,
        span: 13665..13667,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 527,
        column: 16,
        span: 13667..13668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 527,
        column: 21,
        span: 13668..13673,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 527,
        column: 22,
        span: 13673..13674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 527,
        column: 23,
        span: 13674..13675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 527,
        column: 24,
        span: 13675..13676,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 527,
        column: 0,
        span: 13677..13680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 528,
        column: 5,
        span: 13683..13685,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 528,
        column: 6,
        span: 13685..13686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 528,
        column: 11,
        span: 13686..13691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 528,
        column: 12,
        span: 13691..13692,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 528,
        column: 13,
        span: 13692..13693,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 529,
        column: 8,
        span: 13696..13701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 529,
        column: 12,
        span: 13702..13705,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 529,
        column: 14,
        span: 13706..13707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 529,
        column: 21,
        span: 13708..13714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 22,
        span: 13714..13715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 529,
        column: 30,
        span: 13715..13723,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 31,
        span: 13723..13724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 529,
        column: 35,
        span: 13724..13728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 36,
        span: 13728..13729,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 37,
        span: 13729..13730,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 38,
        span: 13730..13731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 39,
        span: 13731..13732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 530,
        column: 9,
        span: 13735..13741,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
        column: 10,
        span: 13741..13742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 530,
        column: 12,
        span: 13742..13744,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 530,
        column: 13,
        span: 13744..13745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 530,
        column: 19,
        span: 13745..13751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 530,
        column: 20,
        span: 13751..13752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 530,
        column: 24,
        span: 13752..13756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
        column: 25,
        span: 13756..13757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 530,
        column: 26,
        span: 13757..13758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 531,
        column: 9,
        span: 13761..13767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 531,
        column: 10,
        span: 13767..13768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 531,
        column: 13,
        span: 13768..13771,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 531,
        column: 16,
        span: 13772..13774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expres",
        ),
        line: 531,
        column: 23,
        span: 13775..13781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 531,
        column: 24,
        span: 13781..13782,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 532,
        column: 0,
        span: 13783..13786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        line: 535,
        column: 13,
        span: 13810..13822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
        column: 14,
        span: 13822..13823,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 535,
        column: 17,
        span: 13823..13826,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
        column: 18,
        span: 13826..13827,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 535,
        column: 22,
        span: 13828..13831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
        column: 23,
        span: 13831..13832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        line: 538,
        column: 13,
        span: 13891..13903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 538,
        column: 14,
        span: 13903..13904,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"# a non-ending comment\"",
        ),
        line: 538,
        column: 38,
        span: 13904..13928,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 538,
        column: 39,
        span: 13928..13929,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 538,
        column: 43,
        span: 13930..13933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 538,
        column: 44,
        span: 13933..13934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        line: 542,
        column: 13,
        span: 13970..13982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 542,
        column: 14,
        span: 13982..13983,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xEF\\xBB\\xBF# some comment\\nreturn 234\"",
        ),
        line: 542,
        column: 54,
        span: 13983..14023,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 542,
        column: 55,
        span: 14023..14024,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "234",
                    after_decimal: "",
                },
            ),
        ),
        line: 542,
        column: 59,
        span: 14024..14028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 542,
        column: 60,
        span: 14028..14029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        line: 543,
        column: 13,
        span: 14030..14042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 543,
        column: 14,
        span: 14042..14043,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xEF\\xBB\\xBFreturn 239\"",
        ),
        line: 543,
        column: 38,
        span: 14043..14067,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 543,
        column: 39,
        span: 14067..14068,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "239",
                    after_decimal: "",
                },
            ),
        ),
        line: 543,
        column: 43,
        span: 14068..14072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 543,
        column: 44,
        span: 14072..14073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        line: 544,
        column: 13,
        span: 14074..14086,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 544,
        column: 14,
        span: 14086..14087,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xEF\\xBB\\xBF\"",
        ),
        line: 544,
        column: 28,
        span: 14087..14101,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 544,
        column: 29,
        span: 14101..14102,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 544,
        column: 33,
        span: 14103..14106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 544,
        column: 34,
        span: 14106..14107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        line: 548,
        column: 13,
        span: 14193..14205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 548,
        column: 14,
        span: 14205..14206,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"# a comment\\nreturn require'debug'.getinfo(1).currentline\"",
        ),
        line: 548,
        column: 73,
        span: 14206..14265,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 548,
        column: 74,
        span: 14265..14266,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 548,
        column: 76,
        span: 14266..14268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 548,
        column: 77,
        span: 14268..14269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 552,
        column: 3,
        span: 14295..14297,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 552,
        column: 4,
        span: 14297..14298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 552,
        column: 10,
        span: 14298..14304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 552,
        column: 11,
        span: 14304..14305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 552,
        column: 13,
        span: 14305..14307,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 552,
        column: 14,
        span: 14307..14308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 552,
        column: 18,
        span: 14308..14312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 552,
        column: 19,
        span: 14312..14313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 552,
        column: 23,
        span: 14313..14317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 552,
        column: 24,
        span: 14317..14318,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wb\"",
        ),
        line: 552,
        column: 29,
        span: 14319..14323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 552,
        column: 30,
        span: 14323..14324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 552,
        column: 31,
        span: 14324..14325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 553,
        column: 7,
        span: 14326..14332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
        column: 8,
        span: 14332..14333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 553,
        column: 10,
        span: 14333..14335,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 553,
        column: 11,
        span: 14335..14336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 553,
        column: 16,
        span: 14336..14341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
        column: 17,
        span: 14341..14342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 553,
        column: 23,
        span: 14342..14348,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 553,
        column: 24,
        span: 14348..14349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 553,
        column: 28,
        span: 14349..14353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
        column: 29,
        span: 14353..14354,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 553,
        column: 37,
        span: 14354..14362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
        column: 39,
        span: 14363..14364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
        column: 40,
        span: 14364..14365,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 553,
        column: 47,
        span: 14366..14372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 553,
        column: 50,
        span: 14372..14375,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 553,
        column: 51,
        span: 14375..14376,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0alo\\255'",
        ),
        line: 553,
        column: 63,
        span: 14377..14388,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 553,
        column: 64,
        span: 14388..14389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'hi'",
        ),
        line: 553,
        column: 69,
        span: 14390..14394,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 553,
        column: 73,
        span: 14395..14398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
        column: 74,
        span: 14398..14399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
        column: 75,
        span: 14399..14400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
        column: 76,
        span: 14400..14401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 554,
        column: 3,
        span: 14402..14404,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 554,
        column: 4,
        span: 14404..14405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 554,
        column: 9,
        span: 14405..14410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 554,
        column: 10,
        span: 14410..14411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 554,
        column: 11,
        span: 14411..14412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 555,
        column: 2,
        span: 14413..14414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 555,
        column: 3,
        span: 14414..14415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 555,
        column: 5,
        span: 14416..14417,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 555,
        column: 6,
        span: 14417..14418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 555,
        column: 8,
        span: 14419..14420,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 555,
        column: 10,
        span: 14421..14422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 555,
        column: 17,
        span: 14423..14429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 555,
        column: 18,
        span: 14429..14430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 555,
        column: 26,
        span: 14430..14438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 555,
        column: 27,
        span: 14438..14439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 555,
        column: 31,
        span: 14439..14443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 555,
        column: 32,
        span: 14443..14444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 555,
        column: 33,
        span: 14444..14445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 555,
        column: 34,
        span: 14445..14446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 555,
        column: 35,
        span: 14446..14447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 556,
        column: 7,
        span: 14448..14454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 556,
        column: 8,
        span: 14454..14455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 556,
        column: 9,
        span: 14455..14456,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 556,
        column: 12,
        span: 14457..14459,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 556,
        column: 15,
        span: 14459..14462,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 556,
        column: 19,
        span: 14463..14466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 556,
        column: 21,
        span: 14467..14468,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 556,
        column: 24,
        span: 14469..14471,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0alo\\255\"",
        ),
        line: 556,
        column: 36,
        span: 14472..14483,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 556,
        column: 40,
        span: 14484..14487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 556,
        column: 42,
        span: 14488..14489,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 556,
        column: 45,
        span: 14490..14492,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 556,
        column: 50,
        span: 14493..14497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 556,
        column: 51,
        span: 14497..14498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 557,
        column: 7,
        span: 14499..14505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 557,
        column: 8,
        span: 14505..14506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 557,
        column: 10,
        span: 14506..14508,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 557,
        column: 11,
        span: 14508..14509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 557,
        column: 17,
        span: 14509..14515,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 557,
        column: 18,
        span: 14515..14516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 557,
        column: 22,
        span: 14516..14520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 557,
        column: 23,
        span: 14520..14521,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 557,
        column: 24,
        span: 14521..14522,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 560,
        column: 0,
        span: 14540..14542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 561,
        column: 5,
        span: 14545..14547,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 561,
        column: 6,
        span: 14547..14548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 561,
        column: 12,
        span: 14548..14554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 561,
        column: 13,
        span: 14554..14555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 561,
        column: 15,
        span: 14555..14557,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 561,
        column: 16,
        span: 14557..14558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 561,
        column: 20,
        span: 14558..14562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 561,
        column: 21,
        span: 14562..14563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 561,
        column: 25,
        span: 14563..14567,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 561,
        column: 26,
        span: 14567..14568,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wb\"",
        ),
        line: 561,
        column: 31,
        span: 14569..14573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 561,
        column: 32,
        span: 14573..14574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 561,
        column: 33,
        span: 14574..14575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 563,
        column: 9,
        span: 14614..14620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 563,
        column: 10,
        span: 14620..14621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 563,
        column: 12,
        span: 14621..14623,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 563,
        column: 13,
        span: 14623..14624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 563,
        column: 18,
        span: 14624..14629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 563,
        column: 19,
        span: 14629..14630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 563,
        column: 25,
        span: 14630..14636,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 563,
        column: 26,
        span: 14636..14637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 563,
        column: 30,
        span: 14637..14641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 563,
        column: 31,
        span: 14641..14642,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 563,
        column: 39,
        span: 14642..14650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 563,
        column: 41,
        span: 14651..14652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 563,
        column: 42,
        span: 14652..14653,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 563,
        column: 49,
        span: 14654..14660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 563,
        column: 51,
        span: 14660..14662,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 563,
        column: 55,
        span: 14663..14666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 563,
        column: 56,
        span: 14666..14667,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 563,
        column: 57,
        span: 14667..14668,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 563,
        column: 58,
        span: 14668..14669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 564,
        column: 5,
        span: 14672..14674,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 564,
        column: 6,
        span: 14674..14675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 564,
        column: 11,
        span: 14675..14680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 564,
        column: 12,
        span: 14680..14681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 564,
        column: 13,
        span: 14681..14682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 565,
        column: 4,
        span: 14685..14686,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 565,
        column: 6,
        span: 14687..14688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 565,
        column: 13,
        span: 14689..14695,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
        column: 14,
        span: 14695..14696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 565,
        column: 22,
        span: 14696..14704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
        column: 23,
        span: 14704..14705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 565,
        column: 27,
        span: 14705..14709,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 565,
        column: 28,
        span: 14709..14710,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 565,
        column: 32,
        span: 14711..14714,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 565,
        column: 33,
        span: 14714..14715,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 565,
        column: 35,
        span: 14716..14717,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 565,
        column: 36,
        span: 14717..14718,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
        column: 37,
        span: 14718..14719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
        column: 38,
        span: 14719..14720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 566,
        column: 9,
        span: 14723..14729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
        column: 10,
        span: 14729..14730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 566,
        column: 14,
        span: 14730..14734,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
        column: 15,
        span: 14734..14735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 566,
        column: 16,
        span: 14735..14736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
        column: 17,
        span: 14736..14737,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 566,
        column: 20,
        span: 14738..14740,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 566,
        column: 31,
        span: 14741..14751,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 566,
        column: 35,
        span: 14752..14755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 566,
        column: 37,
        span: 14756..14757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
        column: 38,
        span: 14757..14758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
        column: 39,
        span: 14758..14759,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 566,
        column: 42,
        span: 14760..14762,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 566,
        column: 44,
        span: 14762..14764,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
        column: 45,
        span: 14764..14765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 567,
        column: 9,
        span: 14768..14774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 567,
        column: 10,
        span: 14774..14775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 567,
        column: 12,
        span: 14775..14777,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 567,
        column: 13,
        span: 14777..14778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 567,
        column: 19,
        span: 14778..14784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 567,
        column: 20,
        span: 14784..14785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 567,
        column: 24,
        span: 14785..14789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 567,
        column: 25,
        span: 14789..14790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 567,
        column: 26,
        span: 14790..14791,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 568,
        column: 0,
        span: 14792..14795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 571,
        column: 3,
        span: 14841..14843,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 571,
        column: 4,
        span: 14843..14844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 571,
        column: 10,
        span: 14844..14850,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 571,
        column: 11,
        span: 14850..14851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 571,
        column: 13,
        span: 14851..14853,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 571,
        column: 14,
        span: 14853..14854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 571,
        column: 18,
        span: 14854..14858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 571,
        column: 19,
        span: 14858..14859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 571,
        column: 23,
        span: 14859..14863,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 571,
        column: 24,
        span: 14863..14864,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wb\"",
        ),
        line: 571,
        column: 29,
        span: 14865..14869,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 571,
        column: 30,
        span: 14869..14870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 571,
        column: 31,
        span: 14870..14871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 572,
        column: 7,
        span: 14872..14878,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
        column: 8,
        span: 14878..14879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 572,
        column: 10,
        span: 14879..14881,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 572,
        column: 11,
        span: 14881..14882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 572,
        column: 16,
        span: 14882..14887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
        column: 17,
        span: 14887..14888,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#this is a comment for a binary file\\0\\n\"",
        ),
        line: 572,
        column: 59,
        span: 14888..14930,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 572,
        column: 60,
        span: 14930..14931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 573,
        column: 23,
        span: 14948..14954,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 573,
        column: 24,
        span: 14954..14955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 573,
        column: 28,
        span: 14955..14959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
        column: 29,
        span: 14959..14960,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 573,
        column: 37,
        span: 14960..14968,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
        column: 39,
        span: 14969..14970,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 40,
        span: 14970..14971,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 573,
        column: 47,
        span: 14972..14978,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 573,
        column: 50,
        span: 14978..14981,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 573,
        column: 51,
        span: 14981..14982,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 573,
        column: 60,
        span: 14983..14991,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 573,
        column: 64,
        span: 14992..14995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 65,
        span: 14995..14996,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 66,
        span: 14996..14997,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 67,
        span: 14997..14998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 574,
        column: 3,
        span: 14999..15001,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 574,
        column: 4,
        span: 15001..15002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 574,
        column: 9,
        span: 15002..15007,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 10,
        span: 15007..15008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 11,
        span: 15008..15009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 575,
        column: 2,
        span: 15010..15011,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 575,
        column: 3,
        span: 15011..15012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 575,
        column: 5,
        span: 15013..15014,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 575,
        column: 6,
        span: 15014..15015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 575,
        column: 8,
        span: 15016..15017,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 575,
        column: 10,
        span: 15018..15019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 575,
        column: 17,
        span: 15020..15026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 18,
        span: 15026..15027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 575,
        column: 26,
        span: 15027..15035,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 27,
        span: 15035..15036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 575,
        column: 31,
        span: 15036..15040,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 32,
        span: 15040..15041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 33,
        span: 15041..15042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 34,
        span: 15042..15043,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 35,
        span: 15043..15044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 576,
        column: 7,
        span: 15045..15051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
        column: 8,
        span: 15051..15052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 576,
        column: 9,
        span: 15052..15053,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 576,
        column: 12,
        span: 15054..15056,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 576,
        column: 15,
        span: 15056..15059,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 576,
        column: 19,
        span: 15060..15063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 576,
        column: 21,
        span: 15064..15065,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 576,
        column: 24,
        span: 15066..15068,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\"",
        ),
        line: 576,
        column: 33,
        span: 15069..15077,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 576,
        column: 37,
        span: 15078..15081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 576,
        column: 39,
        span: 15082..15083,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 576,
        column: 42,
        span: 15084..15086,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 576,
        column: 46,
        span: 15087..15090,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 576,
        column: 47,
        span: 15090..15091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 577,
        column: 7,
        span: 15092..15098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 577,
        column: 8,
        span: 15098..15099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 577,
        column: 10,
        span: 15099..15101,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 577,
        column: 11,
        span: 15101..15102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 577,
        column: 17,
        span: 15102..15108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 577,
        column: 18,
        span: 15108..15109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 577,
        column: 22,
        span: 15109..15113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 577,
        column: 23,
        span: 15113..15114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 577,
        column: 24,
        span: 15114..15115,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 581,
        column: 0,
        span: 15143..15145,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 582,
        column: 8,
        span: 15148..15153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 582,
        column: 10,
        span: 15154..15155,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 582,
        column: 12,
        span: 15156..15157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 582,
        column: 15,
        span: 15158..15160,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 582,
        column: 16,
        span: 15160..15161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 582,
        column: 20,
        span: 15161..15165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 582,
        column: 21,
        span: 15165..15166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 582,
        column: 25,
        span: 15166..15170,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 582,
        column: 26,
        span: 15170..15171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        line: 582,
        column: 30,
        span: 15172..15175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 582,
        column: 31,
        span: 15175..15176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 583,
        column: 4,
        span: 15179..15180,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 583,
        column: 5,
        span: 15180..15181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 583,
        column: 10,
        span: 15181..15186,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    if (...) then a = 15; return b, c, d\n    else return _ENV\n    end\n  ]]",
        ),
        line: 587,
        column: 5,
        span: 15186..15263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 588,
        column: 4,
        span: 15266..15267,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 588,
        column: 5,
        span: 15267..15268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 588,
        column: 10,
        span: 15268..15273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 588,
        column: 11,
        span: 15273..15274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 588,
        column: 12,
        span: 15274..15275,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 589,
        column: 8,
        span: 15278..15283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 589,
        column: 10,
        span: 15284..15285,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 589,
        column: 12,
        span: 15286..15287,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 589,
        column: 14,
        span: 15288..15289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 589,
        column: 15,
        span: 15289..15290,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 589,
        column: 17,
        span: 15291..15292,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
        column: 20,
        span: 15292..15295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 589,
        column: 21,
        span: 15295..15296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 589,
        column: 23,
        span: 15297..15298,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 589,
        column: 25,
        span: 15299..15300,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 589,
        column: 32,
        span: 15301..15307,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 589,
        column: 33,
        span: 15307..15308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 589,
        column: 35,
        span: 15309..15310,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 589,
        column: 37,
        span: 15311..15312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 589,
        column: 43,
        span: 15313..15318,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 589,
        column: 44,
        span: 15318..15319,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 590,
        column: 8,
        span: 15322..15327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 590,
        column: 10,
        span: 15328..15329,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 590,
        column: 12,
        span: 15330..15331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 590,
        column: 19,
        span: 15332..15338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 590,
        column: 20,
        span: 15338..15339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 590,
        column: 28,
        span: 15339..15347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 590,
        column: 29,
        span: 15347..15348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 590,
        column: 33,
        span: 15348..15352,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 590,
        column: 34,
        span: 15352..15353,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'t'",
        ),
        line: 590,
        column: 38,
        span: 15354..15357,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 590,
        column: 39,
        span: 15357..15358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 590,
        column: 41,
        span: 15359..15360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 590,
        column: 42,
        span: 15360..15361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 590,
        column: 43,
        span: 15361..15362,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 591,
        column: 8,
        span: 15365..15370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 591,
        column: 10,
        span: 15371..15372,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 591,
        column: 11,
        span: 15372..15373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 591,
        column: 13,
        span: 15374..15375,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 591,
        column: 14,
        span: 15375..15376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 591,
        column: 16,
        span: 15377..15378,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 591,
        column: 18,
        span: 15379..15380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 591,
        column: 20,
        span: 15381..15382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 591,
        column: 21,
        span: 15382..15383,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 591,
        column: 22,
        span: 15382..15384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 591,
        column: 23,
        span: 15384..15385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 592,
        column: 9,
        span: 15388..15394,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 592,
        column: 10,
        span: 15394..15395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 592,
        column: 11,
        span: 15395..15396,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 592,
        column: 12,
        span: 15396..15397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 592,
        column: 13,
        span: 15397..15398,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 592,
        column: 16,
        span: 15399..15401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 592,
        column: 19,
        span: 15401..15404,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 592,
        column: 23,
        span: 15405..15408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 592,
        column: 25,
        span: 15409..15410,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 592,
        column: 28,
        span: 15411..15413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 592,
        column: 31,
        span: 15413..15416,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 592,
        column: 35,
        span: 15417..15420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 592,
        column: 37,
        span: 15421..15422,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 592,
        column: 40,
        span: 15423..15425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 592,
        column: 42,
        span: 15426..15427,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 592,
        column: 43,
        span: 15427..15428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 592,
        column: 44,
        span: 15428..15429,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 592,
        column: 48,
        span: 15430..15433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 592,
        column: 50,
        span: 15434..15435,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 592,
        column: 53,
        span: 15436..15438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 592,
        column: 59,
        span: 15439..15444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 592,
        column: 60,
        span: 15444..15445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 593,
        column: 9,
        span: 15448..15454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 593,
        column: 10,
        span: 15454..15455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 593,
        column: 11,
        span: 15455..15456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 593,
        column: 12,
        span: 15456..15457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 593,
        column: 13,
        span: 15457..15458,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 593,
        column: 16,
        span: 15459..15461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 593,
        column: 18,
        span: 15462..15463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 593,
        column: 19,
        span: 15463..15464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 594,
        column: 4,
        span: 15467..15468,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 594,
        column: 6,
        span: 15469..15470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 594,
        column: 13,
        span: 15471..15477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 594,
        column: 14,
        span: 15477..15478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 594,
        column: 22,
        span: 15478..15486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 594,
        column: 23,
        span: 15486..15487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 594,
        column: 27,
        span: 15487..15491,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 594,
        column: 28,
        span: 15491..15492,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'t'",
        ),
        line: 594,
        column: 32,
        span: 15493..15496,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 594,
        column: 33,
        span: 15496..15497,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 594,
        column: 37,
        span: 15498..15501,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 594,
        column: 38,
        span: 15501..15502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 594,
        column: 39,
        span: 15502..15503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 595,
        column: 9,
        span: 15506..15512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 595,
        column: 10,
        span: 15512..15513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 595,
        column: 11,
        span: 15513..15514,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 595,
        column: 12,
        span: 15514..15515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 595,
        column: 13,
        span: 15515..15516,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 595,
        column: 16,
        span: 15517..15519,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 595,
        column: 20,
        span: 15520..15523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 595,
        column: 21,
        span: 15523..15524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 596,
        column: 4,
        span: 15527..15528,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 596,
        column: 6,
        span: 15529..15530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 596,
        column: 13,
        span: 15531..15537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 596,
        column: 14,
        span: 15537..15538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 596,
        column: 22,
        span: 15538..15546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 596,
        column: 23,
        span: 15546..15547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 596,
        column: 27,
        span: 15547..15551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 596,
        column: 28,
        span: 15551..15552,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 596,
        column: 29,
        span: 15552..15553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 597,
        column: 9,
        span: 15556..15562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 597,
        column: 10,
        span: 15562..15563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 597,
        column: 11,
        span: 15563..15564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 597,
        column: 12,
        span: 15564..15565,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 597,
        column: 13,
        span: 15565..15566,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 597,
        column: 16,
        span: 15567..15569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 597,
        column: 19,
        span: 15570..15572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 597,
        column: 20,
        span: 15572..15573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 598,
        column: 9,
        span: 15576..15582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 598,
        column: 10,
        span: 15582..15583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 598,
        column: 12,
        span: 15583..15585,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 598,
        column: 13,
        span: 15585..15586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 598,
        column: 19,
        span: 15586..15592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 598,
        column: 20,
        span: 15592..15593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 598,
        column: 24,
        span: 15593..15597,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 598,
        column: 25,
        span: 15597..15598,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 598,
        column: 26,
        span: 15598..15599,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 599,
        column: 0,
        span: 15600..15603,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 603,
        column: 0,
        span: 15628..15630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 604,
        column: 5,
        span: 15633..15635,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 604,
        column: 6,
        span: 15635..15636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 604,
        column: 10,
        span: 15636..15640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 604,
        column: 11,
        span: 15640..15641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 604,
        column: 15,
        span: 15641..15645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 604,
        column: 16,
        span: 15645..15646,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        line: 604,
        column: 20,
        span: 15647..15650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 604,
        column: 21,
        span: 15650..15651,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 604,
        column: 22,
        span: 15651..15652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 604,
        column: 27,
        span: 15652..15657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 604,
        column: 28,
        span: 15657..15658,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 10\"",
        ),
        line: 604,
        column: 39,
        span: 15658..15669,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 604,
        column: 40,
        span: 15669..15670,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 604,
        column: 41,
        span: 15670..15671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 604,
        column: 46,
        span: 15671..15676,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 604,
        column: 47,
        span: 15676..15677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 604,
        column: 48,
        span: 15677..15678,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 605,
        column: 8,
        span: 15681..15686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 605,
        column: 10,
        span: 15687..15688,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 605,
        column: 11,
        span: 15688..15689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 605,
        column: 13,
        span: 15690..15691,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 605,
        column: 15,
        span: 15692..15693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 605,
        column: 24,
        span: 15694..15702,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 605,
        column: 25,
        span: 15702..15703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 605,
        column: 29,
        span: 15703..15707,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 605,
        column: 30,
        span: 15707..15708,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 605,
        column: 34,
        span: 15709..15712,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 605,
        column: 35,
        span: 15712..15713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 606,
        column: 9,
        span: 15716..15722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
        column: 10,
        span: 15722..15723,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 606,
        column: 13,
        span: 15723..15726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 606,
        column: 15,
        span: 15727..15728,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 606,
        column: 19,
        span: 15729..15732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 606,
        column: 26,
        span: 15733..15739,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 606,
        column: 27,
        span: 15739..15740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 606,
        column: 31,
        span: 15740..15744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
        column: 32,
        span: 15744..15745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 606,
        column: 33,
        span: 15745..15746,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 606,
        column: 34,
        span: 15746..15747,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a text chunk\"",
        ),
        line: 606,
        column: 49,
        span: 15748..15762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
        column: 50,
        span: 15762..15763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
        column: 51,
        span: 15763..15764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 607,
        column: 5,
        span: 15767..15769,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 607,
        column: 6,
        span: 15769..15770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 607,
        column: 10,
        span: 15770..15774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 607,
        column: 11,
        span: 15774..15775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 607,
        column: 15,
        span: 15775..15779,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 607,
        column: 16,
        span: 15779..15780,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        line: 607,
        column: 20,
        span: 15781..15784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 607,
        column: 21,
        span: 15784..15785,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 607,
        column: 22,
        span: 15785..15786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 607,
        column: 27,
        span: 15786..15791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 607,
        column: 28,
        span: 15791..15792,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\27 return 10\"",
        ),
        line: 607,
        column: 43,
        span: 15792..15807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 607,
        column: 44,
        span: 15807..15808,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 607,
        column: 45,
        span: 15808..15809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 607,
        column: 50,
        span: 15809..15814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 607,
        column: 51,
        span: 15814..15815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 607,
        column: 52,
        span: 15815..15816,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 608,
        column: 8,
        span: 15819..15824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 608,
        column: 10,
        span: 15825..15826,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 608,
        column: 11,
        span: 15826..15827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 608,
        column: 13,
        span: 15828..15829,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 608,
        column: 15,
        span: 15830..15831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 608,
        column: 24,
        span: 15832..15840,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 608,
        column: 25,
        span: 15840..15841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 608,
        column: 29,
        span: 15841..15845,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 608,
        column: 30,
        span: 15845..15846,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'t'",
        ),
        line: 608,
        column: 34,
        span: 15847..15850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 608,
        column: 35,
        span: 15850..15851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 609,
        column: 9,
        span: 15854..15860,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 609,
        column: 10,
        span: 15860..15861,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 609,
        column: 13,
        span: 15861..15864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 609,
        column: 15,
        span: 15865..15866,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 609,
        column: 19,
        span: 15867..15870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 609,
        column: 26,
        span: 15871..15877,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 609,
        column: 27,
        span: 15877..15878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 609,
        column: 31,
        span: 15878..15882,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 609,
        column: 32,
        span: 15882..15883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 609,
        column: 33,
        span: 15883..15884,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 609,
        column: 34,
        span: 15884..15885,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a binary chunk\"",
        ),
        line: 609,
        column: 51,
        span: 15886..15902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 609,
        column: 52,
        span: 15902..15903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 609,
        column: 53,
        span: 15903..15904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 610,
        column: 9,
        span: 15907..15913,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 610,
        column: 10,
        span: 15913..15914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 610,
        column: 12,
        span: 15914..15916,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 610,
        column: 13,
        span: 15916..15917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 610,
        column: 19,
        span: 15917..15923,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 610,
        column: 20,
        span: 15923..15924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 610,
        column: 24,
        span: 15924..15928,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 610,
        column: 25,
        span: 15928..15929,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 610,
        column: 26,
        span: 15929..15930,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 611,
        column: 0,
        span: 15931..15934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 614,
        column: 3,
        span: 15937..15939,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 614,
        column: 4,
        span: 15939..15940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 614,
        column: 10,
        span: 15940..15946,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 614,
        column: 11,
        span: 15946..15947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 614,
        column: 15,
        span: 15947..15951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 614,
        column: 16,
        span: 15951..15952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 615,
        column: 7,
        span: 15953..15959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 615,
        column: 8,
        span: 15959..15960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 615,
        column: 10,
        span: 15960..15962,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 615,
        column: 11,
        span: 15962..15963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 615,
        column: 16,
        span: 15963..15968,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 615,
        column: 17,
        span: 15968..15969,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"qualquer coisa\\n\"",
        ),
        line: 615,
        column: 35,
        span: 15969..15987,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 615,
        column: 36,
        span: 15987..15988,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 615,
        column: 37,
        span: 15988..15989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 616,
        column: 7,
        span: 15990..15996,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 616,
        column: 8,
        span: 15996..15997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 616,
        column: 10,
        span: 15997..15999,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 616,
        column: 11,
        span: 15999..16000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 616,
        column: 16,
        span: 16000..16005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 616,
        column: 17,
        span: 16005..16006,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mais qualquer coisa\"",
        ),
        line: 616,
        column: 38,
        span: 16006..16027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 616,
        column: 39,
        span: 16027..16028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 616,
        column: 40,
        span: 16028..16029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 617,
        column: 3,
        span: 16030..16032,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 617,
        column: 4,
        span: 16032..16033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 617,
        column: 9,
        span: 16033..16038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 617,
        column: 10,
        span: 16038..16039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 617,
        column: 11,
        span: 16039..16040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 618,
        column: 7,
        span: 16041..16047,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
        column: 8,
        span: 16047..16048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 618,
        column: 10,
        span: 16048..16050,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 618,
        column: 11,
        span: 16050..16051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 618,
        column: 17,
        span: 16051..16057,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
        column: 18,
        span: 16057..16058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 618,
        column: 24,
        span: 16058..16064,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
        column: 25,
        span: 16064..16065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 618,
        column: 27,
        span: 16065..16067,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 618,
        column: 28,
        span: 16067..16068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 618,
        column: 32,
        span: 16068..16072,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
        column: 33,
        span: 16072..16073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 618,
        column: 42,
        span: 16073..16082,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 618,
        column: 43,
        span: 16082..16083,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'wb'",
        ),
        line: 618,
        column: 48,
        span: 16084..16088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 618,
        column: 49,
        span: 16088..16089,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 618,
        column: 50,
        span: 16089..16090,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 618,
        column: 51,
        span: 16090..16091,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 619,
        column: 9,
        span: 16099..16100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 619,
        column: 14,
        span: 16100..16105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 619,
        column: 15,
        span: 16105..16106,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"outra coisa\\0\\1\\3\\0\\0\\0\\0\\255\\0\"",
        ),
        line: 619,
        column: 48,
        span: 16106..16139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 619,
        column: 49,
        span: 16139..16140,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 620,
        column: 9,
        span: 16148..16149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 620,
        column: 14,
        span: 16149..16154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 620,
        column: 15,
        span: 16154..16155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 620,
        column: 16,
        span: 16155..16156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 620,
        column: 17,
        span: 16156..16157,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 622,
        column: 6,
        span: 16159..16164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        line: 622,
        column: 17,
        span: 16165..16175,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 622,
        column: 19,
        span: 16176..16177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 622,
        column: 26,
        span: 16178..16184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 622,
        column: 27,
        span: 16184..16185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 622,
        column: 29,
        span: 16185..16187,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 622,
        column: 30,
        span: 16187..16188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 622,
        column: 34,
        span: 16188..16192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 622,
        column: 35,
        span: 16192..16193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 622,
        column: 39,
        span: 16193..16197,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 622,
        column: 40,
        span: 16197..16198,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r+'",
        ),
        line: 622,
        column: 45,
        span: 16199..16203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 622,
        column: 46,
        span: 16203..16204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 622,
        column: 47,
        span: 16204..16205,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 623,
        column: 6,
        span: 16206..16211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        line: 623,
        column: 22,
        span: 16212..16227,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 623,
        column: 24,
        span: 16228..16229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 623,
        column: 31,
        span: 16230..16236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 623,
        column: 32,
        span: 16236..16237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 623,
        column: 34,
        span: 16237..16239,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 623,
        column: 35,
        span: 16239..16240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 623,
        column: 39,
        span: 16240..16244,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 623,
        column: 40,
        span: 16244..16245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 623,
        column: 49,
        span: 16245..16254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 623,
        column: 50,
        span: 16254..16255,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'rb'",
        ),
        line: 623,
        column: 55,
        span: 16256..16260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 623,
        column: 56,
        span: 16260..16261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 623,
        column: 57,
        span: 16261..16262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 624,
        column: 7,
        span: 16263..16269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 624,
        column: 8,
        span: 16269..16270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        line: 624,
        column: 18,
        span: 16270..16280,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 624,
        column: 21,
        span: 16281..16283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        line: 624,
        column: 37,
        span: 16284..16299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 624,
        column: 38,
        span: 16299..16300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 625,
        column: 7,
        span: 16301..16307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 625,
        column: 8,
        span: 16307..16308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 625,
        column: 12,
        span: 16308..16312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 625,
        column: 13,
        span: 16312..16313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        line: 625,
        column: 23,
        span: 16313..16323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 625,
        column: 24,
        span: 16323..16324,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 625,
        column: 27,
        span: 16325..16327,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        line: 625,
        column: 38,
        span: 16328..16338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 625,
        column: 39,
        span: 16338..16339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 626,
        column: 7,
        span: 16340..16346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 626,
        column: 8,
        span: 16346..16347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        line: 626,
        column: 18,
        span: 16347..16357,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 626,
        column: 19,
        span: 16357..16358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 626,
        column: 23,
        span: 16358..16362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 626,
        column: 24,
        span: 16362..16363,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        line: 626,
        column: 27,
        span: 16363..16366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 626,
        column: 28,
        span: 16366..16367,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 626,
        column: 31,
        span: 16368..16370,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"qualquer coisa\"",
        ),
        line: 626,
        column: 48,
        span: 16371..16387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 626,
        column: 49,
        span: 16387..16388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 627,
        column: 3,
        span: 16389..16391,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 627,
        column: 4,
        span: 16391..16392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 627,
        column: 9,
        span: 16392..16397,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 627,
        column: 10,
        span: 16397..16398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        line: 627,
        column: 25,
        span: 16398..16413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 627,
        column: 26,
        span: 16413..16414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 628,
        column: 7,
        span: 16415..16421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 628,
        column: 8,
        span: 16421..16422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 628,
        column: 10,
        span: 16422..16424,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 628,
        column: 11,
        span: 16424..16425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 628,
        column: 15,
        span: 16425..16429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 628,
        column: 16,
        span: 16429..16430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 628,
        column: 22,
        span: 16430..16436,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 628,
        column: 23,
        span: 16436..16437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 628,
        column: 26,
        span: 16437..16440,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"outra coisa\"",
        ),
        line: 628,
        column: 39,
        span: 16440..16453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 628,
        column: 40,
        span: 16453..16454,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 628,
        column: 43,
        span: 16455..16457,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"outra coisa\"",
        ),
        line: 628,
        column: 57,
        span: 16458..16471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 628,
        column: 58,
        span: 16471..16472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 629,
        column: 7,
        span: 16473..16479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 629,
        column: 8,
        span: 16479..16480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        line: 629,
        column: 18,
        span: 16480..16490,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 629,
        column: 19,
        span: 16490..16491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 629,
        column: 23,
        span: 16491..16495,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 629,
        column: 24,
        span: 16495..16496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        line: 629,
        column: 27,
        span: 16496..16499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 629,
        column: 28,
        span: 16499..16500,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 629,
        column: 31,
        span: 16501..16503,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mais qualquer coisa\"",
        ),
        line: 629,
        column: 53,
        span: 16504..16525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 629,
        column: 54,
        span: 16525..16526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        line: 630,
        column: 11,
        span: 16527..16537,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 630,
        column: 12,
        span: 16537..16538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 630,
        column: 17,
        span: 16538..16543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 630,
        column: 18,
        span: 16543..16544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 630,
        column: 19,
        span: 16544..16545,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 630,
        column: 20,
        span: 16545..16546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 631,
        column: 7,
        span: 16547..16553,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 631,
        column: 8,
        span: 16553..16554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 631,
        column: 12,
        span: 16554..16558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 631,
        column: 13,
        span: 16558..16559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        line: 631,
        column: 23,
        span: 16559..16569,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 631,
        column: 24,
        span: 16569..16570,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 631,
        column: 27,
        span: 16571..16573,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        line: 631,
        column: 38,
        span: 16574..16584,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 631,
        column: 39,
        span: 16584..16585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 632,
        column: 3,
        span: 16586..16588,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 632,
        column: 4,
        span: 16588..16589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 632,
        column: 9,
        span: 16589..16594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 632,
        column: 10,
        span: 16594..16595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        line: 632,
        column: 25,
        span: 16595..16610,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 632,
        column: 26,
        span: 16610..16611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 633,
        column: 7,
        span: 16612..16618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 633,
        column: 8,
        span: 16618..16619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 633,
        column: 10,
        span: 16619..16621,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 633,
        column: 11,
        span: 16621..16622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 633,
        column: 15,
        span: 16622..16626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 633,
        column: 16,
        span: 16626..16627,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 633,
        column: 17,
        span: 16626..16628,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 633,
        column: 18,
        span: 16628..16629,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 633,
        column: 21,
        span: 16630..16632,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\1\\3\\0\"",
        ),
        line: 633,
        column: 32,
        span: 16633..16643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 633,
        column: 33,
        span: 16643..16644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 634,
        column: 7,
        span: 16645..16651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 634,
        column: 8,
        span: 16651..16652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 634,
        column: 10,
        span: 16652..16654,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 634,
        column: 11,
        span: 16654..16655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 634,
        column: 15,
        span: 16655..16659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 634,
        column: 16,
        span: 16659..16660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 634,
        column: 17,
        span: 16659..16661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 634,
        column: 18,
        span: 16661..16662,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 634,
        column: 21,
        span: 16663..16665,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\"",
        ),
        line: 634,
        column: 30,
        span: 16666..16674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 634,
        column: 31,
        span: 16674..16675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 635,
        column: 7,
        span: 16676..16682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 635,
        column: 8,
        span: 16682..16683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 635,
        column: 10,
        span: 16683..16685,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 635,
        column: 11,
        span: 16685..16686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 635,
        column: 15,
        span: 16686..16690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 635,
        column: 16,
        span: 16690..16691,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 635,
        column: 17,
        span: 16690..16692,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 635,
        column: 18,
        span: 16692..16693,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 635,
        column: 21,
        span: 16694..16696,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 635,
        column: 24,
        span: 16697..16699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 635,
        column: 25,
        span: 16699..16700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 636,
        column: 7,
        span: 16726..16732,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 636,
        column: 8,
        span: 16732..16733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 636,
        column: 10,
        span: 16733..16735,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 636,
        column: 11,
        span: 16735..16736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 636,
        column: 15,
        span: 16736..16740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 636,
        column: 16,
        span: 16740..16741,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 636,
        column: 17,
        span: 16740..16742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 636,
        column: 18,
        span: 16742..16743,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 636,
        column: 21,
        span: 16744..16746,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\255\"",
        ),
        line: 636,
        column: 28,
        span: 16747..16753,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 636,
        column: 29,
        span: 16753..16754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 637,
        column: 7,
        span: 16755..16761,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 637,
        column: 8,
        span: 16761..16762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 637,
        column: 10,
        span: 16762..16764,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 637,
        column: 11,
        span: 16764..16765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 637,
        column: 15,
        span: 16765..16769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 637,
        column: 16,
        span: 16769..16770,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 637,
        column: 19,
        span: 16770..16773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 637,
        column: 20,
        span: 16773..16774,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 637,
        column: 23,
        span: 16775..16777,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        line: 637,
        column: 28,
        span: 16778..16782,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 637,
        column: 29,
        span: 16782..16783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 638,
        column: 7,
        span: 16784..16790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 638,
        column: 8,
        span: 16790..16791,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 638,
        column: 11,
        span: 16791..16794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 638,
        column: 14,
        span: 16795..16797,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 638,
        column: 15,
        span: 16797..16798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 638,
        column: 19,
        span: 16798..16802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 638,
        column: 20,
        span: 16802..16803,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 638,
        column: 21,
        span: 16802..16804,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 638,
        column: 22,
        span: 16804..16805,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 638,
        column: 23,
        span: 16805..16806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 639,
        column: 7,
        span: 16807..16813,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 639,
        column: 8,
        span: 16813..16814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        line: 639,
        column: 23,
        span: 16814..16829,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 639,
        column: 26,
        span: 16830..16832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 639,
        column: 29,
        span: 16833..16835,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 639,
        column: 30,
        span: 16835..16836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 639,
        column: 35,
        span: 16836..16841,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 639,
        column: 36,
        span: 16841..16842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 639,
        column: 37,
        span: 16842..16843,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 639,
        column: 38,
        span: 16843..16844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        line: 640,
        column: 16,
        span: 16845..16860,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 640,
        column: 17,
        span: 16860..16861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 640,
        column: 22,
        span: 16861..16866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 640,
        column: 23,
        span: 16866..16867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 640,
        column: 24,
        span: 16867..16868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 641,
        column: 7,
        span: 16869..16875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 641,
        column: 8,
        span: 16875..16876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 641,
        column: 10,
        span: 16876..16878,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 641,
        column: 11,
        span: 16878..16879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 641,
        column: 17,
        span: 16879..16885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 641,
        column: 18,
        span: 16885..16886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 641,
        column: 22,
        span: 16886..16890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 641,
        column: 23,
        span: 16890..16891,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 641,
        column: 24,
        span: 16891..16892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 642,
        column: 7,
        span: 16893..16899,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 642,
        column: 8,
        span: 16899..16900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 642,
        column: 10,
        span: 16900..16902,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 642,
        column: 11,
        span: 16902..16903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 642,
        column: 17,
        span: 16903..16909,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 642,
        column: 18,
        span: 16909..16910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 642,
        column: 27,
        span: 16910..16919,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 642,
        column: 28,
        span: 16919..16920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 642,
        column: 29,
        span: 16920..16921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 643,
        column: 15,
        span: 16922..16936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 643,
        column: 16,
        span: 16936..16937,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 643,
        column: 17,
        span: 16937..16938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 645,
        column: 3,
        span: 16940..16942,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 645,
        column: 4,
        span: 16942..16943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 645,
        column: 10,
        span: 16943..16949,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 645,
        column: 11,
        span: 16949..16950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 645,
        column: 15,
        span: 16950..16954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 645,
        column: 16,
        span: 16954..16955,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 646,
        column: 4,
        span: 16958..16959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 646,
        column: 9,
        span: 16959..16964,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n 123.4\t-56e-2  not a number\nsecond line\nthird line\n\nand the rest of the file\n]]",
        ),
        line: 652,
        column: 3,
        span: 16964..17046,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 653,
        column: 4,
        span: 17049..17050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 653,
        column: 9,
        span: 17050..17055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 653,
        column: 10,
        span: 17055..17056,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 653,
        column: 11,
        span: 17056..17057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 654,
        column: 3,
        span: 17058..17060,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 654,
        column: 4,
        span: 17060..17061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 654,
        column: 9,
        span: 17061..17066,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 654,
        column: 10,
        span: 17066..17067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 654,
        column: 14,
        span: 17067..17071,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 654,
        column: 15,
        span: 17071..17072,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 655,
        column: 6,
        span: 17073..17078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 655,
        column: 8,
        span: 17079..17080,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 9,
        span: 17080..17081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 655,
        column: 10,
        span: 17081..17082,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 11,
        span: 17082..17083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 655,
        column: 12,
        span: 17083..17084,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 13,
        span: 17084..17085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 655,
        column: 14,
        span: 17085..17086,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 15,
        span: 17086..17087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 655,
        column: 16,
        span: 17087..17088,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 17,
        span: 17088..17089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 655,
        column: 18,
        span: 17089..17090,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 19,
        span: 17090..17091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 655,
        column: 20,
        span: 17091..17092,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 21,
        span: 17092..17093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__",
        ),
        line: 655,
        column: 23,
        span: 17093..17095,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 655,
        column: 25,
        span: 17096..17097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 655,
        column: 28,
        span: 17098..17100,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 655,
        column: 29,
        span: 17100..17101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 655,
        column: 33,
        span: 17101..17105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 655,
        column: 34,
        span: 17105..17106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 655,
        column: 35,
        span: 17105..17107,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 36,
        span: 17107..17108,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'n'",
        ),
        line: 655,
        column: 40,
        span: 17109..17112,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 41,
        span: 17112..17113,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'n'",
        ),
        line: 655,
        column: 45,
        span: 17114..17117,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 46,
        span: 17117..17118,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        line: 655,
        column: 50,
        span: 17119..17122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 51,
        span: 17122..17123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        line: 655,
        column: 55,
        span: 17124..17127,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 56,
        span: 17127..17128,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        line: 655,
        column: 60,
        span: 17129..17132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 61,
        span: 17132..17133,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 655,
        column: 65,
        span: 17134..17137,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 655,
        column: 66,
        span: 17137..17138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 655,
        column: 69,
        span: 17138..17141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 655,
        column: 70,
        span: 17141..17142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 656,
        column: 7,
        span: 17143..17149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 656,
        column: 8,
        span: 17149..17150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 656,
        column: 10,
        span: 17150..17152,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 656,
        column: 11,
        span: 17152..17153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 656,
        column: 16,
        span: 17153..17158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 656,
        column: 17,
        span: 17158..17159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 656,
        column: 19,
        span: 17159..17161,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 656,
        column: 20,
        span: 17161..17162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 656,
        column: 25,
        span: 17162..17167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 656,
        column: 26,
        span: 17167..17168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 656,
        column: 27,
        span: 17168..17169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 656,
        column: 28,
        span: 17169..17170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 656,
        column: 29,
        span: 17170..17171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 657,
        column: 7,
        span: 17172..17178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 657,
        column: 8,
        span: 17178..17179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 657,
        column: 9,
        span: 17179..17180,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 657,
        column: 12,
        span: 17181..17183,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 657,
        column: 16,
        span: 17184..17187,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 657,
        column: 20,
        span: 17188..17191,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 657,
        column: 24,
        span: 17192..17195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__",
        ),
        line: 657,
        column: 27,
        span: 17196..17198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 657,
        column: 28,
        span: 17198..17199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 658,
        column: 7,
        span: 17200..17206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 658,
        column: 8,
        span: 17206..17207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 658,
        column: 12,
        span: 17207..17211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 658,
        column: 13,
        span: 17211..17212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 658,
        column: 14,
        span: 17212..17213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 658,
        column: 15,
        span: 17213..17214,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 658,
        column: 18,
        span: 17215..17217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'number'",
        ),
        line: 658,
        column: 27,
        span: 17218..17226,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 658,
        column: 31,
        span: 17227..17230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 658,
        column: 33,
        span: 17231..17232,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 658,
        column: 35,
        span: 17232..17234,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 658,
        column: 40,
        span: 17233..17239,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 658,
        column: 44,
        span: 17240..17243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 658,
        column: 46,
        span: 17244..17245,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 658,
        column: 48,
        span: 17245..17247,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 658,
        column: 49,
        span: 17247..17248,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "56",
                    after_decimal: "",
                },
                exponent: "-2",
            },
        ),
        line: 658,
        column: 54,
        span: 17247..17253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 658,
        column: 55,
        span: 17253..17254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 659,
        column: 7,
        span: 17255..17261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 659,
        column: 8,
        span: 17261..17262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 659,
        column: 9,
        span: 17262..17263,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 659,
        column: 11,
        span: 17263..17265,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'second line'",
        ),
        line: 659,
        column: 24,
        span: 17265..17278,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 659,
        column: 28,
        span: 17279..17282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 659,
        column: 30,
        span: 17283..17284,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 659,
        column: 32,
        span: 17284..17286,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'third line'",
        ),
        line: 659,
        column: 44,
        span: 17286..17298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 659,
        column: 45,
        span: 17298..17299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 660,
        column: 7,
        span: 17300..17306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 660,
        column: 8,
        span: 17306..17307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 660,
        column: 9,
        span: 17307..17308,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 660,
        column: 11,
        span: 17308..17310,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\nand the rest of the file\n]]",
        ),
        line: 663,
        column: 3,
        span: 17310..17341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 663,
        column: 4,
        span: 17341..17342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 664,
        column: 7,
        span: 17343..17349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 664,
        column: 8,
        span: 17349..17350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 664,
        column: 10,
        span: 17350..17352,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 664,
        column: 11,
        span: 17352..17353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 664,
        column: 17,
        span: 17353..17359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 664,
        column: 18,
        span: 17359..17360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 664,
        column: 22,
        span: 17360..17364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 664,
        column: 23,
        span: 17364..17365,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 664,
        column: 24,
        span: 17365..17366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 665,
        column: 15,
        span: 17367..17381,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 665,
        column: 16,
        span: 17381..17382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 665,
        column: 17,
        span: 17382..17383,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 668,
        column: 0,
        span: 17404..17406,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 669,
        column: 8,
        span: 17409..17414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 669,
        column: 10,
        span: 17415..17416,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 669,
        column: 12,
        span: 17417..17418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 669,
        column: 19,
        span: 17419..17425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 669,
        column: 20,
        span: 17425..17426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 669,
        column: 22,
        span: 17426..17428,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 669,
        column: 23,
        span: 17428..17429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 669,
        column: 27,
        span: 17429..17433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 669,
        column: 28,
        span: 17433..17434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 669,
        column: 32,
        span: 17434..17438,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 669,
        column: 33,
        span: 17438..17439,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 669,
        column: 37,
        span: 17440..17443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 669,
        column: 38,
        span: 17443..17444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 669,
        column: 39,
        span: 17444..17445,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 670,
        column: 8,
        span: 17448..17453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 670,
        column: 11,
        span: 17454..17456,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 670,
        column: 13,
        span: 17457..17458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 670,
        column: 20,
        span: 17459..17465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 670,
        column: 21,
        span: 17465..17466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 670,
        column: 23,
        span: 17466..17468,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 670,
        column: 24,
        span: 17468..17469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 670,
        column: 28,
        span: 17469..17473,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 670,
        column: 29,
        span: 17473..17474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 670,
        column: 33,
        span: 17474..17478,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 670,
        column: 34,
        span: 17478..17479,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        line: 670,
        column: 38,
        span: 17480..17483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 670,
        column: 39,
        span: 17483..17484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 670,
        column: 40,
        span: 17484..17485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 671,
        column: 9,
        span: 17488..17494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 671,
        column: 10,
        span: 17494..17495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 671,
        column: 11,
        span: 17495..17496,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 671,
        column: 12,
        span: 17496..17497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setvbuf",
        ),
        line: 671,
        column: 19,
        span: 17497..17504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 671,
        column: 20,
        span: 17504..17505,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"full\"",
        ),
        line: 671,
        column: 26,
        span: 17505..17511,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 671,
        column: 27,
        span: 17511..17512,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 671,
        column: 32,
        span: 17512..17517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 671,
        column: 33,
        span: 17517..17518,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 671,
        column: 34,
        span: 17518..17519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 672,
        column: 4,
        span: 17522..17523,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 672,
        column: 5,
        span: 17523..17524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 672,
        column: 10,
        span: 17524..17529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 672,
        column: 11,
        span: 17529..17530,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 672,
        column: 14,
        span: 17530..17533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 672,
        column: 15,
        span: 17533..17534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 673,
        column: 9,
        span: 17537..17543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 673,
        column: 10,
        span: 17543..17544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 673,
        column: 12,
        span: 17544..17546,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 673,
        column: 13,
        span: 17546..17547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 673,
        column: 17,
        span: 17547..17551,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 673,
        column: 18,
        span: 17551..17552,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"all\"",
        ),
        line: 673,
        column: 23,
        span: 17552..17557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 673,
        column: 24,
        span: 17557..17558,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 673,
        column: 27,
        span: 17559..17561,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 673,
        column: 30,
        span: 17562..17564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 673,
        column: 31,
        span: 17564..17565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 674,
        column: 4,
        span: 17608..17609,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 674,
        column: 5,
        span: 17609..17610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 674,
        column: 10,
        span: 17610..17615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 674,
        column: 11,
        span: 17615..17616,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 674,
        column: 12,
        span: 17616..17617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 675,
        column: 5,
        span: 17620..17622,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 675,
        column: 6,
        span: 17622..17623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 675,
        column: 10,
        span: 17623..17627,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 675,
        column: 11,
        span: 17627..17628,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 675,
        column: 16,
        span: 17628..17633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 675,
        column: 17,
        span: 17633..17634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 676,
        column: 9,
        span: 17637..17643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 676,
        column: 10,
        span: 17643..17644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 676,
        column: 12,
        span: 17644..17646,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 676,
        column: 13,
        span: 17646..17647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 676,
        column: 17,
        span: 17647..17651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 676,
        column: 18,
        span: 17651..17652,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"all\"",
        ),
        line: 676,
        column: 23,
        span: 17652..17657,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 676,
        column: 24,
        span: 17657..17658,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 676,
        column: 27,
        span: 17659..17661,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 676,
        column: 31,
        span: 17662..17665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 676,
        column: 32,
        span: 17665..17666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 677,
        column: 4,
        span: 17693..17694,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 677,
        column: 6,
        span: 17695..17696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 677,
        column: 13,
        span: 17697..17703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 677,
        column: 14,
        span: 17703..17704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 677,
        column: 16,
        span: 17704..17706,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 677,
        column: 17,
        span: 17706..17707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 677,
        column: 21,
        span: 17707..17711,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 677,
        column: 22,
        span: 17711..17712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 677,
        column: 26,
        span: 17712..17716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 677,
        column: 27,
        span: 17716..17717,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 677,
        column: 28,
        span: 17717..17718,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 677,
        column: 32,
        span: 17719..17722,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 677,
        column: 33,
        span: 17722..17723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 678,
        column: 9,
        span: 17726..17732,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 678,
        column: 10,
        span: 17732..17733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 678,
        column: 11,
        span: 17733..17734,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 678,
        column: 12,
        span: 17734..17735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setvbuf",
        ),
        line: 678,
        column: 19,
        span: 17735..17742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 678,
        column: 20,
        span: 17742..17743,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no\"",
        ),
        line: 678,
        column: 24,
        span: 17743..17747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 678,
        column: 25,
        span: 17747..17748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 678,
        column: 26,
        span: 17748..17749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 679,
        column: 4,
        span: 17752..17753,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 679,
        column: 5,
        span: 17753..17754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 679,
        column: 10,
        span: 17754..17759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 679,
        column: 11,
        span: 17759..17760,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 679,
        column: 14,
        span: 17760..17763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 679,
        column: 15,
        span: 17763..17764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 680,
        column: 5,
        span: 17767..17769,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 680,
        column: 6,
        span: 17769..17770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 680,
        column: 10,
        span: 17770..17774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 680,
        column: 11,
        span: 17774..17775,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 680,
        column: 16,
        span: 17775..17780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 680,
        column: 17,
        span: 17780..17781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 681,
        column: 9,
        span: 17784..17790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
        column: 10,
        span: 17790..17791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 681,
        column: 12,
        span: 17791..17793,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 681,
        column: 13,
        span: 17793..17794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 681,
        column: 17,
        span: 17794..17798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
        column: 18,
        span: 17798..17799,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"all\"",
        ),
        line: 681,
        column: 23,
        span: 17799..17804,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
        column: 24,
        span: 17804..17805,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 681,
        column: 27,
        span: 17806..17808,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 681,
        column: 31,
        span: 17809..17812,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
        column: 32,
        span: 17812..17813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 682,
        column: 4,
        span: 17847..17848,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 682,
        column: 5,
        span: 17848..17849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 682,
        column: 10,
        span: 17849..17854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
        column: 11,
        span: 17854..17855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
        column: 12,
        span: 17855..17856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 683,
        column: 4,
        span: 17859..17860,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 683,
        column: 6,
        span: 17861..17862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 683,
        column: 13,
        span: 17863..17869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 683,
        column: 14,
        span: 17869..17870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 683,
        column: 16,
        span: 17870..17872,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 683,
        column: 17,
        span: 17872..17873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 683,
        column: 21,
        span: 17873..17877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 683,
        column: 22,
        span: 17877..17878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 683,
        column: 26,
        span: 17878..17882,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 683,
        column: 27,
        span: 17882..17883,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 683,
        column: 31,
        span: 17884..17887,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 683,
        column: 32,
        span: 17887..17888,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 683,
        column: 33,
        span: 17888..17889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 684,
        column: 9,
        span: 17892..17898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 684,
        column: 10,
        span: 17898..17899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 684,
        column: 11,
        span: 17899..17900,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 684,
        column: 12,
        span: 17900..17901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setvbuf",
        ),
        line: 684,
        column: 19,
        span: 17901..17908,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 684,
        column: 20,
        span: 17908..17909,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        line: 684,
        column: 26,
        span: 17909..17915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 684,
        column: 27,
        span: 17915..17916,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 684,
        column: 28,
        span: 17916..17917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 685,
        column: 4,
        span: 17920..17921,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 685,
        column: 5,
        span: 17921..17922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 685,
        column: 10,
        span: 17922..17927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 685,
        column: 11,
        span: 17927..17928,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 685,
        column: 14,
        span: 17928..17931,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 685,
        column: 15,
        span: 17931..17932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 686,
        column: 5,
        span: 17935..17937,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 686,
        column: 6,
        span: 17937..17938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 686,
        column: 10,
        span: 17938..17942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 686,
        column: 11,
        span: 17942..17943,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 686,
        column: 16,
        span: 17943..17948,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 686,
        column: 17,
        span: 17948..17949,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 686,
        column: 19,
        span: 17949..17951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 686,
        column: 20,
        span: 17951..17952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 687,
        column: 9,
        span: 17955..17961,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
        column: 10,
        span: 17961..17962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 687,
        column: 12,
        span: 17962..17964,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 687,
        column: 13,
        span: 17964..17965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 687,
        column: 17,
        span: 17965..17969,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
        column: 18,
        span: 17969..17970,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"all\"",
        ),
        line: 687,
        column: 23,
        span: 17970..17975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
        column: 24,
        span: 17975..17976,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 687,
        column: 27,
        span: 17977..17979,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 687,
        column: 30,
        span: 17980..17982,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
        column: 31,
        span: 17982..17983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 688,
        column: 4,
        span: 18027..18028,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 688,
        column: 5,
        span: 18028..18029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 688,
        column: 10,
        span: 18029..18034,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 688,
        column: 11,
        span: 18034..18035,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\n\"",
        ),
        line: 688,
        column: 16,
        span: 18035..18040,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 688,
        column: 17,
        span: 18040..18041,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 688,
        column: 18,
        span: 18041..18042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 688,
        column: 22,
        span: 18042..18046,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 688,
        column: 23,
        span: 18046..18047,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 688,
        column: 28,
        span: 18047..18052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 688,
        column: 29,
        span: 18052..18053,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 688,
        column: 31,
        span: 18053..18055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 688,
        column: 32,
        span: 18055..18056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 689,
        column: 9,
        span: 18059..18065,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 689,
        column: 10,
        span: 18065..18066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 689,
        column: 12,
        span: 18066..18068,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 689,
        column: 13,
        span: 18068..18069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 689,
        column: 17,
        span: 18069..18073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 689,
        column: 18,
        span: 18073..18074,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"all\"",
        ),
        line: 689,
        column: 23,
        span: 18074..18079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 689,
        column: 24,
        span: 18079..18080,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 689,
        column: 27,
        span: 18081..18083,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xa\\n\"",
        ),
        line: 689,
        column: 34,
        span: 18084..18090,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 689,
        column: 35,
        span: 18090..18091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 690,
        column: 4,
        span: 18123..18124,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 690,
        column: 5,
        span: 18124..18125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 690,
        column: 10,
        span: 18125..18130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 690,
        column: 11,
        span: 18130..18131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 690,
        column: 12,
        span: 18131..18132,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 690,
        column: 13,
        span: 18132..18133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 690,
        column: 16,
        span: 18134..18136,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 690,
        column: 17,
        span: 18136..18137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 690,
        column: 22,
        span: 18137..18142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 690,
        column: 23,
        span: 18142..18143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 690,
        column: 24,
        span: 18143..18144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 691,
        column: 9,
        span: 18147..18153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 691,
        column: 10,
        span: 18153..18154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 691,
        column: 12,
        span: 18154..18156,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 691,
        column: 13,
        span: 18156..18157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 691,
        column: 19,
        span: 18157..18163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 691,
        column: 20,
        span: 18163..18164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 691,
        column: 24,
        span: 18164..18168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 691,
        column: 25,
        span: 18168..18169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 691,
        column: 26,
        span: 18169..18170,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 692,
        column: 0,
        span: 18171..18174,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 695,
        column: 3,
        span: 18177..18179,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 695,
        column: 7,
        span: 18180..18183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 695,
        column: 13,
        span: 18184..18189,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 695,
        column: 0,
        span: 18190..18194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 696,
        column: 8,
        span: 18197..18202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 696,
        column: 9,
        span: 18202..18203,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing large files (> BUFSIZ)\"",
        ),
        line: 696,
        column: 41,
        span: 18203..18235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 696,
        column: 42,
        span: 18235..18236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 697,
        column: 5,
        span: 18239..18241,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 697,
        column: 6,
        span: 18241..18242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 697,
        column: 12,
        span: 18242..18248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 697,
        column: 13,
        span: 18248..18249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 697,
        column: 17,
        span: 18249..18253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 697,
        column: 18,
        span: 18253..18254,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 698,
        column: 6,
        span: 18257..18260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 698,
        column: 8,
        span: 18261..18262,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 698,
        column: 9,
        span: 18262..18263,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 698,
        column: 10,
        span: 18262..18264,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 698,
        column: 11,
        span: 18264..18265,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5001",
                    after_decimal: "",
                },
            ),
        ),
        line: 698,
        column: 15,
        span: 18264..18269,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 698,
        column: 18,
        span: 18270..18272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 698,
        column: 21,
        span: 18273..18275,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 698,
        column: 22,
        span: 18275..18276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 698,
        column: 27,
        span: 18276..18281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 698,
        column: 28,
        span: 18281..18282,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0123456789123'",
        ),
        line: 698,
        column: 43,
        span: 18282..18297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 698,
        column: 44,
        span: 18297..18298,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 698,
        column: 0,
        span: 18299..18302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 699,
        column: 5,
        span: 18305..18307,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 699,
        column: 6,
        span: 18307..18308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 699,
        column: 11,
        span: 18308..18313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 699,
        column: 12,
        span: 18313..18314,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n12346'",
        ),
        line: 699,
        column: 21,
        span: 18314..18323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 699,
        column: 22,
        span: 18323..18324,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 699,
        column: 23,
        span: 18324..18325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 699,
        column: 28,
        span: 18325..18330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 699,
        column: 29,
        span: 18330..18331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 699,
        column: 30,
        span: 18331..18332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 700,
        column: 5,
        span: 18335..18337,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 700,
        column: 6,
        span: 18337..18338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 700,
        column: 11,
        span: 18338..18343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 700,
        column: 12,
        span: 18343..18344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 700,
        column: 16,
        span: 18344..18348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 700,
        column: 17,
        span: 18348..18349,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 701,
        column: 8,
        span: 18352..18357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 701,
        column: 10,
        span: 18358..18359,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 701,
        column: 12,
        span: 18360..18361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 701,
        column: 15,
        span: 18362..18364,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 701,
        column: 16,
        span: 18364..18365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 701,
        column: 20,
        span: 18365..18369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 701,
        column: 21,
        span: 18369..18370,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 701,
        column: 24,
        span: 18370..18373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 701,
        column: 25,
        span: 18373..18374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 702,
        column: 5,
        span: 18377..18379,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 702,
        column: 6,
        span: 18379..18380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 702,
        column: 11,
        span: 18380..18385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 702,
        column: 12,
        span: 18385..18386,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 702,
        column: 13,
        span: 18386..18387,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 702,
        column: 14,
        span: 18387..18388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 702,
        column: 18,
        span: 18388..18392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 702,
        column: 19,
        span: 18392..18393,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'set'",
        ),
        line: 702,
        column: 24,
        span: 18393..18398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 702,
        column: 25,
        span: 18398..18399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 702,
        column: 27,
        span: 18399..18401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 702,
        column: 28,
        span: 18401..18402,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 703,
        column: 8,
        span: 18405..18410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 703,
        column: 10,
        span: 18411..18412,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 703,
        column: 12,
        span: 18413..18414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 703,
        column: 15,
        span: 18415..18417,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 703,
        column: 16,
        span: 18417..18418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 703,
        column: 20,
        span: 18418..18422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 703,
        column: 21,
        span: 18422..18423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30001",
                    after_decimal: "",
                },
            ),
        ),
        line: 703,
        column: 26,
        span: 18422..18428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 703,
        column: 27,
        span: 18428..18429,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 703,
        column: 29,
        span: 18429..18431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 703,
        column: 31,
        span: 18431..18433,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 703,
        column: 32,
        span: 18433..18434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 703,
        column: 36,
        span: 18434..18438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 703,
        column: 37,
        span: 18438..18439,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1005",
                    after_decimal: "",
                },
            ),
        ),
        line: 703,
        column: 41,
        span: 18438..18443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 703,
        column: 42,
        span: 18443..18444,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 703,
        column: 44,
        span: 18444..18446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 703,
        column: 46,
        span: 18446..18448,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 703,
        column: 47,
        span: 18448..18449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 703,
        column: 51,
        span: 18449..18453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 703,
        column: 52,
        span: 18453..18454,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 703,
        column: 53,
        span: 18453..18455,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 703,
        column: 54,
        span: 18455..18456,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 703,
        column: 56,
        span: 18456..18458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 704,
        column: 15,
        span: 18471..18473,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 704,
        column: 16,
        span: 18473..18474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 704,
        column: 20,
        span: 18474..18478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 704,
        column: 21,
        span: 18478..18479,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 704,
        column: 22,
        span: 18478..18480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 704,
        column: 23,
        span: 18480..18481,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 704,
        column: 25,
        span: 18481..18483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 704,
        column: 27,
        span: 18483..18485,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 704,
        column: 28,
        span: 18485..18486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 704,
        column: 32,
        span: 18486..18490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 704,
        column: 33,
        span: 18490..18491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100003",
                    after_decimal: "",
                },
            ),
        ),
        line: 704,
        column: 39,
        span: 18490..18497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 704,
        column: 40,
        span: 18497..18498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 705,
        column: 9,
        span: 18501..18507,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 705,
        column: 10,
        span: 18507..18508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 705,
        column: 11,
        span: 18508..18509,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 705,
        column: 14,
        span: 18510..18512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 705,
        column: 16,
        span: 18513..18514,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 705,
        column: 20,
        span: 18515..18518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 705,
        column: 27,
        span: 18519..18525,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 705,
        column: 28,
        span: 18525..18526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 705,
        column: 31,
        span: 18526..18529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 705,
        column: 32,
        span: 18529..18530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 705,
        column: 33,
        span: 18530..18531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 705,
        column: 34,
        span: 18531..18532,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 705,
        column: 37,
        span: 18533..18535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5001",
                    after_decimal: "",
                },
            ),
        ),
        line: 705,
        column: 42,
        span: 18535..18540,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 705,
        column: 43,
        span: 18540..18541,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 705,
        column: 45,
        span: 18540..18543,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 705,
        column: 47,
        span: 18544..18545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 705,
        column: 49,
        span: 18545..18547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 705,
        column: 50,
        span: 18547..18548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 706,
        column: 5,
        span: 18551..18553,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 706,
        column: 6,
        span: 18553..18554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 706,
        column: 11,
        span: 18554..18559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 706,
        column: 12,
        span: 18559..18560,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 706,
        column: 13,
        span: 18560..18561,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 706,
        column: 14,
        span: 18561..18562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 706,
        column: 18,
        span: 18562..18566,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 706,
        column: 19,
        span: 18566..18567,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'set'",
        ),
        line: 706,
        column: 24,
        span: 18567..18572,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 706,
        column: 25,
        span: 18572..18573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 706,
        column: 27,
        span: 18573..18575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 706,
        column: 28,
        span: 18575..18576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 707,
        column: 4,
        span: 18579..18580,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 707,
        column: 6,
        span: 18581..18582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 707,
        column: 9,
        span: 18583..18585,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 707,
        column: 10,
        span: 18585..18586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 707,
        column: 14,
        span: 18586..18590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 707,
        column: 15,
        span: 18590..18591,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 707,
        column: 16,
        span: 18591..18592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 708,
        column: 9,
        span: 18609..18615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 708,
        column: 10,
        span: 18615..18616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 708,
        column: 11,
        span: 18616..18617,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 708,
        column: 14,
        span: 18618..18620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 708,
        column: 16,
        span: 18621..18622,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 708,
        column: 18,
        span: 18622..18624,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        line: 708,
        column: 22,
        span: 18624..18628,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 708,
        column: 24,
        span: 18628..18630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 708,
        column: 26,
        span: 18630..18632,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 708,
        column: 27,
        span: 18632..18633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 708,
        column: 31,
        span: 18633..18637,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 708,
        column: 32,
        span: 18637..18638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 708,
        column: 33,
        span: 18638..18639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 708,
        column: 34,
        span: 18639..18640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 709,
        column: 9,
        span: 18643..18649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 709,
        column: 10,
        span: 18649..18650,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 709,
        column: 13,
        span: 18650..18653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 709,
        column: 16,
        span: 18654..18656,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 709,
        column: 17,
        span: 18656..18657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 709,
        column: 21,
        span: 18657..18661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 709,
        column: 22,
        span: 18661..18662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 709,
        column: 23,
        span: 18662..18663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 709,
        column: 24,
        span: 18663..18664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 710,
        column: 5,
        span: 18667..18669,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 710,
        column: 6,
        span: 18669..18670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 710,
        column: 11,
        span: 18670..18675,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 710,
        column: 12,
        span: 18675..18676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 710,
        column: 14,
        span: 18676..18678,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 710,
        column: 15,
        span: 18678..18679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 710,
        column: 20,
        span: 18679..18684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 710,
        column: 21,
        span: 18684..18685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 710,
        column: 22,
        span: 18685..18686,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 710,
        column: 23,
        span: 18686..18687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 711,
        column: 9,
        span: 18690..18696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 711,
        column: 10,
        span: 18696..18697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 711,
        column: 12,
        span: 18697..18699,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 711,
        column: 13,
        span: 18699..18700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 711,
        column: 19,
        span: 18700..18706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 711,
        column: 20,
        span: 18706..18707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 711,
        column: 24,
        span: 18707..18711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 711,
        column: 25,
        span: 18711..18712,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 711,
        column: 26,
        span: 18712..18713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 712,
        column: 4,
        span: 18716..18717,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 712,
        column: 6,
        span: 18718..18719,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 712,
        column: 10,
        span: 18720..18723,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 712,
        column: 11,
        span: 18723..18724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 712,
        column: 13,
        span: 18725..18726,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 712,
        column: 15,
        span: 18727..18728,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 712,
        column: 0,
        span: 18729..18732,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 713,
        column: 0,
        span: 18733..18736,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 715,
        column: 3,
        span: 18738..18740,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 715,
        column: 7,
        span: 18741..18744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 715,
        column: 13,
        span: 18745..18750,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 715,
        column: 0,
        span: 18751..18755,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 716,
        column: 8,
        span: 18758..18763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 716,
        column: 0,
        span: 18764..18772,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 717,
        column: 5,
        span: 18775..18777,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 718,
        column: 10,
        span: 18817..18822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 718,
        column: 14,
        span: 18823..18826,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 718,
        column: 16,
        span: 18827..18828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 718,
        column: 20,
        span: 18829..18832,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 718,
        column: 23,
        span: 18833..18835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ARG",
        ),
        line: 718,
        column: 0,
        span: 18836..18839,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 719,
        column: 10,
        span: 18844..18849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 719,
        column: 12,
        span: 18850..18851,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 719,
        column: 14,
        span: 18852..18853,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 719,
        column: 0,
        span: 18853..18855,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 720,
        column: 10,
        span: 18860..18865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 720,
        column: 14,
        span: 18866..18869,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 720,
        column: 15,
        span: 18869..18870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 720,
        column: 16,
        span: 18870..18871,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 720,
        column: 17,
        span: 18871..18872,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 720,
        column: 20,
        span: 18873..18875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 720,
        column: 22,
        span: 18876..18877,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 720,
        column: 24,
        span: 18878..18879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 720,
        column: 26,
        span: 18880..18881,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 720,
        column: 28,
        span: 18882..18883,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 720,
        column: 30,
        span: 18883..18885,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 720,
        column: 0,
        span: 18886..18889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 721,
        column: 13,
        span: 18894..18902,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 721,
        column: 15,
        span: 18903..18904,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        line: 721,
        column: 19,
        span: 18905..18908,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 721,
        column: 22,
        span: 18909..18911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 721,
        column: 26,
        span: 18912..18915,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 721,
        column: 27,
        span: 18915..18916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 721,
        column: 28,
        span: 18916..18917,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 721,
        column: 30,
        span: 18918..18919,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 721,
        column: 32,
        span: 18919..18921,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 721,
        column: 33,
        span: 18921..18922,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 721,
        column: 36,
        span: 18923..18925,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        line: 721,
        column: 40,
        span: 18926..18929,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 722,
        column: 0,
        span: 18932..18935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 723,
        column: 8,
        span: 18938..18943,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 723,
        column: 9,
        span: 18943..18944,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing popen/pclose and execute\"",
        ),
        line: 723,
        column: 43,
        span: 18944..18978,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 723,
        column: 44,
        span: 18978..18979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 725,
        column: 11,
        span: 19010..19018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 725,
        column: 12,
        span: 19018..19019,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid mode\"",
        ),
        line: 725,
        column: 26,
        span: 19019..19033,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 725,
        column: 27,
        span: 19033..19034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 725,
        column: 30,
        span: 19035..19037,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 725,
        column: 31,
        span: 19037..19038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "popen",
        ),
        line: 725,
        column: 36,
        span: 19038..19043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 725,
        column: 37,
        span: 19043..19044,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cat\"",
        ),
        line: 725,
        column: 43,
        span: 19045..19050,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 725,
        column: 44,
        span: 19050..19051,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 725,
        column: 47,
        span: 19052..19054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 725,
        column: 48,
        span: 19054..19055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 726,
        column: 11,
        span: 19058..19066,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 726,
        column: 12,
        span: 19066..19067,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid mode\"",
        ),
        line: 726,
        column: 26,
        span: 19067..19081,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 726,
        column: 27,
        span: 19081..19082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 726,
        column: 30,
        span: 19083..19085,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 726,
        column: 31,
        span: 19085..19086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "popen",
        ),
        line: 726,
        column: 36,
        span: 19086..19091,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 726,
        column: 37,
        span: 19091..19092,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cat\"",
        ),
        line: 726,
        column: 43,
        span: 19093..19098,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 726,
        column: 44,
        span: 19098..19099,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r+\"",
        ),
        line: 726,
        column: 49,
        span: 19100..19104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 726,
        column: 50,
        span: 19104..19105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 727,
        column: 11,
        span: 19108..19116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 727,
        column: 12,
        span: 19116..19117,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid mode\"",
        ),
        line: 727,
        column: 26,
        span: 19117..19131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 727,
        column: 27,
        span: 19131..19132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 727,
        column: 30,
        span: 19133..19135,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 727,
        column: 31,
        span: 19135..19136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "popen",
        ),
        line: 727,
        column: 36,
        span: 19136..19141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 727,
        column: 37,
        span: 19141..19142,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cat\"",
        ),
        line: 727,
        column: 43,
        span: 19143..19148,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 727,
        column: 44,
        span: 19148..19149,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rw\"",
        ),
        line: 727,
        column: 49,
        span: 19150..19154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 727,
        column: 50,
        span: 19154..19155,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 728,
        column: 5,
        span: 19158..19160,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 729,
        column: 10,
        span: 19191..19196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 729,
        column: 15,
        span: 19197..19201,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 729,
        column: 17,
        span: 19202..19203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 729,
        column: 20,
        span: 19204..19206,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 729,
        column: 21,
        span: 19206..19207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 729,
        column: 28,
        span: 19207..19214,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 729,
        column: 29,
        span: 19214..19215,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 729,
        column: 30,
        span: 19215..19216,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 730,
        column: 10,
        span: 19221..19226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 730,
        column: 12,
        span: 19227..19228,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 730,
        column: 14,
        span: 19229..19230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 730,
        column: 21,
        span: 19231..19237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 730,
        column: 22,
        span: 19237..19238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 730,
        column: 24,
        span: 19238..19240,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 730,
        column: 25,
        span: 19240..19241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "popen",
        ),
        line: 730,
        column: 30,
        span: 19241..19246,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 730,
        column: 31,
        span: 19246..19247,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cat - > \"",
        ),
        line: 730,
        column: 41,
        span: 19247..19257,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 730,
        column: 44,
        span: 19258..19260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 730,
        column: 49,
        span: 19261..19265,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 730,
        column: 50,
        span: 19265..19266,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 730,
        column: 54,
        span: 19267..19270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 730,
        column: 55,
        span: 19270..19271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 730,
        column: 56,
        span: 19271..19272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 731,
        column: 6,
        span: 19277..19278,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 731,
        column: 7,
        span: 19278..19279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 731,
        column: 12,
        span: 19279..19284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 731,
        column: 13,
        span: 19284..19285,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a line\"",
        ),
        line: 731,
        column: 21,
        span: 19285..19293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 731,
        column: 22,
        span: 19293..19294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 732,
        column: 11,
        span: 19299..19305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 732,
        column: 12,
        span: 19305..19306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 732,
        column: 13,
        span: 19306..19307,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 732,
        column: 14,
        span: 19307..19308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 732,
        column: 19,
        span: 19308..19313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 732,
        column: 20,
        span: 19313..19314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 732,
        column: 21,
        span: 19314..19315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 732,
        column: 22,
        span: 19315..19316,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 733,
        column: 10,
        span: 19321..19326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 733,
        column: 12,
        span: 19327..19328,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 733,
        column: 14,
        span: 19329..19330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 733,
        column: 21,
        span: 19331..19337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 733,
        column: 22,
        span: 19337..19338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 733,
        column: 24,
        span: 19338..19340,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 733,
        column: 25,
        span: 19340..19341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "popen",
        ),
        line: 733,
        column: 30,
        span: 19341..19346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 733,
        column: 31,
        span: 19346..19347,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cat - < \"",
        ),
        line: 733,
        column: 41,
        span: 19347..19357,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 733,
        column: 44,
        span: 19358..19360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 733,
        column: 49,
        span: 19361..19365,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 733,
        column: 50,
        span: 19365..19366,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        line: 733,
        column: 54,
        span: 19367..19370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 733,
        column: 55,
        span: 19370..19371,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 733,
        column: 56,
        span: 19371..19372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 734,
        column: 11,
        span: 19377..19383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 734,
        column: 12,
        span: 19383..19384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 734,
        column: 13,
        span: 19384..19385,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 734,
        column: 14,
        span: 19385..19386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 734,
        column: 18,
        span: 19386..19390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 734,
        column: 19,
        span: 19390..19391,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 734,
        column: 22,
        span: 19391..19394,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 734,
        column: 23,
        span: 19394..19395,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 734,
        column: 26,
        span: 19396..19398,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a line\"",
        ),
        line: 734,
        column: 35,
        span: 19399..19407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 734,
        column: 36,
        span: 19407..19408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 735,
        column: 11,
        span: 19413..19419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 735,
        column: 12,
        span: 19419..19420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 735,
        column: 13,
        span: 19420..19421,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 735,
        column: 14,
        span: 19421..19422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 735,
        column: 19,
        span: 19422..19427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 735,
        column: 20,
        span: 19427..19428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 735,
        column: 21,
        span: 19428..19429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 735,
        column: 22,
        span: 19429..19430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 736,
        column: 11,
        span: 19435..19441,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 736,
        column: 12,
        span: 19441..19442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 736,
        column: 14,
        span: 19442..19444,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 736,
        column: 15,
        span: 19444..19445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 736,
        column: 21,
        span: 19445..19451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 736,
        column: 22,
        span: 19451..19452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 736,
        column: 26,
        span: 19452..19456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 736,
        column: 27,
        span: 19456..19457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 736,
        column: 28,
        span: 19457..19458,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 737,
        column: 0,
        span: 19461..19464,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 739,
        column: 8,
        span: 19468..19473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tests",
        ),
        line: 739,
        column: 14,
        span: 19474..19479,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 739,
        column: 16,
        span: 19480..19481,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 739,
        column: 18,
        span: 19482..19483,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 741,
        column: 6,
        span: 19518..19519,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ls > /dev/null\"",
        ),
        line: 741,
        column: 22,
        span: 19519..19535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 741,
        column: 23,
        span: 19535..19536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        line: 741,
        column: 28,
        span: 19537..19541,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 741,
        column: 29,
        span: 19541..19542,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 741,
        column: 30,
        span: 19542..19543,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 742,
        column: 6,
        span: 19548..19549,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not-to-be-found-command\"",
        ),
        line: 742,
        column: 31,
        span: 19549..19574,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 742,
        column: 32,
        span: 19574..19575,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit\"",
        ),
        line: 742,
        column: 39,
        span: 19576..19582,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 742,
        column: 40,
        span: 19582..19583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 742,
        column: 41,
        span: 19583..19584,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 743,
        column: 6,
        span: 19589..19590,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit 3\"",
        ),
        line: 743,
        column: 14,
        span: 19590..19598,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 743,
        column: 15,
        span: 19598..19599,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit\"",
        ),
        line: 743,
        column: 22,
        span: 19600..19606,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 743,
        column: 23,
        span: 19606..19607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 743,
        column: 25,
        span: 19607..19609,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 743,
        column: 26,
        span: 19609..19610,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 743,
        column: 27,
        span: 19610..19611,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 744,
        column: 6,
        span: 19616..19617,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit 129\"",
        ),
        line: 744,
        column: 16,
        span: 19617..19627,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 744,
        column: 17,
        span: 19627..19628,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit\"",
        ),
        line: 744,
        column: 24,
        span: 19629..19635,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 744,
        column: 25,
        span: 19635..19636,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "129",
                    after_decimal: "",
                },
            ),
        ),
        line: 744,
        column: 29,
        span: 19636..19640,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 744,
        column: 30,
        span: 19640..19641,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 744,
        column: 31,
        span: 19641..19642,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 745,
        column: 6,
        span: 19647..19648,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"kill -s HUP $$\"",
        ),
        line: 745,
        column: 22,
        span: 19648..19664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 745,
        column: 23,
        span: 19664..19665,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"signal\"",
        ),
        line: 745,
        column: 32,
        span: 19666..19674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 745,
        column: 33,
        span: 19674..19675,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 745,
        column: 35,
        span: 19675..19677,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 745,
        column: 36,
        span: 19677..19678,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 745,
        column: 37,
        span: 19678..19679,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 746,
        column: 6,
        span: 19684..19685,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"kill -s KILL $$\"",
        ),
        line: 746,
        column: 23,
        span: 19685..19702,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 746,
        column: 24,
        span: 19702..19703,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"signal\"",
        ),
        line: 746,
        column: 33,
        span: 19704..19712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 746,
        column: 34,
        span: 19712..19713,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 746,
        column: 36,
        span: 19713..19715,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 746,
        column: 37,
        span: 19715..19716,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 746,
        column: 38,
        span: 19716..19717,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 747,
        column: 6,
        span: 19722..19723,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sh -c 'kill -s HUP $$'\"",
        ),
        line: 747,
        column: 30,
        span: 19723..19747,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 747,
        column: 31,
        span: 19747..19748,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit\"",
        ),
        line: 747,
        column: 38,
        span: 19749..19755,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 747,
        column: 39,
        span: 19755..19756,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 747,
        column: 40,
        span: 19756..19757,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 748,
        column: 6,
        span: 19762..19763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 748,
        column: 14,
        span: 19763..19771,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 748,
        column: 17,
        span: 19772..19774,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' -e \" \"'",
        ),
        line: 748,
        column: 27,
        span: 19775..19784,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 748,
        column: 28,
        span: 19784..19785,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        line: 748,
        column: 33,
        span: 19786..19790,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 748,
        column: 34,
        span: 19790..19791,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 748,
        column: 35,
        span: 19791..19792,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 749,
        column: 6,
        span: 19797..19798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 749,
        column: 14,
        span: 19798..19806,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 749,
        column: 17,
        span: 19807..19809,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' -e \"os.exit(0, true)\"'",
        ),
        line: 749,
        column: 42,
        span: 19810..19834,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 749,
        column: 43,
        span: 19834..19835,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        line: 749,
        column: 48,
        span: 19836..19840,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 749,
        column: 49,
        span: 19840..19841,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 749,
        column: 50,
        span: 19841..19842,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 750,
        column: 6,
        span: 19847..19848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 750,
        column: 14,
        span: 19848..19856,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 750,
        column: 17,
        span: 19857..19859,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' -e \"os.exit(20, true)\"'",
        ),
        line: 750,
        column: 43,
        span: 19860..19885,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
        column: 44,
        span: 19885..19886,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit\"",
        ),
        line: 750,
        column: 51,
        span: 19887..19893,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
        column: 52,
        span: 19893..19894,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 750,
        column: 55,
        span: 19894..19897,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 750,
        column: 56,
        span: 19897..19898,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
        column: 57,
        span: 19898..19899,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 751,
        column: 4,
        span: 19902..19903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 752,
        column: 8,
        span: 19906..19911,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 752,
        column: 9,
        span: 19911..19912,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n(some error messages are expected now)\"",
        ),
        line: 752,
        column: 51,
        span: 19912..19954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 752,
        column: 52,
        span: 19954..19955,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 753,
        column: 6,
        span: 19958..19961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 753,
        column: 8,
        span: 19962..19963,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 753,
        column: 9,
        span: 19963..19964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 753,
        column: 11,
        span: 19965..19966,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 753,
        column: 14,
        span: 19967..19969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 753,
        column: 21,
        span: 19970..19976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 753,
        column: 22,
        span: 19976..19977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tests",
        ),
        line: 753,
        column: 27,
        span: 19977..19982,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 753,
        column: 28,
        span: 19982..19983,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 753,
        column: 0,
        span: 19984..19986,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 754,
        column: 10,
        span: 19991..19996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 754,
        column: 12,
        span: 19997..19998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 754,
        column: 13,
        span: 19998..19999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 754,
        column: 15,
        span: 20000..20001,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 754,
        column: 16,
        span: 20001..20002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 754,
        column: 18,
        span: 20003..20004,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 754,
        column: 20,
        span: 20005..20006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 754,
        column: 23,
        span: 20007..20009,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 754,
        column: 24,
        span: 20009..20010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "popen",
        ),
        line: 754,
        column: 29,
        span: 20010..20015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 754,
        column: 30,
        span: 20015..20016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 754,
        column: 31,
        span: 20016..20017,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 754,
        column: 32,
        span: 20017..20018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 754,
        column: 33,
        span: 20017..20019,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 754,
        column: 34,
        span: 20019..20020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 754,
        column: 35,
        span: 20020..20021,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 754,
        column: 36,
        span: 20021..20022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 754,
        column: 41,
        span: 20022..20027,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 754,
        column: 42,
        span: 20027..20028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 754,
        column: 43,
        span: 20028..20029,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 755,
        column: 10,
        span: 20034..20039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 755,
        column: 13,
        span: 20040..20042,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 755,
        column: 14,
        span: 20042..20043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y1",
        ),
        line: 755,
        column: 17,
        span: 20044..20046,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 755,
        column: 18,
        span: 20046..20047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z1",
        ),
        line: 755,
        column: 21,
        span: 20048..20050,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 755,
        column: 23,
        span: 20051..20052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 755,
        column: 26,
        span: 20053..20055,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 755,
        column: 27,
        span: 20055..20056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        line: 755,
        column: 34,
        span: 20056..20063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 755,
        column: 35,
        span: 20063..20064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 755,
        column: 36,
        span: 20064..20065,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 755,
        column: 37,
        span: 20065..20066,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 755,
        column: 38,
        span: 20065..20067,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 755,
        column: 39,
        span: 20067..20068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 755,
        column: 40,
        span: 20068..20069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 756,
        column: 11,
        span: 20074..20080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 756,
        column: 12,
        span: 20080..20081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 756,
        column: 13,
        span: 20081..20082,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 756,
        column: 16,
        span: 20083..20085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 756,
        column: 19,
        span: 20086..20088,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 756,
        column: 23,
        span: 20089..20092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 756,
        column: 25,
        span: 20093..20094,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 756,
        column: 28,
        span: 20095..20097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y1",
        ),
        line: 756,
        column: 31,
        span: 20098..20100,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 756,
        column: 35,
        span: 20101..20104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 756,
        column: 37,
        span: 20105..20106,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 756,
        column: 40,
        span: 20107..20109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z1",
        ),
        line: 756,
        column: 43,
        span: 20110..20112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 756,
        column: 44,
        span: 20112..20113,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 757,
        column: 7,
        span: 20118..20120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 757,
        column: 9,
        span: 20121..20122,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 757,
        column: 10,
        span: 20122..20123,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 757,
        column: 11,
        span: 20122..20124,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 757,
        column: 12,
        span: 20124..20125,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 757,
        column: 15,
        span: 20126..20128,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        line: 757,
        column: 20,
        span: 20129..20133,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 757,
        column: 0,
        span: 20134..20138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 758,
        column: 13,
        span: 20145..20151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 758,
        column: 14,
        span: 20151..20152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 758,
        column: 15,
        span: 20152..20153,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 758,
        column: 19,
        span: 20154..20157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 758,
        column: 21,
        span: 20158..20159,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 758,
        column: 24,
        span: 20160..20162,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'exit'",
        ),
        line: 758,
        column: 31,
        span: 20163..20169,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 758,
        column: 35,
        span: 20170..20173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 758,
        column: 37,
        span: 20174..20175,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 758,
        column: 40,
        span: 20176..20178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 758,
        column: 42,
        span: 20178..20180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 758,
        column: 43,
        span: 20180..20181,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 759,
        column: 0,
        span: 20186..20190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 760,
        column: 13,
        span: 20197..20203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 760,
        column: 14,
        span: 20203..20204,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 760,
        column: 17,
        span: 20204..20207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 760,
        column: 19,
        span: 20208..20209,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 760,
        column: 23,
        span: 20210..20213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 760,
        column: 25,
        span: 20214..20215,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 760,
        column: 28,
        span: 20216..20218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 760,
        column: 30,
        span: 20219..20220,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 760,
        column: 31,
        span: 20220..20221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 760,
        column: 32,
        span: 20220..20222,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 760,
        column: 33,
        span: 20222..20223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 760,
        column: 34,
        span: 20223..20224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 762,
        column: 13,
        span: 20323..20329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 762,
        column: 14,
        span: 20329..20330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 762,
        column: 15,
        span: 20330..20331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 762,
        column: 16,
        span: 20331..20332,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 762,
        column: 17,
        span: 20332..20333,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 762,
        column: 18,
        span: 20332..20334,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 762,
        column: 19,
        span: 20334..20335,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 762,
        column: 22,
        span: 20336..20338,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 762,
        column: 26,
        span: 20339..20342,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 762,
        column: 30,
        span: 20343..20346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 762,
        column: 32,
        span: 20347..20348,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 762,
        column: 34,
        span: 20349..20350,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 762,
        column: 36,
        span: 20350..20352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 762,
        column: 37,
        span: 20352..20353,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 762,
        column: 40,
        span: 20354..20356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 762,
        column: 42,
        span: 20357..20358,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 762,
        column: 43,
        span: 20358..20359,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 762,
        column: 44,
        span: 20358..20360,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 762,
        column: 45,
        span: 20360..20361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 762,
        column: 48,
        span: 20362..20364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 762,
        column: 50,
        span: 20365..20366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 762,
        column: 51,
        span: 20366..20367,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 763,
        column: 0,
        span: 20372..20375,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 764,
        column: 0,
        span: 20378..20381,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 765,
        column: 0,
        span: 20382..20385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 769,
        column: 2,
        span: 20407..20408,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 769,
        column: 4,
        span: 20409..20410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 769,
        column: 7,
        span: 20411..20413,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 769,
        column: 8,
        span: 20413..20414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpfile",
        ),
        line: 769,
        column: 15,
        span: 20414..20421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 769,
        column: 16,
        span: 20421..20422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 769,
        column: 17,
        span: 20422..20423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 770,
        column: 7,
        span: 20424..20430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 770,
        column: 8,
        span: 20430..20431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 770,
        column: 10,
        span: 20431..20433,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 770,
        column: 11,
        span: 20433..20434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 770,
        column: 15,
        span: 20434..20438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 770,
        column: 16,
        span: 20438..20439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 770,
        column: 17,
        span: 20439..20440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 770,
        column: 18,
        span: 20440..20441,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 770,
        column: 21,
        span: 20442..20444,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file\"",
        ),
        line: 770,
        column: 28,
        span: 20445..20451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 770,
        column: 29,
        span: 20451..20452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 771,
        column: 2,
        span: 20453..20454,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 771,
        column: 3,
        span: 20454..20455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 771,
        column: 8,
        span: 20455..20460,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 771,
        column: 9,
        span: 20460..20461,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 771,
        column: 14,
        span: 20461..20466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 771,
        column: 15,
        span: 20466..20467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 772,
        column: 2,
        span: 20468..20469,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 772,
        column: 3,
        span: 20469..20470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 772,
        column: 7,
        span: 20470..20474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 772,
        column: 8,
        span: 20474..20475,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 772,
        column: 13,
        span: 20475..20480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 772,
        column: 14,
        span: 20480..20481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 773,
        column: 7,
        span: 20482..20488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 773,
        column: 8,
        span: 20488..20489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 773,
        column: 9,
        span: 20489..20490,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 773,
        column: 10,
        span: 20490..20491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 773,
        column: 14,
        span: 20491..20495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 773,
        column: 17,
        span: 20495..20498,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 773,
        column: 20,
        span: 20499..20501,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 773,
        column: 26,
        span: 20502..20507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 773,
        column: 27,
        span: 20507..20508,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 775,
        column: 4,
        span: 20510..20513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 777,
        column: 6,
        span: 20519..20524,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 777,
        column: 9,
        span: 20524..20527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 779,
        column: 6,
        span: 20529..20534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 779,
        column: 7,
        span: 20534..20535,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing date/time\"",
        ),
        line: 779,
        column: 26,
        span: 20535..20554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 779,
        column: 27,
        span: 20554..20555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 781,
        column: 7,
        span: 20557..20563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 781,
        column: 8,
        span: 20563..20564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 781,
        column: 10,
        span: 20564..20566,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 781,
        column: 11,
        span: 20566..20567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 781,
        column: 15,
        span: 20567..20571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 781,
        column: 16,
        span: 20571..20572,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 781,
        column: 18,
        span: 20572..20574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 781,
        column: 19,
        span: 20574..20575,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 781,
        column: 22,
        span: 20576..20578,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 781,
        column: 25,
        span: 20579..20581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 781,
        column: 26,
        span: 20581..20582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 782,
        column: 7,
        span: 20583..20589,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 782,
        column: 8,
        span: 20589..20590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 782,
        column: 10,
        span: 20590..20592,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 782,
        column: 11,
        span: 20592..20593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 782,
        column: 15,
        span: 20593..20597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 782,
        column: 16,
        span: 20597..20598,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!\"",
        ),
        line: 782,
        column: 19,
        span: 20598..20601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 782,
        column: 20,
        span: 20601..20602,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 782,
        column: 23,
        span: 20603..20605,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 782,
        column: 26,
        span: 20606..20608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 782,
        column: 27,
        span: 20608..20609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 783,
        column: 7,
        span: 20610..20616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 783,
        column: 8,
        span: 20616..20617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 783,
        column: 10,
        span: 20617..20619,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 783,
        column: 11,
        span: 20619..20620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 783,
        column: 15,
        span: 20620..20624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 783,
        column: 16,
        span: 20624..20625,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\"",
        ),
        line: 783,
        column: 22,
        span: 20625..20631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 783,
        column: 23,
        span: 20631..20632,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 783,
        column: 26,
        span: 20633..20635,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\"",
        ),
        line: 783,
        column: 33,
        span: 20636..20642,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 783,
        column: 34,
        span: 20642..20643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 784,
        column: 7,
        span: 20644..20650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 784,
        column: 8,
        span: 20650..20651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 784,
        column: 10,
        span: 20651..20653,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 784,
        column: 11,
        span: 20653..20654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 784,
        column: 15,
        span: 20654..20658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 784,
        column: 16,
        span: 20658..20659,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!\\0\\0\"",
        ),
        line: 784,
        column: 23,
        span: 20659..20666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 784,
        column: 24,
        span: 20666..20667,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 784,
        column: 27,
        span: 20668..20670,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\"",
        ),
        line: 784,
        column: 34,
        span: 20671..20677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 784,
        column: 35,
        span: 20677..20678,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 785,
        column: 6,
        span: 20679..20684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 785,
        column: 8,
        span: 20685..20686,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 785,
        column: 10,
        span: 20687..20688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 785,
        column: 17,
        span: 20689..20695,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 785,
        column: 18,
        span: 20695..20696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 785,
        column: 21,
        span: 20696..20699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 785,
        column: 22,
        span: 20699..20700,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 785,
        column: 25,
        span: 20700..20703,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 785,
        column: 26,
        span: 20703..20704,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 785,
        column: 32,
        span: 20704..20710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 785,
        column: 33,
        span: 20710..20711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 786,
        column: 7,
        span: 20712..20718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 786,
        column: 8,
        span: 20718..20719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 786,
        column: 10,
        span: 20719..20721,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 786,
        column: 11,
        span: 20721..20722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 786,
        column: 15,
        span: 20722..20726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 786,
        column: 16,
        span: 20726..20727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 786,
        column: 17,
        span: 20727..20728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 786,
        column: 18,
        span: 20728..20729,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 786,
        column: 21,
        span: 20730..20732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 786,
        column: 23,
        span: 20733..20734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 786,
        column: 24,
        span: 20734..20735,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 787,
        column: 6,
        span: 20736..20741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 787,
        column: 8,
        span: 20742..20743,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 787,
        column: 10,
        span: 20744..20745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 787,
        column: 13,
        span: 20746..20748,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 787,
        column: 14,
        span: 20748..20749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 787,
        column: 18,
        span: 20749..20753,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 787,
        column: 19,
        span: 20753..20754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 787,
        column: 20,
        span: 20754..20755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 788,
        column: 2,
        span: 20756..20757,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 788,
        column: 4,
        span: 20758..20759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 788,
        column: 7,
        span: 20760..20762,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 788,
        column: 8,
        span: 20762..20763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 788,
        column: 12,
        span: 20763..20767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 788,
        column: 13,
        span: 20767..20768,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*t\"",
        ),
        line: 788,
        column: 17,
        span: 20768..20772,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 788,
        column: 18,
        span: 20772..20773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 788,
        column: 20,
        span: 20774..20775,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 788,
        column: 21,
        span: 20775..20776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 789,
        column: 7,
        span: 20777..20783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 789,
        column: 8,
        span: 20783..20784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 789,
        column: 10,
        span: 20784..20786,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 789,
        column: 11,
        span: 20786..20787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 789,
        column: 15,
        span: 20787..20791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 789,
        column: 16,
        span: 20791..20792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 789,
        column: 22,
        span: 20792..20798,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 789,
        column: 23,
        span: 20798..20799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 789,
        column: 26,
        span: 20799..20802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 789,
        column: 27,
        span: 20802..20803,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 789,
        column: 31,
        span: 20803..20807,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 789,
        column: 32,
        span: 20807..20808,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 789,
        column: 37,
        span: 20808..20813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 789,
        column: 38,
        span: 20813..20814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 789,
        column: 39,
        span: 20814..20815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 789,
        column: 41,
        span: 20816..20817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 789,
        column: 42,
        span: 20817..20818,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 789,
        column: 45,
        span: 20819..20821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 790,
        column: 14,
        span: 20829..20835,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 790,
        column: 15,
        span: 20835..20836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 790,
        column: 18,
        span: 20836..20839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 790,
        column: 19,
        span: 20839..20840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 790,
        column: 21,
        span: 20840..20842,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 790,
        column: 22,
        span: 20842..20843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 790,
        column: 26,
        span: 20843..20847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 790,
        column: 27,
        span: 20847..20848,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 790,
        column: 31,
        span: 20848..20852,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 790,
        column: 32,
        span: 20852..20853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 790,
        column: 34,
        span: 20854..20855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 790,
        column: 35,
        span: 20855..20856,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 790,
        column: 36,
        span: 20856..20857,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 790,
        column: 41,
        span: 20857..20862,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 790,
        column: 42,
        span: 20862..20863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 790,
        column: 43,
        span: 20863..20864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 791,
        column: 7,
        span: 20865..20871,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 791,
        column: 8,
        span: 20871..20872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 791,
        column: 10,
        span: 20872..20874,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 791,
        column: 11,
        span: 20874..20875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 791,
        column: 15,
        span: 20875..20879,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 791,
        column: 16,
        span: 20879..20880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 791,
        column: 22,
        span: 20880..20886,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 791,
        column: 23,
        span: 20886..20887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 791,
        column: 26,
        span: 20887..20890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 791,
        column: 27,
        span: 20890..20891,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 791,
        column: 30,
        span: 20891..20894,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 791,
        column: 31,
        span: 20894..20895,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 791,
        column: 35,
        span: 20895..20899,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 791,
        column: 36,
        span: 20899..20900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 791,
        column: 37,
        span: 20900..20901,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 791,
        column: 40,
        span: 20902..20904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 791,
        column: 47,
        span: 20905..20911,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 791,
        column: 48,
        span: 20911..20912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 791,
        column: 51,
        span: 20912..20915,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 791,
        column: 52,
        span: 20915..20916,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 791,
        column: 55,
        span: 20916..20919,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 791,
        column: 56,
        span: 20919..20920,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 791,
        column: 60,
        span: 20920..20924,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 791,
        column: 61,
        span: 20924..20925,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 791,
        column: 62,
        span: 20925..20926,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 793,
        column: 6,
        span: 20928..20933,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 793,
        column: 15,
        span: 20934..20942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkDateTable",
        ),
        line: 793,
        column: 30,
        span: 20943..20957,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 793,
        column: 32,
        span: 20958..20959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 793,
        column: 33,
        span: 20959..20960,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 793,
        column: 34,
        span: 20960..20961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 794,
        column: 5,
        span: 20964..20966,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 794,
        column: 6,
        span: 20966..20967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 794,
        column: 7,
        span: 20967..20968,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 794,
        column: 9,
        span: 20969..20970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 794,
        column: 12,
        span: 20971..20973,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 794,
        column: 13,
        span: 20973..20974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 794,
        column: 17,
        span: 20974..20978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 794,
        column: 18,
        span: 20978..20979,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*t\"",
        ),
        line: 794,
        column: 22,
        span: 20979..20983,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 794,
        column: 23,
        span: 20983..20984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 794,
        column: 25,
        span: 20985..20986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 794,
        column: 26,
        span: 20986..20987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 795,
        column: 9,
        span: 20990..20996,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 795,
        column: 10,
        span: 20996..20997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 795,
        column: 12,
        span: 20997..20999,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 795,
        column: 13,
        span: 20999..21000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 795,
        column: 17,
        span: 21000..21004,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 795,
        column: 18,
        span: 21004..21005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 795,
        column: 19,
        span: 21005..21006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 795,
        column: 20,
        span: 21006..21007,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 795,
        column: 23,
        span: 21008..21010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 795,
        column: 25,
        span: 21011..21012,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 795,
        column: 26,
        span: 21012..21013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 796,
        column: 7,
        span: 21016..21020,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 796,
        column: 8,
        span: 21020..21021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 796,
        column: 10,
        span: 21021..21023,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 796,
        column: 11,
        span: 21023..21024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 796,
        column: 15,
        span: 21024..21028,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 796,
        column: 16,
        span: 21028..21029,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[assert(D.year==%Y and D.month==%m and D.day==%d and\n    D.hour==%H and D.min==%M and D.sec==%S and\n    D.wday==%w+1 and D.yday==%j)]]",
        ),
        line: 798,
        column: 35,
        span: 21029..21164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 798,
        column: 36,
        span: 21164..21165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 798,
        column: 38,
        span: 21166..21167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 798,
        column: 39,
        span: 21167..21168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 798,
        column: 40,
        span: 21168..21169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 798,
        column: 41,
        span: 21169..21170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 798,
        column: 42,
        span: 21170..21171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 799,
        column: 5,
        span: 21174..21176,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 799,
        column: 6,
        span: 21176..21177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 799,
        column: 7,
        span: 21177..21178,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 799,
        column: 9,
        span: 21179..21180,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 799,
        column: 0,
        span: 21181..21184,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 800,
        column: 0,
        span: 21185..21188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkDateTable",
        ),
        line: 802,
        column: 15,
        span: 21190..21204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 802,
        column: 16,
        span: 21204..21205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 802,
        column: 18,
        span: 21205..21207,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 802,
        column: 19,
        span: 21207..21208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 802,
        column: 23,
        span: 21208..21212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 802,
        column: 24,
        span: 21212..21213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 802,
        column: 25,
        span: 21213..21214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 802,
        column: 26,
        span: 21214..21215,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 803,
        column: 3,
        span: 21216..21218,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 803,
        column: 7,
        span: 21219..21222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 803,
        column: 13,
        span: 21223..21228,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 803,
        column: 0,
        span: 21229..21233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkDateTable",
        ),
        line: 805,
        column: 17,
        span: 21287..21301,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 805,
        column: 18,
        span: 21301..21302,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 805,
        column: 19,
        span: 21301..21303,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 805,
        column: 20,
        span: 21303..21304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkDateTable",
        ),
        line: 806,
        column: 17,
        span: 21307..21321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 806,
        column: 18,
        span: 21321..21322,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 806,
        column: 19,
        span: 21321..21323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 806,
        column: 20,
        span: 21323..21324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkDateTable",
        ),
        line: 807,
        column: 17,
        span: 21327..21341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 807,
        column: 18,
        span: 21341..21342,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 807,
        column: 22,
        span: 21341..21346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 807,
        column: 23,
        span: 21346..21347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkDateTable",
        ),
        line: 808,
        column: 17,
        span: 21350..21364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 808,
        column: 18,
        span: 21364..21365,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fffffff",
            ),
        ),
        line: 808,
        column: 28,
        span: 21364..21375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 808,
        column: 29,
        span: 21375..21376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkDateTable",
        ),
        line: 809,
        column: 17,
        span: 21379..21393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 809,
        column: 18,
        span: 21393..21394,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80000000",
            ),
        ),
        line: 809,
        column: 28,
        span: 21393..21404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 809,
        column: 29,
        span: 21404..21405,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 810,
        column: 0,
        span: 21406..21409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 812,
        column: 9,
        span: 21411..21419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 812,
        column: 10,
        span: 21419..21420,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion specifier\"",
        ),
        line: 812,
        column: 40,
        span: 21420..21450,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 812,
        column: 41,
        span: 21450..21451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 812,
        column: 44,
        span: 21452..21454,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 812,
        column: 45,
        span: 21454..21455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 812,
        column: 49,
        span: 21455..21459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 812,
        column: 50,
        span: 21459..21460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 812,
        column: 54,
        span: 21461..21464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 812,
        column: 55,
        span: 21464..21465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 813,
        column: 9,
        span: 21466..21474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 813,
        column: 10,
        span: 21474..21475,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion specifier\"",
        ),
        line: 813,
        column: 40,
        span: 21475..21505,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 813,
        column: 41,
        span: 21505..21506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 813,
        column: 44,
        span: 21507..21509,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 813,
        column: 45,
        span: 21509..21510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 813,
        column: 49,
        span: 21510..21514,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 813,
        column: 50,
        span: 21514..21515,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%9\"",
        ),
        line: 813,
        column: 55,
        span: 21516..21520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 813,
        column: 56,
        span: 21520..21521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 814,
        column: 9,
        span: 21522..21530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 814,
        column: 10,
        span: 21530..21531,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion specifier\"",
        ),
        line: 814,
        column: 40,
        span: 21531..21561,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 814,
        column: 41,
        span: 21561..21562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 814,
        column: 44,
        span: 21563..21565,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 814,
        column: 45,
        span: 21565..21566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 814,
        column: 49,
        span: 21566..21570,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 814,
        column: 50,
        span: 21570..21571,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 814,
        column: 54,
        span: 21572..21575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 814,
        column: 55,
        span: 21575..21576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 815,
        column: 9,
        span: 21577..21585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 815,
        column: 10,
        span: 21585..21586,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion specifier\"",
        ),
        line: 815,
        column: 40,
        span: 21586..21616,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 815,
        column: 41,
        span: 21616..21617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 815,
        column: 44,
        span: 21618..21620,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 815,
        column: 45,
        span: 21620..21621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 815,
        column: 49,
        span: 21621..21625,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 815,
        column: 50,
        span: 21625..21626,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%O\"",
        ),
        line: 815,
        column: 55,
        span: 21627..21631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 815,
        column: 56,
        span: 21631..21632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 816,
        column: 9,
        span: 21633..21641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 816,
        column: 10,
        span: 21641..21642,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion specifier\"",
        ),
        line: 816,
        column: 40,
        span: 21642..21672,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 816,
        column: 41,
        span: 21672..21673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 816,
        column: 44,
        span: 21674..21676,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 816,
        column: 45,
        span: 21676..21677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 816,
        column: 49,
        span: 21677..21681,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 816,
        column: 50,
        span: 21681..21682,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%E\"",
        ),
        line: 816,
        column: 55,
        span: 21683..21687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 816,
        column: 56,
        span: 21687..21688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 817,
        column: 9,
        span: 21689..21697,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 817,
        column: 10,
        span: 21697..21698,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid conversion specifier\"",
        ),
        line: 817,
        column: 40,
        span: 21698..21728,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 817,
        column: 41,
        span: 21728..21729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 817,
        column: 44,
        span: 21730..21732,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 817,
        column: 45,
        span: 21732..21733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 817,
        column: 49,
        span: 21733..21737,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 817,
        column: 50,
        span: 21737..21738,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%Ea\"",
        ),
        line: 817,
        column: 56,
        span: 21739..21744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 817,
        column: 57,
        span: 21744..21745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 819,
        column: 9,
        span: 21747..21755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 819,
        column: 10,
        span: 21755..21756,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not an integer\"",
        ),
        line: 819,
        column: 26,
        span: 21756..21772,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 819,
        column: 27,
        span: 21772..21773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 819,
        column: 30,
        span: 21774..21776,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 819,
        column: 31,
        span: 21776..21777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 819,
        column: 35,
        span: 21777..21781,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 819,
        column: 36,
        span: 21781..21782,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 819,
        column: 38,
        span: 21783..21784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 819,
        column: 42,
        span: 21784..21788,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 819,
        column: 43,
        span: 21788..21789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 819,
        column: 47,
        span: 21788..21793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 819,
        column: 48,
        span: 21793..21794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 819,
        column: 54,
        span: 21795..21800,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 819,
        column: 55,
        span: 21800..21801,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 819,
        column: 56,
        span: 21800..21802,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 819,
        column: 57,
        span: 21802..21803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 819,
        column: 61,
        span: 21804..21807,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 819,
        column: 62,
        span: 21807..21808,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 819,
        column: 63,
        span: 21807..21809,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 819,
        column: 64,
        span: 21809..21810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        line: 819,
        column: 69,
        span: 21811..21815,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 819,
        column: 70,
        span: 21815..21816,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 819,
        column: 73,
        span: 21816..21819,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 819,
        column: 74,
        span: 21819..21820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 819,
        column: 75,
        span: 21820..21821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 820,
        column: 9,
        span: 21822..21830,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 820,
        column: 10,
        span: 21830..21831,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not an integer\"",
        ),
        line: 820,
        column: 26,
        span: 21831..21847,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 820,
        column: 27,
        span: 21847..21848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 820,
        column: 30,
        span: 21849..21851,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 820,
        column: 31,
        span: 21851..21852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 820,
        column: 35,
        span: 21852..21856,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 820,
        column: 36,
        span: 21856..21857,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 820,
        column: 38,
        span: 21858..21859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 820,
        column: 42,
        span: 21859..21863,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 820,
        column: 43,
        span: 21863..21864,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 820,
        column: 47,
        span: 21863..21868,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 820,
        column: 48,
        span: 21868..21869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 820,
        column: 54,
        span: 21870..21875,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 820,
        column: 55,
        span: 21875..21876,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 820,
        column: 56,
        span: 21875..21877,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 820,
        column: 57,
        span: 21877..21878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 820,
        column: 61,
        span: 21879..21882,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 820,
        column: 62,
        span: 21882..21883,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 820,
        column: 63,
        span: 21882..21884,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 820,
        column: 64,
        span: 21884..21885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        line: 820,
        column: 69,
        span: 21886..21890,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 820,
        column: 70,
        span: 21890..21891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 820,
        column: 73,
        span: 21890..21894,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 820,
        column: 74,
        span: 21894..21895,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 820,
        column: 75,
        span: 21895..21896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 822,
        column: 9,
        span: 21898..21906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 822,
        column: 10,
        span: 21906..21907,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"missing\"",
        ),
        line: 822,
        column: 19,
        span: 21907..21916,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 822,
        column: 20,
        span: 21916..21917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 822,
        column: 23,
        span: 21918..21920,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 822,
        column: 24,
        span: 21920..21921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 822,
        column: 28,
        span: 21921..21925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 822,
        column: 29,
        span: 21925..21926,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 822,
        column: 31,
        span: 21927..21928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        line: 822,
        column: 35,
        span: 21928..21932,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 822,
        column: 37,
        span: 21933..21934,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 822,
        column: 40,
        span: 21934..21937,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 822,
        column: 41,
        span: 21937..21938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 822,
        column: 42,
        span: 21938..21939,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 825,
        column: 3,
        span: 21960..21962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 825,
        column: 10,
        span: 21963..21969,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 825,
        column: 11,
        span: 21969..21970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        line: 825,
        column: 19,
        span: 21970..21978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 825,
        column: 20,
        span: 21978..21979,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        line: 825,
        column: 23,
        span: 21979..21982,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 825,
        column: 24,
        span: 21982..21983,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 825,
        column: 27,
        span: 21984..21986,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 825,
        column: 29,
        span: 21986..21988,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 825,
        column: 34,
        span: 21989..21993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 826,
        column: 11,
        span: 22013..22021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 826,
        column: 12,
        span: 22021..22022,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'year' is out-of-bound\"",
        ),
        line: 826,
        column: 42,
        span: 22022..22052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 826,
        column: 43,
        span: 22052..22053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 826,
        column: 46,
        span: 22054..22056,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 826,
        column: 47,
        span: 22056..22057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 826,
        column: 51,
        span: 22057..22061,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 826,
        column: 52,
        span: 22061..22062,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 827,
        column: 16,
        span: 22077..22078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 827,
        column: 20,
        span: 22078..22082,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 827,
        column: 22,
        span: 22083..22084,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 827,
        column: 24,
        span: 22085..22086,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 827,
        column: 25,
        span: 22086..22087,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 827,
        column: 26,
        span: 22086..22088,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 827,
        column: 29,
        span: 22089..22091,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 827,
        column: 32,
        span: 22091..22094,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 827,
        column: 33,
        span: 22094..22095,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 827,
        column: 35,
        span: 22096..22097,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1899",
                    after_decimal: "",
                },
            ),
        ),
        line: 827,
        column: 40,
        span: 22097..22102,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 827,
        column: 41,
        span: 22102..22103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 827,
        column: 47,
        span: 22104..22109,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 827,
        column: 49,
        span: 22110..22111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 827,
        column: 51,
        span: 22111..22113,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 827,
        column: 52,
        span: 22113..22114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 827,
        column: 56,
        span: 22115..22118,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 827,
        column: 58,
        span: 22119..22120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 827,
        column: 60,
        span: 22120..22122,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 827,
        column: 61,
        span: 22122..22123,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 827,
        column: 62,
        span: 22123..22124,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 828,
        column: 0,
        span: 22125..22128,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 830,
        column: 3,
        span: 22130..22132,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 830,
        column: 7,
        span: 22133..22136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 830,
        column: 13,
        span: 22137..22142,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 830,
        column: 0,
        span: 22143..22147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 832,
        column: 9,
        span: 22185..22191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 832,
        column: 10,
        span: 22191..22192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 832,
        column: 14,
        span: 22192..22196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 832,
        column: 15,
        span: 22196..22197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 832,
        column: 17,
        span: 22197..22199,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 832,
        column: 18,
        span: 22199..22200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 832,
        column: 22,
        span: 22200..22204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 832,
        column: 23,
        span: 22204..22205,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%Ex\"",
        ),
        line: 832,
        column: 28,
        span: 22205..22210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 832,
        column: 29,
        span: 22210..22211,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 832,
        column: 30,
        span: 22211..22212,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 832,
        column: 33,
        span: 22213..22215,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 832,
        column: 42,
        span: 22216..22224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 832,
        column: 43,
        span: 22224..22225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 833,
        column: 9,
        span: 22228..22234,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 833,
        column: 10,
        span: 22234..22235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 833,
        column: 14,
        span: 22235..22239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 833,
        column: 15,
        span: 22239..22240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 833,
        column: 17,
        span: 22240..22242,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 833,
        column: 18,
        span: 22242..22243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 833,
        column: 22,
        span: 22243..22247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 833,
        column: 23,
        span: 22247..22248,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%Oy\"",
        ),
        line: 833,
        column: 28,
        span: 22248..22253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 833,
        column: 29,
        span: 22253..22254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 833,
        column: 30,
        span: 22254..22255,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 833,
        column: 33,
        span: 22256..22258,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 833,
        column: 42,
        span: 22259..22267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 833,
        column: 43,
        span: 22267..22268,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 836,
        column: 8,
        span: 22335..22340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t0",
        ),
        line: 836,
        column: 11,
        span: 22341..22343,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 836,
        column: 13,
        span: 22344..22345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 836,
        column: 16,
        span: 22346..22348,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 836,
        column: 17,
        span: 22348..22349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 836,
        column: 21,
        span: 22349..22353,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 836,
        column: 22,
        span: 22353..22354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 836,
        column: 26,
        span: 22354..22358,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 836,
        column: 28,
        span: 22359..22360,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1970",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
        column: 33,
        span: 22360..22365,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 836,
        column: 34,
        span: 22365..22366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 836,
        column: 40,
        span: 22367..22372,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 836,
        column: 42,
        span: 22373..22374,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
        column: 44,
        span: 22374..22376,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 836,
        column: 45,
        span: 22376..22377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 836,
        column: 49,
        span: 22378..22381,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 836,
        column: 51,
        span: 22382..22383,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
        column: 53,
        span: 22383..22385,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 836,
        column: 54,
        span: 22385..22386,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 837,
        column: 8,
        span: 22389..22394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 837,
        column: 11,
        span: 22395..22397,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 837,
        column: 13,
        span: 22398..22399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 837,
        column: 16,
        span: 22400..22402,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 837,
        column: 17,
        span: 22402..22403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 837,
        column: 21,
        span: 22403..22407,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 837,
        column: 22,
        span: 22407..22408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 837,
        column: 26,
        span: 22408..22412,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 837,
        column: 28,
        span: 22413..22414,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1970",
                    after_decimal: "",
                },
            ),
        ),
        line: 837,
        column: 33,
        span: 22414..22419,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 837,
        column: 34,
        span: 22419..22420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 837,
        column: 40,
        span: 22421..22426,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 837,
        column: 42,
        span: 22427..22428,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 837,
        column: 44,
        span: 22428..22430,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 837,
        column: 45,
        span: 22430..22431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 837,
        column: 49,
        span: 22432..22435,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 837,
        column: 51,
        span: 22436..22437,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 837,
        column: 53,
        span: 22437..22439,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 837,
        column: 54,
        span: 22439..22440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sec",
        ),
        line: 837,
        column: 58,
        span: 22441..22444,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 837,
        column: 60,
        span: 22445..22446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 837,
        column: 62,
        span: 22447..22448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 837,
        column: 63,
        span: 22447..22449,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 837,
        column: 66,
        span: 22450..22452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 837,
        column: 69,
        span: 22452..22455,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 837,
        column: 70,
        span: 22455..22456,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 837,
        column: 72,
        span: 22457..22458,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 837,
        column: 74,
        span: 22458..22460,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 837,
        column: 75,
        span: 22460..22461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 838,
        column: 9,
        span: 22464..22470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 838,
        column: 10,
        span: 22470..22471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 838,
        column: 12,
        span: 22471..22473,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 838,
        column: 14,
        span: 22474..22475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t0",
        ),
        line: 838,
        column: 17,
        span: 22476..22478,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 838,
        column: 20,
        span: 22479..22481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 838,
        column: 22,
        span: 22482..22483,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 838,
        column: 23,
        span: 22482..22484,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 838,
        column: 26,
        span: 22485..22487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 838,
        column: 29,
        span: 22487..22490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 838,
        column: 30,
        span: 22490..22491,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 838,
        column: 32,
        span: 22492..22493,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 838,
        column: 34,
        span: 22493..22495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 838,
        column: 35,
        span: 22495..22496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t0",
        ),
        line: 839,
        column: 5,
        span: 22499..22501,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 839,
        column: 7,
        span: 22502..22503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 839,
        column: 10,
        span: 22504..22506,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 839,
        column: 11,
        span: 22506..22507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 839,
        column: 15,
        span: 22507..22511,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 839,
        column: 16,
        span: 22511..22512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 839,
        column: 20,
        span: 22512..22516,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 839,
        column: 22,
        span: 22517..22518,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1970",
                    after_decimal: "",
                },
            ),
        ),
        line: 839,
        column: 27,
        span: 22518..22523,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 839,
        column: 28,
        span: 22523..22524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 839,
        column: 34,
        span: 22525..22530,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 839,
        column: 36,
        span: 22531..22532,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 839,
        column: 38,
        span: 22532..22534,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 839,
        column: 39,
        span: 22534..22535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 839,
        column: 43,
        span: 22536..22539,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 839,
        column: 45,
        span: 22540..22541,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 839,
        column: 47,
        span: 22541..22543,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 839,
        column: 48,
        span: 22543..22544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 840,
        column: 5,
        span: 22547..22549,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 840,
        column: 7,
        span: 22550..22551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 840,
        column: 10,
        span: 22552..22554,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 840,
        column: 11,
        span: 22554..22555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 840,
        column: 15,
        span: 22555..22559,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 840,
        column: 16,
        span: 22559..22560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 840,
        column: 20,
        span: 22560..22564,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 840,
        column: 22,
        span: 22565..22566,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1970",
                    after_decimal: "",
                },
            ),
        ),
        line: 840,
        column: 27,
        span: 22566..22571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 840,
        column: 28,
        span: 22571..22572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 840,
        column: 34,
        span: 22573..22578,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 840,
        column: 36,
        span: 22579..22580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 840,
        column: 38,
        span: 22580..22582,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 840,
        column: 39,
        span: 22582..22583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 840,
        column: 43,
        span: 22584..22587,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 840,
        column: 45,
        span: 22588..22589,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 840,
        column: 47,
        span: 22589..22591,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 840,
        column: 48,
        span: 22591..22592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sec",
        ),
        line: 840,
        column: 52,
        span: 22593..22596,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 840,
        column: 54,
        span: 22597..22598,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 840,
        column: 56,
        span: 22599..22600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 840,
        column: 57,
        span: 22600..22601,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 840,
        column: 58,
        span: 22600..22602,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 840,
        column: 61,
        span: 22603..22605,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 840,
        column: 64,
        span: 22605..22608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 840,
        column: 65,
        span: 22608..22609,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 840,
        column: 66,
        span: 22609..22610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 841,
        column: 9,
        span: 22613..22619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 841,
        column: 10,
        span: 22619..22620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 841,
        column: 12,
        span: 22620..22622,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 841,
        column: 14,
        span: 22623..22624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t0",
        ),
        line: 841,
        column: 17,
        span: 22625..22627,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 841,
        column: 20,
        span: 22628..22630,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 841,
        column: 22,
        span: 22631..22632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 841,
        column: 23,
        span: 22632..22633,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 841,
        column: 24,
        span: 22632..22634,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 841,
        column: 27,
        span: 22635..22637,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 841,
        column: 30,
        span: 22637..22640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 841,
        column: 31,
        span: 22640..22641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 841,
        column: 32,
        span: 22641..22642,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 844,
        column: 5,
        span: 22695..22697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 844,
        column: 12,
        span: 22698..22704,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 844,
        column: 15,
        span: 22705..22707,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 844,
        column: 17,
        span: 22707..22709,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 844,
        column: 18,
        span: 22709..22710,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "62",
                    after_decimal: "",
                },
            ),
        ),
        line: 844,
        column: 20,
        span: 22709..22712,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 844,
        column: 25,
        span: 22713..22717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 846,
        column: 13,
        span: 22787..22795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 846,
        column: 14,
        span: 22795..22796,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out-of-bound\"",
        ),
        line: 846,
        column: 28,
        span: 22796..22810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 846,
        column: 29,
        span: 22810..22811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 846,
        column: 32,
        span: 22812..22814,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 846,
        column: 33,
        span: 22814..22815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 846,
        column: 37,
        span: 22815..22819,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 846,
        column: 38,
        span: 22819..22820,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 846,
        column: 40,
        span: 22821..22822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 846,
        column: 44,
        span: 22822..22826,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 846,
        column: 46,
        span: 22827..22828,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 846,
        column: 48,
        span: 22829..22830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 846,
        column: 54,
        span: 22830..22836,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 846,
        column: 55,
        span: 22836..22837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 846,
        column: 61,
        span: 22838..22843,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 846,
        column: 63,
        span: 22844..22845,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 846,
        column: 65,
        span: 22845..22847,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 846,
        column: 66,
        span: 22847..22848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 846,
        column: 70,
        span: 22849..22852,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 846,
        column: 72,
        span: 22853..22854,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 846,
        column: 74,
        span: 22854..22856,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 846,
        column: 75,
        span: 22856..22857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 846,
        column: 76,
        span: 22857..22858,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 847,
        column: 7,
        span: 22863..22865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 847,
        column: 14,
        span: 22866..22872,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 847,
        column: 15,
        span: 22872..22873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        line: 847,
        column: 23,
        span: 22873..22881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 847,
        column: 24,
        span: 22881..22882,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        line: 847,
        column: 27,
        span: 22882..22885,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 847,
        column: 28,
        span: 22885..22886,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 847,
        column: 31,
        span: 22887..22889,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 847,
        column: 33,
        span: 22889..22891,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 847,
        column: 38,
        span: 22892..22896,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 848,
        column: 9,
        span: 22920..22922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testerr",
        ),
        line: 848,
        column: 17,
        span: 22923..22930,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 848,
        column: 18,
        span: 22930..22931,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out-of-bound\"",
        ),
        line: 848,
        column: 32,
        span: 22931..22945,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 848,
        column: 33,
        span: 22945..22946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 848,
        column: 36,
        span: 22947..22949,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 848,
        column: 37,
        span: 22949..22950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 848,
        column: 41,
        span: 22950..22954,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 848,
        column: 42,
        span: 22954..22955,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%Y\"",
        ),
        line: 848,
        column: 47,
        span: 22956..22960,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 848,
        column: 48,
        span: 22960..22961,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 848,
        column: 50,
        span: 22961..22963,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 848,
        column: 51,
        span: 22963..22964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 848,
        column: 53,
        span: 22963..22966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 848,
        column: 54,
        span: 22966..22967,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 848,
        column: 0,
        span: 22968..22972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 850,
        column: 14,
        span: 23052..23057,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 850,
        column: 15,
        span: 23057..23058,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  4-byte time_t\"",
        ),
        line: 850,
        column: 32,
        span: 23058..23075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 850,
        column: 33,
        span: 23075..23076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 851,
        column: 17,
        span: 23085..23093,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 851,
        column: 18,
        span: 23093..23094,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cannot be represented\"",
        ),
        line: 851,
        column: 41,
        span: 23094..23117,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 851,
        column: 42,
        span: 23117..23118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 851,
        column: 45,
        span: 23119..23121,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 851,
        column: 46,
        span: 23121..23122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 851,
        column: 50,
        span: 23122..23126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 851,
        column: 51,
        span: 23126..23127,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 851,
        column: 53,
        span: 23128..23129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 851,
        column: 57,
        span: 23129..23133,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 851,
        column: 58,
        span: 23133..23134,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4000",
                    after_decimal: "",
                },
            ),
        ),
        line: 851,
        column: 62,
        span: 23133..23138,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 851,
        column: 63,
        span: 23138..23139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 851,
        column: 69,
        span: 23140..23145,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 851,
        column: 70,
        span: 23145..23146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 851,
        column: 71,
        span: 23145..23147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 851,
        column: 72,
        span: 23147..23148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 851,
        column: 76,
        span: 23149..23152,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 851,
        column: 77,
        span: 23152..23153,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 851,
        column: 78,
        span: 23152..23154,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 851,
        column: 79,
        span: 23154..23155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 851,
        column: 80,
        span: 23155..23156,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 852,
        column: 0,
        span: 23163..23167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 854,
        column: 14,
        span: 23248..23253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 854,
        column: 15,
        span: 23253..23254,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  8-byte time_t\"",
        ),
        line: 854,
        column: 32,
        span: 23254..23271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 854,
        column: 33,
        span: 23271..23272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 855,
        column: 17,
        span: 23281..23289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 855,
        column: 18,
        span: 23289..23290,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cannot be represented\"",
        ),
        line: 855,
        column: 41,
        span: 23290..23313,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 855,
        column: 42,
        span: 23313..23314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 855,
        column: 45,
        span: 23315..23317,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 855,
        column: 46,
        span: 23317..23318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 855,
        column: 50,
        span: 23318..23322,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 855,
        column: 51,
        span: 23322..23323,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%Y\"",
        ),
        line: 855,
        column: 56,
        span: 23324..23328,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 855,
        column: 57,
        span: 23328..23329,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 855,
        column: 59,
        span: 23329..23331,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 855,
        column: 60,
        span: 23331..23332,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 855,
        column: 62,
        span: 23331..23334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 855,
        column: 63,
        span: 23334..23335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 858,
        column: 15,
        span: 23381..23387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 858,
        column: 16,
        span: 23387..23388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 858,
        column: 24,
        span: 23388..23396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 858,
        column: 25,
        span: 23396..23397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 858,
        column: 27,
        span: 23397..23399,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 858,
        column: 28,
        span: 23399..23400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 858,
        column: 0,
        span: 23400..23404,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 859,
        column: 12,
        span: 23415..23416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 859,
        column: 16,
        span: 23416..23420,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 859,
        column: 17,
        span: 23420..23421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 859,
        column: 18,
        span: 23421..23422,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 859,
        column: 19,
        span: 23421..23423,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 859,
        column: 22,
        span: 23424..23426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 859,
        column: 25,
        span: 23426..23429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 859,
        column: 26,
        span: 23429..23430,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 859,
        column: 28,
        span: 23431..23432,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1899",
                    after_decimal: "",
                },
            ),
        ),
        line: 859,
        column: 33,
        span: 23432..23437,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 859,
        column: 34,
        span: 23437..23438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 859,
        column: 40,
        span: 23439..23444,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 859,
        column: 41,
        span: 23444..23445,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 859,
        column: 43,
        span: 23444..23447,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 859,
        column: 44,
        span: 23447..23448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 859,
        column: 48,
        span: 23449..23452,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 859,
        column: 49,
        span: 23452..23453,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 859,
        column: 51,
        span: 23452..23455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 859,
        column: 52,
        span: 23455..23456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        line: 859,
        column: 57,
        span: 23457..23461,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 859,
        column: 58,
        span: 23461..23462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 859,
        column: 60,
        span: 23461..23464,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 859,
        column: 61,
        span: 23464..23465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 859,
        column: 65,
        span: 23466..23469,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 859,
        column: 66,
        span: 23469..23470,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "59",
                    after_decimal: "",
                },
            ),
        ),
        line: 859,
        column: 68,
        span: 23469..23472,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 859,
        column: 69,
        span: 23472..23473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sec",
        ),
        line: 859,
        column: 73,
        span: 23474..23477,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 859,
        column: 74,
        span: 23477..23478,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "59",
                    after_decimal: "",
                },
            ),
        ),
        line: 859,
        column: 76,
        span: 23477..23480,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 859,
        column: 77,
        span: 23480..23481,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 859,
        column: 78,
        span: 23481..23482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 859,
        column: 79,
        span: 23482..23483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 862,
        column: 17,
        span: 23521..23529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 862,
        column: 18,
        span: 23529..23530,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"represented\"",
        ),
        line: 862,
        column: 31,
        span: 23530..23543,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 862,
        column: 32,
        span: 23543..23544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 862,
        column: 35,
        span: 23545..23547,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 862,
        column: 36,
        span: 23547..23548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 862,
        column: 40,
        span: 23548..23552,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 862,
        column: 41,
        span: 23552..23553,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 863,
        column: 12,
        span: 23564..23565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 863,
        column: 16,
        span: 23565..23569,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 863,
        column: 17,
        span: 23569..23570,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 863,
        column: 18,
        span: 23570..23571,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 863,
        column: 19,
        span: 23570..23572,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 863,
        column: 22,
        span: 23573..23575,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 863,
        column: 25,
        span: 23575..23578,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 863,
        column: 26,
        span: 23578..23579,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 863,
        column: 28,
        span: 23580..23581,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1899",
                    after_decimal: "",
                },
            ),
        ),
        line: 863,
        column: 33,
        span: 23581..23586,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 863,
        column: 34,
        span: 23586..23587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 863,
        column: 40,
        span: 23588..23593,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 863,
        column: 41,
        span: 23593..23594,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 863,
        column: 43,
        span: 23593..23596,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 863,
        column: 44,
        span: 23596..23597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 863,
        column: 48,
        span: 23598..23601,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 863,
        column: 49,
        span: 23601..23602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 863,
        column: 51,
        span: 23601..23604,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 863,
        column: 52,
        span: 23604..23605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        line: 863,
        column: 57,
        span: 23606..23610,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 863,
        column: 58,
        span: 23610..23611,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 863,
        column: 60,
        span: 23610..23613,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 863,
        column: 61,
        span: 23613..23614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 863,
        column: 65,
        span: 23615..23618,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 863,
        column: 66,
        span: 23618..23619,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "59",
                    after_decimal: "",
                },
            ),
        ),
        line: 863,
        column: 68,
        span: 23618..23621,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 863,
        column: 69,
        span: 23621..23622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sec",
        ),
        line: 863,
        column: 73,
        span: 23623..23626,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 863,
        column: 74,
        span: 23626..23627,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 863,
        column: 76,
        span: 23626..23629,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 863,
        column: 77,
        span: 23629..23630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 863,
        column: 78,
        span: 23630..23631,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 864,
        column: 0,
        span: 23638..23641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 867,
        column: 15,
        span: 23705..23713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 867,
        column: 16,
        span: 23713..23714,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'day' is out-of-bound\"",
        ),
        line: 867,
        column: 45,
        span: 23714..23743,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 867,
        column: 46,
        span: 23743..23744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 867,
        column: 49,
        span: 23745..23747,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 867,
        column: 50,
        span: 23747..23748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 867,
        column: 54,
        span: 23748..23752,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 867,
        column: 55,
        span: 23752..23753,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 868,
        column: 20,
        span: 23772..23773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 868,
        column: 24,
        span: 23773..23777,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 868,
        column: 26,
        span: 23778..23779,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 868,
        column: 28,
        span: 23779..23781,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 868,
        column: 29,
        span: 23781..23782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 868,
        column: 35,
        span: 23783..23788,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 868,
        column: 37,
        span: 23789..23790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 868,
        column: 39,
        span: 23790..23792,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 868,
        column: 40,
        span: 23792..23793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 868,
        column: 44,
        span: 23794..23797,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 868,
        column: 46,
        span: 23798..23799,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 868,
        column: 48,
        span: 23799..23801,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 868,
        column: 49,
        span: 23801..23802,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 868,
        column: 51,
        span: 23801..23804,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 868,
        column: 52,
        span: 23804..23805,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 868,
        column: 53,
        span: 23805..23806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 870,
        column: 15,
        span: 23814..23822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 870,
        column: 16,
        span: 23822..23823,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'month' is out-of-bound\"",
        ),
        line: 870,
        column: 47,
        span: 23823..23854,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 870,
        column: 48,
        span: 23854..23855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 870,
        column: 51,
        span: 23856..23858,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 870,
        column: 52,
        span: 23858..23859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 870,
        column: 56,
        span: 23859..23863,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 870,
        column: 57,
        span: 23863..23864,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 871,
        column: 20,
        span: 23883..23884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 871,
        column: 24,
        span: 23884..23888,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 871,
        column: 26,
        span: 23889..23890,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 871,
        column: 28,
        span: 23890..23892,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 871,
        column: 29,
        span: 23892..23893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 871,
        column: 35,
        span: 23894..23899,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 871,
        column: 37,
        span: 23900..23901,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 871,
        column: 39,
        span: 23902..23903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 871,
        column: 40,
        span: 23903..23904,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 871,
        column: 41,
        span: 23904..23905,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 871,
        column: 42,
        span: 23904..23906,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 871,
        column: 45,
        span: 23907..23909,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 871,
        column: 48,
        span: 23909..23912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 871,
        column: 49,
        span: 23912..23913,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 871,
        column: 51,
        span: 23914..23915,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 871,
        column: 53,
        span: 23915..23917,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 871,
        column: 54,
        span: 23917..23918,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 871,
        column: 55,
        span: 23918..23919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 871,
        column: 59,
        span: 23920..23923,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 871,
        column: 61,
        span: 23924..23925,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 871,
        column: 63,
        span: 23925..23927,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 871,
        column: 64,
        span: 23927..23928,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 871,
        column: 65,
        span: 23928..23929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 873,
        column: 15,
        span: 23937..23945,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 873,
        column: 16,
        span: 23945..23946,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'year' is out-of-bound\"",
        ),
        line: 873,
        column: 46,
        span: 23946..23976,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 873,
        column: 47,
        span: 23976..23977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 873,
        column: 50,
        span: 23978..23980,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 873,
        column: 51,
        span: 23980..23981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 873,
        column: 55,
        span: 23981..23985,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 873,
        column: 56,
        span: 23985..23986,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 874,
        column: 20,
        span: 24005..24006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 874,
        column: 24,
        span: 24006..24010,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 874,
        column: 26,
        span: 24011..24012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 874,
        column: 28,
        span: 24013..24014,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 874,
        column: 29,
        span: 24013..24015,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 874,
        column: 32,
        span: 24016..24018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 874,
        column: 35,
        span: 24018..24021,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 874,
        column: 36,
        span: 24021..24022,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 874,
        column: 38,
        span: 24023..24024,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1900",
                    after_decimal: "",
                },
            ),
        ),
        line: 874,
        column: 43,
        span: 24024..24029,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 874,
        column: 44,
        span: 24029..24030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 874,
        column: 50,
        span: 24031..24036,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 874,
        column: 52,
        span: 24037..24038,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 874,
        column: 54,
        span: 24038..24040,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 874,
        column: 55,
        span: 24040..24041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 874,
        column: 59,
        span: 24042..24045,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 874,
        column: 61,
        span: 24046..24047,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 874,
        column: 63,
        span: 24047..24049,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 874,
        column: 64,
        span: 24049..24050,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 874,
        column: 65,
        span: 24050..24051,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 876,
        column: 9,
        span: 24057..24061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 878,
        column: 12,
        span: 24125..24130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 878,
        column: 13,
        span: 24130..24131,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  8-byte time_t\"",
        ),
        line: 878,
        column: 30,
        span: 24131..24148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 878,
        column: 31,
        span: 24148..24149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 879,
        column: 13,
        span: 24156..24162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 879,
        column: 14,
        span: 24162..24163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 879,
        column: 22,
        span: 24163..24171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 879,
        column: 23,
        span: 24171..24172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 879,
        column: 25,
        span: 24172..24174,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 879,
        column: 26,
        span: 24174..24175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 879,
        column: 30,
        span: 24175..24179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 879,
        column: 31,
        span: 24179..24180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%Y\"",
        ),
        line: 879,
        column: 35,
        span: 24180..24184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 879,
        column: 36,
        span: 24184..24185,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 879,
        column: 38,
        span: 24185..24187,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 879,
        column: 39,
        span: 24187..24188,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 879,
        column: 41,
        span: 24187..24190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 879,
        column: 42,
        span: 24190..24191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 879,
        column: 43,
        span: 24191..24192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 879,
        column: 44,
        span: 24192..24193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 882,
        column: 15,
        span: 24249..24257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 882,
        column: 16,
        span: 24257..24258,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cannot be represented\"",
        ),
        line: 882,
        column: 39,
        span: 24258..24281,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 882,
        column: 40,
        span: 24281..24282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 882,
        column: 43,
        span: 24283..24285,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 882,
        column: 44,
        span: 24285..24286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 882,
        column: 48,
        span: 24286..24290,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 882,
        column: 49,
        span: 24290..24291,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 882,
        column: 51,
        span: 24292..24293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 882,
        column: 55,
        span: 24293..24297,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 882,
        column: 56,
        span: 24297..24298,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 882,
        column: 57,
        span: 24297..24299,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 882,
        column: 58,
        span: 24299..24300,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 882,
        column: 60,
        span: 24299..24302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 882,
        column: 61,
        span: 24302..24303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 882,
        column: 67,
        span: 24304..24309,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 882,
        column: 68,
        span: 24309..24310,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 882,
        column: 69,
        span: 24309..24311,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 882,
        column: 70,
        span: 24311..24312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 882,
        column: 74,
        span: 24313..24316,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 882,
        column: 75,
        span: 24316..24317,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 882,
        column: 76,
        span: 24316..24318,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 882,
        column: 77,
        span: 24318..24319,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 882,
        column: 78,
        span: 24319..24320,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 883,
        column: 0,
        span: 24325..24328,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 884,
        column: 0,
        span: 24331..24334,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 885,
        column: 0,
        span: 24335..24338,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 887,
        column: 0,
        span: 24340..24342,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 888,
        column: 8,
        span: 24345..24350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 888,
        column: 10,
        span: 24351..24352,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 888,
        column: 12,
        span: 24353..24354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 888,
        column: 15,
        span: 24355..24357,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 888,
        column: 16,
        span: 24357..24358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 888,
        column: 20,
        span: 24358..24362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 888,
        column: 21,
        span: 24362..24363,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*t\"",
        ),
        line: 888,
        column: 25,
        span: 24363..24367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 888,
        column: 26,
        span: 24367..24368,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 889,
        column: 8,
        span: 24371..24376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 889,
        column: 10,
        span: 24377..24378,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 889,
        column: 12,
        span: 24379..24380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 889,
        column: 15,
        span: 24381..24383,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 889,
        column: 16,
        span: 24383..24384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 889,
        column: 20,
        span: 24384..24388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 889,
        column: 21,
        span: 24388..24389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 889,
        column: 22,
        span: 24389..24390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 889,
        column: 23,
        span: 24390..24391,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 890,
        column: 5,
        span: 24394..24396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 890,
        column: 7,
        span: 24397..24398,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 890,
        column: 8,
        span: 24398..24399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isdst",
        ),
        line: 890,
        column: 13,
        span: 24399..24404,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 890,
        column: 16,
        span: 24405..24407,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 890,
        column: 20,
        span: 24408..24411,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 890,
        column: 0,
        span: 24412..24416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 891,
        column: 10,
        span: 24421..24426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 891,
        column: 11,
        span: 24426..24427,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no daylight saving information\"",
        ),
        line: 891,
        column: 43,
        span: 24427..24459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 891,
        column: 44,
        span: 24459..24460,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 892,
        column: 0,
        span: 24463..24467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 893,
        column: 11,
        span: 24472..24478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 893,
        column: 12,
        span: 24478..24479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 893,
        column: 16,
        span: 24479..24483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 893,
        column: 17,
        span: 24483..24484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 893,
        column: 18,
        span: 24484..24485,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 893,
        column: 19,
        span: 24485..24486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isdst",
        ),
        line: 893,
        column: 24,
        span: 24486..24491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 893,
        column: 25,
        span: 24491..24492,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 893,
        column: 28,
        span: 24493..24495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'boolean'",
        ),
        line: 893,
        column: 38,
        span: 24496..24505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 893,
        column: 39,
        span: 24505..24506,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 894,
        column: 0,
        span: 24509..24512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 895,
        column: 4,
        span: 24515..24516,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 895,
        column: 5,
        span: 24516..24517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isdst",
        ),
        line: 895,
        column: 10,
        span: 24517..24522,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 895,
        column: 12,
        span: 24523..24524,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 895,
        column: 0,
        span: 24525..24528,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 896,
        column: 8,
        span: 24531..24536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 896,
        column: 11,
        span: 24537..24539,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 896,
        column: 13,
        span: 24540..24541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 896,
        column: 16,
        span: 24542..24544,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 896,
        column: 17,
        span: 24544..24545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 896,
        column: 21,
        span: 24545..24549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 896,
        column: 22,
        span: 24549..24550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 896,
        column: 23,
        span: 24550..24551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 896,
        column: 24,
        span: 24551..24552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 897,
        column: 9,
        span: 24555..24561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 897,
        column: 10,
        span: 24561..24562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 897,
        column: 11,
        span: 24562..24563,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 897,
        column: 14,
        span: 24564..24566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 897,
        column: 17,
        span: 24567..24569,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 897,
        column: 18,
        span: 24569..24570,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 898,
        column: 0,
        span: 24616..24619,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 900,
        column: 6,
        span: 24621..24626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 900,
        column: 8,
        span: 24627..24628,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 900,
        column: 10,
        span: 24629..24630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 900,
        column: 13,
        span: 24631..24633,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 900,
        column: 14,
        span: 24633..24634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 900,
        column: 18,
        span: 24634..24638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 900,
        column: 19,
        span: 24638..24639,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*t\"",
        ),
        line: 900,
        column: 23,
        span: 24639..24643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 900,
        column: 24,
        span: 24643..24644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 901,
        column: 2,
        span: 24645..24646,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 901,
        column: 4,
        span: 24647..24648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 901,
        column: 7,
        span: 24649..24651,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 901,
        column: 8,
        span: 24651..24652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 901,
        column: 12,
        span: 24652..24656,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 901,
        column: 13,
        span: 24656..24657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 901,
        column: 14,
        span: 24657..24658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 901,
        column: 15,
        span: 24658..24659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 902,
        column: 2,
        span: 24660..24661,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 902,
        column: 3,
        span: 24661..24662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 902,
        column: 7,
        span: 24662..24666,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 902,
        column: 9,
        span: 24667..24668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 902,
        column: 11,
        span: 24669..24670,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 902,
        column: 12,
        span: 24670..24671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 902,
        column: 16,
        span: 24671..24675,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 902,
        column: 17,
        span: 24675..24676,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 902,
        column: 18,
        span: 24675..24677,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 902,
        column: 19,
        span: 24677..24678,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 903,
        column: 6,
        span: 24679..24684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 903,
        column: 9,
        span: 24685..24687,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 903,
        column: 11,
        span: 24688..24689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 903,
        column: 14,
        span: 24690..24692,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 903,
        column: 15,
        span: 24692..24693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 903,
        column: 19,
        span: 24693..24697,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 903,
        column: 20,
        span: 24697..24698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 903,
        column: 21,
        span: 24698..24699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 903,
        column: 22,
        span: 24699..24700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 905,
        column: 7,
        span: 24725..24731,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 905,
        column: 8,
        span: 24731..24732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 905,
        column: 12,
        span: 24732..24736,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 905,
        column: 13,
        span: 24736..24737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 905,
        column: 16,
        span: 24737..24740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 905,
        column: 17,
        span: 24740..24741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 905,
        column: 19,
        span: 24741..24743,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 905,
        column: 20,
        span: 24743..24744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        line: 905,
        column: 28,
        span: 24744..24752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 905,
        column: 29,
        span: 24752..24753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 905,
        column: 30,
        span: 24753..24754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 905,
        column: 31,
        span: 24754..24755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 905,
        column: 33,
        span: 24755..24757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 905,
        column: 34,
        span: 24757..24758,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 905,
        column: 35,
        span: 24758..24759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 905,
        column: 36,
        span: 24759..24760,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 905,
        column: 38,
        span: 24759..24762,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 905,
        column: 39,
        span: 24762..24763,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3600",
                    after_decimal: "",
                },
            ),
        ),
        line: 905,
        column: 43,
        span: 24762..24767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 905,
        column: 44,
        span: 24767..24768,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 905,
        column: 46,
        span: 24769..24770,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "365",
                    after_decimal: "",
                },
            ),
        ),
        line: 905,
        column: 50,
        span: 24770..24774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 905,
        column: 51,
        span: 24774..24775,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 905,
        column: 53,
        span: 24776..24777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 905,
        column: 55,
        span: 24777..24779,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 905,
        column: 56,
        span: 24779..24780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 908,
        column: 2,
        span: 24847..24848,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 908,
        column: 4,
        span: 24849..24850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 908,
        column: 7,
        span: 24851..24853,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 908,
        column: 8,
        span: 24853..24854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 908,
        column: 12,
        span: 24854..24858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 908,
        column: 13,
        span: 24858..24859,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 908,
        column: 14,
        span: 24859..24860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 909,
        column: 3,
        span: 24861..24863,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 909,
        column: 5,
        span: 24864..24865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 909,
        column: 8,
        span: 24866..24868,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 909,
        column: 9,
        span: 24868..24869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 909,
        column: 13,
        span: 24869..24873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 909,
        column: 14,
        span: 24873..24874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 909,
        column: 16,
        span: 24874..24876,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 909,
        column: 17,
        span: 24876..24877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 909,
        column: 21,
        span: 24877..24881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 909,
        column: 22,
        span: 24881..24882,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*t\"",
        ),
        line: 909,
        column: 26,
        span: 24882..24886,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 909,
        column: 27,
        span: 24886..24887,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 909,
        column: 28,
        span: 24887..24888,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 910,
        column: 6,
        span: 24889..24894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 910,
        column: 11,
        span: 24895..24899,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 910,
        column: 13,
        span: 24900..24901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 910,
        column: 16,
        span: 24902..24904,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 910,
        column: 17,
        span: 24904..24905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        line: 910,
        column: 25,
        span: 24905..24913,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 910,
        column: 26,
        span: 24913..24914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 910,
        column: 28,
        span: 24914..24916,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 910,
        column: 29,
        span: 24916..24917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 910,
        column: 30,
        span: 24917..24918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 910,
        column: 31,
        span: 24918..24919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 911,
        column: 7,
        span: 24920..24926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 911,
        column: 8,
        span: 24926..24927,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 911,
        column: 9,
        span: 24926..24928,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 911,
        column: 12,
        span: 24929..24931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 911,
        column: 17,
        span: 24932..24936,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 911,
        column: 21,
        span: 24937..24940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 911,
        column: 26,
        span: 24941..24945,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 911,
        column: 29,
        span: 24946..24948,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 911,
        column: 31,
        span: 24948..24950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 911,
        column: 32,
        span: 24950..24951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 912,
        column: 5,
        span: 24952..24956,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 912,
        column: 7,
        span: 24957..24958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 912,
        column: 10,
        span: 24959..24961,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 912,
        column: 11,
        span: 24961..24962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        line: 912,
        column: 19,
        span: 24962..24970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 912,
        column: 20,
        span: 24970..24971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 912,
        column: 21,
        span: 24971..24972,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 912,
        column: 22,
        span: 24972..24973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 912,
        column: 24,
        span: 24973..24975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 912,
        column: 25,
        span: 24975..24976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 913,
        column: 7,
        span: 24977..24983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 913,
        column: 8,
        span: 24983..24984,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 913,
        column: 9,
        span: 24984..24985,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 913,
        column: 10,
        span: 24984..24986,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 913,
        column: 13,
        span: 24987..24989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 913,
        column: 18,
        span: 24990..24994,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 913,
        column: 22,
        span: 24995..24998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 913,
        column: 27,
        span: 24999..25003,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 913,
        column: 30,
        span: 25004..25006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 913,
        column: 32,
        span: 25006..25008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 913,
        column: 33,
        span: 25008..25009,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 915,
        column: 6,
        span: 25011..25016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 915,
        column: 9,
        span: 25017..25019,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 915,
        column: 11,
        span: 25020..25021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 915,
        column: 14,
        span: 25022..25024,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 915,
        column: 15,
        span: 25024..25025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 915,
        column: 19,
        span: 25025..25029,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 915,
        column: 20,
        span: 25029..25030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 915,
        column: 24,
        span: 25030..25034,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 915,
        column: 25,
        span: 25034..25035,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 915,
        column: 29,
        span: 25034..25039,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 915,
        column: 30,
        span: 25039..25040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 915,
        column: 36,
        span: 25041..25046,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 915,
        column: 37,
        span: 25046..25047,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 915,
        column: 39,
        span: 25046..25049,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 915,
        column: 40,
        span: 25049..25050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 915,
        column: 44,
        span: 25051..25054,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 915,
        column: 45,
        span: 25054..25055,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 915,
        column: 46,
        span: 25054..25056,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 915,
        column: 47,
        span: 25056..25057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        line: 915,
        column: 52,
        span: 25058..25062,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 915,
        column: 53,
        span: 25062..25063,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 915,
        column: 55,
        span: 25062..25065,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 915,
        column: 56,
        span: 25065..25066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 915,
        column: 60,
        span: 25067..25070,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 915,
        column: 61,
        span: 25070..25071,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 915,
        column: 63,
        span: 25070..25073,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 915,
        column: 64,
        span: 25073..25074,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 916,
        column: 6,
        span: 25075..25080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 916,
        column: 9,
        span: 25081..25083,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 916,
        column: 11,
        span: 25084..25085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 916,
        column: 14,
        span: 25086..25088,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 916,
        column: 15,
        span: 25088..25089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 916,
        column: 19,
        span: 25089..25093,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 916,
        column: 20,
        span: 25093..25094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 916,
        column: 24,
        span: 25094..25098,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 916,
        column: 25,
        span: 25098..25099,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 916,
        column: 29,
        span: 25098..25103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 916,
        column: 30,
        span: 25103..25104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 916,
        column: 36,
        span: 25105..25110,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 916,
        column: 37,
        span: 25110..25111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 916,
        column: 39,
        span: 25110..25113,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 916,
        column: 40,
        span: 25113..25114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 916,
        column: 44,
        span: 25115..25118,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 916,
        column: 45,
        span: 25118..25119,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 916,
        column: 46,
        span: 25118..25120,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 916,
        column: 47,
        span: 25120..25121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        line: 916,
        column: 52,
        span: 25122..25126,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 916,
        column: 53,
        span: 25126..25127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 916,
        column: 55,
        span: 25126..25129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 916,
        column: 56,
        span: 25129..25130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 916,
        column: 60,
        span: 25131..25134,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 916,
        column: 61,
        span: 25134..25135,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 916,
        column: 63,
        span: 25134..25137,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 916,
        column: 64,
        span: 25137..25138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sec",
        ),
        line: 916,
        column: 68,
        span: 25139..25142,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 916,
        column: 69,
        span: 25142..25143,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 916,
        column: 71,
        span: 25142..25145,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 916,
        column: 72,
        span: 25145..25146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 917,
        column: 7,
        span: 25147..25153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 917,
        column: 8,
        span: 25153..25154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 917,
        column: 10,
        span: 25154..25156,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 917,
        column: 11,
        span: 25156..25157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        line: 917,
        column: 19,
        span: 25157..25165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 917,
        column: 20,
        span: 25165..25166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 917,
        column: 22,
        span: 25166..25168,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 917,
        column: 23,
        span: 25168..25169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 917,
        column: 25,
        span: 25169..25171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 917,
        column: 26,
        span: 25171..25172,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 917,
        column: 29,
        span: 25173..25175,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 917,
        column: 32,
        span: 25175..25178,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 917,
        column: 33,
        span: 25178..25179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 917,
        column: 34,
        span: 25178..25180,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 917,
        column: 35,
        span: 25180..25181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 917,
        column: 37,
        span: 25180..25183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 917,
        column: 38,
        span: 25183..25184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 920,
        column: 3,
        span: 25236..25238,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 920,
        column: 5,
        span: 25239..25240,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 920,
        column: 7,
        span: 25241..25242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 920,
        column: 11,
        span: 25242..25246,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 920,
        column: 13,
        span: 25247..25248,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2005",
                    after_decimal: "",
                },
            ),
        ),
        line: 920,
        column: 18,
        span: 25248..25253,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 920,
        column: 19,
        span: 25253..25254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 920,
        column: 25,
        span: 25255..25260,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 920,
        column: 27,
        span: 25261..25262,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 920,
        column: 29,
        span: 25262..25264,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 920,
        column: 30,
        span: 25264..25265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 920,
        column: 34,
        span: 25266..25269,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 920,
        column: 36,
        span: 25270..25271,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 920,
        column: 38,
        span: 25271..25273,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 920,
        column: 39,
        span: 25273..25274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        line: 920,
        column: 44,
        span: 25275..25279,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 920,
        column: 46,
        span: 25280..25281,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 920,
        column: 48,
        span: 25281..25283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 920,
        column: 49,
        span: 25283..25284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 920,
        column: 53,
        span: 25285..25288,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 920,
        column: 55,
        span: 25289..25290,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 920,
        column: 57,
        span: 25290..25292,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 920,
        column: 58,
        span: 25292..25293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sec",
        ),
        line: 920,
        column: 62,
        span: 25294..25297,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 920,
        column: 64,
        span: 25298..25299,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 920,
        column: 66,
        span: 25300..25301,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3602",
                    after_decimal: "",
                },
            ),
        ),
        line: 920,
        column: 70,
        span: 25300..25305,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 920,
        column: 71,
        span: 25305..25306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 921,
        column: 3,
        span: 25307..25309,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 921,
        column: 4,
        span: 25309..25310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 921,
        column: 8,
        span: 25310..25314,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 921,
        column: 9,
        span: 25314..25315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 921,
        column: 11,
        span: 25315..25317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 921,
        column: 12,
        span: 25317..25318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 922,
        column: 7,
        span: 25319..25325,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 922,
        column: 8,
        span: 25325..25326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 922,
        column: 10,
        span: 25326..25328,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 922,
        column: 11,
        span: 25328..25329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 922,
        column: 14,
        span: 25329..25332,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 922,
        column: 17,
        span: 25333..25335,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 922,
        column: 20,
        span: 25335..25338,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 922,
        column: 24,
        span: 25339..25342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 922,
        column: 27,
        span: 25343..25345,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 922,
        column: 28,
        span: 25345..25346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 922,
        column: 33,
        span: 25346..25351,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 922,
        column: 36,
        span: 25352..25354,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 922,
        column: 39,
        span: 25354..25357,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 922,
        column: 43,
        span: 25358..25361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 922,
        column: 46,
        span: 25362..25364,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 922,
        column: 47,
        span: 25364..25365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 922,
        column: 51,
        span: 25365..25369,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 922,
        column: 54,
        span: 25370..25372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2004",
                    after_decimal: "",
                },
            ),
        ),
        line: 922,
        column: 59,
        span: 25372..25377,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 922,
        column: 0,
        span: 25378..25381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 923,
        column: 10,
        span: 25389..25391,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 923,
        column: 11,
        span: 25391..25392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        line: 923,
        column: 15,
        span: 25392..25396,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 923,
        column: 18,
        span: 25397..25399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 923,
        column: 21,
        span: 25399..25402,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 923,
        column: 25,
        span: 25403..25406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 923,
        column: 28,
        span: 25407..25409,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 923,
        column: 29,
        span: 25409..25410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 923,
        column: 32,
        span: 25410..25413,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 923,
        column: 35,
        span: 25414..25416,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "59",
                    after_decimal: "",
                },
            ),
        ),
        line: 923,
        column: 38,
        span: 25416..25419,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 923,
        column: 42,
        span: 25420..25423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 923,
        column: 45,
        span: 25424..25426,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 923,
        column: 46,
        span: 25426..25427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sec",
        ),
        line: 923,
        column: 49,
        span: 25427..25430,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 923,
        column: 52,
        span: 25431..25433,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "58",
                    after_decimal: "",
                },
            ),
        ),
        line: 923,
        column: 55,
        span: 25433..25436,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 923,
        column: 0,
        span: 25437..25440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 924,
        column: 10,
        span: 25448..25450,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 924,
        column: 11,
        span: 25450..25451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yday",
        ),
        line: 924,
        column: 15,
        span: 25451..25455,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 924,
        column: 18,
        span: 25456..25458,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "366",
                    after_decimal: "",
                },
            ),
        ),
        line: 924,
        column: 22,
        span: 25458..25462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 924,
        column: 23,
        span: 25462..25463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 926,
        column: 3,
        span: 25465..25467,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 926,
        column: 4,
        span: 25467..25468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 926,
        column: 10,
        span: 25468..25474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 926,
        column: 11,
        span: 25474..25475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 926,
        column: 13,
        span: 25475..25477,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 926,
        column: 14,
        span: 25477..25478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 926,
        column: 20,
        span: 25478..25484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 926,
        column: 21,
        span: 25484..25485,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 927,
        column: 6,
        span: 25486..25491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 927,
        column: 8,
        span: 25492..25493,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 927,
        column: 10,
        span: 25494..25495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 927,
        column: 13,
        span: 25496..25498,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 927,
        column: 14,
        span: 25498..25499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 927,
        column: 18,
        span: 25499..25503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 927,
        column: 19,
        span: 25503..25504,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%d %m %Y %H %M %S'",
        ),
        line: 927,
        column: 38,
        span: 25504..25523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 927,
        column: 39,
        span: 25523..25524,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 928,
        column: 6,
        span: 25525..25530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 928,
        column: 8,
        span: 25531..25532,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
        column: 9,
        span: 25532..25533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 928,
        column: 11,
        span: 25534..25535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
        column: 12,
        span: 25535..25536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 928,
        column: 14,
        span: 25537..25538,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
        column: 15,
        span: 25538..25539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 928,
        column: 17,
        span: 25540..25541,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
        column: 18,
        span: 25541..25542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 928,
        column: 22,
        span: 25543..25546,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
        column: 23,
        span: 25546..25547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 928,
        column: 25,
        span: 25548..25549,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 928,
        column: 27,
        span: 25550..25551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 928,
        column: 34,
        span: 25552..25558,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 928,
        column: 35,
        span: 25558..25559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 928,
        column: 40,
        span: 25559..25564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 928,
        column: 41,
        span: 25564..25565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 928,
        column: 42,
        span: 25565..25566,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 928,
        column: 43,
        span: 25566..25567,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%d+) (%d+) (%d+) (%d+) (%d+) (%d+)\"",
        ),
        line: 929,
        column: 67,
        span: 25597..25634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 929,
        column: 68,
        span: 25634..25635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 930,
        column: 2,
        span: 25636..25637,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 930,
        column: 4,
        span: 25638..25639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 930,
        column: 13,
        span: 25640..25648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 930,
        column: 14,
        span: 25648..25649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 930,
        column: 15,
        span: 25649..25650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 930,
        column: 16,
        span: 25650..25651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 931,
        column: 2,
        span: 25652..25653,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 931,
        column: 4,
        span: 25654..25655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 931,
        column: 13,
        span: 25656..25664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 931,
        column: 14,
        span: 25664..25665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 931,
        column: 15,
        span: 25665..25666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 931,
        column: 16,
        span: 25666..25667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 932,
        column: 2,
        span: 25668..25669,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 932,
        column: 4,
        span: 25670..25671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 932,
        column: 13,
        span: 25672..25680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 932,
        column: 14,
        span: 25680..25681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 932,
        column: 15,
        span: 25681..25682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 932,
        column: 16,
        span: 25682..25683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 933,
        column: 2,
        span: 25684..25685,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 933,
        column: 4,
        span: 25686..25687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 933,
        column: 13,
        span: 25688..25696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 933,
        column: 14,
        span: 25696..25697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 933,
        column: 15,
        span: 25697..25698,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 933,
        column: 16,
        span: 25698..25699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 934,
        column: 4,
        span: 25700..25703,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 934,
        column: 6,
        span: 25704..25705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 934,
        column: 15,
        span: 25706..25714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 934,
        column: 16,
        span: 25714..25715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 934,
        column: 19,
        span: 25715..25718,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 934,
        column: 20,
        span: 25718..25719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 935,
        column: 2,
        span: 25720..25721,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 935,
        column: 4,
        span: 25722..25723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 935,
        column: 13,
        span: 25724..25732,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 935,
        column: 14,
        span: 25732..25733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 935,
        column: 15,
        span: 25733..25734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 935,
        column: 16,
        span: 25734..25735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 936,
        column: 3,
        span: 25736..25738,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 936,
        column: 4,
        span: 25738..25739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 936,
        column: 9,
        span: 25739..25744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 936,
        column: 10,
        span: 25744..25745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 936,
        column: 16,
        span: 25745..25751,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 936,
        column: 17,
        span: 25751..25752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 936,
        column: 23,
        span: 25752..25758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 936,
        column: 24,
        span: 25758..25759,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'test done on %2.2d/%2.2d/%d'",
        ),
        line: 936,
        column: 53,
        span: 25759..25788,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 936,
        column: 54,
        span: 25788..25789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 936,
        column: 56,
        span: 25790..25791,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 936,
        column: 57,
        span: 25791..25792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 936,
        column: 59,
        span: 25793..25794,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 936,
        column: 60,
        span: 25794..25795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 936,
        column: 62,
        span: 25796..25797,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 936,
        column: 63,
        span: 25797..25798,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 936,
        column: 64,
        span: 25798..25799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 937,
        column: 3,
        span: 25800..25802,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 937,
        column: 4,
        span: 25802..25803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 937,
        column: 9,
        span: 25803..25808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 937,
        column: 10,
        span: 25808..25809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 937,
        column: 16,
        span: 25809..25815,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 937,
        column: 17,
        span: 25815..25816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 937,
        column: 23,
        span: 25816..25822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 937,
        column: 24,
        span: 25822..25823,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "', at %2.2d:%2.2d:%2.2d\\n'",
        ),
        line: 937,
        column: 50,
        span: 25823..25849,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 937,
        column: 51,
        span: 25849..25850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 937,
        column: 53,
        span: 25851..25852,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 937,
        column: 54,
        span: 25852..25853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 937,
        column: 58,
        span: 25854..25857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 937,
        column: 59,
        span: 25857..25858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 937,
        column: 61,
        span: 25859..25860,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 937,
        column: 62,
        span: 25860..25861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 937,
        column: 63,
        span: 25861..25862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 938,
        column: 3,
        span: 25863..25865,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 938,
        column: 4,
        span: 25865..25866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 938,
        column: 9,
        span: 25866..25871,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 938,
        column: 10,
        span: 25871..25872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 938,
        column: 16,
        span: 25872..25878,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 938,
        column: 17,
        span: 25878..25879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 938,
        column: 23,
        span: 25879..25885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 938,
        column: 24,
        span: 25885..25886,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%s\\n'",
        ),
        line: 938,
        column: 30,
        span: 25886..25892,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 938,
        column: 31,
        span: 25892..25893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_VERSION",
        ),
        line: 938,
        column: 40,
        span: 25894..25902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 938,
        column: 41,
        span: 25902..25903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 938,
        column: 42,
        span: 25903..25904,
    },
]
