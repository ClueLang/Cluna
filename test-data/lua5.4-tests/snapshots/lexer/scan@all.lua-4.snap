---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/all.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "version",
        ),
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua 5.4\"",
        ),
        line: 6,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_VERSION",
        ),
        line: 7,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "version",
        ),
        line: 7,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 8,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        line: 8,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 8,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"This test suite is for \"",
        ),
        line: 8,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "version",
        ),
        line: 8,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", not for \"",
        ),
        line: 9,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_VERSION",
        ),
        line: 9,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 9,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nExiting tests\"",
        ),
        line: 9,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 10,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 14,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ARG",
        ),
        line: 14,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 21,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_soft\"",
        ),
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 21,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 23,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 23,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_port\"",
        ),
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 23,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_nomsg",
        ),
        line: 25,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_nomsg\"",
        ),
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 25,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 25,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_U\"",
        ),
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        line: 30,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 32,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 32,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 33,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_nomsg",
        ),
        line: 34,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 34,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 38,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 38,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        line: 41,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 42,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 42,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 42,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 44,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"T\"",
        ),
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\tStarting Tests\"",
        ),
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 56,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random_x",
        ),
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random_y",
        ),
        line: 58,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 58,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 59,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"random seeds: %d, %d\"",
        ),
        line: 59,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random_x",
        ),
        line: 59,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random_y",
        ),
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"current path:\\n****\"",
        ),
        line: 62,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 62,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 62,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 62,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"****\\n\"",
        ),
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "initclock",
        ),
        line: 65,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 65,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastclock",
        ),
        line: 66,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "initclock",
        ),
        line: 66,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "walltime",
        ),
        line: 67,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 67,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 69,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 69,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 71,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 74,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 74,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 74,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 76,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_nomsg",
        ),
        line: 76,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 78,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 78,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 78,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 78,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 78,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 78,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 79,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 82,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 82,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 84,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 85,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 85,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 85,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 85,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 85,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 85,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 85,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 85,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 85,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 85,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 85,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 85,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 88,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 89,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "round",
        ),
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 90,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 90,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 90,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".04999",
                },
            ),
        ),
        line: 90,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.1f\"",
        ),
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 92,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 93,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 93,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 93,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 93,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 93,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 95,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 95,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 95,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 96,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 96,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "round",
        ),
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 96,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"K\"",
        ),
        line: 96,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 97,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "round",
        ),
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 98,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 98,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"M\"",
        ),
        line: 98,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 99,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 100,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 101,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Cstacklevel",
        ),
        line: 103,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 105,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 106,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 106,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 106,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 107,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 108,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 109,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 109,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1024",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 110,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 110,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 110,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"    ---- total memory: %s, max memory: %s ----\\n\"",
        ),
        line: 111,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Cstacklevel",
        ),
        line: 114,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 114,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 114,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 116,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 116,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 117,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmemory",
        ),
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        line: 118,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numblocks",
        ),
        line: 118,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxmem",
        ),
        line: 118,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 118,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 119,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n    ---- total memory: %s (%.0fK), max use: %s,  blocks: %d\\n\"",
        ),
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxmem",
        ),
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numblocks",
        ),
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\t(strings:  %d, tables: %d, functions: %d, \"",
        ),
        line: 123,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\tudata: %d, threads: %d)\"",
        ),
        line: 124,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 125,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 125,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 125,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 125,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 125,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 125,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 126,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 126,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        line: 126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 126,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 126,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Cstacklevel",
        ),
        line: 129,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ncalls",
        ),
        line: 130,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 130,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacklevel",
        ),
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ncalls",
        ),
        line: 131,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 132,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 133,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Cstack",
        ),
        line: 136,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Cstacklevel",
        ),
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 141,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n***** FILE '\"",
        ),
        line: 141,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 141,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'*****\"",
        ),
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 141,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "olddofile",
        ),
        line: 142,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 142,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 143,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 143,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strip",
        ),
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 145,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 145,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 146,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"time: %g (+%g)\"",
        ),
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 146,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "initclock",
        ),
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 146,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastclock",
        ),
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastclock",
        ),
        line: 147,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 149,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 150,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 150,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 150,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strip",
        ),
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 151,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'main.lua'",
        ),
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 158,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tracegc\"",
        ),
        line: 158,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        line: 160,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gc.lua\"",
        ),
        line: 160,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 161,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'gc.lua'",
        ),
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'db.lua'",
        ),
        line: 164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'calls.lua'",
        ),
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 165,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "olddofile",
        ),
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'strings.lua'",
        ),
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "olddofile",
        ),
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'literals.lua'",
        ),
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'tpack.lua'",
        ),
        line: 168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'attrib.lua'",
        ),
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "27",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'gengc.lua'",
        ),
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'locals.lua'",
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'constructs.lua'",
        ),
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'code.lua'",
        ),
        line: 173,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 174,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 174,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 174,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'big.lua'",
        ),
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 176,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 176,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'big.lua'",
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 177,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 178,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cstack.lua'",
        ),
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nextvar.lua'",
        ),
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 182,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'pm.lua'",
        ),
        line: 182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'utf8.lua'",
        ),
        line: 183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'api.lua'",
        ),
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'events.lua'",
        ),
        line: 185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 185,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'vararg.lua'",
        ),
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'closure.lua'",
        ),
        line: 187,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'coroutine.lua'",
        ),
        line: 188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'goto.lua'",
        ),
        line: 189,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'errors.lua'",
        ),
        line: 190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'math.lua'",
        ),
        line: 191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'sort.lua'",
        ),
        line: 192,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'bitwise.lua'",
        ),
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'verybig.lua'",
        ),
        line: 194,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 194,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'files.lua'",
        ),
        line: 195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 197,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 197,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 197,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 197,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 197,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 198,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 198,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 198,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n  \"",
        ),
        line: 198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#tests not performed:\\n  \"",
        ),
        line: 199,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 199,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 199,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(there should be two warnings now)\"",
        ),
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@on\"",
        ),
        line: 203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#This is \"",
        ),
        line: 204,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"an expected\"",
        ),
        line: 204,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" warning\"",
        ),
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@off\"",
        ),
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"******** THIS WARNING SHOULD NOT APPEAR **********\"",
        ),
        line: 206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"******** THIS WARNING ALSO SHOULD NOT APPEAR **********\"",
        ),
        line: 207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@on\"",
        ),
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#This is\"",
        ),
        line: 209,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" another one\"",
        ),
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 212,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 212,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 214,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 214,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 216,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d-bit integers, %d-bit floats\"",
        ),
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 217,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        line: 217,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"j\"",
        ),
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 217,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        line: 217,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 219,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 219,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 219,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cr\"",
        ),
        line: 219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 222,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 222,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Cstack",
        ),
        line: 225,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Cstacklevel",
        ),
        line: 225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 225,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should be at the same C-stack level it was when started the tests\"",
        ),
        line: 226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 228,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        line: 230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 231,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 231,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 231,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 232,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 232,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 232,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 232,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        line: 232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 233,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 233,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        line: 236,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 236,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 236,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"time-debug.txt\"",
        ),
        line: 236,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 236,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"time.txt\"",
        ),
        line: 236,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        line: 237,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 239,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        line: 239,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 239,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 241,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 241,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        line: 241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 242,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        line: 243,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 243,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 243,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 244,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 244,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 244,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        line: 246,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 246,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 246,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 247,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cleaning all!!!!'",
        ),
        line: 251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 252,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 252,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 253,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "___Glob",
        ),
        line: 253,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 253,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 253,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 253,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 254,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 254,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 254,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 254,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 255,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clocktime",
        ),
        line: 266,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "initclock",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "walltime",
        ),
        line: 267,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "walltime",
        ),
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\ntotal time: %.2fs (wall time: %gs)\\n\"",
        ),
        line: 269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clocktime",
        ),
        line: 269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "walltime",
        ),
        line: 269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 271,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        line: 271,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        line: 272,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        line: 272,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clocktime",
        ),
        line: 272,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 274,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clocktime",
        ),
        line: 274,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        line: 274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        line: 274,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tolerance",
        ),
        line: 275,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 275,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".05",
                },
            ),
        ),
        line: 275,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 276,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tolerance",
        ),
        line: 276,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 276,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 276,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tolerance",
        ),
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#time difference from previous test: %+.1f%%\"",
        ),
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 278,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 278,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        line: 280,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 280,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clocktime",
        ),
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final OK !!!\"",
        ),
        line: 283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
    },
]
