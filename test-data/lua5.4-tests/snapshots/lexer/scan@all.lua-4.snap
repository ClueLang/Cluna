---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/all.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 84..89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "version",
        ),
        line: 6,
        column: 14,
        span: 90..97,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 16,
        span: 98..99,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua 5.4\"",
        ),
        line: 6,
        column: 26,
        span: 100..109,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 7,
        column: 3,
        span: 110..112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_VERSION",
        ),
        line: 7,
        column: 12,
        span: 113..121,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 7,
        column: 15,
        span: 122..124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "version",
        ),
        line: 7,
        column: 23,
        span: 125..132,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 7,
        column: 0,
        span: 133..137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 8,
        column: 5,
        span: 140..142,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 8,
        column: 6,
        span: 142..143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        line: 8,
        column: 12,
        span: 143..149,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 8,
        column: 13,
        span: 149..150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 8,
        column: 18,
        span: 150..155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 19,
        span: 155..156,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"This test suite is for \"",
        ),
        line: 8,
        column: 44,
        span: 156..181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
        column: 45,
        span: 181..182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "version",
        ),
        line: 8,
        column: 53,
        span: 183..190,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
        column: 54,
        span: 190..191,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", not for \"",
        ),
        line: 9,
        column: 31,
        span: 210..222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 9,
        column: 32,
        span: 222..223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_VERSION",
        ),
        line: 9,
        column: 41,
        span: 224..232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 9,
        column: 42,
        span: 232..233,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nExiting tests\"",
        ),
        line: 9,
        column: 60,
        span: 234..251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 61,
        span: 251..252,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 10,
        column: 0,
        span: 255..261,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 11,
        column: 0,
        span: 262..265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 14,
        column: 3,
        span: 268..270,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 14,
        column: 4,
        span: 270..271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ARG",
        ),
        line: 14,
        column: 7,
        span: 271..274,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 9,
        span: 275..276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 14,
        column: 13,
        span: 277..280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 21,
        column: 6,
        span: 534..539,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 8,
        span: 540..541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 21,
        column: 15,
        span: 542..548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 16,
        span: 548..549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 21,
        column: 18,
        span: 549..551,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 19,
        span: 551..552,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_soft\"",
        ),
        line: 21,
        column: 27,
        span: 553..560,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 28,
        span: 560..561,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 21,
        column: 31,
        span: 562..564,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 21,
        column: 0,
        span: 565..570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 23,
        column: 6,
        span: 612..617,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 23,
        column: 8,
        span: 618..619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 23,
        column: 15,
        span: 620..626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 16,
        span: 626..627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 23,
        column: 18,
        span: 627..629,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
        column: 19,
        span: 629..630,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_port\"",
        ),
        line: 23,
        column: 27,
        span: 631..638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 28,
        span: 638..639,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 23,
        column: 31,
        span: 640..642,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 23,
        column: 0,
        span: 643..648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_nomsg",
        ),
        line: 25,
        column: 7,
        span: 706..712,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
        column: 9,
        span: 713..714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 25,
        column: 16,
        span: 715..721,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 17,
        span: 721..722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 25,
        column: 19,
        span: 722..724,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 20,
        span: 724..725,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_nomsg\"",
        ),
        line: 25,
        column: 29,
        span: 726..734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 30,
        span: 734..735,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 25,
        column: 33,
        span: 736..738,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 25,
        column: 0,
        span: 739..744,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 28,
        column: 6,
        span: 747..752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        line: 28,
        column: 16,
        span: 753..762,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 18,
        span: 763..764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 28,
        column: 25,
        span: 765..771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 26,
        span: 771..772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 28,
        column: 28,
        span: 772..774,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 29,
        span: 774..775,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_U\"",
        ),
        line: 28,
        column: 34,
        span: 776..780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 35,
        span: 780..781,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 30,
        column: 3,
        span: 783..785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        line: 30,
        column: 13,
        span: 786..795,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 30,
        column: 0,
        span: 796..800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 32,
        column: 8,
        span: 845..850,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 32,
        column: 10,
        span: 851..852,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 32,
        column: 0,
        span: 853..857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 33,
        column: 8,
        span: 860..865,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
        column: 10,
        span: 866..867,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 33,
        column: 0,
        span: 868..872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_nomsg",
        ),
        line: 34,
        column: 9,
        span: 875..881,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
        column: 11,
        span: 882..883,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 34,
        column: 0,
        span: 884..888,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 35,
        column: 0,
        span: 889..892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 38,
        column: 6,
        span: 936..941,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
        column: 8,
        span: 942..943,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 38,
        column: 0,
        span: 944..947,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 41,
        column: 3,
        span: 950..952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        line: 41,
        column: 13,
        span: 953..962,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 41,
        column: 0,
        span: 963..967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 42,
        column: 4,
        span: 970..971,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 42,
        column: 6,
        span: 972..973,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 42,
        column: 10,
        span: 974..977,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 43,
        column: 0,
        span: 1019..1023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 44,
        column: 4,
        span: 1026..1027,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 6,
        span: 1028..1029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 44,
        column: 13,
        span: 1030..1036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 14,
        span: 1036..1037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 44,
        column: 16,
        span: 1037..1039,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 17,
        span: 1039..1040,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"T\"",
        ),
        line: 44,
        column: 21,
        span: 1041..1044,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 22,
        span: 1044..1045,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 45,
        column: 0,
        span: 1086..1089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 54,
        column: 6,
        span: 1166..1171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 7,
        span: 1171..1172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\tStarting Tests\"",
        ),
        line: 54,
        column: 27,
        span: 1172..1192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 28,
        span: 1192..1193,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 56,
        column: 0,
        span: 1195..1197,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 58,
        column: 8,
        span: 1221..1226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random_x",
        ),
        line: 58,
        column: 17,
        span: 1227..1235,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 18,
        span: 1235..1236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random_y",
        ),
        line: 58,
        column: 27,
        span: 1237..1245,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 29,
        span: 1246..1247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 58,
        column: 34,
        span: 1248..1252,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
        column: 35,
        span: 1252..1253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 58,
        column: 45,
        span: 1253..1263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 46,
        span: 1263..1264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 47,
        span: 1264..1265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 59,
        column: 8,
        span: 1268..1273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 9,
        span: 1273..1274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 59,
        column: 15,
        span: 1274..1280,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 16,
        span: 1280..1281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 59,
        column: 22,
        span: 1281..1287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 23,
        span: 1287..1288,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"random seeds: %d, %d\"",
        ),
        line: 59,
        column: 45,
        span: 1288..1310,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 46,
        span: 1310..1311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random_x",
        ),
        line: 59,
        column: 55,
        span: 1312..1320,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 56,
        span: 1320..1321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random_y",
        ),
        line: 59,
        column: 65,
        span: 1322..1330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 66,
        span: 1330..1331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 67,
        span: 1331..1332,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 60,
        column: 0,
        span: 1333..1336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 62,
        column: 6,
        span: 1338..1343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 7,
        span: 1343..1344,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"current path:\\n****\"",
        ),
        line: 62,
        column: 28,
        span: 1344..1365,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 62,
        column: 31,
        span: 1366..1368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 62,
        column: 39,
        span: 1369..1376,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 62,
        column: 40,
        span: 1376..1377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 62,
        column: 44,
        span: 1377..1381,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 62,
        column: 47,
        span: 1382..1384,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"****\\n\"",
        ),
        line: 62,
        column: 56,
        span: 1385..1393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 57,
        span: 1393..1394,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 65,
        column: 6,
        span: 1397..1402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "initclock",
        ),
        line: 65,
        column: 16,
        span: 1403..1412,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 65,
        column: 18,
        span: 1413..1414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 65,
        column: 21,
        span: 1415..1417,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
        column: 22,
        span: 1417..1418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 65,
        column: 27,
        span: 1418..1423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 28,
        span: 1423..1424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 29,
        span: 1424..1425,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 66,
        column: 6,
        span: 1426..1431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastclock",
        ),
        line: 66,
        column: 16,
        span: 1432..1441,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
        column: 18,
        span: 1442..1443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "initclock",
        ),
        line: 66,
        column: 0,
        span: 1444..1453,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 67,
        column: 6,
        span: 1454..1459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "walltime",
        ),
        line: 67,
        column: 15,
        span: 1460..1468,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 17,
        span: 1469..1470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 67,
        column: 20,
        span: 1471..1473,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 21,
        span: 1473..1474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 67,
        column: 25,
        span: 1474..1478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 26,
        span: 1478..1479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 27,
        span: 1479..1480,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 69,
        column: 6,
        span: 1482..1487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 69,
        column: 21,
        span: 1488..1502,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 69,
        column: 23,
        span: 1503..1504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 69,
        column: 0,
        span: 1505..1519,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 71,
        column: 3,
        span: 1521..1523,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 74,
        column: 6,
        span: 1574..1579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 74,
        column: 11,
        span: 1580..1584,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 13,
        span: 1585..1586,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 74,
        column: 15,
        span: 1587..1588,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 74,
        column: 16,
        span: 1588..1589,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 75,
        column: 9,
        span: 1590..1598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 75,
        column: 17,
        span: 1599..1606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 19,
        span: 1607..1608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 75,
        column: 20,
        span: 1608..1609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 21,
        span: 1609..1610,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 76,
        column: 5,
        span: 1613..1615,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 76,
        column: 9,
        span: 1616..1619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_nomsg",
        ),
        line: 76,
        column: 16,
        span: 1620..1626,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 76,
        column: 0,
        span: 1627..1631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 77,
        column: 10,
        span: 1636..1641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 11,
        span: 1641..1642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 77,
        column: 12,
        span: 1642..1643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 13,
        span: 1643..1644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 78,
        column: 9,
        span: 1649..1653,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 78,
        column: 10,
        span: 1653..1654,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 78,
        column: 11,
        span: 1654..1655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 78,
        column: 15,
        span: 1655..1659,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 78,
        column: 16,
        span: 1659..1660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 17,
        span: 1659..1661,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 78,
        column: 18,
        span: 1661..1662,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 78,
        column: 20,
        span: 1663..1664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 78,
        column: 27,
        span: 1665..1671,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 78,
        column: 28,
        span: 1671..1672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 78,
        column: 31,
        span: 1672..1675,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 32,
        span: 1675..1676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 78,
        column: 33,
        span: 1676..1677,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 34,
        span: 1677..1678,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 36,
        span: 1678..1680,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 37,
        span: 1680..1681,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 78,
        column: 39,
        span: 1682..1683,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 40,
        span: 1682..1684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 41,
        span: 1684..1685,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 79,
        column: 0,
        span: 1688..1691,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 80,
        column: 0,
        span: 1692..1695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 82,
        column: 7,
        span: 1697..1703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 8,
        span: 1703..1704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 82,
        column: 10,
        span: 1704..1706,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 82,
        column: 11,
        span: 1706..1707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 82,
        column: 20,
        span: 1707..1716,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 82,
        column: 23,
        span: 1716..1719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 24,
        span: 1719..1720,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 84,
        column: 6,
        span: 1722..1727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 84,
        column: 8,
        span: 1728..1729,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 9,
        span: 1729..1730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 84,
        column: 14,
        span: 1730..1735,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 15,
        span: 1735..1736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 84,
        column: 21,
        span: 1736..1742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 22,
        span: 1742..1743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 84,
        column: 27,
        span: 1743..1748,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 28,
        span: 1748..1749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 84,
        column: 34,
        span: 1749..1755,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 35,
        span: 1755..1756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 84,
        column: 39,
        span: 1756..1760,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 40,
        span: 1760..1761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 84,
        column: 46,
        span: 1761..1767,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 47,
        span: 1767..1768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 84,
        column: 52,
        span: 1768..1773,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
        column: 54,
        span: 1774..1775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 85,
        column: 8,
        span: 1782..1783,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 9,
        span: 1783..1784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 85,
        column: 14,
        span: 1784..1789,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 15,
        span: 1789..1790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 85,
        column: 21,
        span: 1790..1796,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 85,
        column: 22,
        span: 1796..1797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 85,
        column: 28,
        span: 1797..1803,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 29,
        span: 1803..1804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 85,
        column: 31,
        span: 1804..1806,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 85,
        column: 32,
        span: 1806..1807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 85,
        column: 37,
        span: 1807..1812,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 38,
        span: 1812..1813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 85,
        column: 44,
        span: 1813..1819,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 45,
        span: 1819..1820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 85,
        column: 49,
        span: 1820..1824,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 50,
        span: 1824..1825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 85,
        column: 55,
        span: 1825..1830,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 85,
        column: 56,
        span: 1830..1831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 85,
        column: 62,
        span: 1831..1837,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 63,
        span: 1837..1838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 85,
        column: 67,
        span: 1838..1842,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 85,
        column: 68,
        span: 1842..1843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 85,
        column: 0,
        span: 1843..1848,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 88,
        column: 6,
        span: 1905..1910,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 88,
        column: 15,
        span: 1911..1919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 88,
        column: 17,
        span: 1920..1921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 19,
        span: 1922..1923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 88,
        column: 20,
        span: 1923..1924,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 21,
        span: 1924..1925,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 89,
        column: 8,
        span: 1928..1933,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 89,
        column: 17,
        span: 1934..1942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "round",
        ),
        line: 89,
        column: 23,
        span: 1943..1948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 25,
        span: 1949..1950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 89,
        column: 26,
        span: 1950..1951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 27,
        span: 1951..1952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 90,
        column: 6,
        span: 1957..1958,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 90,
        column: 8,
        span: 1959..1960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 90,
        column: 10,
        span: 1961..1962,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 90,
        column: 12,
        span: 1963..1964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".04999",
                },
            ),
        ),
        line: 90,
        column: 0,
        span: 1964..1972,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 91,
        column: 11,
        span: 1977..1983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 91,
        column: 18,
        span: 1984..1990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 19,
        span: 1990..1991,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.1f\"",
        ),
        line: 91,
        column: 25,
        span: 1991..1997,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 26,
        span: 1997..1998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 91,
        column: 28,
        span: 1999..2000,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 29,
        span: 2000..2001,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 92,
        column: 0,
        span: 2035..2038,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 93,
        column: 5,
        span: 2041..2043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 93,
        column: 7,
        span: 2044..2045,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 93,
        column: 9,
        span: 2046..2047,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 93,
        column: 14,
        span: 2047..2052,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 93,
        column: 19,
        span: 2053..2057,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 93,
        column: 26,
        span: 2058..2064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 93,
        column: 0,
        span: 2065..2066,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 94,
        column: 0,
        span: 2069..2073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 95,
        column: 6,
        span: 2078..2079,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
        column: 8,
        span: 2080..2081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 95,
        column: 10,
        span: 2082..2083,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 95,
        column: 12,
        span: 2084..2085,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 0,
        span: 2085..2090,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 96,
        column: 7,
        span: 2095..2097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 96,
        column: 9,
        span: 2098..2099,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 96,
        column: 11,
        span: 2100..2101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
        column: 16,
        span: 2101..2106,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 96,
        column: 21,
        span: 2107..2111,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 96,
        column: 28,
        span: 2112..2118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "round",
        ),
        line: 96,
        column: 34,
        span: 2119..2124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 35,
        span: 2124..2125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 96,
        column: 36,
        span: 2125..2126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 37,
        span: 2126..2127,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 96,
        column: 39,
        span: 2127..2129,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"K\"",
        ),
        line: 96,
        column: 42,
        span: 2129..2132,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 97,
        column: 0,
        span: 2137..2141,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 98,
        column: 13,
        span: 2148..2154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "round",
        ),
        line: 98,
        column: 19,
        span: 2155..2160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 20,
        span: 2160..2161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 98,
        column: 21,
        span: 2161..2162,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 98,
        column: 22,
        span: 2162..2163,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
        column: 26,
        span: 2162..2167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 27,
        span: 2167..2168,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 98,
        column: 29,
        span: 2168..2170,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"M\"",
        ),
        line: 98,
        column: 32,
        span: 2170..2173,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 99,
        column: 0,
        span: 2178..2181,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 100,
        column: 0,
        span: 2184..2187,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 101,
        column: 0,
        span: 2188..2191,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 103,
        column: 6,
        span: 2193..2198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Cstacklevel",
        ),
        line: 103,
        column: 0,
        span: 2199..2210,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 105,
        column: 6,
        span: 2212..2217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 105,
        column: 0,
        span: 2218..2225,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 106,
        column: 3,
        span: 2226..2228,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 106,
        column: 7,
        span: 2229..2232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 106,
        column: 9,
        span: 2233..2234,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 106,
        column: 0,
        span: 2235..2239,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 107,
        column: 8,
        span: 2242..2247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 107,
        column: 12,
        span: 2248..2251,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
        column: 14,
        span: 2252..2253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 0,
        span: 2253..2255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 108,
        column: 10,
        span: 2258..2265,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
        column: 12,
        span: 2266..2267,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 108,
        column: 21,
        span: 2268..2276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 23,
        span: 2277..2278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 24,
        span: 2278..2279,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 109,
        column: 10,
        span: 2284..2289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 109,
        column: 12,
        span: 2290..2291,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 109,
        column: 14,
        span: 2292..2293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 109,
        column: 29,
        span: 2294..2308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 30,
        span: 2308..2309,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 109,
        column: 37,
        span: 2309..2316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 38,
        span: 2316..2317,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 109,
        column: 40,
        span: 2318..2319,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1024",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 0,
        span: 2319..2324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 110,
        column: 8,
        span: 2329..2332,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
        column: 10,
        span: 2333..2334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 12,
        span: 2335..2336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 110,
        column: 13,
        span: 2336..2337,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 110,
        column: 15,
        span: 2338..2339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 110,
        column: 19,
        span: 2340..2343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 20,
        span: 2343..2344,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 110,
        column: 24,
        span: 2345..2348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 110,
        column: 26,
        span: 2349..2350,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 110,
        column: 29,
        span: 2351..2353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 110,
        column: 0,
        span: 2354..2357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 111,
        column: 10,
        span: 2362..2367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 11,
        span: 2367..2368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 111,
        column: 17,
        span: 2368..2374,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 18,
        span: 2374..2375,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"    ---- total memory: %s, max memory: %s ----\\n\"",
        ),
        line: 111,
        column: 68,
        span: 2375..2425,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 69,
        span: 2425..2426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 112,
        column: 12,
        span: 2437..2438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 13,
        span: 2438..2439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 112,
        column: 14,
        span: 2439..2440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 15,
        span: 2440..2441,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 16,
        span: 2441..2442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 112,
        column: 18,
        span: 2443..2444,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 19,
        span: 2444..2445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 112,
        column: 22,
        span: 2445..2448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 23,
        span: 2448..2449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 24,
        span: 2449..2450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 25,
        span: 2450..2451,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 113,
        column: 0,
        span: 2454..2457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Cstacklevel",
        ),
        line: 114,
        column: 14,
        span: 2460..2471,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 114,
        column: 16,
        span: 2472..2473,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 114,
        column: 25,
        span: 2474..2482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 27,
        span: 2483..2484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 28,
        span: 2484..2485,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 114,
        column: 35,
        span: 2486..2492,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 37,
        span: 2492..2494,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 114,
        column: 41,
        span: 2495..2498,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 115,
        column: 0,
        span: 2530..2534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 116,
        column: 10,
        span: 2537..2544,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 116,
        column: 12,
        span: 2545..2546,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 116,
        column: 21,
        span: 2547..2555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 23,
        span: 2556..2557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 24,
        span: 2557..2558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 117,
        column: 6,
        span: 2563..2564,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 117,
        column: 7,
        span: 2564..2565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmemory",
        ),
        line: 117,
        column: 18,
        span: 2565..2576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 19,
        span: 2576..2577,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 20,
        span: 2577..2578,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 118,
        column: 10,
        span: 2583..2588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        line: 118,
        column: 16,
        span: 2589..2594,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 17,
        span: 2594..2595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numblocks",
        ),
        line: 118,
        column: 27,
        span: 2596..2605,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 28,
        span: 2605..2606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxmem",
        ),
        line: 118,
        column: 35,
        span: 2607..2613,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 118,
        column: 37,
        span: 2614..2615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 118,
        column: 39,
        span: 2616..2617,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 118,
        column: 40,
        span: 2617..2618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 118,
        column: 48,
        span: 2618..2626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 49,
        span: 2626..2627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 50,
        span: 2627..2628,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 119,
        column: 10,
        span: 2633..2638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 119,
        column: 16,
        span: 2639..2644,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 119,
        column: 18,
        span: 2645..2646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 119,
        column: 33,
        span: 2647..2661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 34,
        span: 2661..2662,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        line: 119,
        column: 41,
        span: 2662..2669,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 42,
        span: 2669..2670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 120,
        column: 10,
        span: 2675..2680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 11,
        span: 2680..2681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 120,
        column: 17,
        span: 2681..2687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 18,
        span: 2687..2688,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n    ---- total memory: %s (%.0fK), max use: %s,  blocks: %d\\n\"",
        ),
        line: 121,
        column: 72,
        span: 2695..2760,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 73,
        span: 2760..2761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 122,
        column: 8,
        span: 2768..2769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 9,
        span: 2769..2770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        line: 122,
        column: 14,
        span: 2770..2775,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 15,
        span: 2775..2776,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 16,
        span: 2776..2777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 122,
        column: 22,
        span: 2778..2783,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 23,
        span: 2783..2784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        line: 122,
        column: 25,
        span: 2785..2786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 26,
        span: 2786..2787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxmem",
        ),
        line: 122,
        column: 32,
        span: 2787..2793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 33,
        span: 2793..2794,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 34,
        span: 2794..2795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numblocks",
        ),
        line: 122,
        column: 44,
        span: 2796..2805,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 45,
        span: 2805..2806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 46,
        span: 2806..2807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 123,
        column: 10,
        span: 2812..2817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 11,
        span: 2817..2818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 123,
        column: 17,
        span: 2818..2824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 18,
        span: 2824..2825,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\t(strings:  %d, tables: %d, functions: %d, \"",
        ),
        line: 123,
        column: 64,
        span: 2825..2871,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 123,
        column: 66,
        span: 2871..2873,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\tudata: %d, threads: %d)\"",
        ),
        line: 124,
        column: 47,
        span: 2891..2920,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 48,
        span: 2920..2921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 125,
        column: 19,
        span: 2939..2940,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 125,
        column: 20,
        span: 2940..2941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 125,
        column: 28,
        span: 2941..2949,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 125,
        column: 36,
        span: 2949..2957,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 37,
        span: 2957..2958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 125,
        column: 39,
        span: 2959..2960,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 125,
        column: 40,
        span: 2960..2961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 125,
        column: 48,
        span: 2961..2969,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 125,
        column: 55,
        span: 2969..2976,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 56,
        span: 2976..2977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 125,
        column: 58,
        span: 2978..2979,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 125,
        column: 59,
        span: 2979..2980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 125,
        column: 67,
        span: 2980..2988,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 125,
        column: 77,
        span: 2988..2998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 78,
        span: 2998..2999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 126,
        column: 19,
        span: 3017..3018,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 126,
        column: 20,
        span: 3018..3019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 126,
        column: 28,
        span: 3019..3027,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        line: 126,
        column: 38,
        span: 3027..3037,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 39,
        span: 3037..3038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 126,
        column: 41,
        span: 3039..3040,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 126,
        column: 42,
        span: 3040..3041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        line: 126,
        column: 50,
        span: 3041..3049,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        line: 126,
        column: 58,
        span: 3049..3057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 59,
        span: 3057..3058,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 60,
        span: 3058..3059,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 127,
        column: 0,
        span: 3062..3065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Cstacklevel",
        ),
        line: 129,
        column: 14,
        span: 3069..3080,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
        column: 16,
        span: 3081..3082,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 129,
        column: 25,
        span: 3083..3091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 27,
        span: 3092..3093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 28,
        span: 3093..3094,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 130,
        column: 10,
        span: 3099..3104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 130,
        column: 12,
        span: 3105..3106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 13,
        span: 3106..3107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 130,
        column: 15,
        span: 3108..3109,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 16,
        span: 3109..3110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ncalls",
        ),
        line: 130,
        column: 23,
        span: 3111..3117,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 130,
        column: 25,
        span: 3118..3119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 130,
        column: 27,
        span: 3120..3121,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 130,
        column: 28,
        span: 3121..3122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stacklevel",
        ),
        line: 130,
        column: 38,
        span: 3122..3132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 39,
        span: 3132..3133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 40,
        span: 3133..3134,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 131,
        column: 11,
        span: 3139..3145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ncalls",
        ),
        line: 131,
        column: 18,
        span: 3146..3152,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 132,
        column: 0,
        span: 3179..3182,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 133,
        column: 0,
        span: 3183..3186,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 136,
        column: 6,
        span: 3189..3194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Cstack",
        ),
        line: 136,
        column: 13,
        span: 3195..3201,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 136,
        column: 15,
        span: 3202..3203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Cstacklevel",
        ),
        line: 136,
        column: 27,
        span: 3204..3215,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 28,
        span: 3215..3216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 29,
        span: 3216..3217,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 141,
        column: 6,
        span: 3277..3282,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 141,
        column: 15,
        span: 3283..3291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        line: 141,
        column: 22,
        span: 3292..3298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 24,
        span: 3299..3300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 141,
        column: 25,
        span: 3300..3301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 26,
        span: 3301..3302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 141,
        column: 32,
        span: 3303..3308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 33,
        span: 3308..3309,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n***** FILE '\"",
        ),
        line: 141,
        column: 49,
        span: 3309..3325,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 141,
        column: 51,
        span: 3325..3327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 141,
        column: 52,
        span: 3327..3328,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 141,
        column: 54,
        span: 3328..3330,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'*****\"",
        ),
        line: 141,
        column: 62,
        span: 3330..3338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 63,
        span: 3338..3339,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 141,
        column: 0,
        span: 3340..3343,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 142,
        column: 6,
        span: 3344..3349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "olddofile",
        ),
        line: 142,
        column: 16,
        span: 3350..3359,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 142,
        column: 18,
        span: 3360..3361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 142,
        column: 0,
        span: 3362..3368,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 143,
        column: 6,
        span: 3369..3374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 143,
        column: 13,
        span: 3375..3381,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 143,
        column: 15,
        span: 3382..3383,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 143,
        column: 24,
        span: 3384..3392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 26,
        span: 3393..3394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 143,
        column: 27,
        span: 3394..3395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 28,
        span: 3395..3396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strip",
        ),
        line: 143,
        column: 34,
        span: 3397..3402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 35,
        span: 3402..3403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 144,
        column: 10,
        span: 3406..3413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 11,
        span: 3413..3414,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 12,
        span: 3414..3415,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 145,
        column: 8,
        span: 3418..3423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 145,
        column: 10,
        span: 3424..3425,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 145,
        column: 12,
        span: 3426..3427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 145,
        column: 15,
        span: 3428..3430,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 145,
        column: 16,
        span: 3430..3431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 145,
        column: 21,
        span: 3431..3436,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 22,
        span: 3436..3437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 23,
        span: 3437..3438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 146,
        column: 8,
        span: 3441..3446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 9,
        span: 3446..3447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 146,
        column: 15,
        span: 3447..3453,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 146,
        column: 16,
        span: 3453..3454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 146,
        column: 22,
        span: 3454..3460,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 23,
        span: 3460..3461,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"time: %g (+%g)\"",
        ),
        line: 146,
        column: 39,
        span: 3461..3477,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 40,
        span: 3477..3478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 146,
        column: 42,
        span: 3479..3480,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 146,
        column: 44,
        span: 3481..3482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "initclock",
        ),
        line: 146,
        column: 54,
        span: 3483..3492,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 55,
        span: 3492..3493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 146,
        column: 57,
        span: 3494..3495,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 146,
        column: 59,
        span: 3496..3497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastclock",
        ),
        line: 146,
        column: 69,
        span: 3498..3507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 70,
        span: 3507..3508,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 71,
        span: 3508..3509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastclock",
        ),
        line: 147,
        column: 12,
        span: 3512..3521,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 147,
        column: 14,
        span: 3522..3523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 147,
        column: 0,
        span: 3524..3525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        line: 148,
        column: 9,
        span: 3528..3534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 10,
        span: 3534..3535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 148,
        column: 11,
        span: 3535..3536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 12,
        span: 3536..3537,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 149,
        column: 8,
        span: 3540..3545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 149,
        column: 10,
        span: 3546..3547,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
        column: 12,
        span: 3548..3549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 149,
        column: 19,
        span: 3550..3556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 20,
        span: 3556..3557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 149,
        column: 28,
        span: 3557..3565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 29,
        span: 3565..3566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 149,
        column: 30,
        span: 3566..3567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 31,
        span: 3567..3568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 32,
        span: 3568..3569,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 150,
        column: 8,
        span: 3572..3577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 150,
        column: 10,
        span: 3578..3579,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 150,
        column: 12,
        span: 3580..3581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 150,
        column: 19,
        span: 3582..3588,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 150,
        column: 20,
        span: 3588..3589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 150,
        column: 24,
        span: 3589..3593,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 25,
        span: 3593..3594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 150,
        column: 26,
        span: 3594..3595,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 27,
        span: 3595..3596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strip",
        ),
        line: 150,
        column: 33,
        span: 3597..3602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 34,
        span: 3602..3603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 151,
        column: 4,
        span: 3606..3607,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 151,
        column: 6,
        span: 3608..3609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 151,
        column: 13,
        span: 3610..3616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 14,
        span: 3616..3617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 151,
        column: 18,
        span: 3617..3621,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 19,
        span: 3621..3622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 151,
        column: 20,
        span: 3622..3623,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 21,
        span: 3623..3624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 22,
        span: 3624..3625,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 152,
        column: 9,
        span: 3628..3634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 152,
        column: 11,
        span: 3635..3636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 12,
        span: 3636..3637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 13,
        span: 3637..3638,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 153,
        column: 0,
        span: 3639..3642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 155,
        column: 7,
        span: 3644..3650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 8,
        span: 3650..3651,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'main.lua'",
        ),
        line: 155,
        column: 18,
        span: 3651..3661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 19,
        span: 3661..3662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 158,
        column: 8,
        span: 3683..3690,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tracegc\"",
        ),
        line: 158,
        column: 17,
        span: 3690..3699,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 158,
        column: 18,
        span: 3699..3700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 158,
        column: 23,
        span: 3700..3705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 24,
        span: 3705..3706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 25,
        span: 3706..3707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        line: 160,
        column: 7,
        span: 3709..3715,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gc.lua\"",
        ),
        line: 160,
        column: 15,
        span: 3715..3723,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 161,
        column: 6,
        span: 3724..3729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 161,
        column: 8,
        span: 3730..3731,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
        column: 10,
        span: 3732..3733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 161,
        column: 17,
        span: 3734..3740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 18,
        span: 3740..3741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 161,
        column: 26,
        span: 3741..3749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 27,
        span: 3749..3750,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'gc.lua'",
        ),
        line: 161,
        column: 35,
        span: 3750..3758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 36,
        span: 3758..3759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 37,
        span: 3759..3760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 162,
        column: 2,
        span: 3761..3762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 3,
        span: 3762..3763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 4,
        span: 3763..3764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 164,
        column: 7,
        span: 3766..3772,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 8,
        span: 3772..3773,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'db.lua'",
        ),
        line: 164,
        column: 16,
        span: 3773..3781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 17,
        span: 3781..3782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 165,
        column: 7,
        span: 3783..3789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 8,
        span: 3789..3790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 165,
        column: 14,
        span: 3790..3796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 15,
        span: 3796..3797,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'calls.lua'",
        ),
        line: 165,
        column: 26,
        span: 3797..3808,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 27,
        span: 3808..3809,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 165,
        column: 30,
        span: 3810..3812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 165,
        column: 35,
        span: 3813..3817,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 165,
        column: 39,
        span: 3818..3821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 165,
        column: 44,
        span: 3822..3826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 45,
        span: 3826..3827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "olddofile",
        ),
        line: 166,
        column: 10,
        span: 3828..3837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 11,
        span: 3837..3838,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'strings.lua'",
        ),
        line: 166,
        column: 24,
        span: 3838..3851,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 25,
        span: 3851..3852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "olddofile",
        ),
        line: 167,
        column: 10,
        span: 3853..3862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 11,
        span: 3862..3863,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'literals.lua'",
        ),
        line: 167,
        column: 25,
        span: 3863..3877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 26,
        span: 3877..3878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 168,
        column: 7,
        span: 3879..3885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 8,
        span: 3885..3886,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'tpack.lua'",
        ),
        line: 168,
        column: 19,
        span: 3886..3897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 20,
        span: 3897..3898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 169,
        column: 7,
        span: 3899..3905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 8,
        span: 3905..3906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 169,
        column: 14,
        span: 3906..3912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 15,
        span: 3912..3913,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'attrib.lua'",
        ),
        line: 169,
        column: 27,
        span: 3913..3925,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 28,
        span: 3925..3926,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 31,
        span: 3927..3929,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "27",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 34,
        span: 3929..3932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 35,
        span: 3932..3933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 170,
        column: 7,
        span: 3934..3940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 8,
        span: 3940..3941,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'gengc.lua'",
        ),
        line: 170,
        column: 19,
        span: 3941..3952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 20,
        span: 3952..3953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
        column: 7,
        span: 3954..3960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 8,
        span: 3960..3961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 171,
        column: 14,
        span: 3961..3967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 15,
        span: 3967..3968,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'locals.lua'",
        ),
        line: 171,
        column: 27,
        span: 3968..3980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 28,
        span: 3980..3981,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 171,
        column: 31,
        span: 3982..3984,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 33,
        span: 3984..3986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 34,
        span: 3986..3987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 172,
        column: 7,
        span: 3988..3994,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 8,
        span: 3994..3995,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'constructs.lua'",
        ),
        line: 172,
        column: 24,
        span: 3995..4011,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 25,
        span: 4011..4012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 173,
        column: 7,
        span: 4013..4019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 8,
        span: 4019..4020,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'code.lua'",
        ),
        line: 173,
        column: 18,
        span: 4020..4030,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 19,
        span: 4030..4031,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 173,
        column: 24,
        span: 4032..4036,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 25,
        span: 4036..4037,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 174,
        column: 3,
        span: 4038..4040,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 174,
        column: 7,
        span: 4041..4044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 174,
        column: 10,
        span: 4045..4047,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 174,
        column: 11,
        span: 4047..4048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 174,
        column: 16,
        span: 4048..4053,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 174,
        column: 0,
        span: 4054..4058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        line: 175,
        column: 9,
        span: 4061..4067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 10,
        span: 4067..4068,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'big.lua'",
        ),
        line: 175,
        column: 19,
        span: 4068..4077,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 20,
        span: 4077..4078,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 176,
        column: 8,
        span: 4081..4086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 176,
        column: 10,
        span: 4087..4088,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 176,
        column: 12,
        span: 4089..4090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 176,
        column: 22,
        span: 4091..4100,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 176,
        column: 23,
        span: 4100..4101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 176,
        column: 27,
        span: 4101..4105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 28,
        span: 4105..4106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 176,
        column: 34,
        span: 4106..4112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 35,
        span: 4112..4113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 176,
        column: 43,
        span: 4113..4121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 44,
        span: 4121..4122,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'big.lua'",
        ),
        line: 176,
        column: 53,
        span: 4122..4131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 54,
        span: 4131..4132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 55,
        span: 4132..4133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 56,
        span: 4133..4134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 177,
        column: 9,
        span: 4137..4143,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 10,
        span: 4143..4144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 177,
        column: 11,
        span: 4144..4145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 12,
        span: 4145..4146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 13,
        span: 4146..4147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 177,
        column: 16,
        span: 4148..4150,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 177,
        column: 20,
        span: 4151..4154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 21,
        span: 4154..4155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 178,
        column: 9,
        span: 4158..4164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 10,
        span: 4164..4165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 178,
        column: 11,
        span: 4165..4166,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 12,
        span: 4166..4167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 13,
        span: 4167..4168,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 178,
        column: 16,
        span: 4169..4171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 178,
        column: 20,
        span: 4172..4175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 21,
        span: 4175..4176,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 179,
        column: 0,
        span: 4177..4180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 180,
        column: 7,
        span: 4181..4187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 8,
        span: 4187..4188,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cstack.lua'",
        ),
        line: 180,
        column: 20,
        span: 4188..4200,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 21,
        span: 4200..4201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 181,
        column: 7,
        span: 4202..4208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 8,
        span: 4208..4209,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nextvar.lua'",
        ),
        line: 181,
        column: 21,
        span: 4209..4222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 22,
        span: 4222..4223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 182,
        column: 7,
        span: 4224..4230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 8,
        span: 4230..4231,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'pm.lua'",
        ),
        line: 182,
        column: 16,
        span: 4231..4239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 17,
        span: 4239..4240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 183,
        column: 7,
        span: 4241..4247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 8,
        span: 4247..4248,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'utf8.lua'",
        ),
        line: 183,
        column: 18,
        span: 4248..4258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 19,
        span: 4258..4259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 184,
        column: 7,
        span: 4260..4266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 8,
        span: 4266..4267,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'api.lua'",
        ),
        line: 184,
        column: 17,
        span: 4267..4276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 18,
        span: 4276..4277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 185,
        column: 7,
        span: 4278..4284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 8,
        span: 4284..4285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 185,
        column: 14,
        span: 4285..4291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 15,
        span: 4291..4292,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'events.lua'",
        ),
        line: 185,
        column: 27,
        span: 4292..4304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 28,
        span: 4304..4305,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 185,
        column: 31,
        span: 4306..4308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 34,
        span: 4308..4311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 35,
        span: 4311..4312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 186,
        column: 7,
        span: 4313..4319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 8,
        span: 4319..4320,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'vararg.lua'",
        ),
        line: 186,
        column: 20,
        span: 4320..4332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 21,
        span: 4332..4333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 187,
        column: 7,
        span: 4334..4340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 8,
        span: 4340..4341,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'closure.lua'",
        ),
        line: 187,
        column: 21,
        span: 4341..4354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 22,
        span: 4354..4355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 188,
        column: 7,
        span: 4356..4362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 8,
        span: 4362..4363,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'coroutine.lua'",
        ),
        line: 188,
        column: 23,
        span: 4363..4378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 24,
        span: 4378..4379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 189,
        column: 7,
        span: 4380..4386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 8,
        span: 4386..4387,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'goto.lua'",
        ),
        line: 189,
        column: 18,
        span: 4387..4397,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 19,
        span: 4397..4398,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 189,
        column: 24,
        span: 4399..4403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 25,
        span: 4403..4404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 190,
        column: 7,
        span: 4405..4411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 8,
        span: 4411..4412,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'errors.lua'",
        ),
        line: 190,
        column: 20,
        span: 4412..4424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 21,
        span: 4424..4425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 191,
        column: 7,
        span: 4426..4432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 8,
        span: 4432..4433,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'math.lua'",
        ),
        line: 191,
        column: 18,
        span: 4433..4443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 19,
        span: 4443..4444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 192,
        column: 7,
        span: 4445..4451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 8,
        span: 4451..4452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'sort.lua'",
        ),
        line: 192,
        column: 18,
        span: 4452..4462,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 19,
        span: 4462..4463,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 192,
        column: 24,
        span: 4464..4468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 25,
        span: 4468..4469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 193,
        column: 7,
        span: 4470..4476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 8,
        span: 4476..4477,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'bitwise.lua'",
        ),
        line: 193,
        column: 21,
        span: 4477..4490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 22,
        span: 4490..4491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 194,
        column: 7,
        span: 4492..4498,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 8,
        span: 4498..4499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 194,
        column: 14,
        span: 4499..4505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 15,
        span: 4505..4506,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'verybig.lua'",
        ),
        line: 194,
        column: 28,
        span: 4506..4519,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
        column: 29,
        span: 4519..4520,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 194,
        column: 34,
        span: 4521..4525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 35,
        span: 4525..4526,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 194,
        column: 38,
        span: 4527..4529,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 41,
        span: 4529..4532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 42,
        span: 4532..4533,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 194,
        column: 43,
        span: 4533..4534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 194,
        column: 58,
        span: 4535..4549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 59,
        span: 4549..4550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 60,
        span: 4550..4551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        line: 195,
        column: 7,
        span: 4552..4558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 8,
        span: 4558..4559,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'files.lua'",
        ),
        line: 195,
        column: 19,
        span: 4559..4570,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 20,
        span: 4570..4571,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 197,
        column: 3,
        span: 4573..4575,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 197,
        column: 5,
        span: 4576..4577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 197,
        column: 9,
        span: 4577..4581,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 197,
        column: 11,
        span: 4582..4583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 197,
        column: 13,
        span: 4583..4585,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 197,
        column: 0,
        span: 4586..4590,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 198,
        column: 8,
        span: 4593..4598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 198,
        column: 10,
        span: 4599..4600,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 198,
        column: 12,
        span: 4601..4602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 198,
        column: 18,
        span: 4603..4608,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 198,
        column: 19,
        span: 4608..4609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 198,
        column: 25,
        span: 4609..4615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 26,
        span: 4615..4616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        line: 198,
        column: 30,
        span: 4616..4620,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
        column: 31,
        span: 4620..4621,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n  \"",
        ),
        line: 198,
        column: 38,
        span: 4622..4628,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 39,
        span: 4628..4629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 199,
        column: 7,
        span: 4632..4636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 8,
        span: 4636..4637,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#tests not performed:\\n  \"",
        ),
        line: 199,
        column: 35,
        span: 4637..4664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 36,
        span: 4664..4665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 199,
        column: 38,
        span: 4666..4667,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 39,
        span: 4667..4668,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 199,
        column: 44,
        span: 4669..4673,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 45,
        span: 4673..4674,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 200,
        column: 0,
        span: 4675..4678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 202,
        column: 6,
        span: 4680..4685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 7,
        span: 4685..4686,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(there should be two warnings now)\"",
        ),
        line: 202,
        column: 43,
        span: 4686..4722,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 44,
        span: 4722..4723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 203,
        column: 5,
        span: 4724..4728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 6,
        span: 4728..4729,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@on\"",
        ),
        line: 203,
        column: 11,
        span: 4729..4734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 12,
        span: 4734..4735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 204,
        column: 5,
        span: 4736..4740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 6,
        span: 4740..4741,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#This is \"",
        ),
        line: 204,
        column: 17,
        span: 4741..4752,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 18,
        span: 4752..4753,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"an expected\"",
        ),
        line: 204,
        column: 32,
        span: 4754..4767,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 33,
        span: 4767..4768,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" warning\"",
        ),
        line: 204,
        column: 44,
        span: 4769..4779,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 45,
        span: 4779..4780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 205,
        column: 5,
        span: 4781..4785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 6,
        span: 4785..4786,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@off\"",
        ),
        line: 205,
        column: 12,
        span: 4786..4792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 13,
        span: 4792..4793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 206,
        column: 5,
        span: 4794..4798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 6,
        span: 4798..4799,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"******** THIS WARNING SHOULD NOT APPEAR **********\"",
        ),
        line: 206,
        column: 58,
        span: 4799..4851,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 59,
        span: 4851..4852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 207,
        column: 5,
        span: 4853..4857,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 6,
        span: 4857..4858,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"******** THIS WARNING ALSO SHOULD NOT APPEAR **********\"",
        ),
        line: 207,
        column: 63,
        span: 4858..4915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 64,
        span: 4915..4916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 208,
        column: 5,
        span: 4917..4921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 6,
        span: 4921..4922,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@on\"",
        ),
        line: 208,
        column: 11,
        span: 4922..4927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 12,
        span: 4927..4928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 209,
        column: 5,
        span: 4929..4933,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 6,
        span: 4933..4934,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#This is\"",
        ),
        line: 209,
        column: 16,
        span: 4934..4944,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 17,
        span: 4944..4945,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" another one\"",
        ),
        line: 209,
        column: 32,
        span: 4946..4960,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 33,
        span: 4960..4961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 212,
        column: 7,
        span: 5003..5009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 8,
        span: 5009..5010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 212,
        column: 13,
        span: 5010..5015,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 212,
        column: 16,
        span: 5016..5018,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 212,
        column: 20,
        span: 5019..5022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 21,
        span: 5022..5023,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 214,
        column: 6,
        span: 5025..5030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 214,
        column: 12,
        span: 5031..5036,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 214,
        column: 14,
        span: 5037..5038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 214,
        column: 22,
        span: 5039..5046,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 214,
        column: 30,
        span: 5047..5054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 216,
        column: 6,
        span: 5056..5061,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 7,
        span: 5061..5062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 216,
        column: 13,
        span: 5062..5068,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 216,
        column: 14,
        span: 5068..5069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 216,
        column: 20,
        span: 5069..5075,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 21,
        span: 5075..5076,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d-bit integers, %d-bit floats\"",
        ),
        line: 216,
        column: 53,
        span: 5076..5108,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
        column: 54,
        span: 5108..5109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 217,
        column: 15,
        span: 5118..5124,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 217,
        column: 16,
        span: 5124..5125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        line: 217,
        column: 24,
        span: 5125..5133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 25,
        span: 5133..5134,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"j\"",
        ),
        line: 217,
        column: 28,
        span: 5134..5137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 29,
        span: 5137..5138,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 217,
        column: 31,
        span: 5139..5140,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 33,
        span: 5140..5142,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
        column: 34,
        span: 5142..5143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 217,
        column: 41,
        span: 5144..5150,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 217,
        column: 42,
        span: 5150..5151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        line: 217,
        column: 50,
        span: 5151..5159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 51,
        span: 5159..5160,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        line: 217,
        column: 54,
        span: 5160..5163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 55,
        span: 5163..5164,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 217,
        column: 57,
        span: 5165..5166,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 59,
        span: 5166..5168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 60,
        span: 5168..5169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 61,
        span: 5169..5170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 219,
        column: 6,
        span: 5172..5177,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 219,
        column: 7,
        span: 5177..5178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 219,
        column: 14,
        span: 5178..5185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 15,
        span: 5185..5186,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 219,
        column: 23,
        span: 5186..5194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 25,
        span: 5195..5196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 219,
        column: 26,
        span: 5196..5197,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 27,
        span: 5197..5198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 219,
        column: 34,
        span: 5199..5205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 35,
        span: 5205..5206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 219,
        column: 39,
        span: 5206..5210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 40,
        span: 5210..5211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 219,
        column: 41,
        span: 5211..5212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 42,
        span: 5212..5213,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 219,
        column: 45,
        span: 5214..5216,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 219,
        column: 54,
        span: 5217..5225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 55,
        span: 5225..5226,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 219,
        column: 59,
        span: 5227..5230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
        column: 60,
        span: 5230..5231,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cr\"",
        ),
        line: 219,
        column: 65,
        span: 5232..5236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 66,
        span: 5236..5237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 222,
        column: 3,
        span: 5267..5269,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 222,
        column: 4,
        span: 5269..5270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 222,
        column: 11,
        span: 5270..5277,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 222,
        column: 13,
        span: 5278..5279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 222,
        column: 0,
        span: 5280..5287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 225,
        column: 7,
        span: 5290..5296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 8,
        span: 5296..5297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Cstack",
        ),
        line: 225,
        column: 14,
        span: 5297..5303,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 225,
        column: 17,
        span: 5304..5306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Cstacklevel",
        ),
        line: 225,
        column: 29,
        span: 5307..5318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 30,
        span: 5318..5319,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 31,
        span: 5319..5320,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 225,
        column: 32,
        span: 5320..5321,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should be at the same C-stack level it was when started the tests\"",
        ),
        line: 226,
        column: 70,
        span: 5324..5391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 71,
        span: 5391..5392,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 228,
        column: 4,
        span: 5394..5397,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 230,
        column: 6,
        span: 5405..5410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 230,
        column: 9,
        span: 5411..5413,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 10,
        span: 5413..5414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 230,
        column: 18,
        span: 5415..5422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 19,
        span: 5422..5423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 230,
        column: 25,
        span: 5424..5429,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 26,
        span: 5429..5430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 230,
        column: 33,
        span: 5431..5437,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 34,
        span: 5437..5438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 230,
        column: 40,
        span: 5439..5444,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 41,
        span: 5444..5445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 230,
        column: 46,
        span: 5446..5450,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 47,
        span: 5450..5451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        line: 230,
        column: 56,
        span: 5452..5460,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 57,
        span: 5460..5461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 231,
        column: 13,
        span: 5468..5474,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 231,
        column: 14,
        span: 5474..5475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 231,
        column: 19,
        span: 5476..5480,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 231,
        column: 20,
        span: 5480..5481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 231,
        column: 25,
        span: 5482..5486,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 231,
        column: 27,
        span: 5487..5488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 232,
        column: 9,
        span: 5495..5497,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 10,
        span: 5497..5498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 232,
        column: 18,
        span: 5499..5506,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 19,
        span: 5506..5507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 232,
        column: 25,
        span: 5508..5513,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 26,
        span: 5513..5514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 232,
        column: 33,
        span: 5515..5521,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 232,
        column: 34,
        span: 5521..5522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 232,
        column: 40,
        span: 5522..5528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 41,
        span: 5528..5529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 232,
        column: 44,
        span: 5530..5532,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 232,
        column: 45,
        span: 5532..5533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 232,
        column: 50,
        span: 5533..5538,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 51,
        span: 5538..5539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 232,
        column: 54,
        span: 5540..5542,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 232,
        column: 55,
        span: 5542..5543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 232,
        column: 59,
        span: 5543..5547,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 60,
        span: 5547..5548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 232,
        column: 63,
        span: 5549..5551,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 232,
        column: 64,
        span: 5551..5552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        line: 232,
        column: 72,
        span: 5552..5560,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 73,
        span: 5560..5561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 233,
        column: 13,
        span: 5568..5574,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 14,
        span: 5574..5575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 233,
        column: 17,
        span: 5576..5578,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 233,
        column: 18,
        span: 5578..5579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 233,
        column: 22,
        span: 5579..5583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 23,
        span: 5583..5584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 233,
        column: 0,
        span: 5585..5589,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 236,
        column: 6,
        span: 5632..5637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        line: 236,
        column: 12,
        span: 5638..5643,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 236,
        column: 14,
        span: 5644..5645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 236,
        column: 16,
        span: 5646..5647,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 236,
        column: 20,
        span: 5648..5651,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"time-debug.txt\"",
        ),
        line: 236,
        column: 37,
        span: 5652..5668,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 236,
        column: 40,
        span: 5669..5671,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"time.txt\"",
        ),
        line: 236,
        column: 51,
        span: 5672..5682,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 237,
        column: 6,
        span: 5683..5688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        line: 237,
        column: 0,
        span: 5689..5697,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 239,
        column: 3,
        span: 5699..5701,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 239,
        column: 7,
        span: 5702..5705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        line: 239,
        column: 17,
        span: 5706..5715,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 239,
        column: 0,
        span: 5716..5720,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 241,
        column: 8,
        span: 5771..5776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 241,
        column: 10,
        span: 5777..5778,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 241,
        column: 12,
        span: 5779..5780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 241,
        column: 15,
        span: 5781..5783,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 241,
        column: 16,
        span: 5783..5784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 241,
        column: 20,
        span: 5784..5788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 21,
        span: 5788..5789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        line: 241,
        column: 26,
        span: 5789..5794,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 27,
        span: 5794..5795,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 242,
        column: 5,
        span: 5798..5800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 242,
        column: 7,
        span: 5801..5802,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 242,
        column: 0,
        span: 5803..5807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        line: 243,
        column: 13,
        span: 5812..5820,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 243,
        column: 15,
        span: 5821..5822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 243,
        column: 22,
        span: 5823..5829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 23,
        span: 5829..5830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 243,
        column: 31,
        span: 5830..5838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 32,
        span: 5838..5839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 243,
        column: 33,
        span: 5839..5840,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 243,
        column: 34,
        span: 5840..5841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 243,
        column: 38,
        span: 5841..5845,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 243,
        column: 41,
        span: 5845..5848,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 42,
        span: 5848..5849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 43,
        span: 5849..5850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 244,
        column: 6,
        span: 5855..5856,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 244,
        column: 7,
        span: 5856..5857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 244,
        column: 12,
        span: 5857..5862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 13,
        span: 5862..5863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 14,
        span: 5863..5864,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 244,
        column: 15,
        span: 5864..5865,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 245,
        column: 7,
        span: 5868..5872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        line: 246,
        column: 13,
        span: 5939..5947,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 246,
        column: 15,
        span: 5948..5949,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 246,
        column: 0,
        span: 5950..5953,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 247,
        column: 0,
        span: 5956..5959,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 248,
        column: 0,
        span: 5960..5963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 251,
        column: 6,
        span: 5995..6000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 7,
        span: 6000..6001,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cleaning all!!!!'",
        ),
        line: 251,
        column: 25,
        span: 6001..6019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 26,
        span: 6019..6020,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 252,
        column: 4,
        span: 6021..6024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 252,
        column: 6,
        span: 6025..6026,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 252,
        column: 9,
        span: 6027..6029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 252,
        column: 15,
        span: 6030..6035,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 16,
        span: 6035..6036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 252,
        column: 18,
        span: 6036..6038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 19,
        span: 6038..6039,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 252,
        column: 0,
        span: 6040..6042,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 253,
        column: 5,
        span: 6045..6047,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 253,
        column: 9,
        span: 6048..6051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 11,
        span: 6052..6053,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 253,
        column: 12,
        span: 6053..6054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "___Glob",
        ),
        line: 253,
        column: 19,
        span: 6054..6061,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 253,
        column: 21,
        span: 6062..6063,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 23,
        span: 6063..6065,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 24,
        span: 6065..6066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 253,
        column: 33,
        span: 6067..6075,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 253,
        column: 35,
        span: 6076..6077,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 37,
        span: 6077..6079,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 253,
        column: 38,
        span: 6079..6080,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 39,
        span: 6080..6081,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 253,
        column: 40,
        span: 6081..6082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 253,
        column: 41,
        span: 6082..6083,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 253,
        column: 42,
        span: 6083..6084,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 253,
        column: 0,
        span: 6085..6089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 254,
        column: 7,
        span: 6094..6096,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 254,
        column: 8,
        span: 6096..6097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 254,
        column: 9,
        span: 6097..6098,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 254,
        column: 10,
        span: 6098..6099,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 254,
        column: 12,
        span: 6100..6101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 254,
        column: 0,
        span: 6102..6107,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 255,
        column: 0,
        span: 6110..6113,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 256,
        column: 0,
        span: 6114..6117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 259,
        column: 15,
        span: 6120..6134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 16,
        span: 6134..6135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 17,
        span: 6135..6136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 260,
        column: 15,
        span: 6137..6151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 16,
        span: 6151..6152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 17,
        span: 6152..6153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 261,
        column: 15,
        span: 6154..6168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
        column: 16,
        span: 6168..6169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
        column: 17,
        span: 6169..6170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 262,
        column: 15,
        span: 6171..6185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 16,
        span: 6185..6186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 17,
        span: 6186..6187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 263,
        column: 15,
        span: 6188..6202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 16,
        span: 6202..6203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 17,
        span: 6203..6204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 264,
        column: 15,
        span: 6205..6219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 16,
        span: 6219..6220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 17,
        span: 6220..6221,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 264,
        column: 18,
        span: 6221..6222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        line: 264,
        column: 25,
        span: 6222..6229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 26,
        span: 6229..6230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 27,
        span: 6230..6231,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 266,
        column: 6,
        span: 6233..6238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clocktime",
        ),
        line: 266,
        column: 16,
        span: 6239..6248,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 266,
        column: 18,
        span: 6249..6250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        line: 266,
        column: 24,
        span: 6251..6256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 25,
        span: 6256..6257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 26,
        span: 6257..6258,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 266,
        column: 28,
        span: 6259..6260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "initclock",
        ),
        line: 266,
        column: 0,
        span: 6261..6270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "walltime",
        ),
        line: 267,
        column: 9,
        span: 6271..6279,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 267,
        column: 11,
        span: 6280..6281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        line: 267,
        column: 20,
        span: 6282..6290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 21,
        span: 6290..6291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 267,
        column: 25,
        span: 6291..6295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 26,
        span: 6295..6296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 27,
        span: 6296..6297,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
        column: 28,
        span: 6297..6298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "walltime",
        ),
        line: 267,
        column: 37,
        span: 6299..6307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 38,
        span: 6307..6308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 269,
        column: 6,
        span: 6310..6315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 7,
        span: 6315..6316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 269,
        column: 13,
        span: 6316..6322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 14,
        span: 6322..6323,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\ntotal time: %.2fs (wall time: %gs)\\n\"",
        ),
        line: 269,
        column: 56,
        span: 6323..6365,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 57,
        span: 6365..6366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clocktime",
        ),
        line: 269,
        column: 67,
        span: 6367..6376,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 68,
        span: 6376..6377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "walltime",
        ),
        line: 269,
        column: 77,
        span: 6378..6386,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 78,
        span: 6386..6387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 79,
        span: 6387..6388,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 271,
        column: 3,
        span: 6390..6392,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 271,
        column: 7,
        span: 6393..6396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        line: 271,
        column: 17,
        span: 6397..6406,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 271,
        column: 0,
        span: 6407..6411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        line: 272,
        column: 11,
        span: 6414..6422,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 272,
        column: 13,
        span: 6423..6424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        line: 272,
        column: 22,
        span: 6425..6433,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 272,
        column: 25,
        span: 6434..6436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clocktime",
        ),
        line: 272,
        column: 35,
        span: 6437..6446,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 274,
        column: 8,
        span: 6563..6568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 274,
        column: 13,
        span: 6569..6573,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 274,
        column: 15,
        span: 6574..6575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 17,
        span: 6576..6577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clocktime",
        ),
        line: 274,
        column: 26,
        span: 6577..6586,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 274,
        column: 28,
        span: 6587..6588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        line: 274,
        column: 37,
        span: 6589..6597,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 38,
        span: 6597..6598,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 274,
        column: 40,
        span: 6599..6600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        line: 274,
        column: 0,
        span: 6601..6609,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 275,
        column: 8,
        span: 6612..6617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tolerance",
        ),
        line: 275,
        column: 18,
        span: 6618..6627,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 275,
        column: 20,
        span: 6628..6629,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".05",
                },
            ),
        ),
        line: 275,
        column: 25,
        span: 6629..6634,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 276,
        column: 5,
        span: 6646..6648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 7,
        span: 6649..6650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 276,
        column: 11,
        span: 6650..6654,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 276,
        column: 14,
        span: 6655..6657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tolerance",
        ),
        line: 276,
        column: 24,
        span: 6658..6667,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 276,
        column: 27,
        span: 6668..6670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 276,
        column: 32,
        span: 6671..6675,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 276,
        column: 35,
        span: 6676..6678,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 276,
        column: 37,
        span: 6679..6680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tolerance",
        ),
        line: 276,
        column: 46,
        span: 6680..6689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 47,
        span: 6689..6690,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 276,
        column: 0,
        span: 6691..6695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 277,
        column: 9,
        span: 6700..6704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 10,
        span: 6704..6705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 277,
        column: 16,
        span: 6705..6711,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 17,
        span: 6711..6712,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#time difference from previous test: %+.1f%%\"",
        ),
        line: 277,
        column: 63,
        span: 6712..6758,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 64,
        span: 6758..6759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        line: 278,
        column: 23,
        span: 6778..6782,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 278,
        column: 25,
        span: 6783..6784,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
        column: 29,
        span: 6784..6788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 30,
        span: 6788..6789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 31,
        span: 6789..6790,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 279,
        column: 0,
        span: 6793..6796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 280,
        column: 9,
        span: 6799..6805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 10,
        span: 6805..6806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 280,
        column: 14,
        span: 6806..6810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 15,
        span: 6810..6811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        line: 280,
        column: 20,
        span: 6811..6816,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 280,
        column: 21,
        span: 6816..6817,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 280,
        column: 25,
        span: 6818..6821,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 26,
        span: 6821..6822,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 27,
        span: 6822..6823,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 280,
        column: 28,
        span: 6823..6824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 280,
        column: 33,
        span: 6824..6829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 34,
        span: 6829..6830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clocktime",
        ),
        line: 280,
        column: 43,
        span: 6830..6839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 44,
        span: 6839..6840,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 280,
        column: 45,
        span: 6840..6841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 280,
        column: 50,
        span: 6841..6846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 51,
        span: 6846..6847,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 52,
        span: 6847..6848,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 281,
        column: 0,
        span: 6849..6852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 283,
        column: 6,
        span: 6854..6859,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 7,
        span: 6859..6860,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final OK !!!\"",
        ),
        line: 283,
        column: 21,
        span: 6860..6874,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 22,
        span: 6874..6875,
    },
]
