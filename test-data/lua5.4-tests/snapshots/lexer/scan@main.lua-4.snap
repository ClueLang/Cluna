---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/main.lua
---
[
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 6,
        column: 3,
        span: 171..173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 6,
        column: 9,
        span: 174..179,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 6,
        column: 14,
        span: 180..184,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 6,
        column: 21,
        span: 185..191,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 6,
        column: 0,
        span: 192..195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 12,
        column: 6,
        span: 285..290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 8,
        span: 291..292,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stand-alone interpreter\"",
        ),
        line: 12,
        column: 41,
        span: 292..325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 42,
        span: 325..326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 14,
        column: 7,
        span: 328..334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 8,
        span: 334..335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 14,
        column: 10,
        span: 335..337,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 14,
        column: 11,
        span: 337..338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        line: 14,
        column: 18,
        span: 338..345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 19,
        span: 345..346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 20,
        span: 346..347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 21,
        span: 347..348,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 16,
        column: 6,
        span: 384..389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 16,
        column: 10,
        span: 390..393,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 12,
        span: 394..395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 16,
        column: 16,
        span: 396..399,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 16,
        column: 19,
        span: 400..402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ARG",
        ),
        line: 16,
        column: 0,
        span: 403..406,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 18,
        column: 6,
        span: 408..413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 18,
        column: 11,
        span: 414..418,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 13,
        span: 419..420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 18,
        column: 16,
        span: 421..423,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 18,
        column: 17,
        span: 423..424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 18,
        column: 24,
        span: 424..431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 25,
        span: 431..432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 26,
        span: 432..433,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 19,
        column: 6,
        span: 434..439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 19,
        column: 16,
        span: 440..449,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 19,
        column: 18,
        span: 450..451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 19,
        column: 21,
        span: 452..454,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 19,
        column: 22,
        span: 454..455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 19,
        column: 29,
        span: 455..462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 30,
        span: 462..463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 31,
        span: 463..464,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 20,
        column: 6,
        span: 465..470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 20,
        column: 10,
        span: 471..474,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
        column: 12,
        span: 475..476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 20,
        column: 15,
        span: 477..479,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 20,
        column: 16,
        span: 479..480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 20,
        column: 23,
        span: 480..487,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 24,
        span: 487..488,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 25,
        span: 488..489,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 22,
        column: 6,
        span: 491..496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 22,
        column: 0,
        span: 497..505,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 23,
        column: 0,
        span: 506..508,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 24,
        column: 8,
        span: 511..516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 24,
        column: 10,
        span: 517..518,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 12,
        span: 519..520,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 0,
        span: 520..522,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 25,
        column: 8,
        span: 525..530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 25,
        column: 12,
        span: 531..534,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 25,
        column: 13,
        span: 534..535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 25,
        column: 14,
        span: 535..536,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 25,
        column: 15,
        span: 536..537,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 25,
        column: 18,
        span: 538..540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 25,
        column: 20,
        span: 541..542,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
        column: 21,
        span: 542..543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 25,
        column: 22,
        span: 543..544,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 25,
        column: 23,
        span: 544..545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 24,
        span: 544..546,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 25,
        column: 0,
        span: 547..550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 26,
        column: 11,
        span: 553..561,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 26,
        column: 13,
        span: 562..563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 26,
        column: 17,
        span: 564..567,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 26,
        column: 18,
        span: 567..568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 26,
        column: 19,
        span: 568..569,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 26,
        column: 20,
        span: 569..570,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 21,
        span: 569..571,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 26,
        column: 22,
        span: 571..572,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 27,
        column: 0,
        span: 573..576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 28,
        column: 6,
        span: 577..582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 7,
        span: 582..583,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"progname: \"",
        ),
        line: 28,
        column: 19,
        span: 583..595,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 28,
        column: 21,
        span: 595..597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 28,
        column: 29,
        span: 597..605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 30,
        span: 605..606,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 30,
        column: 6,
        span: 608..613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 30,
        column: 15,
        span: 614..622,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 17,
        span: 623..624,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 30,
        column: 26,
        span: 625..633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 28,
        span: 634..635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 30,
        column: 29,
        span: 635..636,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 30,
        span: 636..637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 30,
        column: 32,
        span: 638..639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 33,
        span: 639..640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 31,
        column: 4,
        span: 643..644,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 6,
        span: 645..646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 31,
        column: 8,
        span: 647..648,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 31,
        column: 11,
        span: 649..651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 31,
        column: 0,
        span: 652..656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 32,
        column: 5,
        span: 659..661,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 32,
        column: 6,
        span: 661..662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 32,
        column: 12,
        span: 662..668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 13,
        span: 668..669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 32,
        column: 14,
        span: 669..670,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 15,
        span: 670..671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 33,
        column: 5,
        span: 674..676,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 33,
        column: 6,
        span: 676..677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 33,
        column: 11,
        span: 677..682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 12,
        span: 682..683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 33,
        column: 13,
        span: 683..684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 14,
        span: 684..685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
        column: 9,
        span: 688..694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 10,
        span: 694..695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 34,
        column: 12,
        span: 695..697,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 34,
        column: 13,
        span: 697..698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 34,
        column: 18,
        span: 698..703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 19,
        span: 703..704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 20,
        span: 704..705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 21,
        span: 705..706,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 35,
        column: 0,
        span: 707..710,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
        column: 6,
        span: 712..717,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 37,
        column: 15,
        span: 718..726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 37,
        column: 25,
        span: 727..736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 27,
        span: 737..738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 28,
        span: 738..739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 38,
        column: 5,
        span: 742..744,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 6,
        span: 744..745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 38,
        column: 11,
        span: 745..750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 12,
        span: 750..751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 38,
        column: 15,
        span: 751..754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 16,
        span: 754..755,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 39,
        column: 8,
        span: 758..763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 39,
        column: 10,
        span: 764..765,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 39,
        column: 12,
        span: 766..767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 39,
        column: 15,
        span: 768..770,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 16,
        span: 770..771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 39,
        column: 20,
        span: 771..775,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 21,
        span: 775..776,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 39,
        column: 24,
        span: 776..779,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 25,
        span: 779..780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 40,
        column: 5,
        span: 783..785,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
        column: 6,
        span: 785..786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 40,
        column: 11,
        span: 786..791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 12,
        span: 791..792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 13,
        span: 792..793,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 40,
        column: 14,
        span: 793..794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 40,
        column: 19,
        span: 794..799,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 20,
        span: 799..800,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 21,
        span: 800..801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 9,
        span: 804..810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 10,
        span: 810..811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 41,
        column: 12,
        span: 811..813,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 13,
        span: 813..814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 41,
        column: 19,
        span: 814..820,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 20,
        span: 820..821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 41,
        column: 23,
        span: 821..824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 24,
        span: 824..825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 25,
        span: 825..826,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 42,
        column: 9,
        span: 829..835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 42,
        column: 0,
        span: 836..837,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 43,
        column: 0,
        span: 838..841,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 45,
        column: 6,
        span: 843..848,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 45,
        column: 15,
        span: 849..857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 45,
        column: 28,
        span: 858..870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 30,
        span: 871..872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 45,
        column: 31,
        span: 872..873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 32,
        span: 873..874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 9,
        span: 921..927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 10,
        span: 927..928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 47,
        column: 16,
        span: 928..934,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 17,
        span: 934..935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 47,
        column: 20,
        span: 935..938,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 21,
        span: 938..939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 47,
        column: 22,
        span: 939..940,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 23,
        span: 940..941,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 47,
        column: 25,
        span: 942..943,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 26,
        span: 942..944,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 27,
        span: 944..945,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 47,
        column: 30,
        span: 946..948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 47,
        column: 35,
        span: 949..953,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 36,
        span: 953..954,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 48,
        column: 8,
        span: 957..962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 48,
        column: 10,
        span: 963..964,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 48,
        column: 12,
        span: 965..966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 48,
        column: 22,
        span: 967..976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 23,
        span: 976..977,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 24,
        span: 977..978,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 49,
        column: 6,
        span: 981..984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 49,
        column: 11,
        span: 985..989,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 49,
        column: 14,
        span: 990..992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 49,
        column: 21,
        span: 993..999,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 49,
        column: 22,
        span: 999..1000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 49,
        column: 28,
        span: 1000..1006,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 29,
        span: 1006..1007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 49,
        column: 30,
        span: 1007..1008,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 31,
        span: 1008..1009,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".-\\n\"",
        ),
        line: 49,
        column: 38,
        span: 1010..1016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 39,
        span: 1016..1017,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 49,
        column: 0,
        span: 1018..1020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 50,
        column: 11,
        span: 1025..1031,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 12,
        span: 1031..1032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 50,
        column: 18,
        span: 1032..1038,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 50,
        column: 19,
        span: 1038..1039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 50,
        column: 23,
        span: 1039..1043,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 24,
        span: 1043..1044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 50,
        column: 25,
        span: 1044..1045,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 26,
        span: 1045..1046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 50,
        column: 31,
        span: 1047..1051,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 32,
        span: 1051..1052,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 34,
        span: 1052..1054,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 35,
        span: 1054..1055,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 50,
        column: 40,
        span: 1056..1060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 41,
        span: 1060..1061,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 42,
        span: 1061..1062,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 51,
        column: 0,
        span: 1065..1068,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 52,
        column: 0,
        span: 1069..1072,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 54,
        column: 6,
        span: 1074..1079,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 54,
        column: 15,
        span: 1080..1088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 54,
        column: 24,
        span: 1089..1097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 26,
        span: 1098..1099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 54,
        column: 27,
        span: 1099..1100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 28,
        span: 1100..1101,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 55,
        column: 8,
        span: 1104..1109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 55,
        column: 10,
        span: 1110..1111,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 55,
        column: 12,
        span: 1112..1113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 55,
        column: 22,
        span: 1114..1123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 23,
        span: 1123..1124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 24,
        span: 1124..1125,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 56,
        column: 5,
        span: 1128..1130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 56,
        column: 7,
        span: 1131..1132,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 56,
        column: 10,
        span: 1133..1135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 56,
        column: 12,
        span: 1136..1137,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 56,
        column: 17,
        span: 1138..1142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 56,
        column: 23,
        span: 1143..1148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 24,
        span: 1148..1149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 56,
        column: 30,
        span: 1149..1155,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
        column: 31,
        span: 1155..1156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 56,
        column: 37,
        span: 1156..1162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 38,
        span: 1162..1163,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'%s' - '%s'\\n\"",
        ),
        line: 56,
        column: 53,
        span: 1163..1178,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 54,
        span: 1178..1179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 56,
        column: 56,
        span: 1180..1181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 57,
        span: 1181..1182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 56,
        column: 59,
        span: 1183..1184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 60,
        span: 1184..1185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 61,
        span: 1185..1186,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 56,
        column: 0,
        span: 1187..1190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 57,
        column: 9,
        span: 1193..1199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 10,
        span: 1199..1200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 57,
        column: 11,
        span: 1200..1201,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 57,
        column: 14,
        span: 1202..1204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 57,
        column: 16,
        span: 1205..1206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 17,
        span: 1206..1207,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 58,
        column: 9,
        span: 1210..1216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 58,
        column: 0,
        span: 1217..1218,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 59,
        column: 0,
        span: 1219..1222,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 62,
        column: 6,
        span: 1225..1230,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 62,
        column: 15,
        span: 1231..1239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 62,
        column: 19,
        span: 1240..1243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 21,
        span: 1244..1245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 62,
        column: 22,
        span: 1245..1246,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 23,
        span: 1246..1247,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 62,
        column: 27,
        span: 1248..1251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 28,
        span: 1251..1252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 63,
        column: 4,
        span: 1255..1256,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 63,
        column: 6,
        span: 1257..1258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 63,
        column: 13,
        span: 1259..1265,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 63,
        column: 14,
        span: 1265..1266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 63,
        column: 18,
        span: 1266..1270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 19,
        span: 1270..1271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 63,
        column: 20,
        span: 1271..1272,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 21,
        span: 1272..1273,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua\"",
        ),
        line: 63,
        column: 27,
        span: 1274..1279,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 28,
        span: 1279..1280,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        line: 63,
        column: 32,
        span: 1281..1284,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 63,
        column: 34,
        span: 1284..1286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 63,
        column: 42,
        span: 1286..1294,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 63,
        column: 44,
        span: 1294..1296,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        line: 63,
        column: 47,
        span: 1296..1299,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 48,
        span: 1299..1300,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 50,
        span: 1300..1302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 51,
        span: 1302..1303,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 64,
        column: 8,
        span: 1306..1311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 64,
        column: 10,
        span: 1312..1313,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 64,
        column: 12,
        span: 1314..1315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 64,
        column: 19,
        span: 1316..1322,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 64,
        column: 20,
        span: 1322..1323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 64,
        column: 26,
        span: 1323..1329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 27,
        span: 1329..1330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 64,
        column: 28,
        span: 1330..1331,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 29,
        span: 1331..1332,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 64,
        column: 33,
        span: 1333..1336,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 34,
        span: 1336..1337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 65,
        column: 9,
        span: 1340..1346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 10,
        span: 1346..1347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 65,
        column: 12,
        span: 1347..1349,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
        column: 13,
        span: 1349..1350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        line: 65,
        column: 20,
        span: 1350..1357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 21,
        span: 1357..1358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 65,
        column: 22,
        span: 1358..1359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 23,
        span: 1359..1360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 24,
        span: 1360..1361,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 66,
        column: 0,
        span: 1362..1365,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 68,
        column: 6,
        span: 1367..1372,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 68,
        column: 15,
        span: 1373..1381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 68,
        column: 21,
        span: 1382..1387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 23,
        span: 1388..1389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 68,
        column: 26,
        span: 1389..1392,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 27,
        span: 1392..1393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 68,
        column: 29,
        span: 1394..1395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 30,
        span: 1395..1396,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 68,
        column: 34,
        span: 1397..1400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 35,
        span: 1400..1401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 69,
        column: 4,
        span: 1404..1405,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 69,
        column: 6,
        span: 1406..1407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 69,
        column: 13,
        span: 1408..1414,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 14,
        span: 1414..1415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 69,
        column: 18,
        span: 1415..1419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 19,
        span: 1419..1420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 69,
        column: 20,
        span: 1420..1421,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 21,
        span: 1421..1422,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua\"",
        ),
        line: 69,
        column: 27,
        span: 1423..1428,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 28,
        span: 1428..1429,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        line: 69,
        column: 32,
        span: 1430..1433,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 69,
        column: 34,
        span: 1433..1435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 69,
        column: 42,
        span: 1435..1443,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 69,
        column: 44,
        span: 1443..1445,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        line: 69,
        column: 47,
        span: 1445..1448,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 48,
        span: 1448..1449,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 50,
        span: 1449..1451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 51,
        span: 1451..1452,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 70,
        column: 8,
        span: 1455..1460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 70,
        column: 10,
        span: 1461..1462,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 70,
        column: 12,
        span: 1463..1464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 70,
        column: 19,
        span: 1465..1471,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
        column: 20,
        span: 1471..1472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 70,
        column: 26,
        span: 1472..1478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 27,
        span: 1478..1479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 70,
        column: 28,
        span: 1479..1480,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 29,
        span: 1480..1481,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 70,
        column: 33,
        span: 1482..1485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 34,
        span: 1485..1486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 71,
        column: 4,
        span: 1489..1490,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 71,
        column: 6,
        span: 1491..1492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 71,
        column: 13,
        span: 1493..1499,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 14,
        span: 1499..1500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 71,
        column: 20,
        span: 1500..1506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 21,
        span: 1506..1507,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s 2> %s\"",
        ),
        line: 71,
        column: 31,
        span: 1507..1517,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 32,
        span: 1517..1518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 71,
        column: 34,
        span: 1519..1520,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 35,
        span: 1520..1521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 71,
        column: 39,
        span: 1522..1525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 40,
        span: 1525..1526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 72,
        column: 9,
        span: 1558..1564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 10,
        span: 1564..1565,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 72,
        column: 13,
        span: 1565..1568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 72,
        column: 16,
        span: 1569..1571,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 72,
        column: 17,
        span: 1571..1572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        line: 72,
        column: 24,
        span: 1572..1579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 25,
        span: 1579..1580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 72,
        column: 26,
        span: 1580..1581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 27,
        span: 1581..1582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 28,
        span: 1582..1583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 73,
        column: 9,
        span: 1586..1592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 10,
        span: 1592..1593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 73,
        column: 16,
        span: 1593..1599,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 73,
        column: 17,
        span: 1599..1600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 73,
        column: 21,
        span: 1600..1604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 22,
        span: 1604..1605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 73,
        column: 31,
        span: 1605..1614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 32,
        span: 1614..1615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 33,
        span: 1615..1616,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 34,
        span: 1616..1617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 73,
        column: 38,
        span: 1618..1621,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 39,
        span: 1621..1622,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 41,
        span: 1622..1624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 42,
        span: 1624..1625,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 73,
        column: 47,
        span: 1626..1630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 48,
        span: 1630..1631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 49,
        span: 1631..1632,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 74,
        column: 0,
        span: 1657..1660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 76,
        column: 4,
        span: 1662..1665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 5,
        span: 1665..1666,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua -v'",
        ),
        line: 76,
        column: 13,
        span: 1666..1674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 14,
        span: 1674..1675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 78,
        column: 6,
        span: 1677..1682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 7,
        span: 1682..1683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 78,
        column: 13,
        span: 1683..1689,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 78,
        column: 14,
        span: 1689..1690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 78,
        column: 20,
        span: 1690..1696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 21,
        span: 1696..1697,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(temporary program file used in these tests: %s)\"",
        ),
        line: 78,
        column: 71,
        span: 1697..1747,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 72,
        span: 1747..1748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 78,
        column: 77,
        span: 1749..1753,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 78,
        span: 1753..1754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 79,
        span: 1754..1755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 81,
        column: 9,
        span: 1784..1792,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 81,
        column: 11,
        span: 1792..1794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 82,
        column: 4,
        span: 1795..1798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 5,
        span: 1798..1799,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua - < %s > %s'",
        ),
        line: 82,
        column: 22,
        span: 1799..1816,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 23,
        span: 1816..1817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 82,
        column: 28,
        span: 1818..1822,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 29,
        span: 1822..1823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 82,
        column: 33,
        span: 1824..1827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 34,
        span: 1827..1828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 83,
        column: 9,
        span: 1829..1837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 10,
        span: 1837..1838,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 83,
        column: 12,
        span: 1838..1840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 13,
        span: 1840..1841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 85,
        column: 9,
        span: 1843..1851,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  print(\n1, a\n)\n]]",
        ),
        line: 89,
        column: 3,
        span: 1851..1872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 90,
        column: 4,
        span: 1873..1876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 5,
        span: 1876..1877,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua - < %s > %s'",
        ),
        line: 90,
        column: 22,
        span: 1877..1894,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 23,
        span: 1894..1895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 90,
        column: 28,
        span: 1896..1900,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 29,
        span: 1900..1901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 90,
        column: 33,
        span: 1902..1905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 34,
        span: 1905..1906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 91,
        column: 9,
        span: 1907..1915,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 10,
        span: 1915..1916,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\tnil\\n\"",
        ),
        line: 91,
        column: 20,
        span: 1916..1926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 21,
        span: 1926..1927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 93,
        column: 4,
        span: 1929..1932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 5,
        span: 1932..1933,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"print(10)\\nprint(2)\\n\" | lua > %s'",
        ),
        line: 93,
        column: 46,
        span: 1933..1974,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 47,
        span: 1974..1975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 93,
        column: 51,
        span: 1976..1979,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 52,
        span: 1979..1980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 94,
        column: 9,
        span: 1981..1989,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 10,
        span: 1989..1990,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\\n2\\n\"",
        ),
        line: 94,
        column: 19,
        span: 1990..1999,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 20,
        span: 1999..2000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 98,
        column: 4,
        span: 2022..2025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 5,
        span: 2025..2026,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"print(arg[1])\" | lua - -h > %s'",
        ),
        line: 98,
        column: 43,
        span: 2026..2064,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 44,
        span: 2064..2065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 98,
        column: 48,
        span: 2066..2069,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 49,
        span: 2069..2070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 99,
        column: 9,
        span: 2071..2079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 10,
        span: 2079..2080,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-h\\n\"",
        ),
        line: 99,
        column: 16,
        span: 2080..2086,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 17,
        span: 2086..2087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 103,
        column: 9,
        span: 2132..2140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 10,
        span: 2140..2141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.path)\"",
        ),
        line: 103,
        column: 31,
        span: 2141..2162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 32,
        span: 2162..2163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 106,
        column: 4,
        span: 2182..2185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 5,
        span: 2185..2186,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT= LUA_PATH=x lua %s > %s'",
        ),
        line: 106,
        column: 43,
        span: 2186..2224,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 44,
        span: 2224..2225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 106,
        column: 49,
        span: 2226..2230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 50,
        span: 2230..2231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 106,
        column: 54,
        span: 2232..2235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 55,
        span: 2235..2236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 107,
        column: 9,
        span: 2237..2245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 10,
        span: 2245..2246,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\\n\"",
        ),
        line: 107,
        column: 15,
        span: 2246..2251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 16,
        span: 2251..2252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 110,
        column: 4,
        span: 2279..2282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 5,
        span: 2282..2283,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT= LUA_PATH_5_4=y LUA_PATH=x lua %s > %s'",
        ),
        line: 110,
        column: 58,
        span: 2283..2336,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 59,
        span: 2336..2337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 110,
        column: 64,
        span: 2338..2342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 65,
        span: 2342..2343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 110,
        column: 69,
        span: 2344..2347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 70,
        span: 2347..2348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 111,
        column: 9,
        span: 2349..2357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 10,
        span: 2357..2358,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\\n\"",
        ),
        line: 111,
        column: 15,
        span: 2358..2363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 16,
        span: 2363..2364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 114,
        column: 9,
        span: 2384..2392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 10,
        span: 2392..2393,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.cpath)\"",
        ),
        line: 114,
        column: 32,
        span: 2393..2415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 33,
        span: 2415..2416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 115,
        column: 4,
        span: 2417..2420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 5,
        span: 2420..2421,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT= LUA_CPATH=xuxu lua %s > %s'",
        ),
        line: 115,
        column: 47,
        span: 2421..2463,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 115,
        column: 48,
        span: 2463..2464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 115,
        column: 53,
        span: 2465..2469,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 115,
        column: 54,
        span: 2469..2470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 115,
        column: 58,
        span: 2471..2474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 59,
        span: 2474..2475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 116,
        column: 9,
        span: 2476..2484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 10,
        span: 2484..2485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\\n\"",
        ),
        line: 116,
        column: 18,
        span: 2485..2493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 19,
        span: 2493..2494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 119,
        column: 4,
        span: 2522..2525,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 5,
        span: 2525..2526,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT= LUA_CPATH_5_4=yacc LUA_CPATH=x lua %s > %s'",
        ),
        line: 119,
        column: 63,
        span: 2526..2584,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 64,
        span: 2584..2585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 119,
        column: 69,
        span: 2586..2590,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 70,
        span: 2590..2591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 119,
        column: 74,
        span: 2592..2595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 75,
        span: 2595..2596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 120,
        column: 9,
        span: 2597..2605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 10,
        span: 2605..2606,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yacc\\n\"",
        ),
        line: 120,
        column: 18,
        span: 2606..2614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 19,
        span: 2614..2615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 123,
        column: 9,
        span: 2666..2674,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 10,
        span: 2674..2675,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(X)\"",
        ),
        line: 123,
        column: 20,
        span: 2675..2685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 21,
        span: 2685..2686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 124,
        column: 4,
        span: 2687..2690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 5,
        span: 2690..2691,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT=\"X=tonumber(arg[1])\" lua %s 3.2 > %s'",
        ),
        line: 124,
        column: 56,
        span: 2691..2742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 57,
        span: 2742..2743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 124,
        column: 62,
        span: 2744..2748,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 63,
        span: 2748..2749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 124,
        column: 67,
        span: 2750..2753,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 68,
        span: 2753..2754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 125,
        column: 9,
        span: 2755..2763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 10,
        span: 2763..2764,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3.2\\n\"",
        ),
        line: 125,
        column: 17,
        span: 2764..2771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 18,
        span: 2771..2772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 128,
        column: 9,
        span: 2799..2807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 10,
        span: 2807..2808,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(X)\"",
        ),
        line: 128,
        column: 20,
        span: 2808..2818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 21,
        span: 2818..2819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 129,
        column: 4,
        span: 2820..2823,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 5,
        span: 2823..2824,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT_5_4=\"X=10\" LUA_INIT=\"X=3\" lua %s > %s'",
        ),
        line: 129,
        column: 57,
        span: 2824..2876,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 58,
        span: 2876..2877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 129,
        column: 63,
        span: 2878..2882,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 64,
        span: 2882..2883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 129,
        column: 68,
        span: 2884..2887,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 69,
        span: 2887..2888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 130,
        column: 9,
        span: 2889..2897,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 10,
        span: 2897..2898,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\\n\"",
        ),
        line: 130,
        column: 16,
        span: 2898..2904,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 17,
        span: 2904..2905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 133,
        column: 9,
        span: 2934..2942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 10,
        span: 2942..2943,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x = x or 10; print(x); x = x + 1\"",
        ),
        line: 133,
        column: 44,
        span: 2943..2977,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 45,
        span: 2977..2978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 134,
        column: 4,
        span: 2979..2982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 5,
        span: 2982..2983,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT=\"@%s\" lua %s > %s'",
        ),
        line: 134,
        column: 37,
        span: 2983..3015,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 38,
        span: 3015..3016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 134,
        column: 43,
        span: 3017..3021,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 44,
        span: 3021..3022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 134,
        column: 49,
        span: 3023..3027,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 50,
        span: 3027..3028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 134,
        column: 54,
        span: 3029..3032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 55,
        span: 3032..3033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 135,
        column: 9,
        span: 3034..3042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 10,
        span: 3042..3043,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\\n11\\n\"",
        ),
        line: 135,
        column: 20,
        span: 3043..3053,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 21,
        span: 3053..3054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 138,
        column: 6,
        span: 3083..3088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 7,
        span: 3088..3089,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LUA_INIT:1: msg'",
        ),
        line: 138,
        column: 24,
        span: 3089..3106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 25,
        span: 3106..3107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT=\"error(\\'msg\\')\" lua'",
        ),
        line: 138,
        column: 61,
        span: 3108..3143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 62,
        span: 3143..3144,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 141,
        column: 6,
        span: 3166..3171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 141,
        column: 18,
        span: 3172..3183,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 19,
        span: 3183..3184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultCpath",
        ),
        line: 141,
        column: 0,
        span: 3185..3197,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 143,
        column: 0,
        span: 3199..3201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 144,
        column: 11,
        span: 3204..3212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 12,
        span: 3212..3213,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.path, package.cpath)\"",
        ),
        line: 144,
        column: 48,
        span: 3213..3249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 49,
        span: 3249..3250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 145,
        column: 6,
        span: 3253..3256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 7,
        span: 3256..3257,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT=\"error(10)\" LUA_PATH=xxx LUA_CPATH=xxx lua -E %s > %s'",
        ),
        line: 145,
        column: 75,
        span: 3257..3325,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 76,
        span: 3325..3326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 146,
        column: 12,
        span: 3334..3338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 13,
        span: 3338..3339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 146,
        column: 17,
        span: 3340..3343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 18,
        span: 3343..3344,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 147,
        column: 8,
        span: 3347..3352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 147,
        column: 15,
        span: 3353..3359,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 147,
        column: 17,
        span: 3360..3361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 147,
        column: 27,
        span: 3362..3371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 28,
        span: 3371..3372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 29,
        span: 3372..3373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 148,
        column: 14,
        span: 3376..3387,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 148,
        column: 16,
        span: 3388..3389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 148,
        column: 23,
        span: 3390..3396,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 148,
        column: 24,
        span: 3396..3397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 148,
        column: 29,
        span: 3397..3402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 30,
        span: 3402..3403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 148,
        column: 36,
        span: 3403..3409,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 37,
        span: 3409..3410,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^(.-)\\t\"",
        ),
        line: 148,
        column: 47,
        span: 3411..3420,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 48,
        span: 3420..3421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultCpath",
        ),
        line: 149,
        column: 15,
        span: 3424..3436,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 149,
        column: 17,
        span: 3437..3438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 149,
        column: 24,
        span: 3439..3445,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 149,
        column: 25,
        span: 3445..3446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 149,
        column: 30,
        span: 3446..3451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 31,
        span: 3451..3452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 149,
        column: 37,
        span: 3452..3458,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 38,
        span: 3458..3459,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\t(.-)$\"",
        ),
        line: 149,
        column: 48,
        span: 3460..3469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 49,
        span: 3469..3470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 152,
        column: 6,
        span: 3513..3516,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 7,
        span: 3516..3517,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env -i lua %s > %s'",
        ),
        line: 152,
        column: 27,
        span: 3517..3537,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 28,
        span: 3537..3538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 152,
        column: 33,
        span: 3539..3543,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 34,
        span: 3543..3544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 152,
        column: 38,
        span: 3545..3548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 39,
        span: 3548..3549,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 153,
        column: 8,
        span: 3552..3557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 153,
        column: 12,
        span: 3558..3561,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 153,
        column: 14,
        span: 3562..3563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 153,
        column: 24,
        span: 3564..3573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 25,
        span: 3573..3574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 26,
        span: 3574..3575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
        column: 9,
        span: 3578..3584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 10,
        span: 3584..3585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 154,
        column: 21,
        span: 3585..3596,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 24,
        span: 3597..3599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 154,
        column: 31,
        span: 3600..3606,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 154,
        column: 32,
        span: 3606..3607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 154,
        column: 37,
        span: 3607..3612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 38,
        span: 3612..3613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 154,
        column: 44,
        span: 3613..3619,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 45,
        span: 3619..3620,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^(.-)\\t\"",
        ),
        line: 154,
        column: 55,
        span: 3621..3630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 56,
        span: 3630..3631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 57,
        span: 3631..3632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 155,
        column: 9,
        span: 3635..3641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 10,
        span: 3641..3642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultCpath",
        ),
        line: 155,
        column: 22,
        span: 3642..3654,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 155,
        column: 25,
        span: 3655..3657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 155,
        column: 32,
        span: 3658..3664,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 155,
        column: 33,
        span: 3664..3665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 155,
        column: 38,
        span: 3665..3670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 39,
        span: 3670..3671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 155,
        column: 45,
        span: 3671..3677,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 46,
        span: 3677..3678,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\t(.-)$\"",
        ),
        line: 155,
        column: 56,
        span: 3679..3688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 57,
        span: 3688..3689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 58,
        span: 3689..3690,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 156,
        column: 0,
        span: 3691..3694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 159,
        column: 7,
        span: 3720..3726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 8,
        span: 3726..3727,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 159,
        column: 11,
        span: 3727..3730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 159,
        column: 18,
        span: 3731..3737,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 159,
        column: 19,
        span: 3737..3738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 159,
        column: 23,
        span: 3738..3742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 24,
        span: 3742..3743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 159,
        column: 35,
        span: 3743..3754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 36,
        span: 3754..3755,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxx\"",
        ),
        line: 159,
        column: 42,
        span: 3756..3761,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 43,
        span: 3761..3762,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 159,
        column: 0,
        span: 3763..3766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 160,
        column: 14,
        span: 3774..3780,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 160,
        column: 15,
        span: 3780..3781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 160,
        column: 19,
        span: 3781..3785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 20,
        span: 3785..3786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 160,
        column: 31,
        span: 3786..3797,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 160,
        column: 32,
        span: 3797..3798,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua\"",
        ),
        line: 160,
        column: 38,
        span: 3799..3804,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 39,
        span: 3804..3805,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 160,
        column: 0,
        span: 3806..3809,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 161,
        column: 11,
        span: 3817..3820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 161,
        column: 18,
        span: 3821..3827,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 161,
        column: 19,
        span: 3827..3828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 161,
        column: 23,
        span: 3828..3832,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 24,
        span: 3832..3833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultCpath",
        ),
        line: 161,
        column: 36,
        span: 3833..3845,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 37,
        span: 3845..3846,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxx\"",
        ),
        line: 161,
        column: 43,
        span: 3847..3852,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 44,
        span: 3852..3853,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 161,
        column: 0,
        span: 3854..3857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 162,
        column: 14,
        span: 3865..3871,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 162,
        column: 15,
        span: 3871..3872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 162,
        column: 19,
        span: 3872..3876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 20,
        span: 3876..3877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultCpath",
        ),
        line: 162,
        column: 32,
        span: 3877..3889,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 33,
        span: 3889..3890,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua\"",
        ),
        line: 162,
        column: 39,
        span: 3891..3896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 40,
        span: 3896..3897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 41,
        span: 3897..3898,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 166,
        column: 6,
        span: 3945..3950,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 166,
        column: 15,
        span: 3951..3959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 166,
        column: 23,
        span: 3960..3967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 25,
        span: 3968..3969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 166,
        column: 26,
        span: 3969..3970,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 27,
        span: 3970..3971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 167,
        column: 11,
        span: 3974..3982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 12,
        span: 3982..3983,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.path)\"",
        ),
        line: 167,
        column: 33,
        span: 3983..4004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 34,
        span: 4004..4005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 168,
        column: 6,
        span: 4008..4011,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 7,
        span: 4011..4012,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_PATH=\"%s\" lua %s > %s'",
        ),
        line: 168,
        column: 38,
        span: 4012..4043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 168,
        column: 39,
        span: 4043..4044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 168,
        column: 41,
        span: 4045..4046,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 168,
        column: 42,
        span: 4046..4047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 168,
        column: 47,
        span: 4048..4052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 168,
        column: 48,
        span: 4052..4053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 168,
        column: 52,
        span: 4054..4057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 53,
        span: 4057..4058,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 169,
        column: 8,
        span: 4061..4066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 169,
        column: 17,
        span: 4067..4075,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 169,
        column: 19,
        span: 4076..4077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 169,
        column: 29,
        span: 4078..4087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 30,
        span: 4087..4088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 31,
        span: 4088..4089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 170,
        column: 11,
        span: 4092..4100,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 170,
        column: 13,
        span: 4101..4102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 170,
        column: 20,
        span: 4103..4109,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 170,
        column: 21,
        span: 4109..4110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 170,
        column: 24,
        span: 4110..4113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 25,
        span: 4113..4114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 170,
        column: 33,
        span: 4114..4122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 34,
        span: 4122..4123,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 36,
        span: 4123..4125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 37,
        span: 4125..4126,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 170,
        column: 39,
        span: 4127..4128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 40,
        span: 4127..4129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 41,
        span: 4129..4130,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 171,
        column: 5,
        span: 4160..4162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 171,
        column: 12,
        span: 4163..4169,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 171,
        column: 13,
        span: 4169..4170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 171,
        column: 17,
        span: 4170..4174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 18,
        span: 4174..4175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 171,
        column: 19,
        span: 4175..4176,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 20,
        span: 4176..4177,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;\"",
        ),
        line: 171,
        column: 25,
        span: 4178..4182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 26,
        span: 4182..4183,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 171,
        column: 0,
        span: 4184..4188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 172,
        column: 6,
        span: 4193..4194,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 172,
        column: 8,
        span: 4195..4196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 172,
        column: 15,
        span: 4197..4203,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 172,
        column: 16,
        span: 4203..4204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 172,
        column: 20,
        span: 4204..4208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 21,
        span: 4208..4209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 172,
        column: 22,
        span: 4209..4210,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 23,
        span: 4210..4211,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;\"",
        ),
        line: 172,
        column: 28,
        span: 4212..4216,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 29,
        span: 4216..4217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 172,
        column: 33,
        span: 4218..4221,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 172,
        column: 35,
        span: 4221..4223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 172,
        column: 46,
        span: 4223..4234,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 172,
        column: 48,
        span: 4234..4236,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 172,
        column: 51,
        span: 4236..4239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 52,
        span: 4239..4240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 173,
        column: 6,
        span: 4245..4246,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
        column: 8,
        span: 4247..4248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 173,
        column: 15,
        span: 4249..4255,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 173,
        column: 16,
        span: 4255..4256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 173,
        column: 20,
        span: 4256..4260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 21,
        span: 4260..4261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 173,
        column: 22,
        span: 4261..4262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 23,
        span: 4262..4263,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^;\"",
        ),
        line: 173,
        column: 28,
        span: 4264..4268,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 29,
        span: 4268..4269,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 173,
        column: 32,
        span: 4270..4272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 33,
        span: 4272..4273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 174,
        column: 6,
        span: 4311..4312,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 174,
        column: 8,
        span: 4313..4314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 174,
        column: 15,
        span: 4315..4321,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 174,
        column: 16,
        span: 4321..4322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 174,
        column: 20,
        span: 4322..4326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 21,
        span: 4326..4327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 174,
        column: 22,
        span: 4327..4328,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 23,
        span: 4328..4329,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";$\"",
        ),
        line: 174,
        column: 28,
        span: 4330..4334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 29,
        span: 4334..4335,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 174,
        column: 32,
        span: 4336..4338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 33,
        span: 4338..4339,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 175,
        column: 0,
        span: 4369..4372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 176,
        column: 9,
        span: 4375..4381,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 10,
        span: 4381..4382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 176,
        column: 11,
        span: 4382..4383,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 176,
        column: 14,
        span: 4384..4386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 176,
        column: 23,
        span: 4387..4395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 24,
        span: 4395..4396,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 177,
        column: 0,
        span: 4397..4400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 179,
        column: 8,
        span: 4402..4409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 9,
        span: 4409..4410,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 179,
        column: 12,
        span: 4410..4413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 13,
        span: 4413..4414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 180,
        column: 8,
        span: 4415..4422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 9,
        span: 4422..4423,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;\"",
        ),
        line: 180,
        column: 13,
        span: 4423..4427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 14,
        span: 4427..4428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 181,
        column: 8,
        span: 4429..4436,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 9,
        span: 4436..4437,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a;;b\"",
        ),
        line: 181,
        column: 15,
        span: 4437..4443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 16,
        span: 4443..4444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 182,
        column: 8,
        span: 4445..4452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 9,
        span: 4452..4453,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;b\"",
        ),
        line: 182,
        column: 14,
        span: 4453..4458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 15,
        span: 4458..4459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 183,
        column: 8,
        span: 4460..4467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 9,
        span: 4467..4468,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a;;\"",
        ),
        line: 183,
        column: 14,
        span: 4468..4473,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 15,
        span: 4473..4474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 184,
        column: 8,
        span: 4475..4482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 9,
        span: 4482..4483,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a;b;;c\"",
        ),
        line: 184,
        column: 17,
        span: 4483..4491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 18,
        span: 4491..4492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 188,
        column: 9,
        span: 4530..4538,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 10,
        span: 4538..4539,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(1); a=2; return {x=15}\"",
        ),
        line: 188,
        column: 40,
        span: 4539..4569,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 41,
        span: 4569..4570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 189,
        column: 9,
        span: 4571..4579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 10,
        span: 4579..4580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 11,
        span: 4580..4581,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(a); print(_G['%s'].x)\"",
        ),
        line: 189,
        column: 40,
        span: 4581..4610,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 41,
        span: 4610..4611,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 189,
        column: 42,
        span: 4611..4612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 189,
        column: 48,
        span: 4612..4618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 49,
        span: 4618..4619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 189,
        column: 53,
        span: 4619..4623,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 54,
        span: 4623..4624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 55,
        span: 4624..4625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 189,
        column: 65,
        span: 4626..4635,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 66,
        span: 4635..4636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 190,
        column: 4,
        span: 4637..4640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 5,
        span: 4640..4641,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_PATH=\"?;;\" lua -l %s -l%s -lstring -l io %s > %s'",
        ),
        line: 190,
        column: 63,
        span: 4641..4699,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 64,
        span: 4699..4700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 190,
        column: 69,
        span: 4701..4705,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 70,
        span: 4705..4706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 190,
        column: 80,
        span: 4707..4716,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 81,
        span: 4716..4717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 190,
        column: 91,
        span: 4718..4727,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 92,
        span: 4727..4728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 190,
        column: 96,
        span: 4729..4732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 97,
        span: 4732..4733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 191,
        column: 9,
        span: 4734..4742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 10,
        span: 4742..4743,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\n2\\n15\\n2\\n15\\n\"",
        ),
        line: 191,
        column: 29,
        span: 4743..4762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 30,
        span: 4762..4763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 194,
        column: 9,
        span: 4801..4809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 10,
        span: 4809..4810,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(str.upper'alo alo', m.max(10, 20))\"",
        ),
        line: 194,
        column: 52,
        span: 4810..4852,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 53,
        span: 4852..4853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 195,
        column: 4,
        span: 4854..4857,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 5,
        span: 4857..4858,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -l 'str=string' '-lm=math' -e 'print(m.sin(0))' %s > %s\"",
        ),
        line: 195,
        column: 66,
        span: 4858..4919,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 67,
        span: 4919..4920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 195,
        column: 72,
        span: 4921..4925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 73,
        span: 4925..4926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 195,
        column: 77,
        span: 4927..4930,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 78,
        span: 4930..4931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 196,
        column: 9,
        span: 4932..4940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 10,
        span: 4940..4941,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0.0\\nALO ALO\\t20\\n\"",
        ),
        line: 196,
        column: 30,
        span: 4941..4961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 31,
        span: 4961..4962,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 199,
        column: 6,
        span: 4984..4989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 199,
        column: 8,
        span: 4990..4991,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 199,
        column: 10,
        span: 4992..4993,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  assert(#arg == 3 and arg[1] == 'a' and\n         arg[2] == 'b' and arg[3] == 'c')\n  assert(arg[-1] == '--' and arg[-2] == \"-e \" and arg[-3] == '%s')\n  assert(arg[4] == undef and arg[-4] == undef)\n  local a, b, c = ...\n  assert(... == 'a' and a == 'a' and b == 'b' and c == 'c')\n]]",
        ),
        line: 206,
        column: 3,
        span: 4994..5278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 207,
        column: 2,
        span: 5279..5280,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 207,
        column: 4,
        span: 5281..5282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 207,
        column: 11,
        span: 5283..5289,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 207,
        column: 12,
        span: 5289..5290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 207,
        column: 18,
        span: 5290..5296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 19,
        span: 5296..5297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 207,
        column: 20,
        span: 5297..5298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 21,
        span: 5298..5299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 207,
        column: 30,
        span: 5300..5308,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 31,
        span: 5308..5309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 208,
        column: 9,
        span: 5310..5318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 10,
        span: 5318..5319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 208,
        column: 11,
        span: 5319..5320,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 12,
        span: 5320..5321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 209,
        column: 4,
        span: 5322..5325,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 5,
        span: 5325..5326,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua \"-e \" -- %s a b c'",
        ),
        line: 209,
        column: 28,
        span: 5326..5349,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 29,
        span: 5349..5350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 209,
        column: 34,
        span: 5351..5355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 35,
        span: 5355..5356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 212,
        column: 9,
        span: 5431..5439,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(arg)\"",
        ),
        line: 212,
        column: 22,
        span: 5439..5452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 213,
        column: 9,
        span: 5453..5461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 10,
        span: 5461..5462,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(arg)\"",
        ),
        line: 213,
        column: 23,
        span: 5462..5475,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 24,
        span: 5475..5476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 213,
        column: 34,
        span: 5477..5486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 35,
        span: 5486..5487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 214,
        column: 4,
        span: 5488..5491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 5,
        span: 5491..5492,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_PATH=\"?;;\" lua -l%s - < %s'",
        ),
        line: 214,
        column: 41,
        span: 5492..5528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 42,
        span: 5528..5529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 214,
        column: 47,
        span: 5530..5534,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 48,
        span: 5534..5535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 214,
        column: 58,
        span: 5536..5545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 59,
        span: 5545..5546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 217,
        column: 4,
        span: 5583..5586,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 5,
        span: 5586..5587,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"print(...)\" | lua -e \"arg[1] = 100\" - > %s'",
        ),
        line: 217,
        column: 55,
        span: 5587..5637,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
        column: 56,
        span: 5637..5638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 217,
        column: 60,
        span: 5639..5642,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 61,
        span: 5642..5643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 218,
        column: 9,
        span: 5644..5652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 10,
        span: 5652..5653,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"100\\n\"",
        ),
        line: 218,
        column: 17,
        span: 5653..5660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 18,
        span: 5660..5661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 219,
        column: 6,
        span: 5662..5667,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 7,
        span: 5667..5668,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'arg' is not a table\"",
        ),
        line: 219,
        column: 29,
        span: 5668..5690,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
        column: 30,
        span: 5690..5691,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"\" | lua -e \"arg = 1\" -'",
        ),
        line: 219,
        column: 61,
        span: 5692..5722,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 62,
        span: 5722..5723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 222,
        column: 4,
        span: 5750..5753,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 5,
        span: 5753..5754,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo 10 | lua -e \"print=nil\" -i > /dev/null 2> %s'",
        ),
        line: 222,
        column: 56,
        span: 5754..5805,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 57,
        span: 5805..5806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 222,
        column: 61,
        span: 5807..5810,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 62,
        span: 5810..5811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 223,
        column: 7,
        span: 5812..5818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 8,
        span: 5818..5819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 223,
        column: 14,
        span: 5819..5825,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 223,
        column: 15,
        span: 5825..5826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 223,
        column: 19,
        span: 5826..5830,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 20,
        span: 5830..5831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 223,
        column: 29,
        span: 5831..5840,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 30,
        span: 5840..5841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 31,
        span: 5841..5842,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 32,
        span: 5842..5843,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error calling 'print'\"",
        ),
        line: 223,
        column: 56,
        span: 5844..5867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 57,
        span: 5867..5868,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 58,
        span: 5868..5869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 226,
        column: 4,
        span: 5893..5896,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 5,
        span: 5896..5897,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"io.stderr:write(1000)\\ncont\" | lua -e \"require\\'debug\\'.debug()\" 2> %s'",
        ),
        line: 226,
        column: 83,
        span: 5897..5975,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 84,
        span: 5975..5976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 226,
        column: 88,
        span: 5977..5980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 89,
        span: 5980..5981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 227,
        column: 9,
        span: 5982..5990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 10,
        span: 5990..5991,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua_debug> 1000lua_debug> \"",
        ),
        line: 227,
        column: 38,
        span: 5991..6019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 39,
        span: 6019..6020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 230,
        column: 6,
        span: 6023..6028,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 7,
        span: 6028..6029,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing warnings\"",
        ),
        line: 230,
        column: 25,
        span: 6029..6047,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 26,
        span: 6047..6048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 233,
        column: 4,
        span: 6076..6079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 5,
        span: 6079..6080,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"io.stderr:write(1); warn[[XXX]]\" | lua 2> %s'",
        ),
        line: 233,
        column: 57,
        span: 6080..6132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 58,
        span: 6132..6133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 233,
        column: 62,
        span: 6134..6137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 63,
        span: 6137..6138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 234,
        column: 9,
        span: 6139..6147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 10,
        span: 6147..6148,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 234,
        column: 13,
        span: 6148..6151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 14,
        span: 6151..6152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 236,
        column: 9,
        span: 6154..6162,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nwarn(\"@allow\")               -- unknown control, ignored\nwarn(\"@off\", \"XXX\", \"@off\")  -- these are not control messages\nwarn(\"@off\")                 -- this one is\nwarn(\"@on\", \"YYY\", \"@on\")    -- not control, but warn is off\nwarn(\"@off\")                 -- keep it off\nwarn(\"@on\")                  -- restart warnings\nwarn(\"\", \"@on\")              -- again, no control, real warning\nwarn(\"@on\")                  -- keep it \"started\"\nwarn(\"Z\", \"Z\", \"Z\")          -- common warning\n]]",
        ),
        line: 246,
        column: 3,
        span: 6162..6646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 247,
        column: 4,
        span: 6647..6650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 5,
        span: 6650..6651,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua -W %s 2> %s'",
        ),
        line: 247,
        column: 22,
        span: 6651..6668,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 23,
        span: 6668..6669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 247,
        column: 28,
        span: 6670..6674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 29,
        span: 6674..6675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 247,
        column: 33,
        span: 6676..6679,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 34,
        span: 6679..6680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 248,
        column: 9,
        span: 6681..6689,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nLua warning: @offXXX@off\nLua warning: @on\nLua warning: ZZZ\n]]",
        ),
        line: 252,
        column: 3,
        span: 6689..6753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 254,
        column: 9,
        span: 6755..6763,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nwarn(\"@allow\")\n-- create two objects to be finalized when closing state\n-- the errors in the finalizers must generate warnings\nu1 = setmetatable({}, {__gc = function () error(\"XYZ\") end})\nu2 = setmetatable({}, {__gc = function () error(\"ZYX\") end})\n]]",
        ),
        line: 260,
        column: 3,
        span: 6763..7017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 261,
        column: 4,
        span: 7018..7021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
        column: 5,
        span: 7021..7022,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua -W %s 2> %s'",
        ),
        line: 261,
        column: 22,
        span: 7022..7039,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 23,
        span: 7039..7040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 261,
        column: 28,
        span: 7041..7045,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 29,
        span: 7045..7046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 261,
        column: 33,
        span: 7047..7050,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
        column: 34,
        span: 7050..7051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 262,
        column: 13,
        span: 7052..7064,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 14,
        span: 7064..7065,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ZYX)\\nXYZ)\\n\"",
        ),
        line: 262,
        column: 28,
        span: 7065..7079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 29,
        span: 7079..7080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 266,
        column: 9,
        span: 7174..7182,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n-- should be called last\nprint(\"creating 1\")\nsetmetatable({}, {__gc = function () print(1) end})\n\nprint(\"creating 2\")\nsetmetatable({}, {__gc = function ()\n  print(\"2\")\n  print(\"creating 3\")\n  -- this finalizer should not be called, as object will be\n  -- created after 'lua_close' has been called\n  setmetatable({}, {__gc = function () print(3) end})\n  print(collectgarbage())    -- cannot call collector here\n  os.exit(0, true)\nend})\n]]",
        ),
        line: 281,
        column: 3,
        span: 7182..7622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 282,
        column: 4,
        span: 7623..7626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 5,
        span: 7626..7627,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua -W %s > %s'",
        ),
        line: 282,
        column: 21,
        span: 7627..7643,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
        column: 22,
        span: 7643..7644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 282,
        column: 27,
        span: 7645..7649,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
        column: 28,
        span: 7649..7650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 282,
        column: 32,
        span: 7651..7654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 33,
        span: 7654..7655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 283,
        column: 9,
        span: 7656..7664,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\ncreating 1\ncreating 2\n2\ncreating 3\nnil\n1\n]]",
        ),
        line: 290,
        column: 3,
        span: 7664..7710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 294,
        column: 9,
        span: 7736..7744,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[print(({...})[30])]]",
        ),
        line: 294,
        column: 31,
        span: 7744..7766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 295,
        column: 4,
        span: 7767..7770,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 5,
        span: 7770..7771,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s %s > %s'",
        ),
        line: 295,
        column: 21,
        span: 7771..7787,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 295,
        column: 22,
        span: 7787..7788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 295,
        column: 27,
        span: 7789..7793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 295,
        column: 28,
        span: 7793..7794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 295,
        column: 35,
        span: 7795..7801,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 295,
        column: 36,
        span: 7801..7802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 295,
        column: 39,
        span: 7802..7805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 40,
        span: 7805..7806,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" a\"",
        ),
        line: 295,
        column: 44,
        span: 7806..7810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 295,
        column: 45,
        span: 7810..7811,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 48,
        span: 7811..7814,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 49,
        span: 7814..7815,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 295,
        column: 50,
        span: 7815..7816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 295,
        column: 54,
        span: 7817..7820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 55,
        span: 7820..7821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 296,
        column: 9,
        span: 7822..7830,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 10,
        span: 7830..7831,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\n\"",
        ),
        line: 296,
        column: 15,
        span: 7831..7836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 16,
        span: 7836..7837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 298,
        column: 4,
        span: 7839..7842,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 5,
        span: 7842..7843,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua \"-eprint(1)\" -ea=3 -e \"print(a)\" > %s]]",
        ),
        line: 298,
        column: 50,
        span: 7843..7888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 298,
        column: 51,
        span: 7888..7889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 298,
        column: 55,
        span: 7890..7893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 56,
        span: 7893..7894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 299,
        column: 9,
        span: 7895..7903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 10,
        span: 7903..7904,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\n3\\n\"",
        ),
        line: 299,
        column: 18,
        span: 7904..7912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 19,
        span: 7912..7913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 302,
        column: 9,
        span: 7939..7947,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n(6*2-6) -- ===\na =\n10\nprint(a)\na]]",
        ),
        line: 307,
        column: 4,
        span: 7947..7984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 308,
        column: 4,
        span: 7985..7988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 5,
        span: 7988..7989,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        ),
        line: 308,
        column: 52,
        span: 7989..8036,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 53,
        span: 8036..8037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 308,
        column: 58,
        span: 8038..8042,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 59,
        span: 8042..8043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 308,
        column: 63,
        span: 8044..8047,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 64,
        span: 8047..8048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 309,
        column: 13,
        span: 8049..8061,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 14,
        span: 8061..8062,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"6\\n10\\n10\\n\\n\"",
        ),
        line: 309,
        column: 29,
        span: 8062..8077,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 30,
        span: 8077..8078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 311,
        column: 9,
        span: 8080..8088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 10,
        span: 8088..8089,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = [[b\\nc\\nd\\ne]]\\n=a\"",
        ),
        line: 311,
        column: 34,
        span: 8089..8113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 35,
        span: 8113..8114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 312,
        column: 4,
        span: 8115..8118,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 5,
        span: 8118..8119,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        ),
        line: 312,
        column: 52,
        span: 8119..8166,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 312,
        column: 53,
        span: 8166..8167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 312,
        column: 58,
        span: 8168..8172,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 312,
        column: 59,
        span: 8172..8173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 312,
        column: 63,
        span: 8174..8177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 64,
        span: 8177..8178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 313,
        column: 13,
        span: 8179..8191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 14,
        span: 8191..8192,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\nc\\nd\\ne\\n\\n\"",
        ),
        line: 313,
        column: 30,
        span: 8192..8208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 31,
        span: 8208..8209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 315,
        column: 7,
        span: 8211..8217,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 315,
        column: 9,
        span: 8218..8219,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 315,
        column: 15,
        span: 8220..8225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 316,
        column: 9,
        span: 8226..8234,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ --\na = 2\n]]",
        ),
        line: 318,
        column: 3,
        span: 8234..8248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 319,
        column: 4,
        span: 8249..8252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 5,
        span: 8252..8253,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua \"-e_PROMPT='%s'\" -i < %s > %s]]",
        ),
        line: 319,
        column: 42,
        span: 8253..8290,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
        column: 43,
        span: 8290..8291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 319,
        column: 50,
        span: 8292..8298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
        column: 51,
        span: 8298..8299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 319,
        column: 56,
        span: 8300..8304,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
        column: 57,
        span: 8304..8305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 319,
        column: 61,
        span: 8306..8309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 62,
        span: 8309..8310,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 320,
        column: 6,
        span: 8311..8316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 320,
        column: 8,
        span: 8317..8318,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 320,
        column: 10,
        span: 8319..8320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 320,
        column: 20,
        span: 8321..8330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 21,
        span: 8330..8331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 22,
        span: 8331..8332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 321,
        column: 7,
        span: 8333..8339,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 8,
        span: 8339..8340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 321,
        column: 14,
        span: 8340..8346,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 321,
        column: 15,
        span: 8346..8347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 321,
        column: 19,
        span: 8347..8351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 20,
        span: 8351..8352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 321,
        column: 21,
        span: 8352..8353,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 321,
        column: 22,
        span: 8353..8354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 321,
        column: 29,
        span: 8355..8361,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 321,
        column: 32,
        span: 8362..8364,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*\"",
        ),
        line: 321,
        column: 37,
        span: 8365..8369,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 321,
        column: 40,
        span: 8370..8372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 321,
        column: 47,
        span: 8373..8379,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 321,
        column: 50,
        span: 8380..8382,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*\"",
        ),
        line: 321,
        column: 55,
        span: 8383..8387,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 321,
        column: 58,
        span: 8388..8390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 321,
        column: 65,
        span: 8391..8397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 66,
        span: 8397..8398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 67,
        span: 8398..8399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 324,
        column: 9,
        span: 8429..8437,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ --\na = 2\n]]",
        ),
        line: 326,
        column: 3,
        span: 8437..8451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 327,
        column: 4,
        span: 8452..8455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 5,
        span: 8455..8456,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -i < %s > %s]]",
        ),
        line: 327,
        column: 25,
        span: 8456..8476,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 327,
        column: 26,
        span: 8476..8477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 327,
        column: 31,
        span: 8478..8482,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 327,
        column: 32,
        span: 8482..8483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 327,
        column: 36,
        span: 8484..8487,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 37,
        span: 8487..8488,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 328,
        column: 6,
        span: 8489..8494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 328,
        column: 8,
        span: 8495..8496,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 328,
        column: 10,
        span: 8497..8498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 328,
        column: 20,
        span: 8499..8508,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 328,
        column: 21,
        span: 8508..8509,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 22,
        span: 8509..8510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 329,
        column: 7,
        span: 8511..8517,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 329,
        column: 9,
        span: 8518..8519,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"> \"",
        ),
        line: 329,
        column: 14,
        span: 8520..8524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 330,
        column: 7,
        span: 8543..8549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 8,
        span: 8549..8550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 330,
        column: 14,
        span: 8550..8556,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 330,
        column: 15,
        span: 8556..8557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 330,
        column: 19,
        span: 8557..8561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 20,
        span: 8561..8562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 330,
        column: 21,
        span: 8562..8563,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
        column: 22,
        span: 8563..8564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 330,
        column: 29,
        span: 8565..8571,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 330,
        column: 32,
        span: 8572..8574,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*\"",
        ),
        line: 330,
        column: 37,
        span: 8575..8579,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 330,
        column: 40,
        span: 8580..8582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 330,
        column: 47,
        span: 8583..8589,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 330,
        column: 50,
        span: 8590..8592,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*\"",
        ),
        line: 330,
        column: 55,
        span: 8593..8597,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 330,
        column: 58,
        span: 8598..8600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 330,
        column: 65,
        span: 8601..8607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 66,
        span: 8607..8608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 67,
        span: 8608..8609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 334,
        column: 7,
        span: 8633..8639,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 334,
        column: 9,
        span: 8640..8641,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local C = 0;\\z\n   _PROMPT=setmetatable({},{__tostring = function () \\z\n     C = C + 1; return C end})\"",
        ),
        line: 337,
        column: 32,
        span: 8644..8747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 338,
        column: 9,
        span: 8748..8756,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ --\na = 2\n]]",
        ),
        line: 340,
        column: 3,
        span: 8756..8770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 341,
        column: 4,
        span: 8771..8774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 5,
        span: 8774..8775,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e \"%s\" -i < %s > %s]]",
        ),
        line: 341,
        column: 33,
        span: 8775..8803,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 341,
        column: 34,
        span: 8803..8804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 341,
        column: 41,
        span: 8805..8811,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 341,
        column: 42,
        span: 8811..8812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 341,
        column: 47,
        span: 8813..8817,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 341,
        column: 48,
        span: 8817..8818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 341,
        column: 52,
        span: 8819..8822,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 53,
        span: 8822..8823,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 342,
        column: 6,
        span: 8824..8829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 342,
        column: 8,
        span: 8830..8831,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 342,
        column: 10,
        span: 8832..8833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 342,
        column: 20,
        span: 8834..8843,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 21,
        span: 8843..8844,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 22,
        span: 8844..8845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 343,
        column: 7,
        span: 8846..8852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 8,
        span: 8852..8853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 343,
        column: 14,
        span: 8853..8859,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 343,
        column: 15,
        span: 8859..8860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 343,
        column: 19,
        span: 8860..8864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 20,
        span: 8864..8865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 343,
        column: 21,
        span: 8865..8866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 343,
        column: 22,
        span: 8866..8867,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n1 --\n2a = 2\n3\n]]",
        ),
        line: 347,
        column: 3,
        span: 8868..8887,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 4,
        span: 8887..8888,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
        column: 6,
        span: 8888..8890,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 7,
        span: 8890..8891,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 347,
        column: 12,
        span: 8892..8896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 13,
        span: 8896..8897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 14,
        span: 8897..8898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 351,
        column: 9,
        span: 8927..8935,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\ndebug = require \"debug\"\nm = {x=0}\nsetmetatable(m, {__tostring = function(x)\n  return tostring(debug.getinfo(4).currentline + x.x)\nend})\nerror(m)\n]]",
        ),
        line: 358,
        column: 3,
        span: 8935..9085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 359,
        column: 6,
        span: 9086..9091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 7,
        span: 9091..9092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 359,
        column: 15,
        span: 9092..9100,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 359,
        column: 18,
        span: 9101..9103,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\": 6\\n\"",
        ),
        line: 359,
        column: 26,
        span: 9104..9111,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 359,
        column: 27,
        span: 9111..9112,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua %s]]",
        ),
        line: 359,
        column: 38,
        span: 9113..9123,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 359,
        column: 39,
        span: 9123..9124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 359,
        column: 44,
        span: 9125..9129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 45,
        span: 9129..9130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 361,
        column: 9,
        span: 9132..9140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 10,
        span: 9140..9141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error{}\"",
        ),
        line: 361,
        column: 19,
        span: 9141..9150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 20,
        span: 9150..9151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 362,
        column: 6,
        span: 9152..9157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
        column: 7,
        span: 9157..9158,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error object is a table value\"",
        ),
        line: 362,
        column: 38,
        span: 9158..9189,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 362,
        column: 39,
        span: 9189..9190,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua %s]]",
        ),
        line: 362,
        column: 50,
        span: 9191..9201,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 362,
        column: 51,
        span: 9201..9202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 362,
        column: 56,
        span: 9203..9207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 57,
        span: 9207..9208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 366,
        column: 2,
        span: 9241..9242,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 366,
        column: 4,
        span: 9243..9244,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[=[ --\nfunction f ( x )\n  local a = [[\nxuxu\n]]\n  local b = \"\\\nxuxu\\n\"\n  if x == 11 then return 1 + 12 , 2 + 20 end  --[[ test multiple returns ]]\n  return x + 1\n  --\\\\\nend\nreturn( f( 100 ) )\nassert( a == b )\ndo return f( 11 ) end  ]=]",
        ),
        line: 379,
        column: 27,
        span: 9245..9479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 380,
        column: 2,
        span: 9480..9481,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 380,
        column: 4,
        span: 9482..9483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 380,
        column: 11,
        span: 9484..9490,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 380,
        column: 12,
        span: 9490..9491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 380,
        column: 16,
        span: 9491..9495,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 17,
        span: 9495..9496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 380,
        column: 18,
        span: 9496..9497,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
        column: 19,
        span: 9497..9498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 380,
        column: 23,
        span: 9499..9502,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
        column: 24,
        span: 9502..9503,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n\\n'",
        ),
        line: 380,
        column: 31,
        span: 9504..9510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
        column: 32,
        span: 9510..9511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 381,
        column: 9,
        span: 9548..9556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 381,
        column: 10,
        span: 9556..9557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 381,
        column: 11,
        span: 9557..9558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 381,
        column: 12,
        span: 9558..9559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 382,
        column: 4,
        span: 9560..9563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 5,
        span: 9563..9564,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        ),
        line: 382,
        column: 52,
        span: 9564..9611,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 382,
        column: 53,
        span: 9611..9612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 382,
        column: 58,
        span: 9613..9617,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 382,
        column: 59,
        span: 9617..9618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 382,
        column: 63,
        span: 9619..9622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 64,
        span: 9622..9623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 383,
        column: 13,
        span: 9624..9636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 14,
        span: 9636..9637,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"101\\n13\\t22\\n\\n\"",
        ),
        line: 383,
        column: 31,
        span: 9637..9654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 32,
        span: 9654..9655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 385,
        column: 9,
        span: 9657..9665,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[#comment in 1st line without \\n at the end]]",
        ),
        line: 385,
        column: 55,
        span: 9665..9711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 386,
        column: 4,
        span: 9712..9715,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 5,
        span: 9715..9716,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s'",
        ),
        line: 386,
        column: 13,
        span: 9716..9724,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 14,
        span: 9724..9725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 386,
        column: 19,
        span: 9726..9730,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 20,
        span: 9730..9731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 388,
        column: 9,
        span: 9733..9741,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[#test line number when file starts with comment line\ndebug = require\"debug\"\nprint(debug.getinfo(1).currentline)\n]]",
        ),
        line: 391,
        column: 3,
        span: 9741..9857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 392,
        column: 4,
        span: 9858..9861,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 5,
        span: 9861..9862,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s > %s'",
        ),
        line: 392,
        column: 18,
        span: 9862..9875,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
        column: 19,
        span: 9875..9876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 392,
        column: 24,
        span: 9877..9881,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
        column: 25,
        span: 9881..9882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 392,
        column: 29,
        span: 9883..9886,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
        column: 30,
        span: 9886..9887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 393,
        column: 13,
        span: 9888..9900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 14,
        span: 9900..9901,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'3\\n'",
        ),
        line: 393,
        column: 19,
        span: 9901..9906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 20,
        span: 9906..9907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 396,
        column: 9,
        span: 9940..9948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 10,
        span: 9948..9949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 396,
        column: 16,
        span: 9949..9955,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 396,
        column: 17,
        span: 9955..9956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 396,
        column: 23,
        span: 9956..9962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 24,
        span: 9962..9963,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[io.output(%q); io.write('alo')]]",
        ),
        line: 396,
        column: 58,
        span: 9963..9997,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 396,
        column: 59,
        span: 9997..9998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 396,
        column: 63,
        span: 9999..10002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 64,
        span: 10002..10003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 65,
        span: 10003..10004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 397,
        column: 4,
        span: 10005..10008,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 5,
        span: 10008..10009,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s'",
        ),
        line: 397,
        column: 13,
        span: 10009..10017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 14,
        span: 10017..10018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 397,
        column: 19,
        span: 10019..10023,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 20,
        span: 10023..10024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 398,
        column: 9,
        span: 10025..10033,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 10,
        span: 10033..10034,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 398,
        column: 15,
        span: 10034..10039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 16,
        span: 10039..10040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 401,
        column: 4,
        span: 10091..10094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 401,
        column: 5,
        span: 10094..10095,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -v  -e\"print'hello'\" > %s]]",
        ),
        line: 401,
        column: 38,
        span: 10095..10128,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
        column: 39,
        span: 10128..10129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 401,
        column: 43,
        span: 10130..10133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 401,
        column: 44,
        span: 10133..10134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 402,
        column: 2,
        span: 10135..10136,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 402,
        column: 4,
        span: 10137..10138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 402,
        column: 14,
        span: 10139..10148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 402,
        column: 15,
        span: 10148..10149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 402,
        column: 16,
        span: 10149..10150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 403,
        column: 7,
        span: 10151..10157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
        column: 8,
        span: 10157..10158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 403,
        column: 14,
        span: 10158..10164,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 403,
        column: 15,
        span: 10164..10165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 403,
        column: 19,
        span: 10165..10169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
        column: 20,
        span: 10169..10170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 403,
        column: 21,
        span: 10170..10171,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 403,
        column: 22,
        span: 10171..10172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"PUC%-Rio\\nhello\"",
        ),
        line: 403,
        column: 40,
        span: 10173..10190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
        column: 41,
        span: 10190..10191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
        column: 42,
        span: 10191..10192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 407,
        column: 9,
        span: 10214..10222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 10,
        span: 10222..10223,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(nil, true)\"",
        ),
        line: 407,
        column: 30,
        span: 10223..10243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 31,
        span: 10243..10244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 408,
        column: 4,
        span: 10245..10248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 5,
        span: 10248..10249,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s'",
        ),
        line: 408,
        column: 13,
        span: 10249..10257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 408,
        column: 14,
        span: 10257..10258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 408,
        column: 19,
        span: 10259..10263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 20,
        span: 10263..10264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 409,
        column: 9,
        span: 10265..10273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 10,
        span: 10273..10274,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(0, true)\"",
        ),
        line: 409,
        column: 28,
        span: 10274..10292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 29,
        span: 10292..10293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 410,
        column: 4,
        span: 10294..10297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 5,
        span: 10297..10298,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s'",
        ),
        line: 410,
        column: 13,
        span: 10298..10306,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 410,
        column: 14,
        span: 10306..10307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 410,
        column: 19,
        span: 10308..10312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 20,
        span: 10312..10313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 411,
        column: 9,
        span: 10314..10322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 10,
        span: 10322..10323,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(true, true)\"",
        ),
        line: 411,
        column: 31,
        span: 10323..10344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 32,
        span: 10344..10345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 412,
        column: 4,
        span: 10346..10349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 5,
        span: 10349..10350,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s'",
        ),
        line: 412,
        column: 13,
        span: 10350..10358,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
        column: 14,
        span: 10358..10359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 412,
        column: 19,
        span: 10360..10364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 20,
        span: 10364..10365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 413,
        column: 9,
        span: 10366..10374,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
        column: 10,
        span: 10374..10375,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(1, true)\"",
        ),
        line: 413,
        column: 28,
        span: 10375..10393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 29,
        span: 10393..10394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 414,
        column: 6,
        span: 10395..10400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 7,
        span: 10400..10401,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 414,
        column: 9,
        span: 10401..10403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 414,
        column: 10,
        span: 10403..10404,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s\"",
        ),
        line: 414,
        column: 19,
        span: 10405..10413,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 414,
        column: 20,
        span: 10413..10414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 414,
        column: 25,
        span: 10415..10419,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 26,
        span: 10419..10420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 415,
        column: 9,
        span: 10437..10445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 10,
        span: 10445..10446,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(false, true)\"",
        ),
        line: 415,
        column: 32,
        span: 10446..10468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 33,
        span: 10468..10469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 416,
        column: 6,
        span: 10470..10475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 7,
        span: 10475..10476,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 416,
        column: 9,
        span: 10476..10478,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 416,
        column: 10,
        span: 10478..10479,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s\"",
        ),
        line: 416,
        column: 19,
        span: 10480..10488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 416,
        column: 20,
        span: 10488..10489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 416,
        column: 25,
        span: 10490..10494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 26,
        span: 10494..10495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 420,
        column: 9,
        span: 10554..10562,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local x <close> = setmetatable({},\n        {__close = function (self, err)\n                     assert(err == nil)\n                     print(\"Ok\")\n                   end})\n  local e1 <close> = setmetatable({}, {__close = function () print(120) end})\n  os.exit(true, true)\n]]",
        ),
        line: 428,
        column: 3,
        span: 10562..10842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 429,
        column: 4,
        span: 10843..10846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
        column: 5,
        span: 10846..10847,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s > %s'",
        ),
        line: 429,
        column: 18,
        span: 10847..10860,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 429,
        column: 19,
        span: 10860..10861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 429,
        column: 24,
        span: 10862..10866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 429,
        column: 25,
        span: 10866..10867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 429,
        column: 29,
        span: 10868..10871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
        column: 30,
        span: 10871..10872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 430,
        column: 13,
        span: 10873..10885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
        column: 14,
        span: 10885..10886,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"120\\nOk\\n\"",
        ),
        line: 430,
        column: 25,
        span: 10886..10897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
        column: 26,
        span: 10897..10898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 434,
        column: 7,
        span: 10927..10933,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 8,
        span: 10933..10934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 434,
        column: 10,
        span: 10934..10936,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 434,
        column: 11,
        span: 10936..10937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 434,
        column: 17,
        span: 10937..10943,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 18,
        span: 10943..10944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 434,
        column: 22,
        span: 10944..10948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 23,
        span: 10948..10949,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 24,
        span: 10949..10950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 435,
        column: 7,
        span: 10951..10957,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
        column: 8,
        span: 10957..10958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 435,
        column: 10,
        span: 10958..10960,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 435,
        column: 11,
        span: 10960..10961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 435,
        column: 17,
        span: 10961..10967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
        column: 18,
        span: 10967..10968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 435,
        column: 27,
        span: 10968..10977,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
        column: 28,
        span: 10977..10978,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
        column: 29,
        span: 10978..10979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 436,
        column: 7,
        span: 10980..10986,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
        column: 8,
        span: 10986..10987,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 436,
        column: 11,
        span: 10987..10990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 436,
        column: 14,
        span: 10991..10993,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 436,
        column: 15,
        span: 10993..10994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 436,
        column: 21,
        span: 10994..11000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
        column: 22,
        span: 11000..11001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 436,
        column: 25,
        span: 11001..11004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 26,
        span: 11004..11005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 27,
        span: 11005..11006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 439,
        column: 6,
        span: 11027..11032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 439,
        column: 7,
        span: 11032..11033,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unrecognized option '-h'\"",
        ),
        line: 439,
        column: 33,
        span: 11033..11059,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 439,
        column: 34,
        span: 11059..11060,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -h\"",
        ),
        line: 439,
        column: 43,
        span: 11061..11069,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 439,
        column: 44,
        span: 11069..11070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 440,
        column: 6,
        span: 11071..11076,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 7,
        span: 11076..11077,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unrecognized option '---'\"",
        ),
        line: 440,
        column: 34,
        span: 11077..11104,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 440,
        column: 35,
        span: 11104..11105,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua ---\"",
        ),
        line: 440,
        column: 45,
        span: 11106..11115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 46,
        span: 11115..11116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 441,
        column: 6,
        span: 11117..11122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 441,
        column: 7,
        span: 11122..11123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unrecognized option '-Ex'\"",
        ),
        line: 441,
        column: 34,
        span: 11123..11150,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 441,
        column: 35,
        span: 11150..11151,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -Ex\"",
        ),
        line: 441,
        column: 45,
        span: 11152..11161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 441,
        column: 46,
        span: 11161..11162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 442,
        column: 6,
        span: 11163..11168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 442,
        column: 7,
        span: 11168..11169,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unrecognized option '-vv'\"",
        ),
        line: 442,
        column: 34,
        span: 11169..11196,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 442,
        column: 35,
        span: 11196..11197,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -vv\"",
        ),
        line: 442,
        column: 45,
        span: 11198..11207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 442,
        column: 46,
        span: 11207..11208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 443,
        column: 6,
        span: 11209..11214,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 443,
        column: 7,
        span: 11214..11215,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unrecognized option '-iv'\"",
        ),
        line: 443,
        column: 34,
        span: 11215..11242,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 443,
        column: 35,
        span: 11242..11243,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -iv\"",
        ),
        line: 443,
        column: 45,
        span: 11244..11253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 443,
        column: 46,
        span: 11253..11254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 444,
        column: 6,
        span: 11255..11260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 444,
        column: 7,
        span: 11260..11261,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'-e' needs argument\"",
        ),
        line: 444,
        column: 28,
        span: 11261..11282,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 29,
        span: 11282..11283,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -e\"",
        ),
        line: 444,
        column: 38,
        span: 11284..11292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 444,
        column: 39,
        span: 11292..11293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 445,
        column: 6,
        span: 11294..11299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
        column: 7,
        span: 11299..11300,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"syntax error\"",
        ),
        line: 445,
        column: 21,
        span: 11300..11314,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 445,
        column: 22,
        span: 11314..11315,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -e a\"",
        ),
        line: 445,
        column: 33,
        span: 11316..11326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
        column: 34,
        span: 11326..11327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 446,
        column: 6,
        span: 11328..11333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
        column: 7,
        span: 11333..11334,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'-l' needs argument\"",
        ),
        line: 446,
        column: 28,
        span: 11334..11355,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 446,
        column: 29,
        span: 11355..11356,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -l\"",
        ),
        line: 446,
        column: 38,
        span: 11357..11365,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
        column: 39,
        span: 11365..11366,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 449,
        column: 3,
        span: 11369..11371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 449,
        column: 5,
        span: 11372..11373,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 449,
        column: 10,
        span: 11374..11378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 450,
        column: 8,
        span: 11400..11405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 9,
        span: 11405..11406,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing 'not enough memory' to create a state\"",
        ),
        line: 450,
        column: 56,
        span: 11406..11453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 57,
        span: 11453..11454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 451,
        column: 8,
        span: 11457..11462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 9,
        span: 11462..11463,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not enough memory\"",
        ),
        line: 451,
        column: 28,
        span: 11463..11482,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
        column: 29,
        span: 11482..11483,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"env MEMLIMIT=100 lua\"",
        ),
        line: 451,
        column: 52,
        span: 11484..11506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 53,
        span: 11506..11507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 454,
        column: 7,
        span: 11531..11535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
        column: 8,
        span: 11535..11536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@store\"",
        ),
        line: 454,
        column: 16,
        span: 11536..11544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
        column: 17,
        span: 11544..11545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 455,
        column: 7,
        span: 11548..11552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 455,
        column: 8,
        span: 11552..11553,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@123\"",
        ),
        line: 455,
        column: 14,
        span: 11553..11559,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 455,
        column: 15,
        span: 11559..11560,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"456\"",
        ),
        line: 455,
        column: 21,
        span: 11561..11566,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 455,
        column: 22,
        span: 11566..11567,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"789\"",
        ),
        line: 455,
        column: 28,
        span: 11568..11573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 455,
        column: 29,
        span: 11573..11574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 456,
        column: 9,
        span: 11577..11583,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 10,
        span: 11583..11584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 456,
        column: 15,
        span: 11584..11589,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 456,
        column: 18,
        span: 11590..11592,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@123456789\"",
        ),
        line: 456,
        column: 31,
        span: 11593..11605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 32,
        span: 11605..11606,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 456,
        column: 33,
        span: 11606..11607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 456,
        column: 39,
        span: 11608..11613,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 456,
        column: 41,
        span: 11614..11615,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 456,
        column: 0,
        span: 11616..11621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 458,
        column: 7,
        span: 11625..11629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
        column: 8,
        span: 11629..11630,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"zip\"",
        ),
        line: 458,
        column: 13,
        span: 11630..11635,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 458,
        column: 14,
        span: 11635..11636,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 458,
        column: 17,
        span: 11637..11639,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 458,
        column: 18,
        span: 11639..11640,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" \"",
        ),
        line: 458,
        column: 22,
        span: 11641..11644,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 458,
        column: 23,
        span: 11644..11645,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"zap\"",
        ),
        line: 458,
        column: 29,
        span: 11646..11651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
        column: 30,
        span: 11651..11652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 459,
        column: 9,
        span: 11655..11661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
        column: 10,
        span: 11661..11662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 459,
        column: 15,
        span: 11662..11667,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 459,
        column: 18,
        span: 11668..11670,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"zip zap\"",
        ),
        line: 459,
        column: 28,
        span: 11671..11680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
        column: 29,
        span: 11680..11681,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 459,
        column: 30,
        span: 11681..11682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 459,
        column: 36,
        span: 11683..11688,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 459,
        column: 38,
        span: 11689..11690,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 459,
        column: 0,
        span: 11691..11696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 460,
        column: 7,
        span: 11699..11703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 460,
        column: 8,
        span: 11703..11704,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ZIP\"",
        ),
        line: 460,
        column: 13,
        span: 11704..11709,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 460,
        column: 14,
        span: 11709..11710,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 460,
        column: 17,
        span: 11711..11713,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 460,
        column: 18,
        span: 11713..11714,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" \"",
        ),
        line: 460,
        column: 22,
        span: 11715..11718,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 460,
        column: 23,
        span: 11718..11719,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ZAP\"",
        ),
        line: 460,
        column: 29,
        span: 11720..11725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 460,
        column: 30,
        span: 11725..11726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 461,
        column: 9,
        span: 11729..11735,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
        column: 10,
        span: 11735..11736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 461,
        column: 15,
        span: 11736..11741,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 461,
        column: 18,
        span: 11742..11744,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ZIP ZAP\"",
        ),
        line: 461,
        column: 28,
        span: 11745..11754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
        column: 29,
        span: 11754..11755,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 461,
        column: 30,
        span: 11755..11756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        line: 461,
        column: 36,
        span: 11757..11762,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 461,
        column: 38,
        span: 11763..11764,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 461,
        column: 0,
        span: 11765..11770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 462,
        column: 7,
        span: 11773..11777,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
        column: 8,
        span: 11777..11778,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@normal\"",
        ),
        line: 462,
        column: 17,
        span: 11778..11787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
        column: 18,
        span: 11787..11788,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 463,
        column: 0,
        span: 11789..11792,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 465,
        column: 0,
        span: 11794..11796,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 467,
        column: 8,
        span: 11842..11847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 467,
        column: 11,
        span: 11848..11850,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 467,
        column: 12,
        span: 11850..11851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 467,
        column: 16,
        span: 11852..11855,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 467,
        column: 18,
        span: 11856..11857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 467,
        column: 24,
        span: 11858..11863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
        column: 25,
        span: 11863..11864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 467,
        column: 29,
        span: 11864..11868,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
        column: 30,
        span: 11868..11869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 468,
        column: 9,
        span: 11872..11878,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 468,
        column: 10,
        span: 11878..11879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 468,
        column: 16,
        span: 11879..11885,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 468,
        column: 17,
        span: 11885..11886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 468,
        column: 21,
        span: 11886..11890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 468,
        column: 22,
        span: 11890..11891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 468,
        column: 25,
        span: 11891..11894,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 468,
        column: 26,
        span: 11894..11895,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string expected\"",
        ),
        line: 468,
        column: 44,
        span: 11896..11913,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 468,
        column: 45,
        span: 11913..11914,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 468,
        column: 46,
        span: 11914..11915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 472,
        column: 5,
        span: 12027..12029,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 472,
        column: 6,
        span: 12029..12030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 472,
        column: 10,
        span: 12031..12034,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 472,
        column: 12,
        span: 12035..12036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 472,
        column: 18,
        span: 12037..12042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 472,
        column: 19,
        span: 12042..12043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        line: 472,
        column: 23,
        span: 12043..12047,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 472,
        column: 24,
        span: 12047..12048,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"SHOULD NOT APPEAR\"",
        ),
        line: 472,
        column: 44,
        span: 12049..12068,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 472,
        column: 45,
        span: 12068..12069,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 472,
        column: 47,
        span: 12070..12071,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 472,
        column: 48,
        span: 12071..12072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 472,
        column: 49,
        span: 12072..12073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 473,
        column: 9,
        span: 12076..12082,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 473,
        column: 10,
        span: 12082..12083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 473,
        column: 16,
        span: 12083..12089,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 473,
        column: 17,
        span: 12089..12090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 473,
        column: 21,
        span: 12090..12094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 473,
        column: 22,
        span: 12094..12095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 473,
        column: 25,
        span: 12095..12098,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 473,
        column: 26,
        span: 12098..12099,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string expected\"",
        ),
        line: 473,
        column: 44,
        span: 12100..12117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 473,
        column: 45,
        span: 12117..12118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 473,
        column: 46,
        span: 12118..12119,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 474,
        column: 0,
        span: 12120..12123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 476,
        column: 6,
        span: 12125..12130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 476,
        column: 7,
        span: 12130..12131,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 476,
        column: 10,
        span: 12131..12134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 476,
        column: 11,
        span: 12134..12135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 478,
        column: 6,
        span: 12137..12142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
        column: 7,
        span: 12142..12143,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing Ctrl C'",
        ),
        line: 478,
        column: 23,
        span: 12143..12159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
        column: 24,
        span: 12159..12160,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 479,
        column: 0,
        span: 12161..12163,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 481,
        column: 8,
        span: 12190..12195,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 481,
        column: 17,
        span: 12196..12204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kill",
        ),
        line: 481,
        column: 22,
        span: 12205..12209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 481,
        column: 24,
        span: 12210..12211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 481,
        column: 27,
        span: 12211..12214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 481,
        column: 28,
        span: 12214..12215,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 482,
        column: 11,
        span: 12220..12226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 482,
        column: 14,
        span: 12227..12229,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 482,
        column: 15,
        span: 12229..12230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        line: 482,
        column: 22,
        span: 12230..12237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
        column: 23,
        span: 12237..12238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 482,
        column: 29,
        span: 12238..12244,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 482,
        column: 30,
        span: 12244..12245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 482,
        column: 36,
        span: 12245..12251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
        column: 37,
        span: 12251..12252,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'kill -INT %s 2> /dev/null'",
        ),
        line: 482,
        column: 64,
        span: 12252..12279,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 482,
        column: 65,
        span: 12279..12280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 482,
        column: 69,
        span: 12281..12284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
        column: 70,
        span: 12284..12285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
        column: 71,
        span: 12285..12286,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 483,
        column: 0,
        span: 12289..12292,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 487,
        column: 8,
        span: 12395..12400,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 487,
        column: 17,
        span: 12401..12409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "runback",
        ),
        line: 487,
        column: 25,
        span: 12410..12417,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 487,
        column: 27,
        span: 12418..12419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "luaprg",
        ),
        line: 487,
        column: 33,
        span: 12419..12425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 487,
        column: 34,
        span: 12425..12426,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 489,
        column: 10,
        span: 12498..12503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "shellprg",
        ),
        line: 489,
        column: 19,
        span: 12504..12512,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 489,
        column: 21,
        span: 12513..12514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 489,
        column: 28,
        span: 12515..12521,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 489,
        column: 29,
        span: 12521..12522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 489,
        column: 35,
        span: 12522..12528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 489,
        column: 36,
        span: 12528..12529,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%s -e \"%s\" & echo $!'",
        ),
        line: 489,
        column: 58,
        span: 12529..12551,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 59,
        span: 12551..12552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 489,
        column: 68,
        span: 12553..12561,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 69,
        span: 12561..12562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "luaprg",
        ),
        line: 489,
        column: 76,
        span: 12563..12569,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 489,
        column: 77,
        span: 12569..12570,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 490,
        column: 10,
        span: 12575..12580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 490,
        column: 12,
        span: 12581..12582,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 490,
        column: 14,
        span: 12583..12584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 490,
        column: 17,
        span: 12585..12587,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 490,
        column: 18,
        span: 12587..12588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "popen",
        ),
        line: 490,
        column: 23,
        span: 12588..12593,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 490,
        column: 24,
        span: 12593..12594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "shellprg",
        ),
        line: 490,
        column: 32,
        span: 12594..12602,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 490,
        column: 33,
        span: 12602..12603,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        line: 490,
        column: 37,
        span: 12604..12607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 490,
        column: 38,
        span: 12607..12608,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 491,
        column: 10,
        span: 12635..12640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 491,
        column: 14,
        span: 12641..12644,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 491,
        column: 16,
        span: 12645..12646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 491,
        column: 18,
        span: 12647..12648,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 491,
        column: 19,
        span: 12648..12649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 491,
        column: 23,
        span: 12649..12653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 491,
        column: 24,
        span: 12653..12654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 491,
        column: 25,
        span: 12654..12655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 492,
        column: 10,
        span: 12688..12693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
        column: 11,
        span: 12693..12694,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(if test fails now, it may leave a Lua script running in \\z\n            background, pid \"",
        ),
        line: 493,
        column: 30,
        span: 12694..12784,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 493,
        column: 33,
        span: 12785..12787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 493,
        column: 37,
        span: 12788..12791,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 493,
        column: 40,
        span: 12792..12794,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        line: 493,
        column: 44,
        span: 12795..12798,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
        column: 45,
        span: 12798..12799,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 494,
        column: 11,
        span: 12804..12810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 494,
        column: 13,
        span: 12811..12812,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 494,
        column: 14,
        span: 12812..12813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 494,
        column: 0,
        span: 12814..12817,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 495,
        column: 0,
        span: 12820..12823,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 498,
        column: 8,
        span: 12898..12903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 498,
        column: 10,
        span: 12904..12905,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 498,
        column: 11,
        span: 12905..12906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 498,
        column: 15,
        span: 12907..12910,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 498,
        column: 17,
        span: 12911..12912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "runback",
        ),
        line: 498,
        column: 25,
        span: 12913..12920,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    pcall(function () print(12); while true do end end); print(42)]]",
        ),
        line: 499,
        column: 69,
        span: 12920..12991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 501,
        column: 9,
        span: 13035..13041,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 501,
        column: 10,
        span: 13041..13042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 501,
        column: 11,
        span: 13042..13043,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 501,
        column: 12,
        span: 13043..13044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 501,
        column: 16,
        span: 13044..13048,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 501,
        column: 17,
        span: 13048..13049,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 501,
        column: 18,
        span: 13049..13050,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 501,
        column: 21,
        span: 13051..13053,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"12\"",
        ),
        line: 501,
        column: 26,
        span: 13054..13058,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 501,
        column: 27,
        span: 13058..13059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kill",
        ),
        line: 502,
        column: 7,
        span: 13062..13066,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 502,
        column: 8,
        span: 13066..13067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 502,
        column: 11,
        span: 13067..13070,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 502,
        column: 12,
        span: 13070..13071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 504,
        column: 9,
        span: 13184..13190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 504,
        column: 10,
        span: 13190..13191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 504,
        column: 11,
        span: 13191..13192,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 504,
        column: 12,
        span: 13192..13193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 504,
        column: 16,
        span: 13193..13197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 504,
        column: 17,
        span: 13197..13198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 504,
        column: 18,
        span: 13198..13199,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 504,
        column: 21,
        span: 13200..13202,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"42\"",
        ),
        line: 504,
        column: 26,
        span: 13203..13207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 504,
        column: 27,
        span: 13207..13208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 505,
        column: 9,
        span: 13231..13237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 505,
        column: 10,
        span: 13237..13238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 505,
        column: 11,
        span: 13238..13239,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 505,
        column: 12,
        span: 13239..13240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 505,
        column: 17,
        span: 13240..13245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 505,
        column: 18,
        span: 13245..13246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 505,
        column: 19,
        span: 13246..13247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 505,
        column: 20,
        span: 13247..13248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 506,
        column: 8,
        span: 13251..13256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 506,
        column: 9,
        span: 13256..13257,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"done\"",
        ),
        line: 506,
        column: 15,
        span: 13257..13263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 506,
        column: 16,
        span: 13263..13264,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 509,
        column: 8,
        span: 13313..13318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 509,
        column: 10,
        span: 13319..13320,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 509,
        column: 11,
        span: 13320..13321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 509,
        column: 15,
        span: 13322..13325,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 509,
        column: 17,
        span: 13326..13327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "runback",
        ),
        line: 509,
        column: 25,
        span: 13328..13335,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    print(15); string.find(string.rep('a', 100000), '.*b')]]",
        ),
        line: 510,
        column: 61,
        span: 13335..13398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 512,
        column: 9,
        span: 13442..13448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 512,
        column: 10,
        span: 13448..13449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 512,
        column: 11,
        span: 13449..13450,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 512,
        column: 12,
        span: 13450..13451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 512,
        column: 16,
        span: 13451..13455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 512,
        column: 17,
        span: 13455..13456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 512,
        column: 18,
        span: 13456..13457,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 512,
        column: 21,
        span: 13458..13460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"15\"",
        ),
        line: 512,
        column: 26,
        span: 13461..13465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 512,
        column: 27,
        span: 13465..13466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 513,
        column: 9,
        span: 13469..13475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 513,
        column: 10,
        span: 13475..13476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 513,
        column: 12,
        span: 13476..13478,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 513,
        column: 13,
        span: 13478..13479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        line: 513,
        column: 20,
        span: 13479..13486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 513,
        column: 21,
        span: 13486..13487,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sleep 1\"",
        ),
        line: 513,
        column: 30,
        span: 13487..13496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 513,
        column: 31,
        span: 13496..13497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 513,
        column: 32,
        span: 13497..13498,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 515,
        column: 8,
        span: 13565..13570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 515,
        column: 10,
        span: 13571..13572,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 515,
        column: 12,
        span: 13573..13574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 515,
        column: 0,
        span: 13574..13578,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 516,
        column: 6,
        span: 13581..13584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 516,
        column: 8,
        span: 13585..13586,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 516,
        column: 10,
        span: 13587..13588,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
        column: 12,
        span: 13588..13590,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 516,
        column: 13,
        span: 13590..13591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
        column: 17,
        span: 13591..13595,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 516,
        column: 20,
        span: 13596..13598,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 517,
        column: 7,
        span: 13629..13631,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 517,
        column: 11,
        span: 13632..13635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kill",
        ),
        line: 517,
        column: 16,
        span: 13636..13640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 517,
        column: 17,
        span: 13640..13641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        line: 517,
        column: 20,
        span: 13641..13644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 517,
        column: 21,
        span: 13644..13645,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 517,
        column: 26,
        span: 13646..13650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 518,
        column: 8,
        span: 13677..13678,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 518,
        column: 10,
        span: 13679..13680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 518,
        column: 12,
        span: 13681..13682,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 519,
        column: 0,
        span: 13721..13726,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 520,
        column: 0,
        span: 13731..13734,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 521,
        column: 0,
        span: 13737..13740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 522,
        column: 9,
        span: 13743..13749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 522,
        column: 10,
        span: 13749..13750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 522,
        column: 11,
        span: 13750..13751,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 522,
        column: 12,
        span: 13751..13752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 522,
        column: 17,
        span: 13752..13757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 522,
        column: 18,
        span: 13757..13758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
        column: 19,
        span: 13758..13759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
        column: 20,
        span: 13759..13760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 523,
        column: 9,
        span: 13763..13769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 523,
        column: 10,
        span: 13769..13770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 523,
        column: 11,
        span: 13770..13771,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 523,
        column: 14,
        span: 13772..13774,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 523,
        column: 16,
        span: 13774..13776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 523,
        column: 17,
        span: 13776..13777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 524,
        column: 8,
        span: 13780..13785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 524,
        column: 9,
        span: 13785..13786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 524,
        column: 15,
        span: 13786..13792,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 524,
        column: 16,
        span: 13792..13793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 524,
        column: 22,
        span: 13793..13799,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 524,
        column: 23,
        span: 13799..13800,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"done (with %d kills)\"",
        ),
        line: 524,
        column: 45,
        span: 13800..13822,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 524,
        column: 46,
        span: 13822..13823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 524,
        column: 48,
        span: 13824..13825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 524,
        column: 49,
        span: 13825..13826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 524,
        column: 50,
        span: 13826..13827,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 526,
        column: 0,
        span: 13829..13832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 528,
        column: 6,
        span: 13834..13839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 528,
        column: 7,
        span: 13839..13840,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        line: 528,
        column: 11,
        span: 13840..13844,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 528,
        column: 12,
        span: 13844..13845,
    },
]
