---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/main.lua
---
[
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 6,
            column: 3,
            span: 170..172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        position: Position {
            line: 6,
            column: 9,
            span: 173..178,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 6,
            column: 14,
            span: 179..183,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 6,
            column: 21,
            span: 184..190,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 6,
            column: 0,
            span: 191..194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 12,
            column: 6,
            span: 284..289,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 12,
            column: 7,
            span: 289..290,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stand-alone interpreter\"",
        ),
        position: Position {
            line: 12,
            column: 40,
            span: 290..323,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 12,
            column: 41,
            span: 323..324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 14,
            column: 7,
            span: 326..332,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 8,
            span: 332..333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 14,
            column: 10,
            span: 333..335,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 14,
            column: 11,
            span: 335..336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        position: Position {
            line: 14,
            column: 18,
            span: 336..343,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 19,
            span: 343..344,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 20,
            span: 344..345,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 21,
            span: 345..346,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 16,
            column: 6,
            span: 380..385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 16,
            column: 10,
            span: 386..389,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 16,
            column: 12,
            span: 390..391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 16,
            column: 16,
            span: 392..395,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 16,
            column: 19,
            span: 396..398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ARG",
        ),
        position: Position {
            line: 16,
            column: 0,
            span: 399..402,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 18,
            column: 6,
            span: 404..409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 18,
            column: 11,
            span: 410..414,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 18,
            column: 13,
            span: 415..416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 18,
            column: 16,
            span: 417..419,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 18,
            column: 17,
            span: 419..420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        position: Position {
            line: 18,
            column: 24,
            span: 420..427,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 25,
            span: 427..428,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 26,
            span: 428..429,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 19,
            column: 6,
            span: 430..435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        position: Position {
            line: 19,
            column: 16,
            span: 436..445,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 19,
            column: 18,
            span: 446..447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 19,
            column: 21,
            span: 448..450,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 19,
            column: 22,
            span: 450..451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        position: Position {
            line: 19,
            column: 29,
            span: 451..458,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 30,
            span: 458..459,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 31,
            span: 459..460,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 20,
            column: 6,
            span: 461..466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 20,
            column: 10,
            span: 467..470,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 20,
            column: 12,
            span: 471..472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 20,
            column: 15,
            span: 473..475,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 20,
            column: 16,
            span: 475..476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        position: Position {
            line: 20,
            column: 23,
            span: 476..483,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 24,
            span: 483..484,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 25,
            span: 484..485,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 22,
            column: 6,
            span: 487..492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 22,
            column: 0,
            span: 493..501,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 23,
            column: 0,
            span: 502..504,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 24,
            column: 8,
            span: 507..512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 24,
            column: 10,
            span: 513..514,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 24,
            column: 12,
            span: 515..516,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 24,
            column: 0,
            span: 516..518,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 25,
            column: 8,
            span: 521..526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 25,
            column: 12,
            span: 527..530,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 25,
            column: 13,
            span: 530..531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 25,
            column: 14,
            span: 531..532,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 25,
            column: 15,
            span: 532..533,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 25,
            column: 18,
            span: 534..536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 25,
            column: 20,
            span: 537..538,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 25,
            column: 22,
            span: 539..540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 25,
            column: 24,
            span: 541..542,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 25,
            column: 26,
            span: 543..544,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 25,
            column: 28,
            span: 544..546,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 25,
            column: 0,
            span: 547..550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 26,
            column: 11,
            span: 553..561,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 26,
            column: 13,
            span: 562..563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 26,
            column: 17,
            span: 564..567,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 26,
            column: 18,
            span: 567..568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 26,
            column: 19,
            span: 568..569,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 26,
            column: 21,
            span: 570..571,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 23,
            span: 571..573,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 26,
            column: 24,
            span: 573..574,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 27,
            column: 0,
            span: 575..578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 28,
            column: 6,
            span: 579..584,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 7,
            span: 584..585,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"progname: \"",
        ),
        position: Position {
            line: 28,
            column: 19,
            span: 585..597,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 28,
            column: 22,
            span: 598..600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 28,
            column: 31,
            span: 601..609,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 32,
            span: 609..610,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 30,
            column: 6,
            span: 612..617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 30,
            column: 15,
            span: 618..626,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 30,
            column: 17,
            span: 627..628,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 30,
            column: 26,
            span: 629..637,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 27,
            span: 637..638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 30,
            column: 28,
            span: 638..639,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 30,
            column: 29,
            span: 639..640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 30,
            column: 31,
            span: 641..642,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 32,
            span: 642..643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 31,
            column: 4,
            span: 646..647,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 31,
            column: 6,
            span: 648..649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 31,
            column: 8,
            span: 650..651,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 31,
            column: 11,
            span: 652..654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 31,
            column: 0,
            span: 655..659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 32,
            column: 5,
            span: 662..664,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 32,
            column: 6,
            span: 664..665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 32,
            column: 12,
            span: 665..671,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 13,
            span: 671..672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 32,
            column: 14,
            span: 672..673,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 15,
            span: 673..674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 33,
            column: 5,
            span: 677..679,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 33,
            column: 6,
            span: 679..680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 33,
            column: 11,
            span: 680..685,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 12,
            span: 685..686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 33,
            column: 13,
            span: 686..687,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 14,
            span: 687..688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 34,
            column: 9,
            span: 691..697,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 10,
            span: 697..698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 34,
            column: 12,
            span: 698..700,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 34,
            column: 13,
            span: 700..701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 34,
            column: 18,
            span: 701..706,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 19,
            span: 706..707,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 20,
            span: 707..708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 21,
            span: 708..709,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 35,
            column: 0,
            span: 710..713,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 37,
            column: 6,
            span: 715..720,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 37,
            column: 15,
            span: 721..729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        position: Position {
            line: 37,
            column: 25,
            span: 730..739,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 26,
            span: 739..740,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 27,
            span: 740..741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 38,
            column: 5,
            span: 744..746,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 38,
            column: 6,
            span: 746..747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 38,
            column: 11,
            span: 747..752,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 12,
            span: 752..753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 38,
            column: 15,
            span: 753..756,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 16,
            span: 756..757,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 39,
            column: 8,
            span: 760..765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 39,
            column: 10,
            span: 766..767,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 39,
            column: 12,
            span: 768..769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 39,
            column: 15,
            span: 770..772,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 39,
            column: 16,
            span: 772..773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 39,
            column: 20,
            span: 773..777,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 21,
            span: 777..778,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 39,
            column: 24,
            span: 778..781,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 25,
            span: 781..782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 40,
            column: 5,
            span: 785..787,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 40,
            column: 6,
            span: 787..788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 40,
            column: 11,
            span: 788..793,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 12,
            span: 793..794,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 13,
            span: 794..795,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 40,
            column: 14,
            span: 795..796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 40,
            column: 19,
            span: 796..801,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 20,
            span: 801..802,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 21,
            span: 802..803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 41,
            column: 9,
            span: 806..812,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 10,
            span: 812..813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 41,
            column: 12,
            span: 813..815,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 41,
            column: 13,
            span: 815..816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 41,
            column: 19,
            span: 816..822,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 20,
            span: 822..823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 41,
            column: 23,
            span: 823..826,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 24,
            span: 826..827,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 25,
            span: 827..828,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 42,
            column: 9,
            span: 831..837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 42,
            column: 0,
            span: 838..839,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 43,
            column: 0,
            span: 840..843,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 45,
            column: 6,
            span: 845..850,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 45,
            column: 15,
            span: 851..859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        position: Position {
            line: 45,
            column: 28,
            span: 860..872,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 29,
            span: 872..873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 45,
            column: 30,
            span: 873..874,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 31,
            span: 874..875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 47,
            column: 9,
            span: 922..928,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 10,
            span: 928..929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 47,
            column: 16,
            span: 929..935,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 47,
            column: 17,
            span: 935..936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 47,
            column: 20,
            span: 936..939,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 21,
            span: 939..940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 47,
            column: 22,
            span: 940..941,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 23,
            span: 941..942,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 47,
            column: 25,
            span: 943..944,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 47,
            column: 26,
            span: 943..945,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 27,
            span: 945..946,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 47,
            column: 30,
            span: 947..949,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 47,
            column: 35,
            span: 950..954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 36,
            span: 954..955,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 48,
            column: 8,
            span: 958..963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 48,
            column: 10,
            span: 964..965,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 48,
            column: 12,
            span: 966..967,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        position: Position {
            line: 48,
            column: 22,
            span: 968..977,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 23,
            span: 977..978,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 24,
            span: 978..979,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 49,
            column: 6,
            span: 982..985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 49,
            column: 11,
            span: 986..990,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 49,
            column: 14,
            span: 991..993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 49,
            column: 21,
            span: 994..1000,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 49,
            column: 22,
            span: 1000..1001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 49,
            column: 28,
            span: 1001..1007,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 29,
            span: 1007..1008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 49,
            column: 30,
            span: 1008..1009,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 49,
            column: 31,
            span: 1009..1010,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".-\\n\"",
        ),
        position: Position {
            line: 49,
            column: 38,
            span: 1011..1017,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 39,
            span: 1017..1018,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 49,
            column: 0,
            span: 1019..1021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 50,
            column: 11,
            span: 1026..1032,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 12,
            span: 1032..1033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 50,
            column: 18,
            span: 1033..1039,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 50,
            column: 19,
            span: 1039..1040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 50,
            column: 23,
            span: 1040..1044,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 24,
            span: 1044..1045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 50,
            column: 25,
            span: 1045..1046,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 50,
            column: 26,
            span: 1046..1047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 50,
            column: 31,
            span: 1048..1052,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 50,
            column: 32,
            span: 1052..1053,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 50,
            column: 34,
            span: 1053..1055,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 50,
            column: 35,
            span: 1055..1056,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 50,
            column: 40,
            span: 1057..1061,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 41,
            span: 1061..1062,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 42,
            span: 1062..1063,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 51,
            column: 0,
            span: 1066..1069,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 52,
            column: 0,
            span: 1070..1073,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 54,
            column: 6,
            span: 1075..1080,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 54,
            column: 15,
            span: 1081..1089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 54,
            column: 24,
            span: 1090..1098,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 25,
            span: 1098..1099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 54,
            column: 26,
            span: 1099..1100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 27,
            span: 1100..1101,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 55,
            column: 8,
            span: 1104..1109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 55,
            column: 10,
            span: 1110..1111,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 55,
            column: 12,
            span: 1112..1113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        position: Position {
            line: 55,
            column: 22,
            span: 1114..1123,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 23,
            span: 1123..1124,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 24,
            span: 1124..1125,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 56,
            column: 5,
            span: 1128..1130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 56,
            column: 7,
            span: 1131..1132,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 56,
            column: 10,
            span: 1133..1135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 56,
            column: 12,
            span: 1136..1137,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 56,
            column: 17,
            span: 1138..1142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 56,
            column: 23,
            span: 1143..1148,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 24,
            span: 1148..1149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 56,
            column: 30,
            span: 1149..1155,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 56,
            column: 31,
            span: 1155..1156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 56,
            column: 37,
            span: 1156..1162,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 38,
            span: 1162..1163,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'%s' - '%s'\\n\"",
        ),
        position: Position {
            line: 56,
            column: 53,
            span: 1163..1178,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 56,
            column: 54,
            span: 1178..1179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 56,
            column: 56,
            span: 1180..1181,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 56,
            column: 57,
            span: 1181..1182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 56,
            column: 59,
            span: 1183..1184,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 60,
            span: 1184..1185,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 61,
            span: 1185..1186,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 56,
            column: 0,
            span: 1187..1190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 57,
            column: 9,
            span: 1193..1199,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 10,
            span: 1199..1200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 57,
            column: 11,
            span: 1200..1201,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 57,
            column: 14,
            span: 1202..1204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 57,
            column: 16,
            span: 1205..1206,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 17,
            span: 1206..1207,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 58,
            column: 9,
            span: 1210..1216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 58,
            column: 0,
            span: 1217..1218,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 59,
            column: 0,
            span: 1219..1222,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 62,
            column: 6,
            span: 1225..1230,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 62,
            column: 15,
            span: 1231..1239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 62,
            column: 19,
            span: 1240..1243,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 20,
            span: 1243..1244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 62,
            column: 21,
            span: 1244..1245,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 22,
            span: 1245..1246,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 62,
            column: 26,
            span: 1247..1250,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 27,
            span: 1250..1251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 63,
            column: 4,
            span: 1254..1255,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 63,
            column: 6,
            span: 1256..1257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 63,
            column: 13,
            span: 1258..1264,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 63,
            column: 14,
            span: 1264..1265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 63,
            column: 18,
            span: 1265..1269,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 19,
            span: 1269..1270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 63,
            column: 20,
            span: 1270..1271,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 63,
            column: 21,
            span: 1271..1272,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua\"",
        ),
        position: Position {
            line: 63,
            column: 27,
            span: 1273..1278,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 63,
            column: 28,
            span: 1278..1279,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        position: Position {
            line: 63,
            column: 32,
            span: 1280..1283,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 63,
            column: 35,
            span: 1284..1286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 63,
            column: 44,
            span: 1287..1295,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 63,
            column: 47,
            span: 1296..1298,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        position: Position {
            line: 63,
            column: 51,
            span: 1299..1302,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 63,
            column: 52,
            span: 1302..1303,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 63,
            column: 54,
            span: 1303..1305,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 55,
            span: 1305..1306,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 64,
            column: 8,
            span: 1309..1314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 64,
            column: 10,
            span: 1315..1316,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 64,
            column: 12,
            span: 1317..1318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 64,
            column: 19,
            span: 1319..1325,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 64,
            column: 20,
            span: 1325..1326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 64,
            column: 26,
            span: 1326..1332,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 27,
            span: 1332..1333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 64,
            column: 28,
            span: 1333..1334,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 29,
            span: 1334..1335,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 64,
            column: 33,
            span: 1336..1339,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 34,
            span: 1339..1340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 65,
            column: 9,
            span: 1343..1349,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 10,
            span: 1349..1350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 65,
            column: 12,
            span: 1350..1352,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 65,
            column: 13,
            span: 1352..1353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        position: Position {
            line: 65,
            column: 20,
            span: 1353..1360,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 21,
            span: 1360..1361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 65,
            column: 22,
            span: 1361..1362,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 23,
            span: 1362..1363,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 24,
            span: 1363..1364,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 66,
            column: 0,
            span: 1365..1368,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 68,
            column: 6,
            span: 1370..1375,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 68,
            column: 15,
            span: 1376..1384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 68,
            column: 21,
            span: 1385..1390,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 22,
            span: 1390..1391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 68,
            column: 25,
            span: 1391..1394,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 26,
            span: 1394..1395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 68,
            column: 28,
            span: 1396..1397,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 29,
            span: 1397..1398,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 68,
            column: 33,
            span: 1399..1402,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 34,
            span: 1402..1403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 69,
            column: 4,
            span: 1406..1407,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 69,
            column: 6,
            span: 1408..1409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 69,
            column: 13,
            span: 1410..1416,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 69,
            column: 14,
            span: 1416..1417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 69,
            column: 18,
            span: 1417..1421,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 19,
            span: 1421..1422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 69,
            column: 20,
            span: 1422..1423,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 21,
            span: 1423..1424,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua\"",
        ),
        position: Position {
            line: 69,
            column: 27,
            span: 1425..1430,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 28,
            span: 1430..1431,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        position: Position {
            line: 69,
            column: 32,
            span: 1432..1435,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 69,
            column: 35,
            span: 1436..1438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 69,
            column: 44,
            span: 1439..1447,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 69,
            column: 47,
            span: 1448..1450,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        position: Position {
            line: 69,
            column: 51,
            span: 1451..1454,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 52,
            span: 1454..1455,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 69,
            column: 54,
            span: 1455..1457,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 55,
            span: 1457..1458,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 70,
            column: 8,
            span: 1461..1466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 70,
            column: 10,
            span: 1467..1468,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 70,
            column: 12,
            span: 1469..1470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 70,
            column: 19,
            span: 1471..1477,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 70,
            column: 20,
            span: 1477..1478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 70,
            column: 26,
            span: 1478..1484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 27,
            span: 1484..1485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 70,
            column: 28,
            span: 1485..1486,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 29,
            span: 1486..1487,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 70,
            column: 33,
            span: 1488..1491,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 34,
            span: 1491..1492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 71,
            column: 4,
            span: 1495..1496,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 71,
            column: 6,
            span: 1497..1498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 71,
            column: 13,
            span: 1499..1505,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 71,
            column: 14,
            span: 1505..1506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 71,
            column: 20,
            span: 1506..1512,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 71,
            column: 21,
            span: 1512..1513,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s 2> %s\"",
        ),
        position: Position {
            line: 71,
            column: 31,
            span: 1513..1523,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 32,
            span: 1523..1524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 71,
            column: 34,
            span: 1525..1526,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 35,
            span: 1526..1527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 71,
            column: 39,
            span: 1528..1531,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 71,
            column: 40,
            span: 1531..1532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 72,
            column: 9,
            span: 1572..1578,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 72,
            column: 10,
            span: 1578..1579,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 72,
            column: 13,
            span: 1579..1582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 72,
            column: 16,
            span: 1583..1585,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 72,
            column: 17,
            span: 1585..1586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        position: Position {
            line: 72,
            column: 24,
            span: 1586..1593,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 72,
            column: 25,
            span: 1593..1594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 72,
            column: 26,
            span: 1594..1595,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 72,
            column: 27,
            span: 1595..1596,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 72,
            column: 28,
            span: 1596..1597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 73,
            column: 9,
            span: 1600..1606,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 10,
            span: 1606..1607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 73,
            column: 16,
            span: 1607..1613,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 73,
            column: 17,
            span: 1613..1614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 73,
            column: 21,
            span: 1614..1618,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 22,
            span: 1618..1619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        position: Position {
            line: 73,
            column: 31,
            span: 1619..1628,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 32,
            span: 1628..1629,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 33,
            span: 1629..1630,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 34,
            span: 1630..1631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 73,
            column: 38,
            span: 1632..1635,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 39,
            span: 1635..1636,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 73,
            column: 41,
            span: 1636..1638,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 42,
            span: 1638..1639,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 73,
            column: 47,
            span: 1640..1644,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 48,
            span: 1644..1645,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 49,
            span: 1645..1646,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 74,
            column: 0,
            span: 1670..1673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 76,
            column: 4,
            span: 1675..1678,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 5,
            span: 1678..1679,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua -v'",
        ),
        position: Position {
            line: 76,
            column: 13,
            span: 1679..1687,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 14,
            span: 1687..1688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 78,
            column: 6,
            span: 1690..1695,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 7,
            span: 1695..1696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 78,
            column: 13,
            span: 1696..1702,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 78,
            column: 14,
            span: 1702..1703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 78,
            column: 20,
            span: 1703..1709,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 21,
            span: 1709..1710,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(temporary program file used in these tests: %s)\"",
        ),
        position: Position {
            line: 78,
            column: 71,
            span: 1710..1760,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 72,
            span: 1760..1761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 78,
            column: 77,
            span: 1762..1766,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 78,
            span: 1766..1767,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 79,
            span: 1767..1768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 81,
            column: 9,
            span: 1797..1805,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 81,
            column: 12,
            span: 1806..1808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 82,
            column: 4,
            span: 1809..1812,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 5,
            span: 1812..1813,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua - < %s > %s'",
        ),
        position: Position {
            line: 82,
            column: 22,
            span: 1813..1830,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 82,
            column: 23,
            span: 1830..1831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 82,
            column: 28,
            span: 1832..1836,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 82,
            column: 29,
            span: 1836..1837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 82,
            column: 33,
            span: 1838..1841,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 34,
            span: 1841..1842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 83,
            column: 9,
            span: 1843..1851,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 10,
            span: 1851..1852,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 83,
            column: 12,
            span: 1852..1854,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 13,
            span: 1854..1855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 85,
            column: 9,
            span: 1857..1865,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  print(\n1, a\n)\n]]",
        ),
        position: Position {
            line: 89,
            column: 3,
            span: 1866..1887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 90,
            column: 4,
            span: 1888..1891,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 5,
            span: 1891..1892,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua - < %s > %s'",
        ),
        position: Position {
            line: 90,
            column: 22,
            span: 1892..1909,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 23,
            span: 1909..1910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 90,
            column: 28,
            span: 1911..1915,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 29,
            span: 1915..1916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 90,
            column: 33,
            span: 1917..1920,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 34,
            span: 1920..1921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 91,
            column: 9,
            span: 1922..1930,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 91,
            column: 10,
            span: 1930..1931,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\tnil\\n\"",
        ),
        position: Position {
            line: 91,
            column: 20,
            span: 1931..1941,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 91,
            column: 21,
            span: 1941..1942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 93,
            column: 4,
            span: 1944..1947,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 5,
            span: 1947..1948,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"print(10)\\nprint(2)\\n\" | lua > %s'",
        ),
        position: Position {
            line: 93,
            column: 46,
            span: 1948..1989,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 47,
            span: 1989..1990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 93,
            column: 51,
            span: 1991..1994,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 52,
            span: 1994..1995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 94,
            column: 9,
            span: 1996..2004,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 94,
            column: 10,
            span: 2004..2005,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\\n2\\n\"",
        ),
        position: Position {
            line: 94,
            column: 19,
            span: 2005..2014,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 94,
            column: 20,
            span: 2014..2015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 98,
            column: 4,
            span: 2037..2040,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 5,
            span: 2040..2041,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"print(arg[1])\" | lua - -h > %s'",
        ),
        position: Position {
            line: 98,
            column: 43,
            span: 2041..2079,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 44,
            span: 2079..2080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 98,
            column: 48,
            span: 2081..2084,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 49,
            span: 2084..2085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 99,
            column: 9,
            span: 2086..2094,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 10,
            span: 2094..2095,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-h\\n\"",
        ),
        position: Position {
            line: 99,
            column: 16,
            span: 2095..2101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 17,
            span: 2101..2102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 103,
            column: 9,
            span: 2147..2155,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 10,
            span: 2155..2156,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.path)\"",
        ),
        position: Position {
            line: 103,
            column: 31,
            span: 2156..2177,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 32,
            span: 2177..2178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 106,
            column: 4,
            span: 2197..2200,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 5,
            span: 2200..2201,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT= LUA_PATH=x lua %s > %s'",
        ),
        position: Position {
            line: 106,
            column: 43,
            span: 2201..2239,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 44,
            span: 2239..2240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 106,
            column: 49,
            span: 2241..2245,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 50,
            span: 2245..2246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 106,
            column: 54,
            span: 2247..2250,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 55,
            span: 2250..2251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 107,
            column: 9,
            span: 2252..2260,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 107,
            column: 10,
            span: 2260..2261,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\\n\"",
        ),
        position: Position {
            line: 107,
            column: 15,
            span: 2261..2266,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 16,
            span: 2266..2267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 110,
            column: 4,
            span: 2294..2297,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 5,
            span: 2297..2298,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT= LUA_PATH_5_4=y LUA_PATH=x lua %s > %s'",
        ),
        position: Position {
            line: 110,
            column: 58,
            span: 2298..2351,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 59,
            span: 2351..2352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 110,
            column: 64,
            span: 2353..2357,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 65,
            span: 2357..2358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 110,
            column: 69,
            span: 2359..2362,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 70,
            span: 2362..2363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 111,
            column: 9,
            span: 2364..2372,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 10,
            span: 2372..2373,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\\n\"",
        ),
        position: Position {
            line: 111,
            column: 15,
            span: 2373..2378,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 16,
            span: 2378..2379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 114,
            column: 9,
            span: 2399..2407,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 114,
            column: 10,
            span: 2407..2408,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.cpath)\"",
        ),
        position: Position {
            line: 114,
            column: 32,
            span: 2408..2430,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 114,
            column: 33,
            span: 2430..2431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 115,
            column: 4,
            span: 2432..2435,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 115,
            column: 5,
            span: 2435..2436,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT= LUA_CPATH=xuxu lua %s > %s'",
        ),
        position: Position {
            line: 115,
            column: 47,
            span: 2436..2478,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 115,
            column: 48,
            span: 2478..2479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 115,
            column: 53,
            span: 2480..2484,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 115,
            column: 54,
            span: 2484..2485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 115,
            column: 58,
            span: 2486..2489,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 115,
            column: 59,
            span: 2489..2490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 116,
            column: 9,
            span: 2491..2499,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 10,
            span: 2499..2500,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\\n\"",
        ),
        position: Position {
            line: 116,
            column: 18,
            span: 2500..2508,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 19,
            span: 2508..2509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 119,
            column: 4,
            span: 2537..2540,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 5,
            span: 2540..2541,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT= LUA_CPATH_5_4=yacc LUA_CPATH=x lua %s > %s'",
        ),
        position: Position {
            line: 119,
            column: 63,
            span: 2541..2599,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 64,
            span: 2599..2600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 119,
            column: 69,
            span: 2601..2605,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 70,
            span: 2605..2606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 119,
            column: 74,
            span: 2607..2610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 75,
            span: 2610..2611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 120,
            column: 9,
            span: 2612..2620,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 120,
            column: 10,
            span: 2620..2621,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yacc\\n\"",
        ),
        position: Position {
            line: 120,
            column: 18,
            span: 2621..2629,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 120,
            column: 19,
            span: 2629..2630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 123,
            column: 9,
            span: 2681..2689,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 10,
            span: 2689..2690,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(X)\"",
        ),
        position: Position {
            line: 123,
            column: 20,
            span: 2690..2700,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 123,
            column: 21,
            span: 2700..2701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 124,
            column: 4,
            span: 2702..2705,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 5,
            span: 2705..2706,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT=\"X=tonumber(arg[1])\" lua %s 3.2 > %s'",
        ),
        position: Position {
            line: 124,
            column: 56,
            span: 2706..2757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 57,
            span: 2757..2758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 124,
            column: 62,
            span: 2759..2763,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 63,
            span: 2763..2764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 124,
            column: 67,
            span: 2765..2768,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 68,
            span: 2768..2769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 125,
            column: 9,
            span: 2770..2778,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 10,
            span: 2778..2779,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3.2\\n\"",
        ),
        position: Position {
            line: 125,
            column: 17,
            span: 2779..2786,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 18,
            span: 2786..2787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 128,
            column: 9,
            span: 2814..2822,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 10,
            span: 2822..2823,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(X)\"",
        ),
        position: Position {
            line: 128,
            column: 20,
            span: 2823..2833,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 21,
            span: 2833..2834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 129,
            column: 4,
            span: 2835..2838,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 5,
            span: 2838..2839,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT_5_4=\"X=10\" LUA_INIT=\"X=3\" lua %s > %s'",
        ),
        position: Position {
            line: 129,
            column: 57,
            span: 2839..2891,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 58,
            span: 2891..2892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 129,
            column: 63,
            span: 2893..2897,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 64,
            span: 2897..2898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 129,
            column: 68,
            span: 2899..2902,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 69,
            span: 2902..2903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 130,
            column: 9,
            span: 2904..2912,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 10,
            span: 2912..2913,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\\n\"",
        ),
        position: Position {
            line: 130,
            column: 16,
            span: 2913..2919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 17,
            span: 2919..2920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 133,
            column: 9,
            span: 2949..2957,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 10,
            span: 2957..2958,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x = x or 10; print(x); x = x + 1\"",
        ),
        position: Position {
            line: 133,
            column: 44,
            span: 2958..2992,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 45,
            span: 2992..2993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 134,
            column: 4,
            span: 2994..2997,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 5,
            span: 2997..2998,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT=\"@%s\" lua %s > %s'",
        ),
        position: Position {
            line: 134,
            column: 37,
            span: 2998..3030,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 38,
            span: 3030..3031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 134,
            column: 43,
            span: 3032..3036,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 44,
            span: 3036..3037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 134,
            column: 49,
            span: 3038..3042,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 50,
            span: 3042..3043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 134,
            column: 54,
            span: 3044..3047,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 55,
            span: 3047..3048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 135,
            column: 9,
            span: 3049..3057,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 10,
            span: 3057..3058,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\\n11\\n\"",
        ),
        position: Position {
            line: 135,
            column: 20,
            span: 3058..3068,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 21,
            span: 3068..3069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 138,
            column: 6,
            span: 3098..3103,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 7,
            span: 3103..3104,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LUA_INIT:1: msg'",
        ),
        position: Position {
            line: 138,
            column: 24,
            span: 3104..3121,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 25,
            span: 3121..3122,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT=\"error(\\'msg\\')\" lua'",
        ),
        position: Position {
            line: 138,
            column: 61,
            span: 3123..3158,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 62,
            span: 3158..3159,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 141,
            column: 6,
            span: 3181..3186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        position: Position {
            line: 141,
            column: 18,
            span: 3187..3198,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 19,
            span: 3198..3199,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultCpath",
        ),
        position: Position {
            line: 141,
            column: 0,
            span: 3200..3212,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 143,
            column: 0,
            span: 3214..3216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 144,
            column: 11,
            span: 3219..3227,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 12,
            span: 3227..3228,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.path, package.cpath)\"",
        ),
        position: Position {
            line: 144,
            column: 48,
            span: 3228..3264,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 49,
            span: 3264..3265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 145,
            column: 6,
            span: 3268..3271,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 7,
            span: 3271..3272,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT=\"error(10)\" LUA_PATH=xxx LUA_CPATH=xxx lua -E %s > %s'",
        ),
        position: Position {
            line: 145,
            column: 75,
            span: 3272..3340,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 76,
            span: 3340..3341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 146,
            column: 9,
            span: 3346..3350,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 10,
            span: 3350..3351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 146,
            column: 14,
            span: 3352..3355,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 15,
            span: 3355..3356,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 147,
            column: 8,
            span: 3359..3364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 147,
            column: 15,
            span: 3365..3371,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 147,
            column: 17,
            span: 3372..3373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        position: Position {
            line: 147,
            column: 27,
            span: 3374..3383,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 28,
            span: 3383..3384,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 29,
            span: 3384..3385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        position: Position {
            line: 148,
            column: 14,
            span: 3388..3399,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 148,
            column: 16,
            span: 3400..3401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 148,
            column: 23,
            span: 3402..3408,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 148,
            column: 24,
            span: 3408..3409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 148,
            column: 29,
            span: 3409..3414,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 148,
            column: 30,
            span: 3414..3415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 148,
            column: 36,
            span: 3415..3421,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 37,
            span: 3421..3422,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^(.-)\\t\"",
        ),
        position: Position {
            line: 148,
            column: 47,
            span: 3423..3432,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 48,
            span: 3432..3433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultCpath",
        ),
        position: Position {
            line: 149,
            column: 15,
            span: 3436..3448,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 149,
            column: 17,
            span: 3449..3450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 149,
            column: 24,
            span: 3451..3457,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 149,
            column: 25,
            span: 3457..3458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 149,
            column: 30,
            span: 3458..3463,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 31,
            span: 3463..3464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 149,
            column: 37,
            span: 3464..3470,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 38,
            span: 3470..3471,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\t(.-)$\"",
        ),
        position: Position {
            line: 149,
            column: 48,
            span: 3472..3481,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 49,
            span: 3481..3482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 152,
            column: 6,
            span: 3525..3528,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 7,
            span: 3528..3529,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env -i lua %s > %s'",
        ),
        position: Position {
            line: 152,
            column: 27,
            span: 3529..3549,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 28,
            span: 3549..3550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 152,
            column: 33,
            span: 3551..3555,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 34,
            span: 3555..3556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 152,
            column: 38,
            span: 3557..3560,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 39,
            span: 3560..3561,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 153,
            column: 8,
            span: 3564..3569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 153,
            column: 12,
            span: 3570..3573,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 153,
            column: 14,
            span: 3574..3575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        position: Position {
            line: 153,
            column: 24,
            span: 3576..3585,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 25,
            span: 3585..3586,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 26,
            span: 3586..3587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 154,
            column: 9,
            span: 3590..3596,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 10,
            span: 3596..3597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        position: Position {
            line: 154,
            column: 21,
            span: 3597..3608,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 154,
            column: 24,
            span: 3609..3611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 154,
            column: 31,
            span: 3612..3618,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 154,
            column: 32,
            span: 3618..3619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 154,
            column: 37,
            span: 3619..3624,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 38,
            span: 3624..3625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 154,
            column: 44,
            span: 3625..3631,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 154,
            column: 45,
            span: 3631..3632,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^(.-)\\t\"",
        ),
        position: Position {
            line: 154,
            column: 55,
            span: 3633..3642,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 56,
            span: 3642..3643,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 57,
            span: 3643..3644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 155,
            column: 9,
            span: 3647..3653,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 10,
            span: 3653..3654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultCpath",
        ),
        position: Position {
            line: 155,
            column: 22,
            span: 3654..3666,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 155,
            column: 25,
            span: 3667..3669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 155,
            column: 32,
            span: 3670..3676,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 155,
            column: 33,
            span: 3676..3677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 155,
            column: 38,
            span: 3677..3682,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 39,
            span: 3682..3683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        position: Position {
            line: 155,
            column: 45,
            span: 3683..3689,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 155,
            column: 46,
            span: 3689..3690,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\t(.-)$\"",
        ),
        position: Position {
            line: 155,
            column: 56,
            span: 3691..3700,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 155,
            column: 57,
            span: 3700..3701,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 155,
            column: 58,
            span: 3701..3702,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 156,
            column: 0,
            span: 3703..3706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 159,
            column: 7,
            span: 3732..3738,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 159,
            column: 8,
            span: 3738..3739,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 159,
            column: 11,
            span: 3739..3742,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 159,
            column: 18,
            span: 3743..3749,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 159,
            column: 19,
            span: 3749..3750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 159,
            column: 23,
            span: 3750..3754,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 159,
            column: 24,
            span: 3754..3755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        position: Position {
            line: 159,
            column: 35,
            span: 3755..3766,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 159,
            column: 36,
            span: 3766..3767,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxx\"",
        ),
        position: Position {
            line: 159,
            column: 42,
            span: 3768..3773,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 159,
            column: 43,
            span: 3773..3774,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 159,
            column: 0,
            span: 3775..3778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 160,
            column: 9,
            span: 3781..3787,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 160,
            column: 10,
            span: 3787..3788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 160,
            column: 14,
            span: 3788..3792,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 15,
            span: 3792..3793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        position: Position {
            line: 160,
            column: 26,
            span: 3793..3804,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 27,
            span: 3804..3805,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua\"",
        ),
        position: Position {
            line: 160,
            column: 33,
            span: 3806..3811,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 34,
            span: 3811..3812,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 160,
            column: 0,
            span: 3813..3816,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 161,
            column: 6,
            span: 3819..3822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 161,
            column: 13,
            span: 3823..3829,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 161,
            column: 14,
            span: 3829..3830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 161,
            column: 18,
            span: 3830..3834,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 19,
            span: 3834..3835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultCpath",
        ),
        position: Position {
            line: 161,
            column: 31,
            span: 3835..3847,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 161,
            column: 32,
            span: 3847..3848,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxx\"",
        ),
        position: Position {
            line: 161,
            column: 38,
            span: 3849..3854,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 39,
            span: 3854..3855,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 161,
            column: 0,
            span: 3856..3859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 162,
            column: 9,
            span: 3862..3868,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 162,
            column: 10,
            span: 3868..3869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 162,
            column: 14,
            span: 3869..3873,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 15,
            span: 3873..3874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultCpath",
        ),
        position: Position {
            line: 162,
            column: 27,
            span: 3874..3886,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 28,
            span: 3886..3887,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua\"",
        ),
        position: Position {
            line: 162,
            column: 34,
            span: 3888..3893,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 35,
            span: 3893..3894,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 36,
            span: 3894..3895,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 166,
            column: 6,
            span: 3942..3947,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 166,
            column: 15,
            span: 3948..3956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        position: Position {
            line: 166,
            column: 23,
            span: 3957..3964,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 24,
            span: 3964..3965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 166,
            column: 25,
            span: 3965..3966,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 26,
            span: 3966..3967,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 167,
            column: 11,
            span: 3970..3978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 12,
            span: 3978..3979,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.path)\"",
        ),
        position: Position {
            line: 167,
            column: 33,
            span: 3979..4000,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 34,
            span: 4000..4001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 168,
            column: 6,
            span: 4004..4007,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 7,
            span: 4007..4008,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_PATH=\"%s\" lua %s > %s'",
        ),
        position: Position {
            line: 168,
            column: 38,
            span: 4008..4039,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 39,
            span: 4039..4040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 168,
            column: 41,
            span: 4041..4042,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 42,
            span: 4042..4043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 168,
            column: 47,
            span: 4044..4048,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 48,
            span: 4048..4049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 168,
            column: 52,
            span: 4050..4053,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 53,
            span: 4053..4054,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 169,
            column: 8,
            span: 4057..4062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        position: Position {
            line: 169,
            column: 17,
            span: 4063..4071,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 169,
            column: 19,
            span: 4072..4073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        position: Position {
            line: 169,
            column: 29,
            span: 4074..4083,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 169,
            column: 30,
            span: 4083..4084,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 169,
            column: 31,
            span: 4084..4085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        position: Position {
            line: 170,
            column: 11,
            span: 4088..4096,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 170,
            column: 13,
            span: 4097..4098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 170,
            column: 20,
            span: 4099..4105,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 170,
            column: 21,
            span: 4105..4106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 170,
            column: 24,
            span: 4106..4109,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 25,
            span: 4109..4110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        position: Position {
            line: 170,
            column: 33,
            span: 4110..4118,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 170,
            column: 34,
            span: 4118..4119,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 170,
            column: 36,
            span: 4119..4121,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 170,
            column: 37,
            span: 4121..4122,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 170,
            column: 39,
            span: 4123..4124,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 170,
            column: 40,
            span: 4123..4125,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 41,
            span: 4125..4126,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 171,
            column: 5,
            span: 4154..4156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 171,
            column: 12,
            span: 4157..4163,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 171,
            column: 13,
            span: 4163..4164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 171,
            column: 17,
            span: 4164..4168,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 18,
            span: 4168..4169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 171,
            column: 19,
            span: 4169..4170,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 20,
            span: 4170..4171,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;\"",
        ),
        position: Position {
            line: 171,
            column: 25,
            span: 4172..4176,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 26,
            span: 4176..4177,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 171,
            column: 0,
            span: 4178..4182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 172,
            column: 6,
            span: 4187..4188,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 172,
            column: 8,
            span: 4189..4190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 172,
            column: 15,
            span: 4191..4197,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 172,
            column: 16,
            span: 4197..4198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 172,
            column: 20,
            span: 4198..4202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 21,
            span: 4202..4203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 172,
            column: 22,
            span: 4203..4204,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 23,
            span: 4204..4205,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;\"",
        ),
        position: Position {
            line: 172,
            column: 28,
            span: 4206..4210,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 29,
            span: 4210..4211,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        position: Position {
            line: 172,
            column: 33,
            span: 4212..4215,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 172,
            column: 36,
            span: 4216..4218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        position: Position {
            line: 172,
            column: 48,
            span: 4219..4230,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 172,
            column: 51,
            span: 4231..4233,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        position: Position {
            line: 172,
            column: 55,
            span: 4234..4237,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 56,
            span: 4237..4238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 173,
            column: 6,
            span: 4243..4244,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 173,
            column: 8,
            span: 4245..4246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 173,
            column: 15,
            span: 4247..4253,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 173,
            column: 16,
            span: 4253..4254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 173,
            column: 20,
            span: 4254..4258,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 21,
            span: 4258..4259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 173,
            column: 22,
            span: 4259..4260,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 173,
            column: 23,
            span: 4260..4261,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^;\"",
        ),
        position: Position {
            line: 173,
            column: 28,
            span: 4262..4266,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 173,
            column: 29,
            span: 4266..4267,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 173,
            column: 32,
            span: 4268..4270,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 33,
            span: 4270..4271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 174,
            column: 6,
            span: 4307..4308,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 174,
            column: 8,
            span: 4309..4310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 174,
            column: 15,
            span: 4311..4317,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 174,
            column: 16,
            span: 4317..4318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 174,
            column: 20,
            span: 4318..4322,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 174,
            column: 21,
            span: 4322..4323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 174,
            column: 22,
            span: 4323..4324,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 174,
            column: 23,
            span: 4324..4325,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";$\"",
        ),
        position: Position {
            line: 174,
            column: 28,
            span: 4326..4330,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 174,
            column: 29,
            span: 4330..4331,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 174,
            column: 32,
            span: 4332..4334,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 174,
            column: 33,
            span: 4334..4335,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 175,
            column: 0,
            span: 4363..4366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 176,
            column: 9,
            span: 4369..4375,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 10,
            span: 4375..4376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 176,
            column: 11,
            span: 4376..4377,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 176,
            column: 14,
            span: 4378..4380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        position: Position {
            line: 176,
            column: 23,
            span: 4381..4389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 24,
            span: 4389..4390,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 177,
            column: 0,
            span: 4391..4394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        position: Position {
            line: 179,
            column: 8,
            span: 4396..4403,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 9,
            span: 4403..4404,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        position: Position {
            line: 179,
            column: 12,
            span: 4404..4407,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 13,
            span: 4407..4408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        position: Position {
            line: 180,
            column: 8,
            span: 4409..4416,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 9,
            span: 4416..4417,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;\"",
        ),
        position: Position {
            line: 180,
            column: 13,
            span: 4417..4421,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 14,
            span: 4421..4422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        position: Position {
            line: 181,
            column: 8,
            span: 4423..4430,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 9,
            span: 4430..4431,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a;;b\"",
        ),
        position: Position {
            line: 181,
            column: 15,
            span: 4431..4437,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 16,
            span: 4437..4438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        position: Position {
            line: 182,
            column: 8,
            span: 4439..4446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 9,
            span: 4446..4447,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;b\"",
        ),
        position: Position {
            line: 182,
            column: 14,
            span: 4447..4452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 15,
            span: 4452..4453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        position: Position {
            line: 183,
            column: 8,
            span: 4454..4461,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 9,
            span: 4461..4462,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a;;\"",
        ),
        position: Position {
            line: 183,
            column: 14,
            span: 4462..4467,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 15,
            span: 4467..4468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        position: Position {
            line: 184,
            column: 8,
            span: 4469..4476,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 9,
            span: 4476..4477,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a;b;;c\"",
        ),
        position: Position {
            line: 184,
            column: 17,
            span: 4477..4485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 18,
            span: 4485..4486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 188,
            column: 9,
            span: 4524..4532,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 10,
            span: 4532..4533,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(1); a=2; return {x=15}\"",
        ),
        position: Position {
            line: 188,
            column: 40,
            span: 4533..4563,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 41,
            span: 4563..4564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 189,
            column: 9,
            span: 4565..4573,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 10,
            span: 4573..4574,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 11,
            span: 4574..4575,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(a); print(_G['%s'].x)\"",
        ),
        position: Position {
            line: 189,
            column: 40,
            span: 4575..4604,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 41,
            span: 4604..4605,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 189,
            column: 42,
            span: 4605..4606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 189,
            column: 48,
            span: 4606..4612,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 49,
            span: 4612..4613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 189,
            column: 53,
            span: 4613..4617,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 54,
            span: 4617..4618,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 55,
            span: 4618..4619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        position: Position {
            line: 189,
            column: 65,
            span: 4620..4629,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 66,
            span: 4629..4630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 190,
            column: 4,
            span: 4631..4634,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 5,
            span: 4634..4635,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_PATH=\"?;;\" lua -l %s -l%s -lstring -l io %s > %s'",
        ),
        position: Position {
            line: 190,
            column: 63,
            span: 4635..4693,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 190,
            column: 64,
            span: 4693..4694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 190,
            column: 69,
            span: 4695..4699,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 190,
            column: 70,
            span: 4699..4700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        position: Position {
            line: 190,
            column: 80,
            span: 4701..4710,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 190,
            column: 81,
            span: 4710..4711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        position: Position {
            line: 190,
            column: 91,
            span: 4712..4721,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 190,
            column: 92,
            span: 4721..4722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 190,
            column: 96,
            span: 4723..4726,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 97,
            span: 4726..4727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 191,
            column: 9,
            span: 4728..4736,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 10,
            span: 4736..4737,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\n2\\n15\\n2\\n15\\n\"",
        ),
        position: Position {
            line: 191,
            column: 29,
            span: 4737..4756,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 30,
            span: 4756..4757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 194,
            column: 9,
            span: 4795..4803,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 10,
            span: 4803..4804,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(str.upper'alo alo', m.max(10, 20))\"",
        ),
        position: Position {
            line: 194,
            column: 52,
            span: 4804..4846,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 194,
            column: 53,
            span: 4846..4847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 195,
            column: 4,
            span: 4848..4851,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 195,
            column: 5,
            span: 4851..4852,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -l 'str=string' '-lm=math' -e 'print(m.sin(0))' %s > %s\"",
        ),
        position: Position {
            line: 195,
            column: 66,
            span: 4852..4913,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 67,
            span: 4913..4914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 195,
            column: 72,
            span: 4915..4919,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 73,
            span: 4919..4920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 195,
            column: 77,
            span: 4921..4924,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 195,
            column: 78,
            span: 4924..4925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 196,
            column: 9,
            span: 4926..4934,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 10,
            span: 4934..4935,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0.0\\nALO ALO\\t20\\n\"",
        ),
        position: Position {
            line: 196,
            column: 30,
            span: 4935..4955,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 31,
            span: 4955..4956,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 199,
            column: 6,
            span: 4978..4983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 199,
            column: 8,
            span: 4984..4985,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 199,
            column: 10,
            span: 4986..4987,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  assert(#arg == 3 and arg[1] == 'a' and\n         arg[2] == 'b' and arg[3] == 'c')\n  assert(arg[-1] == '--' and arg[-2] == \"-e \" and arg[-3] == '%s')\n  assert(arg[4] == undef and arg[-4] == undef)\n  local a, b, c = ...\n  assert(... == 'a' and a == 'a' and b == 'b' and c == 'c')\n]]",
        ),
        position: Position {
            line: 206,
            column: 3,
            span: 4988..5272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 207,
            column: 2,
            span: 5273..5274,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 207,
            column: 4,
            span: 5275..5276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 207,
            column: 11,
            span: 5277..5283,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 207,
            column: 12,
            span: 5283..5284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 207,
            column: 18,
            span: 5284..5290,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 19,
            span: 5290..5291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 207,
            column: 20,
            span: 5291..5292,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 21,
            span: 5292..5293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 207,
            column: 30,
            span: 5294..5302,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 31,
            span: 5302..5303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 208,
            column: 9,
            span: 5304..5312,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 208,
            column: 10,
            span: 5312..5313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 208,
            column: 11,
            span: 5313..5314,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 208,
            column: 12,
            span: 5314..5315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 209,
            column: 4,
            span: 5316..5319,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 209,
            column: 5,
            span: 5319..5320,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua \"-e \" -- %s a b c'",
        ),
        position: Position {
            line: 209,
            column: 28,
            span: 5320..5343,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 29,
            span: 5343..5344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 209,
            column: 34,
            span: 5345..5349,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 209,
            column: 35,
            span: 5349..5350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 212,
            column: 9,
            span: 5423..5431,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(arg)\"",
        ),
        position: Position {
            line: 212,
            column: 23,
            span: 5432..5445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 213,
            column: 9,
            span: 5446..5454,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 213,
            column: 10,
            span: 5454..5455,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(arg)\"",
        ),
        position: Position {
            line: 213,
            column: 23,
            span: 5455..5468,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 24,
            span: 5468..5469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        position: Position {
            line: 213,
            column: 34,
            span: 5470..5479,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 213,
            column: 35,
            span: 5479..5480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 214,
            column: 4,
            span: 5481..5484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 214,
            column: 5,
            span: 5484..5485,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_PATH=\"?;;\" lua -l%s - < %s'",
        ),
        position: Position {
            line: 214,
            column: 41,
            span: 5485..5521,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 42,
            span: 5521..5522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 214,
            column: 47,
            span: 5523..5527,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 48,
            span: 5527..5528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        position: Position {
            line: 214,
            column: 58,
            span: 5529..5538,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 214,
            column: 59,
            span: 5538..5539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 217,
            column: 4,
            span: 5576..5579,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 5,
            span: 5579..5580,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"print(...)\" | lua -e \"arg[1] = 100\" - > %s'",
        ),
        position: Position {
            line: 217,
            column: 55,
            span: 5580..5630,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 217,
            column: 56,
            span: 5630..5631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 217,
            column: 60,
            span: 5632..5635,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 61,
            span: 5635..5636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 218,
            column: 9,
            span: 5637..5645,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 218,
            column: 10,
            span: 5645..5646,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"100\\n\"",
        ),
        position: Position {
            line: 218,
            column: 17,
            span: 5646..5653,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 218,
            column: 18,
            span: 5653..5654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 219,
            column: 6,
            span: 5655..5660,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 219,
            column: 7,
            span: 5660..5661,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'arg' is not a table\"",
        ),
        position: Position {
            line: 219,
            column: 29,
            span: 5661..5683,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 30,
            span: 5683..5684,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"\" | lua -e \"arg = 1\" -'",
        ),
        position: Position {
            line: 219,
            column: 61,
            span: 5685..5715,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 219,
            column: 62,
            span: 5715..5716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 222,
            column: 4,
            span: 5743..5746,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 5,
            span: 5746..5747,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo 10 | lua -e \"print=nil\" -i > /dev/null 2> %s'",
        ),
        position: Position {
            line: 222,
            column: 56,
            span: 5747..5798,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 222,
            column: 57,
            span: 5798..5799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 222,
            column: 61,
            span: 5800..5803,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 62,
            span: 5803..5804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 223,
            column: 7,
            span: 5805..5811,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 8,
            span: 5811..5812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 223,
            column: 14,
            span: 5812..5818,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 223,
            column: 15,
            span: 5818..5819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 223,
            column: 19,
            span: 5819..5823,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 20,
            span: 5823..5824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        position: Position {
            line: 223,
            column: 29,
            span: 5824..5833,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 30,
            span: 5833..5834,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 31,
            span: 5834..5835,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 32,
            span: 5835..5836,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error calling 'print'\"",
        ),
        position: Position {
            line: 223,
            column: 56,
            span: 5837..5860,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 57,
            span: 5860..5861,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 58,
            span: 5861..5862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 226,
            column: 4,
            span: 5886..5889,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 5,
            span: 5889..5890,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"io.stderr:write(1000)\\ncont\" | lua -e \"require\\'debug\\'.debug()\" 2> %s'",
        ),
        position: Position {
            line: 226,
            column: 83,
            span: 5890..5968,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 84,
            span: 5968..5969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 226,
            column: 88,
            span: 5970..5973,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 89,
            span: 5973..5974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 227,
            column: 9,
            span: 5975..5983,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 10,
            span: 5983..5984,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua_debug> 1000lua_debug> \"",
        ),
        position: Position {
            line: 227,
            column: 38,
            span: 5984..6012,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 39,
            span: 6012..6013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 230,
            column: 6,
            span: 6016..6021,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 7,
            span: 6021..6022,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing warnings\"",
        ),
        position: Position {
            line: 230,
            column: 25,
            span: 6022..6040,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 26,
            span: 6040..6041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 233,
            column: 4,
            span: 6069..6072,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 5,
            span: 6072..6073,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'echo \"io.stderr:write(1); warn[[XXX]]\" | lua 2> %s'",
        ),
        position: Position {
            line: 233,
            column: 57,
            span: 6073..6125,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 58,
            span: 6125..6126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 233,
            column: 62,
            span: 6127..6130,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 63,
            span: 6130..6131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 234,
            column: 9,
            span: 6132..6140,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 234,
            column: 10,
            span: 6140..6141,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        position: Position {
            line: 234,
            column: 13,
            span: 6141..6144,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 234,
            column: 14,
            span: 6144..6145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 236,
            column: 9,
            span: 6147..6155,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nwarn(\"@allow\")               -- unknown control, ignored\nwarn(\"@off\", \"XXX\", \"@off\")  -- these are not control messages\nwarn(\"@off\")                 -- this one is\nwarn(\"@on\", \"YYY\", \"@on\")    -- not control, but warn is off\nwarn(\"@off\")                 -- keep it off\nwarn(\"@on\")                  -- restart warnings\nwarn(\"\", \"@on\")              -- again, no control, real warning\nwarn(\"@on\")                  -- keep it \"started\"\nwarn(\"Z\", \"Z\", \"Z\")          -- common warning\n]]",
        ),
        position: Position {
            line: 246,
            column: 3,
            span: 6156..6640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 247,
            column: 4,
            span: 6641..6644,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 5,
            span: 6644..6645,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua -W %s 2> %s'",
        ),
        position: Position {
            line: 247,
            column: 22,
            span: 6645..6662,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 23,
            span: 6662..6663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 247,
            column: 28,
            span: 6664..6668,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 29,
            span: 6668..6669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 247,
            column: 33,
            span: 6670..6673,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 34,
            span: 6673..6674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 248,
            column: 9,
            span: 6675..6683,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nLua warning: @offXXX@off\nLua warning: @on\nLua warning: ZZZ\n]]",
        ),
        position: Position {
            line: 252,
            column: 3,
            span: 6684..6748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 254,
            column: 9,
            span: 6750..6758,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nwarn(\"@allow\")\n-- create two objects to be finalized when closing state\n-- the errors in the finalizers must generate warnings\nu1 = setmetatable({}, {__gc = function () error(\"XYZ\") end})\nu2 = setmetatable({}, {__gc = function () error(\"ZYX\") end})\n]]",
        ),
        position: Position {
            line: 260,
            column: 3,
            span: 6759..7013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 261,
            column: 4,
            span: 7014..7017,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 5,
            span: 7017..7018,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua -W %s 2> %s'",
        ),
        position: Position {
            line: 261,
            column: 22,
            span: 7018..7035,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 261,
            column: 23,
            span: 7035..7036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 261,
            column: 28,
            span: 7037..7041,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 261,
            column: 29,
            span: 7041..7042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 261,
            column: 33,
            span: 7043..7046,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 34,
            span: 7046..7047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        position: Position {
            line: 262,
            column: 13,
            span: 7048..7060,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 262,
            column: 14,
            span: 7060..7061,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ZYX)\\nXYZ)\\n\"",
        ),
        position: Position {
            line: 262,
            column: 28,
            span: 7061..7075,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 262,
            column: 29,
            span: 7075..7076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 266,
            column: 9,
            span: 7170..7178,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n-- should be called last\nprint(\"creating 1\")\nsetmetatable({}, {__gc = function () print(1) end})\n\nprint(\"creating 2\")\nsetmetatable({}, {__gc = function ()\n  print(\"2\")\n  print(\"creating 3\")\n  -- this finalizer should not be called, as object will be\n  -- created after 'lua_close' has been called\n  setmetatable({}, {__gc = function () print(3) end})\n  print(collectgarbage())    -- cannot call collector here\n  os.exit(0, true)\nend})\n]]",
        ),
        position: Position {
            line: 281,
            column: 3,
            span: 7179..7619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 282,
            column: 4,
            span: 7620..7623,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 5,
            span: 7623..7624,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua -W %s > %s'",
        ),
        position: Position {
            line: 282,
            column: 21,
            span: 7624..7640,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 282,
            column: 22,
            span: 7640..7641,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 282,
            column: 27,
            span: 7642..7646,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 282,
            column: 28,
            span: 7646..7647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 282,
            column: 32,
            span: 7648..7651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 33,
            span: 7651..7652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 283,
            column: 9,
            span: 7653..7661,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\ncreating 1\ncreating 2\n2\ncreating 3\nnil\n1\n]]",
        ),
        position: Position {
            line: 290,
            column: 3,
            span: 7662..7708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 294,
            column: 9,
            span: 7734..7742,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[print(({...})[30])]]",
        ),
        position: Position {
            line: 294,
            column: 32,
            span: 7743..7765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 295,
            column: 4,
            span: 7766..7769,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 295,
            column: 5,
            span: 7769..7770,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s %s > %s'",
        ),
        position: Position {
            line: 295,
            column: 21,
            span: 7770..7786,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 295,
            column: 22,
            span: 7786..7787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 295,
            column: 27,
            span: 7788..7792,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 295,
            column: 28,
            span: 7792..7793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 295,
            column: 35,
            span: 7794..7800,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 295,
            column: 36,
            span: 7800..7801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 295,
            column: 39,
            span: 7801..7804,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 295,
            column: 40,
            span: 7804..7805,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" a\"",
        ),
        position: Position {
            line: 295,
            column: 44,
            span: 7805..7809,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 295,
            column: 45,
            span: 7809..7810,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 295,
            column: 48,
            span: 7810..7813,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 295,
            column: 49,
            span: 7813..7814,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 295,
            column: 50,
            span: 7814..7815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 295,
            column: 54,
            span: 7816..7819,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 295,
            column: 55,
            span: 7819..7820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 296,
            column: 9,
            span: 7821..7829,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 10,
            span: 7829..7830,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\n\"",
        ),
        position: Position {
            line: 296,
            column: 15,
            span: 7830..7835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 16,
            span: 7835..7836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 298,
            column: 4,
            span: 7838..7841,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 298,
            column: 5,
            span: 7841..7842,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua \"-eprint(1)\" -ea=3 -e \"print(a)\" > %s]]",
        ),
        position: Position {
            line: 298,
            column: 50,
            span: 7842..7887,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 298,
            column: 51,
            span: 7887..7888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 298,
            column: 55,
            span: 7889..7892,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 298,
            column: 56,
            span: 7892..7893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 299,
            column: 9,
            span: 7894..7902,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 299,
            column: 10,
            span: 7902..7903,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\n3\\n\"",
        ),
        position: Position {
            line: 299,
            column: 18,
            span: 7903..7911,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 299,
            column: 19,
            span: 7911..7912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 302,
            column: 9,
            span: 7938..7946,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n(6*2-6) -- ===\na =\n10\nprint(a)\na]]",
        ),
        position: Position {
            line: 307,
            column: 4,
            span: 7947..7984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 308,
            column: 4,
            span: 7985..7988,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 5,
            span: 7988..7989,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        ),
        position: Position {
            line: 308,
            column: 52,
            span: 7989..8036,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 308,
            column: 53,
            span: 8036..8037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 308,
            column: 58,
            span: 8038..8042,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 308,
            column: 59,
            span: 8042..8043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 308,
            column: 63,
            span: 8044..8047,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 64,
            span: 8047..8048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        position: Position {
            line: 309,
            column: 13,
            span: 8049..8061,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 14,
            span: 8061..8062,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"6\\n10\\n10\\n\\n\"",
        ),
        position: Position {
            line: 309,
            column: 29,
            span: 8062..8077,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 30,
            span: 8077..8078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 311,
            column: 9,
            span: 8080..8088,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 311,
            column: 10,
            span: 8088..8089,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = [[b\\nc\\nd\\ne]]\\n=a\"",
        ),
        position: Position {
            line: 311,
            column: 34,
            span: 8089..8113,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 311,
            column: 35,
            span: 8113..8114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 312,
            column: 4,
            span: 8115..8118,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 312,
            column: 5,
            span: 8118..8119,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        ),
        position: Position {
            line: 312,
            column: 52,
            span: 8119..8166,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 312,
            column: 53,
            span: 8166..8167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 312,
            column: 58,
            span: 8168..8172,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 312,
            column: 59,
            span: 8172..8173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 312,
            column: 63,
            span: 8174..8177,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 312,
            column: 64,
            span: 8177..8178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        position: Position {
            line: 313,
            column: 13,
            span: 8179..8191,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 313,
            column: 14,
            span: 8191..8192,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\nc\\nd\\ne\\n\\n\"",
        ),
        position: Position {
            line: 313,
            column: 30,
            span: 8192..8208,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 313,
            column: 31,
            span: 8208..8209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        position: Position {
            line: 315,
            column: 7,
            span: 8211..8217,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 315,
            column: 9,
            span: 8218..8219,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 315,
            column: 15,
            span: 8220..8225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 316,
            column: 9,
            span: 8226..8234,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ --\na = 2\n]]",
        ),
        position: Position {
            line: 318,
            column: 3,
            span: 8235..8249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 319,
            column: 4,
            span: 8250..8253,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 319,
            column: 5,
            span: 8253..8254,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua \"-e_PROMPT='%s'\" -i < %s > %s]]",
        ),
        position: Position {
            line: 319,
            column: 42,
            span: 8254..8291,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 319,
            column: 43,
            span: 8291..8292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        position: Position {
            line: 319,
            column: 50,
            span: 8293..8299,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 319,
            column: 51,
            span: 8299..8300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 319,
            column: 56,
            span: 8301..8305,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 319,
            column: 57,
            span: 8305..8306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 319,
            column: 61,
            span: 8307..8310,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 319,
            column: 62,
            span: 8310..8311,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 320,
            column: 6,
            span: 8312..8317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 320,
            column: 8,
            span: 8318..8319,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 320,
            column: 10,
            span: 8320..8321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        position: Position {
            line: 320,
            column: 20,
            span: 8322..8331,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 320,
            column: 21,
            span: 8331..8332,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 320,
            column: 22,
            span: 8332..8333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 321,
            column: 7,
            span: 8334..8340,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 321,
            column: 8,
            span: 8340..8341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 321,
            column: 14,
            span: 8341..8347,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 321,
            column: 15,
            span: 8347..8348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 321,
            column: 19,
            span: 8348..8352,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 321,
            column: 20,
            span: 8352..8353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 321,
            column: 21,
            span: 8353..8354,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 321,
            column: 22,
            span: 8354..8355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        position: Position {
            line: 321,
            column: 29,
            span: 8356..8362,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 321,
            column: 32,
            span: 8363..8365,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*\"",
        ),
        position: Position {
            line: 321,
            column: 37,
            span: 8366..8370,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 321,
            column: 40,
            span: 8371..8373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        position: Position {
            line: 321,
            column: 47,
            span: 8374..8380,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 321,
            column: 50,
            span: 8381..8383,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*\"",
        ),
        position: Position {
            line: 321,
            column: 55,
            span: 8384..8388,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 321,
            column: 58,
            span: 8389..8391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        position: Position {
            line: 321,
            column: 65,
            span: 8392..8398,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 321,
            column: 66,
            span: 8398..8399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 321,
            column: 67,
            span: 8399..8400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 324,
            column: 9,
            span: 8430..8438,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ --\na = 2\n]]",
        ),
        position: Position {
            line: 326,
            column: 3,
            span: 8439..8453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 327,
            column: 4,
            span: 8454..8457,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 327,
            column: 5,
            span: 8457..8458,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -i < %s > %s]]",
        ),
        position: Position {
            line: 327,
            column: 25,
            span: 8458..8478,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 327,
            column: 26,
            span: 8478..8479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 327,
            column: 31,
            span: 8480..8484,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 327,
            column: 32,
            span: 8484..8485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 327,
            column: 36,
            span: 8486..8489,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 327,
            column: 37,
            span: 8489..8490,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 328,
            column: 6,
            span: 8491..8496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 328,
            column: 8,
            span: 8497..8498,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 328,
            column: 10,
            span: 8499..8500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        position: Position {
            line: 328,
            column: 20,
            span: 8501..8510,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 328,
            column: 21,
            span: 8510..8511,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 328,
            column: 22,
            span: 8511..8512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        position: Position {
            line: 329,
            column: 7,
            span: 8513..8519,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 329,
            column: 9,
            span: 8520..8521,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"> \"",
        ),
        position: Position {
            line: 329,
            column: 14,
            span: 8522..8526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 330,
            column: 7,
            span: 8542..8548,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 330,
            column: 8,
            span: 8548..8549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 330,
            column: 14,
            span: 8549..8555,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 330,
            column: 15,
            span: 8555..8556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 330,
            column: 19,
            span: 8556..8560,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 330,
            column: 20,
            span: 8560..8561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 330,
            column: 21,
            span: 8561..8562,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 22,
            span: 8562..8563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        position: Position {
            line: 330,
            column: 29,
            span: 8564..8570,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 330,
            column: 32,
            span: 8571..8573,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*\"",
        ),
        position: Position {
            line: 330,
            column: 37,
            span: 8574..8578,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 330,
            column: 40,
            span: 8579..8581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        position: Position {
            line: 330,
            column: 47,
            span: 8582..8588,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 330,
            column: 50,
            span: 8589..8591,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*\"",
        ),
        position: Position {
            line: 330,
            column: 55,
            span: 8592..8596,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 330,
            column: 58,
            span: 8597..8599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        position: Position {
            line: 330,
            column: 65,
            span: 8600..8606,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 330,
            column: 66,
            span: 8606..8607,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 330,
            column: 67,
            span: 8607..8608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        position: Position {
            line: 334,
            column: 7,
            span: 8632..8638,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 334,
            column: 9,
            span: 8639..8640,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local C = 0;\\z\n   _PROMPT=setmetatable({},{__tostring = function () \\z\n     C = C + 1; return C end})\"",
        ),
        position: Position {
            line: 337,
            column: 32,
            span: 8641..8744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 338,
            column: 9,
            span: 8745..8753,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ --\na = 2\n]]",
        ),
        position: Position {
            line: 340,
            column: 3,
            span: 8754..8768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 341,
            column: 4,
            span: 8769..8772,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 5,
            span: 8772..8773,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e \"%s\" -i < %s > %s]]",
        ),
        position: Position {
            line: 341,
            column: 33,
            span: 8773..8801,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 341,
            column: 34,
            span: 8801..8802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        position: Position {
            line: 341,
            column: 41,
            span: 8803..8809,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 341,
            column: 42,
            span: 8809..8810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 341,
            column: 47,
            span: 8811..8815,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 341,
            column: 48,
            span: 8815..8816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 341,
            column: 52,
            span: 8817..8820,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 53,
            span: 8820..8821,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 342,
            column: 6,
            span: 8822..8827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 342,
            column: 8,
            span: 8828..8829,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 342,
            column: 10,
            span: 8830..8831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        position: Position {
            line: 342,
            column: 20,
            span: 8832..8841,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 342,
            column: 21,
            span: 8841..8842,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 342,
            column: 22,
            span: 8842..8843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 343,
            column: 7,
            span: 8844..8850,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 8,
            span: 8850..8851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 343,
            column: 14,
            span: 8851..8857,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 343,
            column: 15,
            span: 8857..8858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 343,
            column: 19,
            span: 8858..8862,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 20,
            span: 8862..8863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 343,
            column: 21,
            span: 8863..8864,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 343,
            column: 22,
            span: 8864..8865,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n1 --\n2a = 2\n3\n]]",
        ),
        position: Position {
            line: 347,
            column: 3,
            span: 8866..8885,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 347,
            column: 4,
            span: 8885..8886,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 347,
            column: 6,
            span: 8886..8888,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 347,
            column: 7,
            span: 8888..8889,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 347,
            column: 12,
            span: 8890..8894,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 347,
            column: 13,
            span: 8894..8895,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 347,
            column: 14,
            span: 8895..8896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 351,
            column: 9,
            span: 8925..8933,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\ndebug = require \"debug\"\nm = {x=0}\nsetmetatable(m, {__tostring = function(x)\n  return tostring(debug.getinfo(4).currentline + x.x)\nend})\nerror(m)\n]]",
        ),
        position: Position {
            line: 358,
            column: 3,
            span: 8934..9084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 359,
            column: 6,
            span: 9085..9090,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 7,
            span: 9090..9091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 359,
            column: 15,
            span: 9091..9099,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 359,
            column: 18,
            span: 9100..9102,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\": 6\\n\"",
        ),
        position: Position {
            line: 359,
            column: 26,
            span: 9103..9110,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 359,
            column: 27,
            span: 9110..9111,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua %s]]",
        ),
        position: Position {
            line: 359,
            column: 38,
            span: 9112..9122,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 359,
            column: 39,
            span: 9122..9123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 359,
            column: 44,
            span: 9124..9128,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 45,
            span: 9128..9129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 361,
            column: 9,
            span: 9131..9139,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 10,
            span: 9139..9140,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error{}\"",
        ),
        position: Position {
            line: 361,
            column: 19,
            span: 9140..9149,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 20,
            span: 9149..9150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 362,
            column: 6,
            span: 9151..9156,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 7,
            span: 9156..9157,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error object is a table value\"",
        ),
        position: Position {
            line: 362,
            column: 38,
            span: 9157..9188,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 362,
            column: 39,
            span: 9188..9189,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua %s]]",
        ),
        position: Position {
            line: 362,
            column: 50,
            span: 9190..9200,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 362,
            column: 51,
            span: 9200..9201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 362,
            column: 56,
            span: 9202..9206,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 57,
            span: 9206..9207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 366,
            column: 2,
            span: 9240..9241,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 366,
            column: 4,
            span: 9242..9243,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[=[ --\nfunction f ( x )\n  local a = [[\nxuxu\n]]\n  local b = \"\\\nxuxu\\n\"\n  if x == 11 then return 1 + 12 , 2 + 20 end  --[[ test multiple returns ]]\n  return x + 1\n  --\\\\\nend\nreturn( f( 100 ) )\nassert( a == b )\ndo return f( 11 ) end  ]=]",
        ),
        position: Position {
            line: 379,
            column: 27,
            span: 9244..9478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 380,
            column: 2,
            span: 9479..9480,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 380,
            column: 4,
            span: 9481..9482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 380,
            column: 11,
            span: 9483..9489,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 380,
            column: 12,
            span: 9489..9490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 380,
            column: 16,
            span: 9490..9494,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 380,
            column: 17,
            span: 9494..9495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 380,
            column: 18,
            span: 9495..9496,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 380,
            column: 19,
            span: 9496..9497,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        position: Position {
            line: 380,
            column: 23,
            span: 9498..9501,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 380,
            column: 24,
            span: 9501..9502,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n\\n'",
        ),
        position: Position {
            line: 380,
            column: 31,
            span: 9503..9509,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 380,
            column: 32,
            span: 9509..9510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 381,
            column: 9,
            span: 9545..9553,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 381,
            column: 10,
            span: 9553..9554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 381,
            column: 11,
            span: 9554..9555,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 381,
            column: 12,
            span: 9555..9556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 382,
            column: 4,
            span: 9557..9560,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 5,
            span: 9560..9561,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        ),
        position: Position {
            line: 382,
            column: 52,
            span: 9561..9608,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 382,
            column: 53,
            span: 9608..9609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 382,
            column: 58,
            span: 9610..9614,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 382,
            column: 59,
            span: 9614..9615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 382,
            column: 63,
            span: 9616..9619,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 64,
            span: 9619..9620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        position: Position {
            line: 383,
            column: 13,
            span: 9621..9633,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 383,
            column: 14,
            span: 9633..9634,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"101\\n13\\t22\\n\\n\"",
        ),
        position: Position {
            line: 383,
            column: 31,
            span: 9634..9651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 383,
            column: 32,
            span: 9651..9652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 385,
            column: 9,
            span: 9654..9662,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[#comment in 1st line without \\n at the end]]",
        ),
        position: Position {
            line: 385,
            column: 56,
            span: 9663..9709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 386,
            column: 4,
            span: 9710..9713,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 5,
            span: 9713..9714,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s'",
        ),
        position: Position {
            line: 386,
            column: 13,
            span: 9714..9722,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 386,
            column: 14,
            span: 9722..9723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 386,
            column: 19,
            span: 9724..9728,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 20,
            span: 9728..9729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 388,
            column: 9,
            span: 9731..9739,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[#test line number when file starts with comment line\ndebug = require\"debug\"\nprint(debug.getinfo(1).currentline)\n]]",
        ),
        position: Position {
            line: 391,
            column: 3,
            span: 9740..9856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 392,
            column: 4,
            span: 9857..9860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 392,
            column: 5,
            span: 9860..9861,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s > %s'",
        ),
        position: Position {
            line: 392,
            column: 18,
            span: 9861..9874,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 392,
            column: 19,
            span: 9874..9875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 392,
            column: 24,
            span: 9876..9880,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 392,
            column: 25,
            span: 9880..9881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 392,
            column: 29,
            span: 9882..9885,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 392,
            column: 30,
            span: 9885..9886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        position: Position {
            line: 393,
            column: 13,
            span: 9887..9899,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 393,
            column: 14,
            span: 9899..9900,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'3\\n'",
        ),
        position: Position {
            line: 393,
            column: 19,
            span: 9900..9905,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 393,
            column: 20,
            span: 9905..9906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 396,
            column: 9,
            span: 9939..9947,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 396,
            column: 10,
            span: 9947..9948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 396,
            column: 16,
            span: 9948..9954,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 396,
            column: 17,
            span: 9954..9955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 396,
            column: 23,
            span: 9955..9961,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 396,
            column: 24,
            span: 9961..9962,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[io.output(%q); io.write('alo')]]",
        ),
        position: Position {
            line: 396,
            column: 58,
            span: 9962..9996,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 396,
            column: 59,
            span: 9996..9997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 396,
            column: 63,
            span: 9998..10001,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 396,
            column: 64,
            span: 10001..10002,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 396,
            column: 65,
            span: 10002..10003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 397,
            column: 4,
            span: 10004..10007,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 397,
            column: 5,
            span: 10007..10008,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s'",
        ),
        position: Position {
            line: 397,
            column: 13,
            span: 10008..10016,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 397,
            column: 14,
            span: 10016..10017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 397,
            column: 19,
            span: 10018..10022,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 397,
            column: 20,
            span: 10022..10023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        position: Position {
            line: 398,
            column: 9,
            span: 10024..10032,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 398,
            column: 10,
            span: 10032..10033,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 398,
            column: 15,
            span: 10033..10038,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 398,
            column: 16,
            span: 10038..10039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 401,
            column: 4,
            span: 10090..10093,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 401,
            column: 5,
            span: 10093..10094,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -v  -e\"print'hello'\" > %s]]",
        ),
        position: Position {
            line: 401,
            column: 38,
            span: 10094..10127,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 401,
            column: 39,
            span: 10127..10128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 401,
            column: 43,
            span: 10129..10132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 401,
            column: 44,
            span: 10132..10133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 402,
            column: 2,
            span: 10134..10135,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 402,
            column: 4,
            span: 10136..10137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        position: Position {
            line: 402,
            column: 14,
            span: 10138..10147,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 402,
            column: 15,
            span: 10147..10148,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 402,
            column: 16,
            span: 10148..10149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 403,
            column: 7,
            span: 10150..10156,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 403,
            column: 8,
            span: 10156..10157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 403,
            column: 14,
            span: 10157..10163,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 403,
            column: 15,
            span: 10163..10164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 403,
            column: 19,
            span: 10164..10168,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 403,
            column: 20,
            span: 10168..10169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 403,
            column: 21,
            span: 10169..10170,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 403,
            column: 22,
            span: 10170..10171,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"PUC%-Rio\\nhello\"",
        ),
        position: Position {
            line: 403,
            column: 40,
            span: 10172..10189,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 403,
            column: 41,
            span: 10189..10190,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 403,
            column: 42,
            span: 10190..10191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 407,
            column: 9,
            span: 10213..10221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 407,
            column: 10,
            span: 10221..10222,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(nil, true)\"",
        ),
        position: Position {
            line: 407,
            column: 30,
            span: 10222..10242,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 407,
            column: 31,
            span: 10242..10243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 408,
            column: 4,
            span: 10244..10247,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 408,
            column: 5,
            span: 10247..10248,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s'",
        ),
        position: Position {
            line: 408,
            column: 13,
            span: 10248..10256,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 408,
            column: 14,
            span: 10256..10257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 408,
            column: 19,
            span: 10258..10262,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 408,
            column: 20,
            span: 10262..10263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 409,
            column: 9,
            span: 10264..10272,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 409,
            column: 10,
            span: 10272..10273,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(0, true)\"",
        ),
        position: Position {
            line: 409,
            column: 28,
            span: 10273..10291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 409,
            column: 29,
            span: 10291..10292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 410,
            column: 4,
            span: 10293..10296,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 410,
            column: 5,
            span: 10296..10297,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s'",
        ),
        position: Position {
            line: 410,
            column: 13,
            span: 10297..10305,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 410,
            column: 14,
            span: 10305..10306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 410,
            column: 19,
            span: 10307..10311,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 410,
            column: 20,
            span: 10311..10312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 411,
            column: 9,
            span: 10313..10321,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 411,
            column: 10,
            span: 10321..10322,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(true, true)\"",
        ),
        position: Position {
            line: 411,
            column: 31,
            span: 10322..10343,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 411,
            column: 32,
            span: 10343..10344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 412,
            column: 4,
            span: 10345..10348,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 412,
            column: 5,
            span: 10348..10349,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s'",
        ),
        position: Position {
            line: 412,
            column: 13,
            span: 10349..10357,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 412,
            column: 14,
            span: 10357..10358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 412,
            column: 19,
            span: 10359..10363,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 412,
            column: 20,
            span: 10363..10364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 413,
            column: 9,
            span: 10365..10373,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 413,
            column: 10,
            span: 10373..10374,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(1, true)\"",
        ),
        position: Position {
            line: 413,
            column: 28,
            span: 10374..10392,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 413,
            column: 29,
            span: 10392..10393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 414,
            column: 6,
            span: 10394..10399,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 414,
            column: 7,
            span: 10399..10400,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 414,
            column: 9,
            span: 10400..10402,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 414,
            column: 10,
            span: 10402..10403,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s\"",
        ),
        position: Position {
            line: 414,
            column: 19,
            span: 10404..10412,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 414,
            column: 20,
            span: 10412..10413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 414,
            column: 25,
            span: 10414..10418,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 414,
            column: 26,
            span: 10418..10419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 415,
            column: 9,
            span: 10434..10442,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 10,
            span: 10442..10443,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(false, true)\"",
        ),
        position: Position {
            line: 415,
            column: 32,
            span: 10443..10465,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 33,
            span: 10465..10466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 416,
            column: 6,
            span: 10467..10472,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 416,
            column: 7,
            span: 10472..10473,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 416,
            column: 9,
            span: 10473..10475,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 416,
            column: 10,
            span: 10475..10476,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s\"",
        ),
        position: Position {
            line: 416,
            column: 19,
            span: 10477..10485,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 416,
            column: 20,
            span: 10485..10486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 416,
            column: 25,
            span: 10487..10491,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 416,
            column: 26,
            span: 10491..10492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        position: Position {
            line: 420,
            column: 9,
            span: 10549..10557,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local x <close> = setmetatable({},\n        {__close = function (self, err)\n                     assert(err == nil)\n                     print(\"Ok\")\n                   end})\n  local e1 <close> = setmetatable({}, {__close = function () print(120) end})\n  os.exit(true, true)\n]]",
        ),
        position: Position {
            line: 428,
            column: 3,
            span: 10558..10838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        position: Position {
            line: 429,
            column: 4,
            span: 10839..10842,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 429,
            column: 5,
            span: 10842..10843,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua %s > %s'",
        ),
        position: Position {
            line: 429,
            column: 18,
            span: 10843..10856,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 429,
            column: 19,
            span: 10856..10857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 429,
            column: 24,
            span: 10858..10862,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 429,
            column: 25,
            span: 10862..10863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 429,
            column: 29,
            span: 10864..10867,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 429,
            column: 30,
            span: 10867..10868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        position: Position {
            line: 430,
            column: 13,
            span: 10869..10881,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 430,
            column: 14,
            span: 10881..10882,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"120\\nOk\\n\"",
        ),
        position: Position {
            line: 430,
            column: 25,
            span: 10882..10893,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 430,
            column: 26,
            span: 10893..10894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 434,
            column: 7,
            span: 10923..10929,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 434,
            column: 8,
            span: 10929..10930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 434,
            column: 10,
            span: 10930..10932,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 434,
            column: 11,
            span: 10932..10933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 434,
            column: 17,
            span: 10933..10939,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 434,
            column: 18,
            span: 10939..10940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 434,
            column: 22,
            span: 10940..10944,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 434,
            column: 23,
            span: 10944..10945,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 434,
            column: 24,
            span: 10945..10946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 435,
            column: 7,
            span: 10947..10953,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 435,
            column: 8,
            span: 10953..10954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 435,
            column: 10,
            span: 10954..10956,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 435,
            column: 11,
            span: 10956..10957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 435,
            column: 17,
            span: 10957..10963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 435,
            column: 18,
            span: 10963..10964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        position: Position {
            line: 435,
            column: 27,
            span: 10964..10973,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 435,
            column: 28,
            span: 10973..10974,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 435,
            column: 29,
            span: 10974..10975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 436,
            column: 7,
            span: 10976..10982,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 436,
            column: 8,
            span: 10982..10983,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 436,
            column: 11,
            span: 10983..10986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 436,
            column: 14,
            span: 10987..10989,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 436,
            column: 15,
            span: 10989..10990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 436,
            column: 21,
            span: 10990..10996,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 436,
            column: 22,
            span: 10996..10997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        position: Position {
            line: 436,
            column: 25,
            span: 10997..11000,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 436,
            column: 26,
            span: 11000..11001,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 436,
            column: 27,
            span: 11001..11002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 439,
            column: 6,
            span: 11023..11028,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 439,
            column: 7,
            span: 11028..11029,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unrecognized option '-h'\"",
        ),
        position: Position {
            line: 439,
            column: 33,
            span: 11029..11055,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 439,
            column: 34,
            span: 11055..11056,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -h\"",
        ),
        position: Position {
            line: 439,
            column: 43,
            span: 11057..11065,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 439,
            column: 44,
            span: 11065..11066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 440,
            column: 6,
            span: 11067..11072,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 440,
            column: 7,
            span: 11072..11073,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unrecognized option '---'\"",
        ),
        position: Position {
            line: 440,
            column: 34,
            span: 11073..11100,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 440,
            column: 35,
            span: 11100..11101,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua ---\"",
        ),
        position: Position {
            line: 440,
            column: 45,
            span: 11102..11111,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 440,
            column: 46,
            span: 11111..11112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 441,
            column: 6,
            span: 11113..11118,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 441,
            column: 7,
            span: 11118..11119,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unrecognized option '-Ex'\"",
        ),
        position: Position {
            line: 441,
            column: 34,
            span: 11119..11146,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 441,
            column: 35,
            span: 11146..11147,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -Ex\"",
        ),
        position: Position {
            line: 441,
            column: 45,
            span: 11148..11157,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 441,
            column: 46,
            span: 11157..11158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 442,
            column: 6,
            span: 11159..11164,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 442,
            column: 7,
            span: 11164..11165,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unrecognized option '-vv'\"",
        ),
        position: Position {
            line: 442,
            column: 34,
            span: 11165..11192,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 442,
            column: 35,
            span: 11192..11193,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -vv\"",
        ),
        position: Position {
            line: 442,
            column: 45,
            span: 11194..11203,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 442,
            column: 46,
            span: 11203..11204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 443,
            column: 6,
            span: 11205..11210,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 443,
            column: 7,
            span: 11210..11211,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unrecognized option '-iv'\"",
        ),
        position: Position {
            line: 443,
            column: 34,
            span: 11211..11238,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 443,
            column: 35,
            span: 11238..11239,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -iv\"",
        ),
        position: Position {
            line: 443,
            column: 45,
            span: 11240..11249,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 443,
            column: 46,
            span: 11249..11250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 444,
            column: 6,
            span: 11251..11256,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 444,
            column: 7,
            span: 11256..11257,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'-e' needs argument\"",
        ),
        position: Position {
            line: 444,
            column: 28,
            span: 11257..11278,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 444,
            column: 29,
            span: 11278..11279,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -e\"",
        ),
        position: Position {
            line: 444,
            column: 38,
            span: 11280..11288,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 444,
            column: 39,
            span: 11288..11289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 445,
            column: 6,
            span: 11290..11295,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 445,
            column: 7,
            span: 11295..11296,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"syntax error\"",
        ),
        position: Position {
            line: 445,
            column: 21,
            span: 11296..11310,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 445,
            column: 22,
            span: 11310..11311,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -e a\"",
        ),
        position: Position {
            line: 445,
            column: 33,
            span: 11312..11322,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 445,
            column: 34,
            span: 11322..11323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 446,
            column: 6,
            span: 11324..11329,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 446,
            column: 7,
            span: 11329..11330,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'-l' needs argument\"",
        ),
        position: Position {
            line: 446,
            column: 28,
            span: 11330..11351,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 446,
            column: 29,
            span: 11351..11352,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -l\"",
        ),
        position: Position {
            line: 446,
            column: 38,
            span: 11353..11361,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 446,
            column: 39,
            span: 11361..11362,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 449,
            column: 3,
            span: 11365..11367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 449,
            column: 5,
            span: 11368..11369,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 449,
            column: 10,
            span: 11370..11374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 450,
            column: 8,
            span: 11394..11399,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 450,
            column: 9,
            span: 11399..11400,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing 'not enough memory' to create a state\"",
        ),
        position: Position {
            line: 450,
            column: 56,
            span: 11400..11447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 450,
            column: 57,
            span: 11447..11448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        position: Position {
            line: 451,
            column: 8,
            span: 11451..11456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 451,
            column: 9,
            span: 11456..11457,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not enough memory\"",
        ),
        position: Position {
            line: 451,
            column: 28,
            span: 11457..11476,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 451,
            column: 29,
            span: 11476..11477,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"env MEMLIMIT=100 lua\"",
        ),
        position: Position {
            line: 451,
            column: 52,
            span: 11478..11500,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 451,
            column: 53,
            span: 11500..11501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        position: Position {
            line: 454,
            column: 7,
            span: 11525..11529,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 454,
            column: 8,
            span: 11529..11530,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@store\"",
        ),
        position: Position {
            line: 454,
            column: 16,
            span: 11530..11538,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 454,
            column: 17,
            span: 11538..11539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        position: Position {
            line: 455,
            column: 7,
            span: 11542..11546,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 455,
            column: 8,
            span: 11546..11547,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@123\"",
        ),
        position: Position {
            line: 455,
            column: 14,
            span: 11547..11553,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 455,
            column: 15,
            span: 11553..11554,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"456\"",
        ),
        position: Position {
            line: 455,
            column: 21,
            span: 11555..11560,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 455,
            column: 22,
            span: 11560..11561,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"789\"",
        ),
        position: Position {
            line: 455,
            column: 28,
            span: 11562..11567,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 455,
            column: 29,
            span: 11567..11568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 456,
            column: 9,
            span: 11571..11577,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 456,
            column: 10,
            span: 11577..11578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        position: Position {
            line: 456,
            column: 15,
            span: 11578..11583,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 456,
            column: 18,
            span: 11584..11586,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@123456789\"",
        ),
        position: Position {
            line: 456,
            column: 31,
            span: 11587..11599,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 456,
            column: 32,
            span: 11599..11600,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 456,
            column: 33,
            span: 11600..11601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        position: Position {
            line: 456,
            column: 39,
            span: 11602..11607,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 456,
            column: 41,
            span: 11608..11609,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 456,
            column: 0,
            span: 11610..11615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        position: Position {
            line: 458,
            column: 7,
            span: 11619..11623,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 458,
            column: 8,
            span: 11623..11624,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"zip\"",
        ),
        position: Position {
            line: 458,
            column: 13,
            span: 11624..11629,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 458,
            column: 14,
            span: 11629..11630,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 458,
            column: 17,
            span: 11631..11633,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 458,
            column: 18,
            span: 11633..11634,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" \"",
        ),
        position: Position {
            line: 458,
            column: 22,
            span: 11635..11638,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 458,
            column: 23,
            span: 11638..11639,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"zap\"",
        ),
        position: Position {
            line: 458,
            column: 29,
            span: 11640..11645,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 458,
            column: 30,
            span: 11645..11646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 459,
            column: 9,
            span: 11649..11655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 459,
            column: 10,
            span: 11655..11656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        position: Position {
            line: 459,
            column: 15,
            span: 11656..11661,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 459,
            column: 18,
            span: 11662..11664,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"zip zap\"",
        ),
        position: Position {
            line: 459,
            column: 28,
            span: 11665..11674,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 459,
            column: 29,
            span: 11674..11675,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 459,
            column: 30,
            span: 11675..11676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        position: Position {
            line: 459,
            column: 36,
            span: 11677..11682,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 459,
            column: 38,
            span: 11683..11684,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 459,
            column: 0,
            span: 11685..11690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        position: Position {
            line: 460,
            column: 7,
            span: 11693..11697,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 460,
            column: 8,
            span: 11697..11698,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ZIP\"",
        ),
        position: Position {
            line: 460,
            column: 13,
            span: 11698..11703,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 460,
            column: 14,
            span: 11703..11704,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 460,
            column: 17,
            span: 11705..11707,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 460,
            column: 18,
            span: 11707..11708,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" \"",
        ),
        position: Position {
            line: 460,
            column: 22,
            span: 11709..11712,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 460,
            column: 23,
            span: 11712..11713,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ZAP\"",
        ),
        position: Position {
            line: 460,
            column: 29,
            span: 11714..11719,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 460,
            column: 30,
            span: 11719..11720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 461,
            column: 9,
            span: 11723..11729,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 461,
            column: 10,
            span: 11729..11730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        position: Position {
            line: 461,
            column: 15,
            span: 11730..11735,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 461,
            column: 18,
            span: 11736..11738,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ZIP ZAP\"",
        ),
        position: Position {
            line: 461,
            column: 28,
            span: 11739..11748,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 461,
            column: 29,
            span: 11748..11749,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 461,
            column: 30,
            span: 11749..11750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_WARN",
        ),
        position: Position {
            line: 461,
            column: 36,
            span: 11751..11756,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 461,
            column: 38,
            span: 11757..11758,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 461,
            column: 0,
            span: 11759..11764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        position: Position {
            line: 462,
            column: 7,
            span: 11767..11771,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 462,
            column: 8,
            span: 11771..11772,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@normal\"",
        ),
        position: Position {
            line: 462,
            column: 17,
            span: 11772..11781,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 462,
            column: 18,
            span: 11781..11782,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 463,
            column: 0,
            span: 11783..11786,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 465,
            column: 0,
            span: 11788..11790,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 467,
            column: 8,
            span: 11836..11841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 467,
            column: 11,
            span: 11842..11844,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 467,
            column: 12,
            span: 11844..11845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 467,
            column: 16,
            span: 11846..11849,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 467,
            column: 18,
            span: 11850..11851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 467,
            column: 24,
            span: 11852..11857,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 467,
            column: 25,
            span: 11857..11858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        position: Position {
            line: 467,
            column: 29,
            span: 11858..11862,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 467,
            column: 30,
            span: 11862..11863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 468,
            column: 9,
            span: 11866..11872,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 468,
            column: 10,
            span: 11872..11873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 468,
            column: 16,
            span: 11873..11879,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 468,
            column: 17,
            span: 11879..11880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 468,
            column: 21,
            span: 11880..11884,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 468,
            column: 22,
            span: 11884..11885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 468,
            column: 25,
            span: 11885..11888,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 468,
            column: 26,
            span: 11888..11889,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string expected\"",
        ),
        position: Position {
            line: 468,
            column: 44,
            span: 11890..11907,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 468,
            column: 45,
            span: 11907..11908,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 468,
            column: 46,
            span: 11908..11909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 472,
            column: 5,
            span: 12021..12023,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 472,
            column: 6,
            span: 12023..12024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 472,
            column: 10,
            span: 12025..12028,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 472,
            column: 12,
            span: 12029..12030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 472,
            column: 18,
            span: 12031..12036,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 472,
            column: 19,
            span: 12036..12037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        position: Position {
            line: 472,
            column: 23,
            span: 12037..12041,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 472,
            column: 24,
            span: 12041..12042,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"SHOULD NOT APPEAR\"",
        ),
        position: Position {
            line: 472,
            column: 44,
            span: 12043..12062,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 472,
            column: 45,
            span: 12062..12063,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 472,
            column: 47,
            span: 12064..12065,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 472,
            column: 48,
            span: 12065..12066,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 472,
            column: 49,
            span: 12066..12067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 473,
            column: 9,
            span: 12070..12076,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 473,
            column: 10,
            span: 12076..12077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 473,
            column: 16,
            span: 12077..12083,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 473,
            column: 17,
            span: 12083..12084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 473,
            column: 21,
            span: 12084..12088,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 473,
            column: 22,
            span: 12088..12089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 473,
            column: 25,
            span: 12089..12092,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 473,
            column: 26,
            span: 12092..12093,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string expected\"",
        ),
        position: Position {
            line: 473,
            column: 44,
            span: 12094..12111,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 473,
            column: 45,
            span: 12111..12112,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 473,
            column: 46,
            span: 12112..12113,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 474,
            column: 0,
            span: 12114..12117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 476,
            column: 6,
            span: 12119..12124,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 476,
            column: 7,
            span: 12124..12125,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 476,
            column: 10,
            span: 12125..12128,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 476,
            column: 11,
            span: 12128..12129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 478,
            column: 6,
            span: 12131..12136,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 478,
            column: 7,
            span: 12136..12137,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing Ctrl C'",
        ),
        position: Position {
            line: 478,
            column: 23,
            span: 12137..12153,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 478,
            column: 24,
            span: 12153..12154,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 479,
            column: 0,
            span: 12155..12157,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 481,
            column: 8,
            span: 12184..12189,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 481,
            column: 17,
            span: 12190..12198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kill",
        ),
        position: Position {
            line: 481,
            column: 22,
            span: 12199..12203,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 481,
            column: 23,
            span: 12203..12204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        position: Position {
            line: 481,
            column: 26,
            span: 12204..12207,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 481,
            column: 27,
            span: 12207..12208,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 482,
            column: 11,
            span: 12213..12219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 482,
            column: 14,
            span: 12220..12222,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 482,
            column: 15,
            span: 12222..12223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        position: Position {
            line: 482,
            column: 22,
            span: 12223..12230,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 482,
            column: 23,
            span: 12230..12231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 482,
            column: 29,
            span: 12231..12237,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 482,
            column: 30,
            span: 12237..12238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 482,
            column: 36,
            span: 12238..12244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 482,
            column: 37,
            span: 12244..12245,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'kill -INT %s 2> /dev/null'",
        ),
        position: Position {
            line: 482,
            column: 64,
            span: 12245..12272,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 482,
            column: 65,
            span: 12272..12273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        position: Position {
            line: 482,
            column: 69,
            span: 12274..12277,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 482,
            column: 70,
            span: 12277..12278,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 482,
            column: 71,
            span: 12278..12279,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 483,
            column: 0,
            span: 12282..12285,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 487,
            column: 8,
            span: 12388..12393,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 487,
            column: 17,
            span: 12394..12402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "runback",
        ),
        position: Position {
            line: 487,
            column: 25,
            span: 12403..12410,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 487,
            column: 26,
            span: 12410..12411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "luaprg",
        ),
        position: Position {
            line: 487,
            column: 32,
            span: 12411..12417,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 487,
            column: 33,
            span: 12417..12418,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 489,
            column: 10,
            span: 12490..12495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "shellprg",
        ),
        position: Position {
            line: 489,
            column: 19,
            span: 12496..12504,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 489,
            column: 21,
            span: 12505..12506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 489,
            column: 28,
            span: 12507..12513,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 489,
            column: 29,
            span: 12513..12514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 489,
            column: 35,
            span: 12514..12520,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 489,
            column: 36,
            span: 12520..12521,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%s -e \"%s\" & echo $!'",
        ),
        position: Position {
            line: 489,
            column: 58,
            span: 12521..12543,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 489,
            column: 59,
            span: 12543..12544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        position: Position {
            line: 489,
            column: 68,
            span: 12545..12553,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 489,
            column: 69,
            span: 12553..12554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "luaprg",
        ),
        position: Position {
            line: 489,
            column: 76,
            span: 12555..12561,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 489,
            column: 77,
            span: 12561..12562,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 490,
            column: 10,
            span: 12567..12572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 490,
            column: 12,
            span: 12573..12574,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 490,
            column: 14,
            span: 12575..12576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 490,
            column: 17,
            span: 12577..12579,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 490,
            column: 18,
            span: 12579..12580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "popen",
        ),
        position: Position {
            line: 490,
            column: 23,
            span: 12580..12585,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 490,
            column: 24,
            span: 12585..12586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "shellprg",
        ),
        position: Position {
            line: 490,
            column: 32,
            span: 12586..12594,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 490,
            column: 33,
            span: 12594..12595,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        position: Position {
            line: 490,
            column: 37,
            span: 12596..12599,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 490,
            column: 38,
            span: 12599..12600,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 491,
            column: 10,
            span: 12625..12630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        position: Position {
            line: 491,
            column: 14,
            span: 12631..12634,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 491,
            column: 16,
            span: 12635..12636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 491,
            column: 18,
            span: 12637..12638,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 491,
            column: 19,
            span: 12638..12639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 491,
            column: 23,
            span: 12639..12643,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 491,
            column: 24,
            span: 12643..12644,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 491,
            column: 25,
            span: 12644..12645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 492,
            column: 10,
            span: 12689..12694,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 492,
            column: 11,
            span: 12694..12695,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(if test fails now, it may leave a Lua script running in \\z\n            background, pid \"",
        ),
        position: Position {
            line: 493,
            column: 30,
            span: 12695..12785,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 493,
            column: 33,
            span: 12786..12788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        position: Position {
            line: 493,
            column: 37,
            span: 12789..12792,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 493,
            column: 40,
            span: 12793..12795,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        position: Position {
            line: 493,
            column: 44,
            span: 12796..12799,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 493,
            column: 45,
            span: 12799..12800,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 494,
            column: 11,
            span: 12805..12811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 494,
            column: 13,
            span: 12812..12813,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 494,
            column: 14,
            span: 12813..12814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        position: Position {
            line: 494,
            column: 0,
            span: 12815..12818,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 495,
            column: 0,
            span: 12821..12824,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 498,
            column: 8,
            span: 12899..12904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 498,
            column: 10,
            span: 12905..12906,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 498,
            column: 11,
            span: 12906..12907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        position: Position {
            line: 498,
            column: 15,
            span: 12908..12911,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 498,
            column: 17,
            span: 12912..12913,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "runback",
        ),
        position: Position {
            line: 498,
            column: 25,
            span: 12914..12921,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    pcall(function () print(12); while true do end end); print(42)]]",
        ),
        position: Position {
            line: 499,
            column: 69,
            span: 12922..12993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 501,
            column: 9,
            span: 13037..13043,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 501,
            column: 10,
            span: 13043..13044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 501,
            column: 11,
            span: 13044..13045,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 501,
            column: 12,
            span: 13045..13046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 501,
            column: 16,
            span: 13046..13050,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 501,
            column: 17,
            span: 13050..13051,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 501,
            column: 18,
            span: 13051..13052,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 501,
            column: 21,
            span: 13053..13055,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"12\"",
        ),
        position: Position {
            line: 501,
            column: 26,
            span: 13056..13060,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 501,
            column: 27,
            span: 13060..13061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kill",
        ),
        position: Position {
            line: 502,
            column: 7,
            span: 13064..13068,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 502,
            column: 8,
            span: 13068..13069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        position: Position {
            line: 502,
            column: 11,
            span: 13069..13072,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 502,
            column: 12,
            span: 13072..13073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 504,
            column: 9,
            span: 13200..13206,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 504,
            column: 10,
            span: 13206..13207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 504,
            column: 11,
            span: 13207..13208,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 504,
            column: 12,
            span: 13208..13209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 504,
            column: 16,
            span: 13209..13213,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 504,
            column: 17,
            span: 13213..13214,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 504,
            column: 18,
            span: 13214..13215,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 504,
            column: 21,
            span: 13216..13218,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"42\"",
        ),
        position: Position {
            line: 504,
            column: 26,
            span: 13219..13223,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 504,
            column: 27,
            span: 13223..13224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 505,
            column: 9,
            span: 13246..13252,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 505,
            column: 10,
            span: 13252..13253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 505,
            column: 11,
            span: 13253..13254,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 505,
            column: 12,
            span: 13254..13255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 505,
            column: 17,
            span: 13255..13260,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 505,
            column: 18,
            span: 13260..13261,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 505,
            column: 19,
            span: 13261..13262,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 505,
            column: 20,
            span: 13262..13263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 506,
            column: 8,
            span: 13266..13271,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 506,
            column: 9,
            span: 13271..13272,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"done\"",
        ),
        position: Position {
            line: 506,
            column: 15,
            span: 13272..13278,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 506,
            column: 16,
            span: 13278..13279,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 509,
            column: 8,
            span: 13328..13333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 509,
            column: 10,
            span: 13334..13335,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 509,
            column: 11,
            span: 13335..13336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        position: Position {
            line: 509,
            column: 15,
            span: 13337..13340,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 509,
            column: 17,
            span: 13341..13342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "runback",
        ),
        position: Position {
            line: 509,
            column: 25,
            span: 13343..13350,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    print(15); string.find(string.rep('a', 100000), '.*b')]]",
        ),
        position: Position {
            line: 510,
            column: 61,
            span: 13351..13414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 512,
            column: 9,
            span: 13458..13464,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 512,
            column: 10,
            span: 13464..13465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 512,
            column: 11,
            span: 13465..13466,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 512,
            column: 12,
            span: 13466..13467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 512,
            column: 16,
            span: 13467..13471,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 512,
            column: 17,
            span: 13471..13472,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 512,
            column: 18,
            span: 13472..13473,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 512,
            column: 21,
            span: 13474..13476,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"15\"",
        ),
        position: Position {
            line: 512,
            column: 26,
            span: 13477..13481,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 512,
            column: 27,
            span: 13481..13482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 513,
            column: 9,
            span: 13485..13491,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 513,
            column: 10,
            span: 13491..13492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 513,
            column: 12,
            span: 13492..13494,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 513,
            column: 13,
            span: 13494..13495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        position: Position {
            line: 513,
            column: 20,
            span: 13495..13502,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 513,
            column: 21,
            span: 13502..13503,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sleep 1\"",
        ),
        position: Position {
            line: 513,
            column: 30,
            span: 13503..13512,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 513,
            column: 31,
            span: 13512..13513,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 513,
            column: 32,
            span: 13513..13514,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 515,
            column: 8,
            span: 13581..13586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 515,
            column: 10,
            span: 13587..13588,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 515,
            column: 12,
            span: 13589..13590,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 515,
            column: 0,
            span: 13590..13594,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 516,
            column: 6,
            span: 13597..13600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 516,
            column: 8,
            span: 13601..13602,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 516,
            column: 10,
            span: 13603..13604,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 516,
            column: 12,
            span: 13604..13606,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 516,
            column: 13,
            span: 13606..13607,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 516,
            column: 17,
            span: 13607..13611,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 516,
            column: 20,
            span: 13612..13614,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 517,
            column: 7,
            span: 13649..13651,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 517,
            column: 11,
            span: 13652..13655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "kill",
        ),
        position: Position {
            line: 517,
            column: 16,
            span: 13656..13660,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 517,
            column: 17,
            span: 13660..13661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pid",
        ),
        position: Position {
            line: 517,
            column: 20,
            span: 13661..13664,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 517,
            column: 21,
            span: 13664..13665,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 517,
            column: 26,
            span: 13666..13670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 518,
            column: 8,
            span: 13695..13696,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 518,
            column: 10,
            span: 13697..13698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 518,
            column: 12,
            span: 13699..13700,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 519,
            column: 0,
            span: 13751..13756,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 520,
            column: 0,
            span: 13761..13764,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 521,
            column: 0,
            span: 13767..13770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 522,
            column: 9,
            span: 13773..13779,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 522,
            column: 10,
            span: 13779..13780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 522,
            column: 11,
            span: 13780..13781,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 522,
            column: 12,
            span: 13781..13782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 522,
            column: 17,
            span: 13782..13787,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 522,
            column: 18,
            span: 13787..13788,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 522,
            column: 19,
            span: 13788..13789,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 522,
            column: 20,
            span: 13789..13790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 523,
            column: 9,
            span: 13793..13799,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 523,
            column: 10,
            span: 13799..13800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 523,
            column: 11,
            span: 13800..13801,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 523,
            column: 14,
            span: 13802..13804,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 523,
            column: 16,
            span: 13804..13806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 523,
            column: 17,
            span: 13806..13807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 524,
            column: 8,
            span: 13810..13815,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 524,
            column: 9,
            span: 13815..13816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 524,
            column: 15,
            span: 13816..13822,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 524,
            column: 16,
            span: 13822..13823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 524,
            column: 22,
            span: 13823..13829,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 524,
            column: 23,
            span: 13829..13830,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"done (with %d kills)\"",
        ),
        position: Position {
            line: 524,
            column: 45,
            span: 13830..13852,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 524,
            column: 46,
            span: 13852..13853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 524,
            column: 48,
            span: 13854..13855,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 524,
            column: 49,
            span: 13855..13856,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 524,
            column: 50,
            span: 13856..13857,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 525,
            column: 0,
            span: 13858..13861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 527,
            column: 6,
            span: 13863..13868,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 527,
            column: 7,
            span: 13868..13869,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        position: Position {
            line: 527,
            column: 11,
            span: 13869..13873,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 527,
            column: 12,
            span: 13873..13874,
        },
    },
]
