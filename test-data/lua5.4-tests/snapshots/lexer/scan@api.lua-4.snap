---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/api.lua
---
[
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 4,
            column: 3,
            span: 66..68,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 4,
            column: 5,
            span: 69..70,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 4,
            column: 7,
            span: 70..72,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 4,
            column: 10,
            span: 72..75,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 4,
            column: 0,
            span: 76..80,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 4,
            span: 83..84,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 5,
            column: 11,
            span: 84..91,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 5,
            column: 14,
            span: 92..94,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 5,
            column: 20,
            span: 95..100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 21,
            span: 100..101,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 22,
            span: 101..102,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n >>> testC not active: skipping API tests <<<\\n'",
        ),
        position: Position {
            line: 5,
            column: 73,
            span: 102..153,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 74,
            span: 153..154,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 6,
            column: 0,
            span: 157..163,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 7,
            column: 0,
            span: 164..167,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 9,
            column: 6,
            span: 169..174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 9,
            column: 12,
            span: 175..180,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 9,
            column: 14,
            span: 181..182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 9,
            column: 22,
            span: 183..190,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        position: Position {
            line: 9,
            column: 30,
            span: 191..198,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 11,
            column: 6,
            span: 200..205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 11,
            column: 11,
            span: 206..210,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 11,
            column: 13,
            span: 211..212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 11,
            column: 19,
            span: 213..218,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 11,
            column: 20,
            span: 218..219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 11,
            column: 0,
            span: 219..223,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 15,
            column: 6,
            span: 270..275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "MEMERRMSG",
        ),
        position: Position {
            line: 15,
            column: 16,
            span: 276..285,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 15,
            column: 18,
            span: 286..287,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not enough memory\"",
        ),
        position: Position {
            line: 15,
            column: 38,
            span: 288..307,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 17,
            column: 9,
            span: 309..317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 17,
            column: 16,
            span: 318..324,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 18,
            span: 325..326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 17,
            column: 20,
            span: 326..328,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 17,
            column: 21,
            span: 328..329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 17,
            column: 24,
            span: 330..332,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 25,
            span: 332..333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 18,
            column: 9,
            span: 336..342,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 10,
            span: 342..343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 18,
            column: 12,
            span: 343..345,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 18,
            column: 13,
            span: 345..346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 18,
            column: 14,
            span: 346..347,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 18,
            column: 17,
            span: 348..350,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 19,
            span: 351..352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 18,
            column: 21,
            span: 352..354,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 18,
            column: 22,
            span: 354..355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 18,
            column: 23,
            span: 355..356,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 18,
            column: 26,
            span: 357..359,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 18,
            column: 28,
            span: 360..361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 18,
            column: 30,
            span: 361..363,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 31,
            span: 363..364,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 18,
            column: 33,
            span: 365..366,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 18,
            column: 35,
            span: 366..368,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 36,
            span: 368..369,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 19,
            column: 6,
            span: 372..375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 19,
            column: 8,
            span: 376..377,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 19,
            column: 10,
            span: 378..379,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 19,
            column: 12,
            span: 379..381,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 19,
            column: 13,
            span: 381..382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 19,
            column: 16,
            span: 383..385,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 19,
            column: 17,
            span: 385..386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 19,
            column: 18,
            span: 386..387,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 19,
            column: 21,
            span: 388..390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 19,
            column: 28,
            span: 391..397,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 29,
            span: 397..398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 19,
            column: 31,
            span: 398..400,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 19,
            column: 32,
            span: 400..401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 19,
            column: 33,
            span: 401..402,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 19,
            column: 34,
            span: 402..403,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 19,
            column: 37,
            span: 404..406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 19,
            column: 40,
            span: 407..409,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 19,
            column: 41,
            span: 409..410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 19,
            column: 42,
            span: 410..411,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 19,
            column: 44,
            span: 412..413,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 19,
            column: 46,
            span: 413..415,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 19,
            column: 47,
            span: 415..416,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 48,
            span: 416..417,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 19,
            column: 0,
            span: 418..421,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 20,
            column: 0,
            span: 422..425,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 23,
            column: 6,
            span: 428..433,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 23,
            column: 15,
            span: 434..442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 23,
            column: 24,
            span: 443..451,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 26,
            span: 452..453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 23,
            column: 29,
            span: 453..456,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 23,
            column: 30,
            span: 456..457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 23,
            column: 32,
            span: 458..459,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 23,
            column: 33,
            span: 459..460,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 23,
            column: 37,
            span: 461..464,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 38,
            span: 464..465,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 24,
            column: 8,
            span: 468..473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 24,
            column: 13,
            span: 474..478,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 24,
            column: 14,
            span: 478..479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 24,
            column: 18,
            span: 480..483,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 24,
            column: 20,
            span: 484..485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 24,
            column: 26,
            span: 486..491,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 24,
            column: 27,
            span: 491..492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 24,
            column: 28,
            span: 492..493,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 24,
            column: 29,
            span: 493..494,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 24,
            column: 33,
            span: 495..498,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 24,
            column: 34,
            span: 498..499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 25,
            column: 9,
            span: 502..508,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 25,
            column: 10,
            span: 508..509,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 25,
            column: 13,
            span: 509..512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 25,
            column: 18,
            span: 513..517,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 25,
            column: 22,
            span: 518..521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 25,
            column: 29,
            span: 522..528,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 25,
            column: 30,
            span: 528..529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 25,
            column: 34,
            span: 529..533,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 25,
            column: 35,
            span: 533..534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 25,
            column: 38,
            span: 534..537,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 25,
            column: 39,
            span: 537..538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 25,
            column: 43,
            span: 539..542,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 25,
            column: 44,
            span: 542..543,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 25,
            column: 45,
            span: 543..544,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 26,
            column: 0,
            span: 545..548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 29,
            column: 6,
            span: 551..556,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 7,
            span: 556..557,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing C API'",
        ),
        position: Position {
            line: 29,
            column: 22,
            span: 557..572,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 23,
            span: 572..573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 31,
            column: 2,
            span: 575..576,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 31,
            column: 4,
            span: 577..578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 31,
            column: 6,
            span: 579..580,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 31,
            column: 7,
            span: 580..581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 31,
            column: 12,
            span: 581..586,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 13,
            span: 586..587,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushvalue R; return 1\"",
        ),
        position: Position {
            line: 31,
            column: 36,
            span: 587..610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 37,
            span: 610..611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 32,
            column: 7,
            span: 612..618,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 8,
            span: 618..619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 32,
            column: 9,
            span: 619..620,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 32,
            column: 12,
            span: 621..623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 32,
            column: 18,
            span: 624..629,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 32,
            column: 19,
            span: 629..630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getregistry",
        ),
        position: Position {
            line: 32,
            column: 30,
            span: 630..641,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 31,
            span: 641..642,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 32,
            span: 642..643,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 33,
            span: 643..644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 36,
            column: 7,
            span: 659..665,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 8,
            span: 665..666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 36,
            column: 9,
            span: 666..667,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 36,
            column: 10,
            span: 667..668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 36,
            column: 15,
            span: 668..673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 16,
            span: 673..674,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 10; absindex -1; return 1\"",
        ),
        position: Position {
            line: 36,
            column: 50,
            span: 674..708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 51,
            span: 708..709,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 36,
            column: 54,
            span: 710..712,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 36,
            column: 57,
            span: 712..715,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 58,
            span: 715..716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 37,
            column: 7,
            span: 717..723,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 8,
            span: 723..724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 37,
            column: 9,
            span: 724..725,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 37,
            column: 10,
            span: 725..726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 37,
            column: 15,
            span: 726..731,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 16,
            span: 731..732,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 5; absindex -5; return 1\"",
        ),
        position: Position {
            line: 37,
            column: 49,
            span: 732..765,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 50,
            span: 765..766,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 37,
            column: 53,
            span: 767..769,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 37,
            column: 55,
            span: 769..771,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 56,
            span: 771..772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 38,
            column: 7,
            span: 773..779,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 8,
            span: 779..780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 38,
            column: 9,
            span: 780..781,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 38,
            column: 10,
            span: 781..782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 38,
            column: 15,
            span: 782..787,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 16,
            span: 787..788,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 10; absindex 1; return 1\"",
        ),
        position: Position {
            line: 38,
            column: 49,
            span: 788..821,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 50,
            span: 821..822,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 38,
            column: 53,
            span: 823..825,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 38,
            column: 55,
            span: 825..827,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 56,
            span: 827..828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 39,
            column: 7,
            span: 829..835,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 8,
            span: 835..836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 39,
            column: 9,
            span: 836..837,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 39,
            column: 10,
            span: 837..838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 39,
            column: 15,
            span: 838..843,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 16,
            span: 843..844,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 10; absindex R; return 1\"",
        ),
        position: Position {
            line: 39,
            column: 49,
            span: 844..877,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 50,
            span: 877..878,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 39,
            column: 52,
            span: 879..880,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 39,
            column: 54,
            span: 881..882,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 39,
            column: 56,
            span: 881..884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 57,
            span: 884..885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 42,
            column: 2,
            span: 908..909,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 42,
            column: 4,
            span: 910..911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 42,
            column: 6,
            span: 912..913,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 42,
            column: 7,
            span: 913..914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d2s",
        ),
        position: Position {
            line: 42,
            column: 10,
            span: 914..917,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 11,
            span: 917..918,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12458954321123",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 42,
            column: 27,
            span: 917..934,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 28,
            span: 934..935,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 43,
            column: 7,
            span: 936..942,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 8,
            span: 942..943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 43,
            column: 9,
            span: 943..944,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 43,
            column: 12,
            span: 945..947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 43,
            column: 19,
            span: 948..954,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 43,
            column: 20,
            span: 954..955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 43,
            column: 24,
            span: 955..959,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 25,
            span: 959..960,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"d\"",
        ),
        position: Position {
            line: 43,
            column: 28,
            span: 960..963,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 29,
            span: 963..964,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12458954321123",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 43,
            column: 46,
            span: 964..981,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 47,
            span: 981..982,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 48,
            span: 982..983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 44,
            column: 7,
            span: 984..990,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 8,
            span: 990..991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 44,
            column: 9,
            span: 991..992,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 44,
            column: 10,
            span: 992..993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s2d",
        ),
        position: Position {
            line: 44,
            column: 13,
            span: 993..996,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 14,
            span: 996..997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 44,
            column: 15,
            span: 997..998,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 16,
            span: 998..999,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 44,
            column: 19,
            span: 1000..1002,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12458954321123",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 44,
            column: 36,
            span: 1002..1019,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 37,
            span: 1019..1020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 46,
            column: 2,
            span: 1022..1023,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 3,
            span: 1023..1024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 46,
            column: 4,
            span: 1024..1025,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 5,
            span: 1025..1026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 46,
            column: 6,
            span: 1026..1027,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 46,
            column: 8,
            span: 1028..1029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 46,
            column: 10,
            span: 1030..1031,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 46,
            column: 11,
            span: 1031..1032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 46,
            column: 16,
            span: 1032..1037,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 17,
            span: 1037..1038,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 1; pushnum 2; pushnum 3; return 2\"",
        ),
        position: Position {
            line: 46,
            column: 60,
            span: 1038..1081,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 61,
            span: 1081..1082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 47,
            column: 7,
            span: 1083..1089,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 8,
            span: 1089..1090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 47,
            column: 9,
            span: 1090..1091,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 47,
            column: 12,
            span: 1092..1094,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 47,
            column: 14,
            span: 1094..1096,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 47,
            column: 18,
            span: 1097..1100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 47,
            column: 20,
            span: 1101..1102,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 47,
            column: 23,
            span: 1103..1105,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 47,
            column: 25,
            span: 1105..1107,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 47,
            column: 29,
            span: 1108..1111,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 47,
            column: 33,
            span: 1112..1115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 47,
            column: 35,
            span: 1116..1117,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 36,
            span: 1117..1118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 49,
            column: 2,
            span: 1120..1121,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 49,
            column: 4,
            span: 1122..1123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 49,
            column: 6,
            span: 1124..1125,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 49,
            column: 7,
            span: 1125..1126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 49,
            column: 16,
            span: 1126..1135,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 17,
            span: 1135..1136,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 1; pushnum 2; pushnum 3; return 2\"",
        ),
        position: Position {
            line: 49,
            column: 60,
            span: 1136..1179,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 61,
            span: 1179..1180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 50,
            column: 2,
            span: 1181..1182,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 50,
            column: 3,
            span: 1182..1183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 50,
            column: 4,
            span: 1183..1184,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 50,
            column: 5,
            span: 1184..1185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 50,
            column: 6,
            span: 1185..1186,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 50,
            column: 8,
            span: 1187..1188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 50,
            column: 10,
            span: 1189..1190,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 11,
            span: 1190..1191,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 12,
            span: 1191..1192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 51,
            column: 7,
            span: 1193..1199,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 8,
            span: 1199..1200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 51,
            column: 9,
            span: 1200..1201,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 51,
            column: 12,
            span: 1202..1204,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 14,
            span: 1204..1206,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 51,
            column: 18,
            span: 1207..1210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 51,
            column: 20,
            span: 1211..1212,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 51,
            column: 23,
            span: 1213..1215,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 25,
            span: 1215..1217,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 51,
            column: 29,
            span: 1218..1221,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 51,
            column: 33,
            span: 1222..1225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 51,
            column: 35,
            span: 1226..1227,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 36,
            span: 1227..1228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 54,
            column: 2,
            span: 1263..1264,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 3,
            span: 1264..1265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 54,
            column: 4,
            span: 1265..1266,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 5,
            span: 1266..1267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 54,
            column: 6,
            span: 1267..1268,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 54,
            column: 8,
            span: 1269..1270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 54,
            column: 10,
            span: 1271..1272,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 54,
            column: 11,
            span: 1272..1273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 54,
            column: 16,
            span: 1273..1278,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 17,
            span: 1278..1279,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushbool 1; pushbool 2; pushbool 0; return 3\"",
        ),
        position: Position {
            line: 54,
            column: 63,
            span: 1279..1325,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 64,
            span: 1325..1326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 55,
            column: 7,
            span: 1327..1333,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 8,
            span: 1333..1334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 55,
            column: 9,
            span: 1334..1335,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 55,
            column: 12,
            span: 1336..1338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 55,
            column: 14,
            span: 1339..1340,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 55,
            column: 18,
            span: 1341..1344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 55,
            column: 20,
            span: 1345..1346,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 55,
            column: 23,
            span: 1347..1349,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 55,
            column: 28,
            span: 1350..1354,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 55,
            column: 32,
            span: 1355..1358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 55,
            column: 34,
            span: 1359..1360,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 55,
            column: 37,
            span: 1361..1363,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 55,
            column: 43,
            span: 1364..1369,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 44,
            span: 1369..1370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 56,
            column: 2,
            span: 1371..1372,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 56,
            column: 3,
            span: 1372..1373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 56,
            column: 4,
            span: 1373..1374,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 56,
            column: 5,
            span: 1374..1375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 56,
            column: 6,
            span: 1375..1376,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 56,
            column: 8,
            span: 1377..1378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 56,
            column: 10,
            span: 1379..1380,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 56,
            column: 11,
            span: 1380..1381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 56,
            column: 16,
            span: 1381..1386,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushbool 0; pushbool 10; pushnil;\\\n                      tobool -3; tobool -3; tobool -3; return 3\"",
        ),
        position: Position {
            line: 57,
            column: 65,
            span: 1386..1486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 58,
            column: 7,
            span: 1487..1493,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 8,
            span: 1493..1494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 58,
            column: 9,
            span: 1494..1495,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 58,
            column: 11,
            span: 1495..1497,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 58,
            column: 16,
            span: 1497..1502,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 58,
            column: 20,
            span: 1503..1506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 58,
            column: 22,
            span: 1507..1508,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 58,
            column: 24,
            span: 1508..1510,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 58,
            column: 28,
            span: 1510..1514,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 58,
            column: 32,
            span: 1515..1518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 58,
            column: 34,
            span: 1519..1520,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 58,
            column: 36,
            span: 1520..1522,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 58,
            column: 41,
            span: 1522..1527,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 42,
            span: 1527..1528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 61,
            column: 2,
            span: 1531..1532,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 3,
            span: 1532..1533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 61,
            column: 4,
            span: 1533..1534,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 5,
            span: 1534..1535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 61,
            column: 6,
            span: 1535..1536,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 61,
            column: 8,
            span: 1537..1538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 61,
            column: 10,
            span: 1539..1540,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 61,
            column: 11,
            span: 1540..1541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 61,
            column: 16,
            span: 1541..1546,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 17,
            span: 1546..1547,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettop; return 2\"",
        ),
        position: Position {
            line: 61,
            column: 35,
            span: 1547..1565,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 36,
            span: 1565..1566,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 39,
            span: 1566..1569,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 40,
            span: 1569..1570,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 43,
            span: 1570..1573,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 44,
            span: 1573..1574,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 47,
            span: 1574..1577,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 48,
            span: 1577..1578,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 51,
            span: 1578..1581,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 52,
            span: 1581..1582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 62,
            column: 7,
            span: 1583..1589,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 8,
            span: 1589..1590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 62,
            column: 9,
            span: 1590..1591,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 62,
            column: 12,
            span: 1592..1594,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 62,
            column: 15,
            span: 1594..1597,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 62,
            column: 19,
            span: 1598..1601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 62,
            column: 21,
            span: 1602..1603,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 62,
            column: 24,
            span: 1604..1606,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 62,
            column: 26,
            span: 1606..1608,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 62,
            column: 30,
            span: 1609..1612,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 62,
            column: 34,
            span: 1613..1616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 62,
            column: 36,
            span: 1617..1618,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 37,
            span: 1618..1619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 64,
            column: 2,
            span: 1621..1622,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 64,
            column: 4,
            span: 1623..1624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 64,
            column: 9,
            span: 1625..1629,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 10,
            span: 1629..1630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 64,
            column: 11,
            span: 1630..1631,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 64,
            column: 12,
            span: 1631..1632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 64,
            column: 17,
            span: 1632..1637,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 18,
            span: 1637..1638,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 5; return *\"",
        ),
        position: Position {
            line: 64,
            column: 38,
            span: 1638..1658,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 39,
            span: 1658..1659,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 64,
            column: 41,
            span: 1659..1661,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 42,
            span: 1661..1662,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 64,
            column: 44,
            span: 1662..1664,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 45,
            span: 1664..1665,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 46,
            span: 1665..1666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 65,
            column: 7,
            span: 1667..1673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 8,
            span: 1673..1674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 65,
            column: 9,
            span: 1674..1675,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 65,
            column: 10,
            span: 1675..1676,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 65,
            column: 12,
            span: 1677..1678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 65,
            column: 13,
            span: 1678..1679,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 65,
            column: 14,
            span: 1679..1680,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 65,
            column: 15,
            span: 1679..1681,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 65,
            column: 16,
            span: 1681..1682,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 65,
            column: 17,
            span: 1681..1683,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 65,
            column: 18,
            span: 1683..1684,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 65,
            column: 19,
            span: 1683..1685,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 65,
            column: 20,
            span: 1685..1686,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 21,
            span: 1686..1687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 67,
            column: 2,
            span: 1689..1690,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 67,
            column: 4,
            span: 1691..1692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 67,
            column: 9,
            span: 1693..1697,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 10,
            span: 1697..1698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 67,
            column: 11,
            span: 1698..1699,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 67,
            column: 12,
            span: 1699..1700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 67,
            column: 17,
            span: 1700..1705,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 18,
            span: 1705..1706,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 0; settop 15; return 10\"",
        ),
        position: Position {
            line: 67,
            column: 50,
            span: 1706..1738,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 51,
            span: 1738..1739,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 53,
            span: 1739..1741,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 54,
            span: 1741..1742,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 56,
            span: 1742..1744,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 57,
            span: 1744..1745,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 60,
            span: 1745..1748,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 61,
            span: 1748..1749,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 62,
            span: 1749..1750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 68,
            column: 7,
            span: 1751..1757,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 8,
            span: 1757..1758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 68,
            column: 9,
            span: 1758..1759,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 68,
            column: 10,
            span: 1759..1760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 68,
            column: 11,
            span: 1760..1761,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 68,
            column: 14,
            span: 1762..1764,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 17,
            span: 1764..1767,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 68,
            column: 21,
            span: 1768..1771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 68,
            column: 23,
            span: 1772..1773,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 68,
            column: 24,
            span: 1773..1774,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 25,
            span: 1773..1775,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 68,
            column: 26,
            span: 1775..1776,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 68,
            column: 29,
            span: 1777..1779,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 68,
            column: 33,
            span: 1780..1783,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 68,
            column: 37,
            span: 1784..1787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 68,
            column: 39,
            span: 1788..1789,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 68,
            column: 40,
            span: 1789..1790,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 42,
            span: 1789..1792,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 68,
            column: 43,
            span: 1792..1793,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 68,
            column: 46,
            span: 1794..1796,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 68,
            column: 50,
            span: 1797..1800,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 51,
            span: 1800..1801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 70,
            column: 2,
            span: 1803..1804,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 70,
            column: 4,
            span: 1805..1806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 70,
            column: 9,
            span: 1807..1811,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 10,
            span: 1811..1812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 70,
            column: 11,
            span: 1812..1813,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 70,
            column: 12,
            span: 1813..1814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 70,
            column: 17,
            span: 1814..1819,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 18,
            span: 1819..1820,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"remove -2; return *\"",
        ),
        position: Position {
            line: 70,
            column: 39,
            span: 1820..1841,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 40,
            span: 1841..1842,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 42,
            span: 1842..1844,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 43,
            span: 1844..1845,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 45,
            span: 1845..1847,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 46,
            span: 1847..1848,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 48,
            span: 1848..1850,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 49,
            span: 1850..1851,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 50,
            span: 1851..1852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 71,
            column: 7,
            span: 1853..1859,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 71,
            column: 8,
            span: 1859..1860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 71,
            column: 9,
            span: 1860..1861,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 10,
            span: 1861..1862,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 71,
            column: 12,
            span: 1863..1864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 71,
            column: 13,
            span: 1864..1865,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 71,
            column: 14,
            span: 1865..1866,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 71,
            column: 15,
            span: 1865..1867,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 16,
            span: 1867..1868,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 71,
            column: 17,
            span: 1867..1869,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 18,
            span: 1869..1870,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 71,
            column: 19,
            span: 1869..1871,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 71,
            column: 20,
            span: 1871..1872,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 71,
            column: 21,
            span: 1872..1873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 73,
            column: 2,
            span: 1875..1876,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 73,
            column: 4,
            span: 1877..1878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 73,
            column: 9,
            span: 1879..1883,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 10,
            span: 1883..1884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 73,
            column: 11,
            span: 1884..1885,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 73,
            column: 12,
            span: 1885..1886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 73,
            column: 17,
            span: 1886..1891,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 18,
            span: 1891..1892,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert -1; return *\"",
        ),
        position: Position {
            line: 73,
            column: 39,
            span: 1892..1913,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 40,
            span: 1913..1914,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 73,
            column: 42,
            span: 1914..1916,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 43,
            span: 1916..1917,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 73,
            column: 45,
            span: 1917..1919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 46,
            span: 1919..1920,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 47,
            span: 1920..1921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 74,
            column: 7,
            span: 1922..1928,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 8,
            span: 1928..1929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 74,
            column: 9,
            span: 1929..1930,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 10,
            span: 1930..1931,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 74,
            column: 12,
            span: 1932..1933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 74,
            column: 13,
            span: 1933..1934,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 74,
            column: 14,
            span: 1934..1935,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 15,
            span: 1934..1936,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 16,
            span: 1936..1937,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 17,
            span: 1936..1938,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 18,
            span: 1938..1939,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 19,
            span: 1938..1940,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 74,
            column: 20,
            span: 1940..1941,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 21,
            span: 1941..1942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 76,
            column: 2,
            span: 1944..1945,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 76,
            column: 4,
            span: 1946..1947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 76,
            column: 9,
            span: 1948..1952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 10,
            span: 1952..1953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 76,
            column: 11,
            span: 1953..1954,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 76,
            column: 12,
            span: 1954..1955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 76,
            column: 17,
            span: 1955..1960,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 18,
            span: 1960..1961,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert 3; return *\"",
        ),
        position: Position {
            line: 76,
            column: 38,
            span: 1961..1981,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 39,
            span: 1981..1982,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 41,
            span: 1982..1984,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 42,
            span: 1984..1985,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 44,
            span: 1985..1987,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 45,
            span: 1987..1988,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 47,
            span: 1988..1990,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 48,
            span: 1990..1991,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 50,
            span: 1991..1993,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 51,
            span: 1993..1994,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 52,
            span: 1994..1995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 77,
            column: 7,
            span: 1996..2002,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 8,
            span: 2002..2003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 77,
            column: 9,
            span: 2003..2004,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 10,
            span: 2004..2005,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 77,
            column: 12,
            span: 2006..2007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 77,
            column: 13,
            span: 2007..2008,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 77,
            column: 14,
            span: 2008..2009,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 15,
            span: 2008..2010,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 16,
            span: 2010..2011,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 17,
            span: 2010..2012,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 18,
            span: 2012..2013,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 19,
            span: 2012..2014,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 20,
            span: 2014..2015,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 21,
            span: 2014..2016,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 22,
            span: 2016..2017,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 23,
            span: 2016..2018,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 77,
            column: 24,
            span: 2018..2019,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 25,
            span: 2019..2020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 79,
            column: 2,
            span: 2022..2023,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 79,
            column: 4,
            span: 2024..2025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 79,
            column: 9,
            span: 2026..2030,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 10,
            span: 2030..2031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 79,
            column: 11,
            span: 2031..2032,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 79,
            column: 12,
            span: 2032..2033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 79,
            column: 17,
            span: 2033..2038,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 18,
            span: 2038..2039,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"replace 2; return *\"",
        ),
        position: Position {
            line: 79,
            column: 39,
            span: 2039..2060,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 40,
            span: 2060..2061,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 42,
            span: 2061..2063,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 43,
            span: 2063..2064,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 45,
            span: 2064..2066,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 46,
            span: 2066..2067,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 48,
            span: 2067..2069,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 49,
            span: 2069..2070,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 51,
            span: 2070..2072,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 52,
            span: 2072..2073,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 53,
            span: 2073..2074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 80,
            column: 7,
            span: 2075..2081,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 8,
            span: 2081..2082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 80,
            column: 9,
            span: 2082..2083,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 10,
            span: 2083..2084,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 80,
            column: 12,
            span: 2085..2086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 80,
            column: 13,
            span: 2086..2087,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 80,
            column: 14,
            span: 2087..2088,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 15,
            span: 2087..2089,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 16,
            span: 2089..2090,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 17,
            span: 2089..2091,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 18,
            span: 2091..2092,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 19,
            span: 2091..2093,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 20,
            span: 2093..2094,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 21,
            span: 2093..2095,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 80,
            column: 22,
            span: 2095..2096,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 23,
            span: 2096..2097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 82,
            column: 2,
            span: 2099..2100,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 82,
            column: 4,
            span: 2101..2102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 82,
            column: 9,
            span: 2103..2107,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 10,
            span: 2107..2108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 82,
            column: 11,
            span: 2108..2109,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 82,
            column: 12,
            span: 2109..2110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 82,
            column: 17,
            span: 2110..2115,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 18,
            span: 2115..2116,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"replace -2; return *\"",
        ),
        position: Position {
            line: 82,
            column: 40,
            span: 2116..2138,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 82,
            column: 41,
            span: 2138..2139,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 82,
            column: 43,
            span: 2139..2141,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 82,
            column: 44,
            span: 2141..2142,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 82,
            column: 46,
            span: 2142..2144,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 82,
            column: 47,
            span: 2144..2145,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 82,
            column: 49,
            span: 2145..2147,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 82,
            column: 50,
            span: 2147..2148,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 82,
            column: 52,
            span: 2148..2150,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 53,
            span: 2150..2151,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 54,
            span: 2151..2152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 83,
            column: 7,
            span: 2153..2159,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 8,
            span: 2159..2160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 83,
            column: 9,
            span: 2160..2161,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 10,
            span: 2161..2162,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 83,
            column: 12,
            span: 2163..2164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 83,
            column: 13,
            span: 2164..2165,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 83,
            column: 14,
            span: 2165..2166,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 15,
            span: 2165..2167,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 16,
            span: 2167..2168,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 17,
            span: 2167..2169,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 18,
            span: 2169..2170,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 19,
            span: 2169..2171,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 20,
            span: 2171..2172,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 21,
            span: 2171..2173,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 83,
            column: 22,
            span: 2173..2174,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 23,
            span: 2174..2175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 85,
            column: 2,
            span: 2177..2178,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 85,
            column: 4,
            span: 2179..2180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 85,
            column: 9,
            span: 2181..2185,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 10,
            span: 2185..2186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 85,
            column: 11,
            span: 2186..2187,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 85,
            column: 12,
            span: 2187..2188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 85,
            column: 17,
            span: 2188..2193,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 18,
            span: 2193..2194,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"remove 3; return *\"",
        ),
        position: Position {
            line: 85,
            column: 38,
            span: 2194..2214,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 39,
            span: 2214..2215,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 41,
            span: 2215..2217,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 42,
            span: 2217..2218,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 44,
            span: 2218..2220,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 45,
            span: 2220..2221,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 47,
            span: 2221..2223,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 48,
            span: 2223..2224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 50,
            span: 2224..2226,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 51,
            span: 2226..2227,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 52,
            span: 2227..2228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 86,
            column: 7,
            span: 2229..2235,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 8,
            span: 2235..2236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 86,
            column: 9,
            span: 2236..2237,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 10,
            span: 2237..2238,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 86,
            column: 12,
            span: 2239..2240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 86,
            column: 13,
            span: 2240..2241,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 86,
            column: 14,
            span: 2241..2242,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 15,
            span: 2241..2243,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 16,
            span: 2243..2244,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 17,
            span: 2243..2245,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 18,
            span: 2245..2246,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 19,
            span: 2245..2247,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 20,
            span: 2247..2248,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 21,
            span: 2247..2249,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 86,
            column: 22,
            span: 2249..2250,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 23,
            span: 2250..2251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 88,
            column: 2,
            span: 2253..2254,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 88,
            column: 4,
            span: 2255..2256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 88,
            column: 9,
            span: 2257..2261,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 10,
            span: 2261..2262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 88,
            column: 11,
            span: 2262..2263,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 88,
            column: 12,
            span: 2263..2264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 88,
            column: 17,
            span: 2264..2269,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 18,
            span: 2269..2270,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"copy 3 4; return *\"",
        ),
        position: Position {
            line: 88,
            column: 38,
            span: 2270..2290,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 39,
            span: 2290..2291,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 41,
            span: 2291..2293,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 42,
            span: 2293..2294,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 44,
            span: 2294..2296,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 45,
            span: 2296..2297,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 47,
            span: 2297..2299,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 48,
            span: 2299..2300,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 50,
            span: 2300..2302,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 51,
            span: 2302..2303,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 52,
            span: 2303..2304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 89,
            column: 7,
            span: 2305..2311,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 8,
            span: 2311..2312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 89,
            column: 9,
            span: 2312..2313,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 10,
            span: 2313..2314,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 89,
            column: 12,
            span: 2315..2316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 89,
            column: 13,
            span: 2316..2317,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 89,
            column: 14,
            span: 2317..2318,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 15,
            span: 2317..2319,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 16,
            span: 2319..2320,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 17,
            span: 2319..2321,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 18,
            span: 2321..2322,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 19,
            span: 2321..2323,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 20,
            span: 2323..2324,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 21,
            span: 2323..2325,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 22,
            span: 2325..2326,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 23,
            span: 2325..2327,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 89,
            column: 24,
            span: 2327..2328,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 25,
            span: 2328..2329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 91,
            column: 2,
            span: 2331..2332,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 91,
            column: 4,
            span: 2333..2334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 91,
            column: 9,
            span: 2335..2339,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 91,
            column: 10,
            span: 2339..2340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 91,
            column: 11,
            span: 2340..2341,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 91,
            column: 12,
            span: 2341..2342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 91,
            column: 17,
            span: 2342..2347,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 91,
            column: 18,
            span: 2347..2348,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"copy -3 -1; return *\"",
        ),
        position: Position {
            line: 91,
            column: 40,
            span: 2348..2370,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 91,
            column: 41,
            span: 2370..2371,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 91,
            column: 43,
            span: 2371..2373,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 91,
            column: 44,
            span: 2373..2374,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 91,
            column: 46,
            span: 2374..2376,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 91,
            column: 47,
            span: 2376..2377,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 91,
            column: 49,
            span: 2377..2379,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 91,
            column: 50,
            span: 2379..2380,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 91,
            column: 52,
            span: 2380..2382,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 91,
            column: 53,
            span: 2382..2383,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 91,
            column: 54,
            span: 2383..2384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 92,
            column: 7,
            span: 2385..2391,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 8,
            span: 2391..2392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 92,
            column: 9,
            span: 2392..2393,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 10,
            span: 2393..2394,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 92,
            column: 12,
            span: 2395..2396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 92,
            column: 13,
            span: 2396..2397,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 92,
            column: 14,
            span: 2397..2398,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 15,
            span: 2397..2399,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 16,
            span: 2399..2400,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 17,
            span: 2399..2401,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 18,
            span: 2401..2402,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 19,
            span: 2401..2403,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 20,
            span: 2403..2404,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 21,
            span: 2403..2405,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 22,
            span: 2405..2406,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 23,
            span: 2405..2407,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 92,
            column: 24,
            span: 2407..2408,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 25,
            span: 2408..2409,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 94,
            column: 3,
            span: 2411..2413,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 95,
            column: 8,
            span: 2438..2443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 95,
            column: 10,
            span: 2444..2445,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 95,
            column: 12,
            span: 2446..2447,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 95,
            column: 14,
            span: 2448..2449,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 16,
            span: 2448..2451,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 17,
            span: 2451..2452,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 20,
            span: 2452..2455,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 21,
            span: 2455..2456,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 24,
            span: 2456..2459,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 25,
            span: 2459..2460,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 28,
            span: 2460..2463,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 29,
            span: 2463..2464,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 32,
            span: 2464..2467,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 33,
            span: 2467..2468,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 36,
            span: 2468..2471,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 95,
            column: 37,
            span: 2471..2472,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 96,
            column: 6,
            span: 2475..2478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 96,
            column: 8,
            span: 2479..2480,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 96,
            column: 10,
            span: 2481..2482,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 96,
            column: 12,
            span: 2483..2484,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 13,
            span: 2483..2485,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 14,
            span: 2485..2486,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 16,
            span: 2486..2488,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 96,
            column: 0,
            span: 2489..2491,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 97,
            column: 10,
            span: 2496..2501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 97,
            column: 12,
            span: 2502..2503,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 97,
            column: 14,
            span: 2504..2505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 97,
            column: 21,
            span: 2506..2512,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 97,
            column: 22,
            span: 2512..2513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 97,
            column: 28,
            span: 2513..2519,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 29,
            span: 2519..2520,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rotate 2 %d; return 7\"",
        ),
        position: Position {
            line: 97,
            column: 52,
            span: 2520..2543,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 53,
            span: 2543..2544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 97,
            column: 55,
            span: 2545..2546,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 56,
            span: 2546..2547,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 98,
            column: 10,
            span: 2552..2557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 98,
            column: 13,
            span: 2558..2560,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 98,
            column: 15,
            span: 2561..2562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 98,
            column: 20,
            span: 2563..2567,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 21,
            span: 2567..2568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 98,
            column: 22,
            span: 2568..2569,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 98,
            column: 23,
            span: 2569..2570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 98,
            column: 28,
            span: 2570..2575,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 29,
            span: 2575..2576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 98,
            column: 30,
            span: 2576..2577,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 31,
            span: 2577..2578,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 34,
            span: 2578..2581,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 35,
            span: 2581..2582,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 38,
            span: 2582..2585,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 39,
            span: 2585..2586,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 42,
            span: 2586..2589,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 43,
            span: 2589..2590,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 46,
            span: 2590..2593,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 47,
            span: 2593..2594,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 50,
            span: 2594..2597,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 51,
            span: 2597..2598,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 54,
            span: 2598..2601,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 55,
            span: 2601..2602,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 56,
            span: 2602..2603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 99,
            column: 11,
            span: 2608..2614,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 12,
            span: 2614..2615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 99,
            column: 14,
            span: 2615..2617,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 99,
            column: 15,
            span: 2617..2618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 99,
            column: 17,
            span: 2619..2620,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 18,
            span: 2620..2621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 100,
            column: 10,
            span: 2626..2631,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 100,
            column: 11,
            span: 2631..2632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 100,
            column: 17,
            span: 2632..2638,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 18,
            span: 2638..2639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 100,
            column: 19,
            span: 2639..2640,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 100,
            column: 20,
            span: 2640..2641,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 22,
            span: 2641..2643,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 100,
            column: 23,
            span: 2643..2644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 100,
            column: 29,
            span: 2645..2650,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 100,
            column: 30,
            span: 2650..2651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 100,
            column: 36,
            span: 2651..2657,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 37,
            span: 2657..2658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 100,
            column: 38,
            span: 2658..2659,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 39,
            span: 2659..2660,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 40,
            span: 2660..2661,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 101,
            column: 0,
            span: 2664..2667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 103,
            column: 4,
            span: 2671..2672,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 103,
            column: 6,
            span: 2673..2674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 103,
            column: 11,
            span: 2675..2679,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 12,
            span: 2679..2680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 103,
            column: 13,
            span: 2680..2681,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 103,
            column: 14,
            span: 2681..2682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 103,
            column: 19,
            span: 2682..2687,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 20,
            span: 2687..2688,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rotate -2 1; return *\"",
        ),
        position: Position {
            line: 103,
            column: 43,
            span: 2688..2711,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 44,
            span: 2711..2712,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 47,
            span: 2712..2715,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 48,
            span: 2715..2716,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 51,
            span: 2716..2719,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 52,
            span: 2719..2720,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 55,
            span: 2720..2723,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 56,
            span: 2723..2724,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 59,
            span: 2724..2727,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 60,
            span: 2727..2728,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 61,
            span: 2728..2729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 104,
            column: 9,
            span: 2732..2738,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 10,
            span: 2738..2739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 104,
            column: 11,
            span: 2739..2740,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 12,
            span: 2740..2741,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 104,
            column: 14,
            span: 2742..2743,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 16,
            span: 2742..2745,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 17,
            span: 2745..2746,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 20,
            span: 2746..2749,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 21,
            span: 2749..2750,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 24,
            span: 2750..2753,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 25,
            span: 2753..2754,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 28,
            span: 2754..2757,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 104,
            column: 29,
            span: 2757..2758,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 30,
            span: 2758..2759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 105,
            column: 4,
            span: 2762..2763,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 105,
            column: 6,
            span: 2764..2765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 105,
            column: 11,
            span: 2766..2770,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 105,
            column: 12,
            span: 2770..2771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 105,
            column: 13,
            span: 2771..2772,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 105,
            column: 14,
            span: 2772..2773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 105,
            column: 19,
            span: 2773..2778,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 105,
            column: 20,
            span: 2778..2779,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rotate -2 -1; return *\"",
        ),
        position: Position {
            line: 105,
            column: 44,
            span: 2779..2803,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 45,
            span: 2803..2804,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 105,
            column: 48,
            span: 2804..2807,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 49,
            span: 2807..2808,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 105,
            column: 52,
            span: 2808..2811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 53,
            span: 2811..2812,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 105,
            column: 56,
            span: 2812..2815,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 57,
            span: 2815..2816,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 105,
            column: 60,
            span: 2816..2819,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 105,
            column: 61,
            span: 2819..2820,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 105,
            column: 62,
            span: 2820..2821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 106,
            column: 9,
            span: 2824..2830,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 10,
            span: 2830..2831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 106,
            column: 11,
            span: 2831..2832,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 12,
            span: 2832..2833,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 106,
            column: 14,
            span: 2834..2835,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 106,
            column: 16,
            span: 2834..2837,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 17,
            span: 2837..2838,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 106,
            column: 20,
            span: 2838..2841,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 21,
            span: 2841..2842,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 106,
            column: 24,
            span: 2842..2845,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 25,
            span: 2845..2846,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 106,
            column: 28,
            span: 2846..2849,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 106,
            column: 29,
            span: 2849..2850,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 30,
            span: 2850..2851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 109,
            column: 4,
            span: 2878..2879,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 109,
            column: 6,
            span: 2880..2881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 109,
            column: 11,
            span: 2882..2886,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 12,
            span: 2886..2887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 109,
            column: 13,
            span: 2887..2888,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 109,
            column: 14,
            span: 2888..2889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 109,
            column: 19,
            span: 2889..2894,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 20,
            span: 2894..2895,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rotate -1 0; return *\"",
        ),
        position: Position {
            line: 109,
            column: 43,
            span: 2895..2918,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 109,
            column: 44,
            span: 2918..2919,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 109,
            column: 47,
            span: 2919..2922,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 109,
            column: 48,
            span: 2922..2923,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 109,
            column: 51,
            span: 2923..2926,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 109,
            column: 52,
            span: 2926..2927,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 109,
            column: 55,
            span: 2927..2930,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 109,
            column: 56,
            span: 2930..2931,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 109,
            column: 59,
            span: 2931..2934,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 60,
            span: 2934..2935,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 61,
            span: 2935..2936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 110,
            column: 9,
            span: 2939..2945,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 10,
            span: 2945..2946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 110,
            column: 11,
            span: 2946..2947,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 12,
            span: 2947..2948,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 110,
            column: 14,
            span: 2949..2950,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 16,
            span: 2949..2952,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 17,
            span: 2952..2953,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 20,
            span: 2953..2956,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 21,
            span: 2956..2957,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 24,
            span: 2957..2960,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 25,
            span: 2960..2961,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 28,
            span: 2961..2964,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 110,
            column: 29,
            span: 2964..2965,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 30,
            span: 2965..2966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 111,
            column: 4,
            span: 2969..2970,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 111,
            column: 6,
            span: 2971..2972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 111,
            column: 11,
            span: 2973..2977,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 12,
            span: 2977..2978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 111,
            column: 13,
            span: 2978..2979,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 111,
            column: 14,
            span: 2979..2980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 111,
            column: 19,
            span: 2980..2985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 20,
            span: 2985..2986,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rotate -1 1; return *\"",
        ),
        position: Position {
            line: 111,
            column: 43,
            span: 2986..3009,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 44,
            span: 3009..3010,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 47,
            span: 3010..3013,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 48,
            span: 3013..3014,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 51,
            span: 3014..3017,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 52,
            span: 3017..3018,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 55,
            span: 3018..3021,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 56,
            span: 3021..3022,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 59,
            span: 3022..3025,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 60,
            span: 3025..3026,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 61,
            span: 3026..3027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 112,
            column: 9,
            span: 3030..3036,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 10,
            span: 3036..3037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 112,
            column: 11,
            span: 3037..3038,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 112,
            column: 12,
            span: 3038..3039,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 112,
            column: 14,
            span: 3040..3041,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 16,
            span: 3040..3043,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 112,
            column: 17,
            span: 3043..3044,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 20,
            span: 3044..3047,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 112,
            column: 21,
            span: 3047..3048,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 24,
            span: 3048..3051,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 112,
            column: 25,
            span: 3051..3052,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 28,
            span: 3052..3055,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 112,
            column: 29,
            span: 3055..3056,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 112,
            column: 30,
            span: 3056..3057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 113,
            column: 4,
            span: 3060..3061,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 113,
            column: 6,
            span: 3062..3063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 113,
            column: 11,
            span: 3064..3068,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 12,
            span: 3068..3069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 113,
            column: 13,
            span: 3069..3070,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 113,
            column: 14,
            span: 3070..3071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 113,
            column: 19,
            span: 3071..3076,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 20,
            span: 3076..3077,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rotate 5 -1; return *\"",
        ),
        position: Position {
            line: 113,
            column: 43,
            span: 3077..3100,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 44,
            span: 3100..3101,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 113,
            column: 47,
            span: 3101..3104,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 48,
            span: 3104..3105,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 113,
            column: 51,
            span: 3105..3108,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 52,
            span: 3108..3109,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 113,
            column: 55,
            span: 3109..3112,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 56,
            span: 3112..3113,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 113,
            column: 59,
            span: 3113..3116,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 60,
            span: 3116..3117,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 61,
            span: 3117..3118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 114,
            column: 9,
            span: 3121..3127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 114,
            column: 10,
            span: 3127..3128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 114,
            column: 11,
            span: 3128..3129,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 12,
            span: 3129..3130,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 114,
            column: 14,
            span: 3131..3132,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 114,
            column: 16,
            span: 3131..3134,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 17,
            span: 3134..3135,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 114,
            column: 20,
            span: 3135..3138,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 21,
            span: 3138..3139,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 114,
            column: 24,
            span: 3139..3142,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 25,
            span: 3142..3143,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 114,
            column: 28,
            span: 3143..3146,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 114,
            column: 29,
            span: 3146..3147,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 114,
            column: 30,
            span: 3147..3148,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 115,
            column: 0,
            span: 3149..3152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 119,
            column: 2,
            span: 3175..3176,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 119,
            column: 3,
            span: 3176..3177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 119,
            column: 8,
            span: 3177..3182,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 9,
            span: 3182..3183,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  warningC \"#This shold be a\"\n  warningC \" single \"\n  warning \"warning\"\n  warningC \"#This should be \"\n  warning \"another one\"\n]]",
        ),
        position: Position {
            line: 125,
            column: 3,
            span: 3183..3314,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 4,
            span: 3314..3315,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 129,
            column: 0,
            span: 3346..3348,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 130,
            column: 8,
            span: 3351..3356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 130,
            column: 10,
            span: 3357..3358,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 130,
            column: 12,
            span: 3359..3360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 130,
            column: 14,
            span: 3361..3362,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 130,
            column: 15,
            span: 3362..3363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 130,
            column: 24,
            span: 3363..3372,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    getglobal error\n    pushstring bola\n    pcall 1 1 1   # call 'error' with given handler\n    pushstatus\n    return 2     # return error message and status\n  ]]",
        ),
        position: Position {
            line: 136,
            column: 5,
            span: 3372..3537,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 138,
            column: 8,
            span: 3541..3546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 138,
            column: 12,
            span: 3547..3550,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 13,
            span: 3550..3551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 138,
            column: 16,
            span: 3552..3554,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 138,
            column: 18,
            span: 3555..3556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 138,
            column: 20,
            span: 3557..3558,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 21,
            span: 3558..3559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 138,
            column: 27,
            span: 3559..3565,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 138,
            column: 28,
            span: 3565..3566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        position: Position {
            line: 138,
            column: 33,
            span: 3566..3571,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 34,
            span: 3571..3572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 139,
            column: 9,
            span: 3597..3603,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 10,
            span: 3603..3604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 139,
            column: 12,
            span: 3604..3606,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 139,
            column: 15,
            span: 3607..3609,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ERRRUN\"",
        ),
        position: Position {
            line: 139,
            column: 24,
            span: 3610..3618,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 139,
            column: 28,
            span: 3619..3622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 139,
            column: 32,
            span: 3623..3626,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 139,
            column: 35,
            span: 3627..3629,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"BOLA\"",
        ),
        position: Position {
            line: 139,
            column: 42,
            span: 3630..3636,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 43,
            span: 3636..3637,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 140,
            column: 8,
            span: 3640..3645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 140,
            column: 12,
            span: 3646..3649,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 13,
            span: 3649..3650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 140,
            column: 16,
            span: 3651..3653,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 140,
            column: 18,
            span: 3654..3655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 140,
            column: 20,
            span: 3656..3657,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 140,
            column: 21,
            span: 3657..3658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 140,
            column: 27,
            span: 3658..3664,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 140,
            column: 28,
            span: 3664..3665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 140,
            column: 31,
            span: 3665..3668,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 32,
            span: 3668..3669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 141,
            column: 9,
            span: 3696..3702,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 141,
            column: 10,
            span: 3702..3703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 141,
            column: 12,
            span: 3703..3705,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 141,
            column: 15,
            span: 3706..3708,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ERRRUN\"",
        ),
        position: Position {
            line: 141,
            column: 24,
            span: 3709..3717,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 141,
            column: 28,
            span: 3718..3721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 141,
            column: 32,
            span: 3722..3725,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 141,
            column: 35,
            span: 3726..3728,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 141,
            column: 37,
            span: 3728..3730,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 141,
            column: 38,
            span: 3730..3731,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 143,
            column: 0,
            span: 3733..3736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 145,
            column: 2,
            span: 3738..3739,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 145,
            column: 4,
            span: 3740..3741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 145,
            column: 9,
            span: 3742..3746,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 10,
            span: 3746..3747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 145,
            column: 11,
            span: 3747..3748,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 145,
            column: 12,
            span: 3748..3749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 145,
            column: 17,
            span: 3749..3754,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 18,
            span: 3754..3755,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert 3; pushvalue 3; remove 3; pushvalue 2; remove 2; \\\n                  insert 2; pushvalue 1; remove 1; insert 1; \\\n      insert -2; pushvalue -2; remove -3; return *\"",
        ),
        position: Position {
            line: 147,
            column: 52,
            span: 3755..3928,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 53,
            span: 3928..3929,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 8,
            span: 3935..3937,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 9,
            span: 3937..3938,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 11,
            span: 3938..3940,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 12,
            span: 3940..3941,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 14,
            span: 3941..3943,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 15,
            span: 3943..3944,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 17,
            span: 3944..3946,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 18,
            span: 3946..3947,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 21,
            span: 3947..3950,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 22,
            span: 3950..3951,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 25,
            span: 3951..3954,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 26,
            span: 3954..3955,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 29,
            span: 3955..3958,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 30,
            span: 3958..3959,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 31,
            span: 3959..3960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 149,
            column: 7,
            span: 3961..3967,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 8,
            span: 3967..3968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 149,
            column: 9,
            span: 3968..3969,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 10,
            span: 3969..3970,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 149,
            column: 12,
            span: 3971..3972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 149,
            column: 13,
            span: 3972..3973,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 149,
            column: 14,
            span: 3973..3974,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 15,
            span: 3973..3975,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 16,
            span: 3975..3976,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 17,
            span: 3975..3977,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 18,
            span: 3977..3978,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 19,
            span: 3977..3979,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 20,
            span: 3979..3980,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 21,
            span: 3979..3981,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 22,
            span: 3981..3982,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 23,
            span: 3981..3983,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 24,
            span: 3983..3984,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 26,
            span: 3983..3986,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 27,
            span: 3986..3987,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 29,
            span: 3986..3989,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 30,
            span: 3989..3990,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 32,
            span: 3989..3992,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 149,
            column: 33,
            span: 3992..3993,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 34,
            span: 3993..3994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 151,
            column: 2,
            span: 3996..3997,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 151,
            column: 4,
            span: 3998..3999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 151,
            column: 9,
            span: 4000..4004,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 10,
            span: 4004..4005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 151,
            column: 11,
            span: 4005..4006,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 151,
            column: 12,
            span: 4006..4007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 151,
            column: 17,
            span: 4007..4012,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 18,
            span: 4012..4013,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat 5; return *\"",
        ),
        position: Position {
            line: 151,
            column: 38,
            span: 4013..4033,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 151,
            column: 39,
            span: 4033..4034,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 151,
            column: 45,
            span: 4035..4040,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 151,
            column: 46,
            span: 4040..4041,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 151,
            column: 48,
            span: 4041..4043,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 151,
            column: 49,
            span: 4043..4044,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 151,
            column: 51,
            span: 4044..4046,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 151,
            column: 52,
            span: 4046..4047,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"joao\"",
        ),
        position: Position {
            line: 151,
            column: 59,
            span: 4048..4054,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 151,
            column: 60,
            span: 4054..4055,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 151,
            column: 63,
            span: 4055..4058,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 64,
            span: 4058..4059,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 65,
            span: 4059..4060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 152,
            column: 7,
            span: 4061..4067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 8,
            span: 4067..4068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 152,
            column: 9,
            span: 4068..4069,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 10,
            span: 4069..4070,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 152,
            column: 12,
            span: 4071..4072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 152,
            column: 13,
            span: 4072..4073,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 152,
            column: 14,
            span: 4073..4074,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 15,
            span: 4073..4075,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 16,
            span: 4075..4076,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo23joao12\"",
        ),
        position: Position {
            line: 152,
            column: 29,
            span: 4076..4089,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 152,
            column: 30,
            span: 4089..4090,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 31,
            span: 4090..4091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 155,
            column: 2,
            span: 4112..4113,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 155,
            column: 4,
            span: 4114..4115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 155,
            column: 9,
            span: 4116..4120,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 10,
            span: 4120..4121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 155,
            column: 11,
            span: 4121..4122,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 155,
            column: 12,
            span: 4122..4123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 155,
            column: 17,
            span: 4123..4128,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 18,
            span: 4128..4129,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call 2,-1; return *\"",
        ),
        position: Position {
            line: 155,
            column: 39,
            span: 4129..4150,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 155,
            column: 40,
            span: 4150..4151,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 156,
            column: 14,
            span: 4157..4165,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 16,
            span: 4166..4167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 156,
            column: 17,
            span: 4167..4168,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 18,
            span: 4168..4169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 156,
            column: 19,
            span: 4169..4170,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 20,
            span: 4170..4171,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 156,
            column: 27,
            span: 4172..4178,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 156,
            column: 29,
            span: 4178..4180,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 30,
            span: 4180..4181,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 156,
            column: 31,
            span: 4180..4182,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 32,
            span: 4182..4183,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 156,
            column: 33,
            span: 4182..4184,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 34,
            span: 4184..4185,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 156,
            column: 35,
            span: 4184..4186,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 36,
            span: 4186..4187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 156,
            column: 37,
            span: 4187..4188,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 38,
            span: 4188..4189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 156,
            column: 39,
            span: 4189..4190,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 156,
            column: 43,
            span: 4191..4194,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 44,
            span: 4194..4195,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 156,
            column: 50,
            span: 4196..4201,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 51,
            span: 4201..4202,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"joao\"",
        ),
        position: Position {
            line: 156,
            column: 58,
            span: 4203..4209,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 59,
            span: 4209..4210,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 60,
            span: 4210..4211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 157,
            column: 7,
            span: 4212..4218,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 157,
            column: 8,
            span: 4218..4219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 157,
            column: 9,
            span: 4219..4220,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 10,
            span: 4220..4221,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 157,
            column: 12,
            span: 4222..4223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 157,
            column: 13,
            span: 4223..4224,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 157,
            column: 14,
            span: 4224..4225,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 15,
            span: 4224..4226,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 16,
            span: 4226..4227,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 17,
            span: 4226..4228,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 18,
            span: 4228..4229,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 19,
            span: 4228..4230,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 20,
            span: 4230..4231,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 21,
            span: 4230..4232,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 22,
            span: 4232..4233,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 23,
            span: 4232..4234,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 24,
            span: 4234..4235,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 157,
            column: 29,
            span: 4235..4240,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 30,
            span: 4240..4241,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"joao\"",
        ),
        position: Position {
            line: 157,
            column: 37,
            span: 4242..4248,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 157,
            column: 38,
            span: 4248..4249,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 39,
            span: 4249..4250,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 159,
            column: 3,
            span: 4252..4254,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 160,
            column: 8,
            span: 4318..4323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 160,
            column: 10,
            span: 4324..4325,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 160,
            column: 12,
            span: 4326..4327,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 160,
            column: 14,
            span: 4328..4329,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 160,
            column: 15,
            span: 4329..4330,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 161,
            column: 6,
            span: 4333..4336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 161,
            column: 8,
            span: 4337..4338,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 161,
            column: 9,
            span: 4338..4339,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 161,
            column: 10,
            span: 4338..4340,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 161,
            column: 11,
            span: 4340..4341,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 161,
            column: 15,
            span: 4340..4345,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 161,
            column: 18,
            span: 4346..4348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 161,
            column: 20,
            span: 4349..4350,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 161,
            column: 21,
            span: 4350..4351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 161,
            column: 22,
            span: 4351..4352,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 161,
            column: 23,
            span: 4352..4353,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 161,
            column: 25,
            span: 4354..4355,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 161,
            column: 30,
            span: 4356..4360,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 161,
            column: 34,
            span: 4361..4364,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 161,
            column: 35,
            span: 4364..4365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 161,
            column: 37,
            span: 4366..4367,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 161,
            column: 38,
            span: 4367..4368,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "999",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 161,
            column: 41,
            span: 4367..4371,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 161,
            column: 42,
            span: 4371..4372,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 161,
            column: 44,
            span: 4373..4374,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 161,
            column: 0,
            span: 4374..4377,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 162,
            column: 8,
            span: 4380..4385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 162,
            column: 10,
            span: 4386..4387,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 162,
            column: 12,
            span: 4388..4389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 162,
            column: 14,
            span: 4390..4391,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 162,
            column: 15,
            span: 4391..4392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 162,
            column: 20,
            span: 4392..4397,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 21,
            span: 4397..4398,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pcall 1 -1 0; pop 1; tostring -1; return 1]]",
        ),
        position: Position {
            line: 162,
            column: 67,
            span: 4398..4444,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 68,
            span: 4444..4445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 163,
            column: 26,
            span: 4466..4471,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 163,
            column: 27,
            span: 4471..4472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 163,
            column: 33,
            span: 4472..4478,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 163,
            column: 34,
            span: 4478..4479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 163,
            column: 36,
            span: 4480..4481,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 37,
            span: 4481..4482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 164,
            column: 9,
            span: 4485..4491,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 164,
            column: 10,
            span: 4491..4492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 164,
            column: 11,
            span: 4492..4493,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 164,
            column: 14,
            span: 4494..4496,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        position: Position {
            line: 164,
            column: 19,
            span: 4497..4501,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 164,
            column: 20,
            span: 4501..4502,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 165,
            column: 0,
            span: 4503..4506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 169,
            column: 3,
            span: 4528..4530,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 169,
            column: 4,
            span: 4530..4531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 169,
            column: 5,
            span: 4531..4532,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 169,
            column: 7,
            span: 4533..4534,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 169,
            column: 10,
            span: 4534..4537,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 169,
            column: 11,
            span: 4537..4538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 169,
            column: 14,
            span: 4539..4541,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 169,
            column: 15,
            span: 4541..4542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 169,
            column: 16,
            span: 4542..4543,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 169,
            column: 18,
            span: 4544..4545,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a31\"",
        ),
        position: Position {
            line: 169,
            column: 24,
            span: 4546..4551,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 170,
            column: 6,
            span: 4552..4557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 170,
            column: 8,
            span: 4558..4559,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 170,
            column: 10,
            span: 4560..4561,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 170,
            column: 12,
            span: 4562..4563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 170,
            column: 13,
            span: 4563..4564,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 170,
            column: 14,
            span: 4564..4565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 170,
            column: 19,
            span: 4565..4570,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  getglobal a;\n  getglobal b;\n  getglobal b;\n  setglobal a;\n  return *\n]]",
        ),
        position: Position {
            line: 176,
            column: 3,
            span: 4570..4646,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 176,
            column: 4,
            span: 4646..4647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 177,
            column: 7,
            span: 4648..4654,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 177,
            column: 8,
            span: 4654..4655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 177,
            column: 9,
            span: 4655..4656,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 177,
            column: 10,
            span: 4656..4657,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 177,
            column: 11,
            span: 4656..4658,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 177,
            column: 12,
            span: 4658..4659,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 177,
            column: 15,
            span: 4660..4662,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 177,
            column: 18,
            span: 4662..4665,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 177,
            column: 22,
            span: 4666..4669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 177,
            column: 24,
            span: 4670..4671,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 177,
            column: 25,
            span: 4671..4672,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 177,
            column: 26,
            span: 4671..4673,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 177,
            column: 27,
            span: 4673..4674,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 177,
            column: 30,
            span: 4675..4677,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a31\"",
        ),
        position: Position {
            line: 177,
            column: 36,
            span: 4678..4683,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 177,
            column: 40,
            span: 4684..4687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 177,
            column: 42,
            span: 4688..4689,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 177,
            column: 43,
            span: 4689..4690,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 177,
            column: 44,
            span: 4689..4691,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 177,
            column: 45,
            span: 4691..4692,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 177,
            column: 48,
            span: 4693..4695,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 177,
            column: 52,
            span: 4696..4699,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 177,
            column: 56,
            span: 4700..4703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 177,
            column: 59,
            span: 4704..4706,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 177,
            column: 60,
            span: 4706..4707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 177,
            column: 61,
            span: 4707..4708,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 177,
            column: 64,
            span: 4709..4711,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a31\"",
        ),
        position: Position {
            line: 177,
            column: 70,
            span: 4712..4717,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 177,
            column: 71,
            span: 4717..4718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 181,
            column: 7,
            span: 4738..4744,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 8,
            span: 4744..4745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 181,
            column: 9,
            span: 4745..4746,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 181,
            column: 10,
            span: 4746..4747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 181,
            column: 15,
            span: 4747..4752,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 16,
            span: 4752..4753,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushnum 20; arith /; return 1\"",
        ),
        position: Position {
            line: 181,
            column: 59,
            span: 4753..4796,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 60,
            span: 4796..4797,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 181,
            column: 63,
            span: 4798..4800,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 181,
            column: 67,
            span: 4800..4804,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 68,
            span: 4804..4805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 182,
            column: 7,
            span: 4806..4812,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 8,
            span: 4812..4813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 182,
            column: 9,
            span: 4813..4814,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 182,
            column: 10,
            span: 4814..4815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 182,
            column: 15,
            span: 4815..4820,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 16,
            span: 4820..4821,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushnum 20; arith -; return 1\"",
        ),
        position: Position {
            line: 182,
            column: 59,
            span: 4821..4864,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 60,
            span: 4864..4865,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 182,
            column: 63,
            span: 4866..4868,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 182,
            column: 65,
            span: 4869..4870,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 182,
            column: 67,
            span: 4869..4872,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 68,
            span: 4872..4873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 183,
            column: 7,
            span: 4874..4880,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 8,
            span: 4880..4881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 183,
            column: 9,
            span: 4881..4882,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 183,
            column: 10,
            span: 4882..4883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 183,
            column: 15,
            span: 4883..4888,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 16,
            span: 4888..4889,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushnum -20; arith *; return 1\"",
        ),
        position: Position {
            line: 183,
            column: 60,
            span: 4889..4933,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 61,
            span: 4933..4934,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 183,
            column: 64,
            span: 4935..4937,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 183,
            column: 66,
            span: 4938..4939,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 183,
            column: 69,
            span: 4938..4942,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 70,
            span: 4942..4943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 184,
            column: 7,
            span: 4944..4950,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 8,
            span: 4950..4951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 184,
            column: 9,
            span: 4951..4952,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 184,
            column: 10,
            span: 4952..4953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 184,
            column: 15,
            span: 4953..4958,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 16,
            span: 4958..4959,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushnum 3; arith ^; return 1\"",
        ),
        position: Position {
            line: 184,
            column: 58,
            span: 4959..5001,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 59,
            span: 5001..5002,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 184,
            column: 62,
            span: 5003..5005,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 184,
            column: 67,
            span: 5005..5010,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 68,
            span: 5010..5011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 185,
            column: 7,
            span: 5012..5018,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 8,
            span: 5018..5019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 185,
            column: 9,
            span: 5019..5020,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 185,
            column: 10,
            span: 5020..5021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 185,
            column: 15,
            span: 5021..5026,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 16,
            span: 5026..5027,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushstring 20; arith /; return 1\"",
        ),
        position: Position {
            line: 185,
            column: 62,
            span: 5027..5073,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 63,
            span: 5073..5074,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 185,
            column: 66,
            span: 5075..5077,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 185,
            column: 70,
            span: 5077..5081,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 71,
            span: 5081..5082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 186,
            column: 7,
            span: 5083..5089,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 8,
            span: 5089..5090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 186,
            column: 9,
            span: 5090..5091,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 186,
            column: 10,
            span: 5091..5092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 186,
            column: 15,
            span: 5092..5097,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 16,
            span: 5097..5098,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring 10; pushnum 20; arith -; return 1\"",
        ),
        position: Position {
            line: 186,
            column: 62,
            span: 5098..5144,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 63,
            span: 5144..5145,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 186,
            column: 66,
            span: 5146..5148,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 186,
            column: 68,
            span: 5149..5150,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 186,
            column: 70,
            span: 5149..5152,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 71,
            span: 5152..5153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 187,
            column: 7,
            span: 5154..5160,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 8,
            span: 5160..5161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 187,
            column: 9,
            span: 5161..5162,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 187,
            column: 10,
            span: 5162..5163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 187,
            column: 15,
            span: 5163..5168,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 16,
            span: 5168..5169,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring 10; pushstring -20; arith *; return 1\"",
        ),
        position: Position {
            line: 187,
            column: 66,
            span: 5169..5219,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 187,
            column: 67,
            span: 5219..5220,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 187,
            column: 70,
            span: 5221..5223,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 187,
            column: 72,
            span: 5224..5225,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 75,
            span: 5224..5228,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 187,
            column: 76,
            span: 5228..5229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 188,
            column: 7,
            span: 5230..5236,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 8,
            span: 5236..5237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 188,
            column: 9,
            span: 5237..5238,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 188,
            column: 10,
            span: 5238..5239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 188,
            column: 15,
            span: 5239..5244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 16,
            span: 5244..5245,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring 10; pushstring 3; arith ^; return 1\"",
        ),
        position: Position {
            line: 188,
            column: 64,
            span: 5245..5293,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 65,
            span: 5293..5294,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 188,
            column: 68,
            span: 5295..5297,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 188,
            column: 73,
            span: 5297..5302,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 74,
            span: 5302..5303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 189,
            column: 7,
            span: 5304..5310,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 8,
            span: 5310..5311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 189,
            column: 9,
            span: 5311..5312,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 189,
            column: 10,
            span: 5312..5313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 189,
            column: 15,
            span: 5313..5318,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 16,
            span: 5318..5319,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arith /; return 1\"",
        ),
        position: Position {
            line: 189,
            column: 35,
            span: 5319..5338,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 36,
            span: 5338..5339,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 189,
            column: 38,
            span: 5339..5341,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 39,
            span: 5341..5342,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 189,
            column: 41,
            span: 5342..5344,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 42,
            span: 5344..5345,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 189,
            column: 45,
            span: 5346..5348,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 189,
            column: 50,
            span: 5348..5353,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 189,
            column: 51,
            span: 5353..5354,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 189,
            column: 52,
            span: 5353..5355,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 53,
            span: 5355..5356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 190,
            column: 2,
            span: 5357..5358,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 190,
            column: 4,
            span: 5359..5360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 190,
            column: 6,
            span: 5361..5362,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 190,
            column: 7,
            span: 5362..5363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 190,
            column: 12,
            span: 5363..5368,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 13,
            span: 5368..5369,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushint 3; arith \\\\; return 1\"",
        ),
        position: Position {
            line: 190,
            column: 56,
            span: 5369..5412,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 57,
            span: 5412..5413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 191,
            column: 7,
            span: 5414..5420,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 8,
            span: 5420..5421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 191,
            column: 9,
            span: 5421..5422,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 191,
            column: 12,
            span: 5423..5425,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 191,
            column: 16,
            span: 5425..5429,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 191,
            column: 20,
            span: 5430..5433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 191,
            column: 25,
            span: 5434..5438,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 191,
            column: 26,
            span: 5438..5439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 191,
            column: 30,
            span: 5439..5443,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 31,
            span: 5443..5444,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 191,
            column: 32,
            span: 5444..5445,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 33,
            span: 5445..5446,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 191,
            column: 36,
            span: 5447..5449,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"float\"",
        ),
        position: Position {
            line: 191,
            column: 44,
            span: 5450..5457,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 45,
            span: 5457..5458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 192,
            column: 2,
            span: 5459..5460,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 192,
            column: 4,
            span: 5461..5462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 192,
            column: 6,
            span: 5463..5464,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 192,
            column: 7,
            span: 5464..5465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 192,
            column: 12,
            span: 5465..5470,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 192,
            column: 13,
            span: 5470..5471,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushint 10; pushint 3; arith \\\\; return 1\"",
        ),
        position: Position {
            line: 192,
            column: 56,
            span: 5471..5514,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 192,
            column: 57,
            span: 5514..5515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 193,
            column: 7,
            span: 5516..5522,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 8,
            span: 5522..5523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 193,
            column: 9,
            span: 5523..5524,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 193,
            column: 12,
            span: 5525..5527,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 193,
            column: 14,
            span: 5527..5529,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 193,
            column: 18,
            span: 5530..5533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 193,
            column: 23,
            span: 5534..5538,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 193,
            column: 24,
            span: 5538..5539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 193,
            column: 28,
            span: 5539..5543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 29,
            span: 5543..5544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 193,
            column: 30,
            span: 5544..5545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 31,
            span: 5545..5546,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 193,
            column: 34,
            span: 5547..5549,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"integer\"",
        ),
        position: Position {
            line: 193,
            column: 44,
            span: 5550..5559,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 45,
            span: 5559..5560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 194,
            column: 2,
            span: 5561..5562,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 194,
            column: 4,
            span: 5563..5564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 194,
            column: 11,
            span: 5565..5571,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 12,
            span: 5571..5572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 194,
            column: 13,
            span: 5572..5573,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 194,
            column: 14,
            span: 5573..5574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 194,
            column: 19,
            span: 5574..5579,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 20,
            span: 5579..5580,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushint 10; pushint 3; arith +; return 1\"",
        ),
        position: Position {
            line: 194,
            column: 62,
            span: 5580..5622,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 194,
            column: 63,
            span: 5622..5623,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 194,
            column: 64,
            span: 5623..5624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 195,
            column: 7,
            span: 5625..5631,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 195,
            column: 8,
            span: 5631..5632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 195,
            column: 9,
            span: 5632..5633,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 195,
            column: 12,
            span: 5634..5636,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 195,
            column: 15,
            span: 5636..5639,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 195,
            column: 19,
            span: 5640..5643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 195,
            column: 24,
            span: 5644..5648,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 195,
            column: 25,
            span: 5648..5649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 195,
            column: 29,
            span: 5649..5653,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 195,
            column: 30,
            span: 5653..5654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 195,
            column: 31,
            span: 5654..5655,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 195,
            column: 32,
            span: 5655..5656,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 195,
            column: 35,
            span: 5657..5659,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"integer\"",
        ),
        position: Position {
            line: 195,
            column: 45,
            span: 5660..5669,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 195,
            column: 46,
            span: 5669..5670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 196,
            column: 2,
            span: 5671..5672,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 196,
            column: 4,
            span: 5673..5674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 196,
            column: 11,
            span: 5675..5681,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 12,
            span: 5681..5682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 196,
            column: 13,
            span: 5682..5683,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 196,
            column: 14,
            span: 5683..5684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 196,
            column: 19,
            span: 5684..5689,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 20,
            span: 5689..5690,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushint 3; arith +; return 1\"",
        ),
        position: Position {
            line: 196,
            column: 62,
            span: 5690..5732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 63,
            span: 5732..5733,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 64,
            span: 5733..5734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 197,
            column: 7,
            span: 5735..5741,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 8,
            span: 5741..5742,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 197,
            column: 9,
            span: 5742..5743,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 197,
            column: 12,
            span: 5744..5746,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 197,
            column: 15,
            span: 5746..5749,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 197,
            column: 19,
            span: 5750..5753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 197,
            column: 24,
            span: 5754..5758,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 197,
            column: 25,
            span: 5758..5759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 197,
            column: 29,
            span: 5759..5763,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 30,
            span: 5763..5764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 197,
            column: 31,
            span: 5764..5765,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 32,
            span: 5765..5766,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 197,
            column: 35,
            span: 5767..5769,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"float\"",
        ),
        position: Position {
            line: 197,
            column: 43,
            span: 5770..5777,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 44,
            span: 5777..5778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 198,
            column: 2,
            span: 5779..5780,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 198,
            column: 3,
            span: 5780..5781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 198,
            column: 4,
            span: 5781..5782,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 198,
            column: 5,
            span: 5782..5783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 198,
            column: 6,
            span: 5783..5784,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 198,
            column: 8,
            span: 5785..5786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 198,
            column: 10,
            span: 5787..5788,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 198,
            column: 11,
            span: 5788..5789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 198,
            column: 16,
            span: 5789..5794,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 198,
            column: 17,
            span: 5794..5795,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushnum 1;\n                  pushstring 10; arith _;\n                  pushstring 5; return 3]]",
        ),
        position: Position {
            line: 200,
            column: 43,
            span: 5795..5892,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 200,
            column: 44,
            span: 5892..5893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 201,
            column: 7,
            span: 5894..5900,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 8,
            span: 5900..5901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 201,
            column: 9,
            span: 5901..5902,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 201,
            column: 12,
            span: 5903..5905,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 201,
            column: 14,
            span: 5905..5907,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 201,
            column: 18,
            span: 5908..5911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 201,
            column: 20,
            span: 5912..5913,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 201,
            column: 23,
            span: 5914..5916,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 201,
            column: 25,
            span: 5917..5918,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 201,
            column: 27,
            span: 5917..5920,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 201,
            column: 31,
            span: 5921..5924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 201,
            column: 33,
            span: 5925..5926,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 201,
            column: 36,
            span: 5927..5929,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"5\"",
        ),
        position: Position {
            line: 201,
            column: 40,
            span: 5930..5933,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 201,
            column: 41,
            span: 5933..5934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 202,
            column: 3,
            span: 5935..5937,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 202,
            column: 5,
            span: 5938..5939,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 202,
            column: 7,
            span: 5940..5941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__add",
        ),
        position: Position {
            line: 202,
            column: 12,
            span: 5941..5946,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 202,
            column: 14,
            span: 5947..5948,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 202,
            column: 23,
            span: 5949..5957,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 202,
            column: 25,
            span: 5958..5959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 202,
            column: 26,
            span: 5959..5960,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 202,
            column: 27,
            span: 5960..5961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 202,
            column: 28,
            span: 5961..5962,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 29,
            span: 5962..5963,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 202,
            column: 36,
            span: 5964..5970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 202,
            column: 49,
            span: 5971..5983,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 202,
            column: 50,
            span: 5983..5984,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 202,
            column: 51,
            span: 5984..5985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 202,
            column: 52,
            span: 5985..5986,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 202,
            column: 53,
            span: 5986..5987,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 202,
            column: 54,
            span: 5986..5988,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 202,
            column: 55,
            span: 5988..5989,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 202,
            column: 57,
            span: 5990..5991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 202,
            column: 59,
            span: 5992..5993,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 202,
            column: 60,
            span: 5993..5994,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 202,
            column: 61,
            span: 5993..5995,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 202,
            column: 62,
            span: 5995..5996,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 202,
            column: 63,
            span: 5996..5997,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 202,
            column: 64,
            span: 5997..5998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 202,
            column: 67,
            span: 5999..6001,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 68,
            span: 6001..6002,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 202,
            column: 72,
            span: 6003..6006,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 202,
            column: 73,
            span: 6006..6007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mod",
        ),
        position: Position {
            line: 203,
            column: 12,
            span: 6014..6019,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 203,
            column: 14,
            span: 6020..6021,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 203,
            column: 23,
            span: 6022..6030,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 25,
            span: 6031..6032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 203,
            column: 26,
            span: 6032..6033,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 27,
            span: 6033..6034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 203,
            column: 28,
            span: 6034..6035,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 29,
            span: 6035..6036,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 203,
            column: 36,
            span: 6037..6043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 203,
            column: 49,
            span: 6044..6056,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 50,
            span: 6056..6057,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 203,
            column: 51,
            span: 6057..6058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 203,
            column: 52,
            span: 6058..6059,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 203,
            column: 53,
            span: 6059..6060,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 203,
            column: 54,
            span: 6059..6061,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 203,
            column: 55,
            span: 6061..6062,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 203,
            column: 57,
            span: 6063..6064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 203,
            column: 59,
            span: 6065..6066,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 203,
            column: 60,
            span: 6066..6067,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 203,
            column: 61,
            span: 6066..6068,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 203,
            column: 62,
            span: 6068..6069,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 203,
            column: 63,
            span: 6069..6070,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 64,
            span: 6070..6071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 203,
            column: 67,
            span: 6072..6074,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 68,
            span: 6074..6075,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 203,
            column: 72,
            span: 6076..6079,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 73,
            span: 6079..6080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__unm",
        ),
        position: Position {
            line: 204,
            column: 12,
            span: 6087..6092,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 204,
            column: 14,
            span: 6093..6094,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 204,
            column: 23,
            span: 6095..6103,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 204,
            column: 25,
            span: 6104..6105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 204,
            column: 26,
            span: 6105..6106,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 204,
            column: 27,
            span: 6106..6107,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 204,
            column: 34,
            span: 6108..6114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 204,
            column: 47,
            span: 6115..6127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 204,
            column: 48,
            span: 6127..6128,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 204,
            column: 49,
            span: 6128..6129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 204,
            column: 50,
            span: 6129..6130,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 204,
            column: 51,
            span: 6130..6131,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 204,
            column: 52,
            span: 6130..6132,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 204,
            column: 53,
            span: 6132..6133,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 204,
            column: 54,
            span: 6133..6134,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 204,
            column: 56,
            span: 6134..6136,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 204,
            column: 57,
            span: 6136..6137,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 58,
            span: 6137..6138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 204,
            column: 61,
            span: 6139..6141,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 204,
            column: 62,
            span: 6141..6142,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 204,
            column: 66,
            span: 6143..6146,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 204,
            column: 67,
            span: 6146..6147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 205,
            column: 2,
            span: 6148..6149,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 3,
            span: 6149..6150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 205,
            column: 4,
            span: 6150..6151,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 5,
            span: 6151..6152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 205,
            column: 6,
            span: 6152..6153,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 205,
            column: 8,
            span: 6154..6155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 205,
            column: 21,
            span: 6156..6168,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 22,
            span: 6168..6169,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 205,
            column: 23,
            span: 6169..6170,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 205,
            column: 24,
            span: 6169..6171,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 205,
            column: 25,
            span: 6171..6172,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 26,
            span: 6172..6173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 205,
            column: 29,
            span: 6174..6176,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 30,
            span: 6176..6177,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 31,
            span: 6177..6178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 206,
            column: 21,
            span: 6187..6199,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 22,
            span: 6199..6200,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 206,
            column: 23,
            span: 6200..6201,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 206,
            column: 24,
            span: 6200..6202,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 206,
            column: 25,
            span: 6202..6203,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 26,
            span: 6203..6204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 206,
            column: 29,
            span: 6205..6207,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 30,
            span: 6207..6208,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 31,
            span: 6208..6209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 207,
            column: 21,
            span: 6218..6230,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 22,
            span: 6230..6231,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 207,
            column: 23,
            span: 6231..6232,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 207,
            column: 24,
            span: 6232..6233,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 207,
            column: 25,
            span: 6232..6234,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 207,
            column: 26,
            span: 6234..6235,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 27,
            span: 6235..6236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 207,
            column: 30,
            span: 6237..6239,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 31,
            span: 6239..6240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 208,
            column: 2,
            span: 6241..6242,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 3,
            span: 6242..6243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 208,
            column: 4,
            span: 6243..6244,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 5,
            span: 6244..6245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 208,
            column: 6,
            span: 6245..6246,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 208,
            column: 8,
            span: 6247..6248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 208,
            column: 10,
            span: 6249..6250,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 208,
            column: 11,
            span: 6250..6251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 208,
            column: 16,
            span: 6251..6256,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 208,
            column: 17,
            span: 6256..6257,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arith +; return 2\"",
        ),
        position: Position {
            line: 208,
            column: 36,
            span: 6257..6276,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 37,
            span: 6276..6277,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 208,
            column: 40,
            span: 6277..6280,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 41,
            span: 6280..6281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 208,
            column: 43,
            span: 6282..6283,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 44,
            span: 6283..6284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 208,
            column: 46,
            span: 6285..6286,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 208,
            column: 47,
            span: 6286..6287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 209,
            column: 7,
            span: 6288..6294,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 209,
            column: 8,
            span: 6294..6295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 209,
            column: 9,
            span: 6295..6296,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 209,
            column: 12,
            span: 6297..6299,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 209,
            column: 15,
            span: 6299..6302,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 209,
            column: 19,
            span: 6303..6306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 209,
            column: 21,
            span: 6307..6308,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 209,
            column: 22,
            span: 6308..6309,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 209,
            column: 23,
            span: 6308..6310,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 209,
            column: 24,
            span: 6310..6311,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 209,
            column: 27,
            span: 6312..6314,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 209,
            column: 30,
            span: 6314..6317,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 209,
            column: 34,
            span: 6318..6321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 209,
            column: 36,
            span: 6322..6323,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 209,
            column: 39,
            span: 6324..6326,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 209,
            column: 43,
            span: 6327..6330,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 209,
            column: 44,
            span: 6330..6331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 210,
            column: 7,
            span: 6332..6338,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 8,
            span: 6338..6339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 210,
            column: 9,
            span: 6339..6340,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 210,
            column: 10,
            span: 6340..6341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 210,
            column: 15,
            span: 6341..6346,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 16,
            span: 6346..6347,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arith %; return 1\"",
        ),
        position: Position {
            line: 210,
            column: 35,
            span: 6347..6366,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 36,
            span: 6366..6367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 210,
            column: 38,
            span: 6368..6369,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 39,
            span: 6369..6370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 210,
            column: 41,
            span: 6371..6372,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 42,
            span: 6372..6373,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 210,
            column: 43,
            span: 6373..6374,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 44,
            span: 6373..6375,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 210,
            column: 45,
            span: 6375..6376,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 210,
            column: 48,
            span: 6377..6379,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 50,
            span: 6379..6381,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 210,
            column: 51,
            span: 6381..6382,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 210,
            column: 52,
            span: 6382..6383,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 53,
            span: 6382..6384,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 54,
            span: 6384..6385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 211,
            column: 7,
            span: 6386..6392,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 211,
            column: 8,
            span: 6392..6393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 211,
            column: 9,
            span: 6393..6394,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 211,
            column: 10,
            span: 6394..6395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 211,
            column: 15,
            span: 6395..6400,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 211,
            column: 16,
            span: 6400..6401,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arith _; arith +; arith %; return 1\"",
        ),
        position: Position {
            line: 211,
            column: 53,
            span: 6401..6438,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 54,
            span: 6438..6439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 211,
            column: 56,
            span: 6440..6441,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 57,
            span: 6441..6442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 211,
            column: 59,
            span: 6443..6444,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 60,
            span: 6444..6445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 211,
            column: 62,
            span: 6446..6447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 211,
            column: 63,
            span: 6447..6448,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 211,
            column: 64,
            span: 6448..6449,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 65,
            span: 6448..6450,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 211,
            column: 66,
            span: 6450..6451,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 211,
            column: 69,
            span: 6452..6454,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 212,
            column: 17,
            span: 6469..6471,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 212,
            column: 19,
            span: 6472..6473,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 212,
            column: 21,
            span: 6474..6475,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 212,
            column: 22,
            span: 6474..6476,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 212,
            column: 24,
            span: 6477..6478,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 212,
            column: 26,
            span: 6479..6480,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 212,
            column: 27,
            span: 6480..6481,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 212,
            column: 28,
            span: 6480..6482,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 212,
            column: 29,
            span: 6482..6483,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 212,
            column: 30,
            span: 6483..6484,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 212,
            column: 31,
            span: 6483..6485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 212,
            column: 32,
            span: 6485..6486,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 212,
            column: 33,
            span: 6486..6487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 215,
            column: 9,
            span: 6513..6521,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 215,
            column: 10,
            span: 6521..6522,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"divide by zero\"",
        ),
        position: Position {
            line: 215,
            column: 26,
            span: 6522..6538,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 27,
            span: 6538..6539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 215,
            column: 29,
            span: 6540..6541,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 215,
            column: 30,
            span: 6541..6542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 215,
            column: 35,
            span: 6542..6547,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 36,
            span: 6547..6548,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arith \\\\\"",
        ),
        position: Position {
            line: 215,
            column: 47,
            span: 6549..6559,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 48,
            span: 6559..6560,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 215,
            column: 51,
            span: 6560..6563,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 52,
            span: 6563..6564,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 215,
            column: 54,
            span: 6564..6566,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 215,
            column: 55,
            span: 6566..6567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 216,
            column: 9,
            span: 6568..6576,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 216,
            column: 10,
            span: 6576..6577,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%0\"",
        ),
        position: Position {
            line: 216,
            column: 15,
            span: 6577..6582,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 16,
            span: 6582..6583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 216,
            column: 18,
            span: 6584..6585,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 216,
            column: 19,
            span: 6585..6586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 216,
            column: 24,
            span: 6586..6591,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 25,
            span: 6591..6592,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arith %\"",
        ),
        position: Position {
            line: 216,
            column: 35,
            span: 6593..6602,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 36,
            span: 6602..6603,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 216,
            column: 39,
            span: 6603..6606,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 40,
            span: 6606..6607,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 216,
            column: 42,
            span: 6607..6609,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 216,
            column: 43,
            span: 6609..6610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 220,
            column: 7,
            span: 6647..6653,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 220,
            column: 8,
            span: 6653..6654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 220,
            column: 9,
            span: 6654..6655,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 220,
            column: 10,
            span: 6655..6656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 220,
            column: 15,
            span: 6656..6661,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 220,
            column: 16,
            span: 6661..6662,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 2 5, return 1\"",
        ),
        position: Position {
            line: 220,
            column: 42,
            span: 6662..6688,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 43,
            span: 6688..6689,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 220,
            column: 45,
            span: 6689..6691,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 46,
            span: 6691..6692,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 220,
            column: 48,
            span: 6692..6694,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 49,
            span: 6694..6695,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 220,
            column: 51,
            span: 6695..6697,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 52,
            span: 6697..6698,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 220,
            column: 54,
            span: 6698..6700,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 55,
            span: 6700..6701,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 220,
            column: 57,
            span: 6701..6703,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 58,
            span: 6703..6704,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 220,
            column: 60,
            span: 6704..6706,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 220,
            column: 61,
            span: 6706..6707,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 220,
            column: 62,
            span: 6707..6708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 221,
            column: 7,
            span: 6709..6715,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 8,
            span: 6715..6716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 221,
            column: 9,
            span: 6716..6717,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 221,
            column: 10,
            span: 6717..6718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 221,
            column: 15,
            span: 6718..6723,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 16,
            span: 6723..6724,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LE 2 5, return 1\"",
        ),
        position: Position {
            line: 221,
            column: 42,
            span: 6724..6750,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 221,
            column: 43,
            span: 6750..6751,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 221,
            column: 45,
            span: 6751..6753,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 221,
            column: 46,
            span: 6753..6754,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 221,
            column: 48,
            span: 6754..6756,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 221,
            column: 49,
            span: 6756..6757,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 221,
            column: 51,
            span: 6757..6759,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 221,
            column: 52,
            span: 6759..6760,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 221,
            column: 54,
            span: 6760..6762,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 221,
            column: 55,
            span: 6762..6763,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 221,
            column: 57,
            span: 6763..6765,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 221,
            column: 58,
            span: 6765..6766,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 221,
            column: 60,
            span: 6766..6768,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 61,
            span: 6768..6769,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 62,
            span: 6769..6770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 222,
            column: 7,
            span: 6771..6777,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 8,
            span: 6777..6778,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 222,
            column: 11,
            span: 6778..6781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 222,
            column: 13,
            span: 6782..6783,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 222,
            column: 14,
            span: 6783..6784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 222,
            column: 19,
            span: 6784..6789,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 20,
            span: 6789..6790,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 3 4, return 1\"",
        ),
        position: Position {
            line: 222,
            column: 46,
            span: 6790..6816,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 222,
            column: 47,
            span: 6816..6817,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 222,
            column: 49,
            span: 6817..6819,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 222,
            column: 50,
            span: 6819..6820,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 222,
            column: 52,
            span: 6820..6822,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 222,
            column: 53,
            span: 6822..6823,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 222,
            column: 55,
            span: 6823..6825,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 222,
            column: 56,
            span: 6825..6826,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 222,
            column: 58,
            span: 6826..6828,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 222,
            column: 59,
            span: 6828..6829,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 222,
            column: 61,
            span: 6829..6831,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 222,
            column: 62,
            span: 6831..6832,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 222,
            column: 64,
            span: 6832..6834,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 65,
            span: 6834..6835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 66,
            span: 6835..6836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 223,
            column: 7,
            span: 6837..6843,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 8,
            span: 6843..6844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 223,
            column: 9,
            span: 6844..6845,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 223,
            column: 10,
            span: 6845..6846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 223,
            column: 15,
            span: 6846..6851,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 16,
            span: 6851..6852,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LE 3 4, return 1\"",
        ),
        position: Position {
            line: 223,
            column: 42,
            span: 6852..6878,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 43,
            span: 6878..6879,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 223,
            column: 45,
            span: 6879..6881,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 46,
            span: 6881..6882,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 223,
            column: 48,
            span: 6882..6884,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 49,
            span: 6884..6885,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 223,
            column: 51,
            span: 6885..6887,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 52,
            span: 6887..6888,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 223,
            column: 54,
            span: 6888..6890,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 55,
            span: 6890..6891,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 223,
            column: 57,
            span: 6891..6893,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 58,
            span: 6893..6894,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 223,
            column: 60,
            span: 6894..6896,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 61,
            span: 6896..6897,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 62,
            span: 6897..6898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 224,
            column: 7,
            span: 6899..6905,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 8,
            span: 6905..6906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 224,
            column: 9,
            span: 6906..6907,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 224,
            column: 10,
            span: 6907..6908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 224,
            column: 15,
            span: 6908..6913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 16,
            span: 6913..6914,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 5 2, return 1\"",
        ),
        position: Position {
            line: 224,
            column: 42,
            span: 6914..6940,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 43,
            span: 6940..6941,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 45,
            span: 6941..6943,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 46,
            span: 6943..6944,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 48,
            span: 6944..6946,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 49,
            span: 6946..6947,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 51,
            span: 6947..6949,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 52,
            span: 6949..6950,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 54,
            span: 6950..6952,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 55,
            span: 6952..6953,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 57,
            span: 6953..6955,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 58,
            span: 6955..6956,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 60,
            span: 6956..6958,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 61,
            span: 6958..6959,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 62,
            span: 6959..6960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 225,
            column: 7,
            span: 6961..6967,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 8,
            span: 6967..6968,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 225,
            column: 11,
            span: 6968..6971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 225,
            column: 13,
            span: 6972..6973,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 225,
            column: 14,
            span: 6973..6974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 225,
            column: 19,
            span: 6974..6979,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 20,
            span: 6979..6980,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 2 -3, return 1\"",
        ),
        position: Position {
            line: 225,
            column: 47,
            span: 6980..7007,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 48,
            span: 7007..7008,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"4\"",
        ),
        position: Position {
            line: 225,
            column: 52,
            span: 7009..7012,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 53,
            span: 7012..7013,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 225,
            column: 57,
            span: 7014..7017,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 58,
            span: 7017..7018,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 225,
            column: 62,
            span: 7019..7022,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 63,
            span: 7022..7023,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        position: Position {
            line: 225,
            column: 67,
            span: 7024..7027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 68,
            span: 7027..7028,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 225,
            column: 72,
            span: 7029..7032,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 73,
            span: 7032..7033,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 225,
            column: 77,
            span: 7034..7037,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 78,
            span: 7037..7038,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 79,
            span: 7038..7039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 226,
            column: 7,
            span: 7040..7046,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 8,
            span: 7046..7047,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 226,
            column: 11,
            span: 7047..7050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 226,
            column: 13,
            span: 7051..7052,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 226,
            column: 14,
            span: 7052..7053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 226,
            column: 19,
            span: 7053..7058,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 20,
            span: 7058..7059,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT -3 2, return 1\"",
        ),
        position: Position {
            line: 226,
            column: 47,
            span: 7059..7086,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 48,
            span: 7086..7087,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        position: Position {
            line: 226,
            column: 52,
            span: 7088..7091,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 53,
            span: 7091..7092,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 226,
            column: 57,
            span: 7093..7096,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 58,
            span: 7096..7097,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 226,
            column: 62,
            span: 7098..7101,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 63,
            span: 7101..7102,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"4\"",
        ),
        position: Position {
            line: 226,
            column: 67,
            span: 7103..7106,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 68,
            span: 7106..7107,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 226,
            column: 72,
            span: 7108..7111,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 73,
            span: 7111..7112,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 226,
            column: 77,
            span: 7113..7116,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 78,
            span: 7116..7117,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 79,
            span: 7117..7118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 229,
            column: 7,
            span: 7155..7161,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 229,
            column: 8,
            span: 7161..7162,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 229,
            column: 11,
            span: 7162..7165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 229,
            column: 13,
            span: 7166..7167,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 229,
            column: 14,
            span: 7167..7168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 229,
            column: 19,
            span: 7168..7173,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 229,
            column: 20,
            span: 7173..7174,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 1 4, return 1\"",
        ),
        position: Position {
            line: 229,
            column: 46,
            span: 7174..7200,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 229,
            column: 47,
            span: 7200..7201,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 229,
            column: 48,
            span: 7201..7202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 230,
            column: 7,
            span: 7203..7209,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 8,
            span: 7209..7210,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 230,
            column: 11,
            span: 7210..7213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 230,
            column: 13,
            span: 7214..7215,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 230,
            column: 14,
            span: 7215..7216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 230,
            column: 19,
            span: 7216..7221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 20,
            span: 7221..7222,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LE 9 1, return 1\"",
        ),
        position: Position {
            line: 230,
            column: 46,
            span: 7222..7248,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 47,
            span: 7248..7249,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 48,
            span: 7249..7250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 231,
            column: 7,
            span: 7251..7257,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 8,
            span: 7257..7258,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 231,
            column: 11,
            span: 7258..7261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 231,
            column: 13,
            span: 7262..7263,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 231,
            column: 14,
            span: 7263..7264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 231,
            column: 19,
            span: 7264..7269,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 20,
            span: 7269..7270,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 9 9, return 1\"",
        ),
        position: Position {
            line: 231,
            column: 46,
            span: 7270..7296,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 231,
            column: 47,
            span: 7296..7297,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 231,
            column: 48,
            span: 7297..7298,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 233,
            column: 6,
            span: 7300..7305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 233,
            column: 8,
            span: 7306..7307,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 233,
            column: 10,
            span: 7308..7309,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 233,
            column: 12,
            span: 7310..7311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        position: Position {
            line: 233,
            column: 16,
            span: 7311..7315,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 233,
            column: 18,
            span: 7316..7317,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 233,
            column: 27,
            span: 7318..7326,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 29,
            span: 7327..7328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 233,
            column: 30,
            span: 7328..7329,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 31,
            span: 7329..7330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 233,
            column: 32,
            span: 7330..7331,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 33,
            span: 7331..7332,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 233,
            column: 40,
            span: 7333..7339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 233,
            column: 42,
            span: 7340..7341,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 233,
            column: 43,
            span: 7341..7342,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 233,
            column: 44,
            span: 7341..7343,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 233,
            column: 45,
            span: 7343..7344,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 233,
            column: 47,
            span: 7345..7346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 233,
            column: 49,
            span: 7347..7348,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 233,
            column: 50,
            span: 7348..7349,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 233,
            column: 51,
            span: 7348..7350,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 233,
            column: 52,
            span: 7350..7351,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 233,
            column: 56,
            span: 7352..7355,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 233,
            column: 57,
            span: 7355..7356,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 234,
            column: 6,
            span: 7357..7362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 234,
            column: 9,
            span: 7363..7365,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 10,
            span: 7365..7366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 234,
            column: 12,
            span: 7366..7368,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 13,
            span: 7368..7369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        position: Position {
            line: 234,
            column: 15,
            span: 7369..7371,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 234,
            column: 17,
            span: 7372..7373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 234,
            column: 30,
            span: 7374..7386,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 234,
            column: 31,
            span: 7386..7387,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 234,
            column: 32,
            span: 7387..7388,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 234,
            column: 33,
            span: 7387..7389,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 234,
            column: 34,
            span: 7389..7390,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 35,
            span: 7390..7391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 234,
            column: 37,
            span: 7392..7393,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 234,
            column: 38,
            span: 7393..7394,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 39,
            span: 7394..7395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 235,
            column: 30,
            span: 7413..7425,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 31,
            span: 7425..7426,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 235,
            column: 32,
            span: 7426..7427,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 235,
            column: 33,
            span: 7426..7428,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 235,
            column: 34,
            span: 7428..7429,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 235,
            column: 35,
            span: 7429..7430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 235,
            column: 37,
            span: 7431..7432,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 235,
            column: 38,
            span: 7432..7433,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 235,
            column: 39,
            span: 7433..7434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 236,
            column: 30,
            span: 7452..7464,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 236,
            column: 31,
            span: 7464..7465,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 236,
            column: 32,
            span: 7465..7466,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 236,
            column: 33,
            span: 7465..7467,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 236,
            column: 34,
            span: 7467..7468,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 236,
            column: 35,
            span: 7468..7469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 236,
            column: 37,
            span: 7470..7471,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 236,
            column: 38,
            span: 7471..7472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 237,
            column: 7,
            span: 7473..7479,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 237,
            column: 8,
            span: 7479..7480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 237,
            column: 9,
            span: 7480..7481,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 237,
            column: 10,
            span: 7481..7482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 237,
            column: 15,
            span: 7482..7487,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 237,
            column: 16,
            span: 7487..7488,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 2 5, return 1\"",
        ),
        position: Position {
            line: 237,
            column: 42,
            span: 7488..7514,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 43,
            span: 7514..7515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 237,
            column: 46,
            span: 7516..7518,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 47,
            span: 7518..7519,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 237,
            column: 49,
            span: 7519..7521,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 50,
            span: 7521..7522,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 237,
            column: 52,
            span: 7522..7524,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 53,
            span: 7524..7525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        position: Position {
            line: 237,
            column: 56,
            span: 7526..7528,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 57,
            span: 7528..7529,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 237,
            column: 59,
            span: 7529..7531,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 60,
            span: 7531..7532,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 237,
            column: 62,
            span: 7532..7534,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 237,
            column: 63,
            span: 7534..7535,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 237,
            column: 64,
            span: 7535..7536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 238,
            column: 7,
            span: 7537..7543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 8,
            span: 7543..7544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 238,
            column: 9,
            span: 7544..7545,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 238,
            column: 10,
            span: 7545..7546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 238,
            column: 15,
            span: 7546..7551,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 16,
            span: 7551..7552,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LE 2 5, return 1\"",
        ),
        position: Position {
            line: 238,
            column: 42,
            span: 7552..7578,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 43,
            span: 7578..7579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 238,
            column: 46,
            span: 7580..7582,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 47,
            span: 7582..7583,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 238,
            column: 49,
            span: 7583..7585,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 50,
            span: 7585..7586,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 238,
            column: 52,
            span: 7586..7588,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 53,
            span: 7588..7589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        position: Position {
            line: 238,
            column: 56,
            span: 7590..7592,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 57,
            span: 7592..7593,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 238,
            column: 59,
            span: 7593..7595,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 60,
            span: 7595..7596,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 238,
            column: 62,
            span: 7596..7598,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 238,
            column: 63,
            span: 7598..7599,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 238,
            column: 64,
            span: 7599..7600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 239,
            column: 7,
            span: 7601..7607,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 8,
            span: 7607..7608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 239,
            column: 9,
            span: 7608..7609,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 239,
            column: 10,
            span: 7609..7610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 239,
            column: 15,
            span: 7610..7615,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 16,
            span: 7615..7616,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 5 -6, return 1\"",
        ),
        position: Position {
            line: 239,
            column: 43,
            span: 7616..7643,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 44,
            span: 7643..7644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        position: Position {
            line: 239,
            column: 47,
            span: 7645..7647,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 48,
            span: 7647..7648,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 239,
            column: 50,
            span: 7648..7650,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 51,
            span: 7650..7651,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 239,
            column: 53,
            span: 7651..7653,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 54,
            span: 7653..7654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 239,
            column: 57,
            span: 7655..7657,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 58,
            span: 7657..7658,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 239,
            column: 60,
            span: 7658..7660,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 61,
            span: 7660..7661,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 239,
            column: 63,
            span: 7661..7663,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 64,
            span: 7663..7664,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 65,
            span: 7664..7665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 240,
            column: 2,
            span: 7666..7667,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 3,
            span: 7667..7668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 240,
            column: 4,
            span: 7668..7669,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 240,
            column: 6,
            span: 7670..7671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 240,
            column: 8,
            span: 7672..7673,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 240,
            column: 9,
            span: 7673..7674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 240,
            column: 14,
            span: 7674..7679,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 240,
            column: 15,
            span: 7679..7680,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 5 -6, return 2\"",
        ),
        position: Position {
            line: 240,
            column: 42,
            span: 7680..7707,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 43,
            span: 7707..7708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 240,
            column: 46,
            span: 7709..7711,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 47,
            span: 7711..7712,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 49,
            span: 7712..7714,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 50,
            span: 7714..7715,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 52,
            span: 7715..7717,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 53,
            span: 7717..7718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 240,
            column: 56,
            span: 7719..7721,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 57,
            span: 7721..7722,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 59,
            span: 7722..7724,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 60,
            span: 7724..7725,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 63,
            span: 7725..7728,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 240,
            column: 64,
            span: 7728..7729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 241,
            column: 7,
            span: 7730..7736,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 241,
            column: 8,
            span: 7736..7737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 241,
            column: 9,
            span: 7737..7738,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 241,
            column: 12,
            span: 7739..7741,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 241,
            column: 15,
            span: 7741..7744,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 241,
            column: 19,
            span: 7745..7748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 241,
            column: 21,
            span: 7749..7750,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 241,
            column: 24,
            span: 7751..7753,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 241,
            column: 30,
            span: 7754..7759,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 241,
            column: 31,
            span: 7759..7760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 242,
            column: 2,
            span: 7761..7762,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 3,
            span: 7762..7763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 242,
            column: 4,
            span: 7763..7764,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 242,
            column: 6,
            span: 7765..7766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 242,
            column: 8,
            span: 7767..7768,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 242,
            column: 9,
            span: 7768..7769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 242,
            column: 14,
            span: 7769..7774,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 15,
            span: 7774..7775,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LE 5 -6, return 2\"",
        ),
        position: Position {
            line: 242,
            column: 42,
            span: 7775..7802,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 43,
            span: 7802..7803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 242,
            column: 46,
            span: 7804..7806,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 47,
            span: 7806..7807,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 242,
            column: 49,
            span: 7807..7809,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 50,
            span: 7809..7810,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 242,
            column: 52,
            span: 7810..7812,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 53,
            span: 7812..7813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 242,
            column: 56,
            span: 7814..7816,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 57,
            span: 7816..7817,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 242,
            column: 59,
            span: 7817..7819,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 60,
            span: 7819..7820,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 242,
            column: 63,
            span: 7820..7823,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 64,
            span: 7823..7824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 243,
            column: 7,
            span: 7825..7831,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 8,
            span: 7831..7832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 243,
            column: 9,
            span: 7832..7833,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 243,
            column: 12,
            span: 7834..7836,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 243,
            column: 15,
            span: 7836..7839,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 243,
            column: 19,
            span: 7840..7843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 243,
            column: 21,
            span: 7844..7845,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 243,
            column: 24,
            span: 7846..7848,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 243,
            column: 30,
            span: 7849..7854,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 31,
            span: 7854..7855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 244,
            column: 2,
            span: 7856..7857,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 3,
            span: 7857..7858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 244,
            column: 4,
            span: 7858..7859,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 244,
            column: 6,
            span: 7860..7861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 244,
            column: 8,
            span: 7862..7863,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 244,
            column: 9,
            span: 7863..7864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 244,
            column: 14,
            span: 7864..7869,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 244,
            column: 15,
            span: 7869..7870,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LE 5 -6, return 2\"",
        ),
        position: Position {
            line: 244,
            column: 42,
            span: 7870..7897,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 43,
            span: 7897..7898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 244,
            column: 46,
            span: 7899..7901,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 47,
            span: 7901..7902,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 244,
            column: 49,
            span: 7902..7904,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 50,
            span: 7904..7905,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 244,
            column: 52,
            span: 7905..7907,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 53,
            span: 7907..7908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 244,
            column: 56,
            span: 7909..7911,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 57,
            span: 7911..7912,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 244,
            column: 59,
            span: 7912..7914,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 60,
            span: 7914..7915,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 244,
            column: 63,
            span: 7915..7918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 244,
            column: 64,
            span: 7918..7919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 245,
            column: 7,
            span: 7920..7926,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 245,
            column: 8,
            span: 7926..7927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 245,
            column: 9,
            span: 7927..7928,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 245,
            column: 12,
            span: 7929..7931,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 245,
            column: 15,
            span: 7931..7934,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 245,
            column: 19,
            span: 7935..7938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 245,
            column: 21,
            span: 7939..7940,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 245,
            column: 24,
            span: 7941..7943,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 245,
            column: 29,
            span: 7944..7948,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 245,
            column: 30,
            span: 7948..7949,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 248,
            column: 3,
            span: 7952..7954,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 249,
            column: 8,
            span: 8009..8014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 249,
            column: 11,
            span: 8015..8017,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 249,
            column: 13,
            span: 8018..8019,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 249,
            column: 15,
            span: 8020..8021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        position: Position {
            line: 249,
            column: 19,
            span: 8021..8025,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 249,
            column: 21,
            span: 8026..8027,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 249,
            column: 30,
            span: 8028..8036,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 32,
            span: 8037..8038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 249,
            column: 33,
            span: 8038..8039,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 34,
            span: 8039..8040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 249,
            column: 35,
            span: 8040..8041,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 36,
            span: 8041..8042,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 249,
            column: 43,
            span: 8043..8049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 249,
            column: 45,
            span: 8050..8051,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 249,
            column: 46,
            span: 8051..8052,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 249,
            column: 47,
            span: 8051..8053,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 249,
            column: 48,
            span: 8053..8054,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 249,
            column: 50,
            span: 8055..8056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 249,
            column: 52,
            span: 8057..8058,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 249,
            column: 53,
            span: 8058..8059,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 249,
            column: 54,
            span: 8058..8060,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 249,
            column: 55,
            span: 8060..8061,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 249,
            column: 59,
            span: 8062..8065,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 60,
            span: 8065..8066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__le",
        ),
        position: Position {
            line: 250,
            column: 19,
            span: 8081..8085,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 250,
            column: 21,
            span: 8086..8087,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 250,
            column: 30,
            span: 8088..8096,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 32,
            span: 8097..8098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 250,
            column: 33,
            span: 8098..8099,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 34,
            span: 8099..8100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 250,
            column: 35,
            span: 8100..8101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 36,
            span: 8101..8102,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 250,
            column: 43,
            span: 8103..8109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 250,
            column: 45,
            span: 8110..8111,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 250,
            column: 46,
            span: 8111..8112,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 250,
            column: 47,
            span: 8111..8113,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 250,
            column: 48,
            span: 8113..8114,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 250,
            column: 51,
            span: 8115..8117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 250,
            column: 53,
            span: 8118..8119,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 250,
            column: 54,
            span: 8119..8120,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 250,
            column: 55,
            span: 8119..8121,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 250,
            column: 56,
            span: 8121..8122,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 250,
            column: 60,
            span: 8123..8126,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 61,
            span: 8126..8127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        position: Position {
            line: 251,
            column: 19,
            span: 8142..8146,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 251,
            column: 21,
            span: 8147..8148,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 251,
            column: 30,
            span: 8149..8157,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 251,
            column: 32,
            span: 8158..8159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 251,
            column: 33,
            span: 8159..8160,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 251,
            column: 34,
            span: 8160..8161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 251,
            column: 35,
            span: 8161..8162,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 251,
            column: 36,
            span: 8162..8163,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 251,
            column: 43,
            span: 8164..8170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 251,
            column: 45,
            span: 8171..8172,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 251,
            column: 46,
            span: 8172..8173,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 251,
            column: 47,
            span: 8172..8174,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 251,
            column: 48,
            span: 8174..8175,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 251,
            column: 51,
            span: 8176..8178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 251,
            column: 53,
            span: 8179..8180,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 251,
            column: 54,
            span: 8180..8181,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 251,
            column: 55,
            span: 8180..8182,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 251,
            column: 56,
            span: 8182..8183,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 251,
            column: 60,
            span: 8184..8187,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 251,
            column: 61,
            span: 8187..8188,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 252,
            column: 8,
            span: 8191..8196,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 252,
            column: 17,
            span: 8197..8205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "O",
        ),
        position: Position {
            line: 252,
            column: 19,
            span: 8206..8207,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 252,
            column: 21,
            span: 8208..8209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 252,
            column: 22,
            span: 8209..8210,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 252,
            column: 23,
            span: 8210..8211,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 253,
            column: 11,
            span: 8216..8222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 253,
            column: 24,
            span: 8223..8235,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 25,
            span: 8235..8236,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 253,
            column: 26,
            span: 8236..8237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 253,
            column: 27,
            span: 8237..8238,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 253,
            column: 28,
            span: 8238..8239,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 253,
            column: 29,
            span: 8239..8240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 253,
            column: 32,
            span: 8241..8243,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 33,
            span: 8243..8244,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 254,
            column: 0,
            span: 8247..8250,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 256,
            column: 8,
            span: 8254..8259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 256,
            column: 10,
            span: 8260..8261,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 256,
            column: 11,
            span: 8261..8262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 256,
            column: 13,
            span: 8263..8264,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 256,
            column: 15,
            span: 8265..8266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 256,
            column: 17,
            span: 8267..8268,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 256,
            column: 18,
            span: 8268..8269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 256,
            column: 23,
            span: 8269..8274,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 256,
            column: 24,
            span: 8274..8275,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 2 3; pushint 10; return 2\"",
        ),
        position: Position {
            line: 256,
            column: 62,
            span: 8275..8313,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 256,
            column: 63,
            span: 8313..8314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "O",
        ),
        position: Position {
            line: 256,
            column: 65,
            span: 8315..8316,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 256,
            column: 66,
            span: 8316..8317,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 256,
            column: 67,
            span: 8316..8318,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 256,
            column: 68,
            span: 8318..8319,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 256,
            column: 69,
            span: 8319..8320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "O",
        ),
        position: Position {
            line: 256,
            column: 71,
            span: 8321..8322,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 256,
            column: 72,
            span: 8322..8323,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 256,
            column: 73,
            span: 8322..8324,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 256,
            column: 74,
            span: 8324..8325,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 256,
            column: 75,
            span: 8325..8326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 257,
            column: 9,
            span: 8329..8335,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 10,
            span: 8335..8336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 257,
            column: 11,
            span: 8336..8337,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 257,
            column: 14,
            span: 8338..8340,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 257,
            column: 19,
            span: 8341..8345,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 257,
            column: 23,
            span: 8346..8349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 257,
            column: 25,
            span: 8350..8351,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 257,
            column: 28,
            span: 8352..8354,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 257,
            column: 31,
            span: 8354..8357,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 32,
            span: 8357..8358,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 258,
            column: 8,
            span: 8361..8366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 258,
            column: 10,
            span: 8367..8368,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 258,
            column: 11,
            span: 8368..8369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 258,
            column: 13,
            span: 8370..8371,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 258,
            column: 15,
            span: 8372..8373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 258,
            column: 17,
            span: 8374..8375,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 258,
            column: 18,
            span: 8375..8376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 258,
            column: 23,
            span: 8376..8381,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 24,
            span: 8381..8382,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LE 2 3; pushint 10; return 2\"",
        ),
        position: Position {
            line: 258,
            column: 62,
            span: 8382..8420,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 258,
            column: 63,
            span: 8420..8421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "O",
        ),
        position: Position {
            line: 258,
            column: 65,
            span: 8422..8423,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 66,
            span: 8423..8424,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 258,
            column: 67,
            span: 8423..8425,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 68,
            span: 8425..8426,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 258,
            column: 69,
            span: 8426..8427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "O",
        ),
        position: Position {
            line: 258,
            column: 71,
            span: 8428..8429,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 72,
            span: 8429..8430,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 258,
            column: 73,
            span: 8429..8431,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 74,
            span: 8431..8432,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 75,
            span: 8432..8433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 259,
            column: 9,
            span: 8436..8442,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 10,
            span: 8442..8443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 259,
            column: 11,
            span: 8443..8444,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 259,
            column: 14,
            span: 8445..8447,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 259,
            column: 20,
            span: 8448..8453,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 259,
            column: 24,
            span: 8454..8457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 259,
            column: 26,
            span: 8458..8459,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 259,
            column: 29,
            span: 8460..8462,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 259,
            column: 32,
            span: 8462..8465,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 33,
            span: 8465..8466,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 260,
            column: 8,
            span: 8469..8474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 260,
            column: 10,
            span: 8475..8476,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 260,
            column: 11,
            span: 8476..8477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 260,
            column: 13,
            span: 8478..8479,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 260,
            column: 15,
            span: 8480..8481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 260,
            column: 17,
            span: 8482..8483,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 260,
            column: 18,
            span: 8483..8484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 260,
            column: 23,
            span: 8484..8489,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 24,
            span: 8489..8490,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 2 3; pushint 10; return 2\"",
        ),
        position: Position {
            line: 260,
            column: 62,
            span: 8490..8528,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 260,
            column: 63,
            span: 8528..8529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "O",
        ),
        position: Position {
            line: 260,
            column: 65,
            span: 8530..8531,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 66,
            span: 8531..8532,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 260,
            column: 67,
            span: 8531..8533,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 68,
            span: 8533..8534,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 260,
            column: 69,
            span: 8534..8535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "O",
        ),
        position: Position {
            line: 260,
            column: 71,
            span: 8536..8537,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 72,
            span: 8537..8538,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 260,
            column: 73,
            span: 8537..8539,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 74,
            span: 8539..8540,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 75,
            span: 8540..8541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 261,
            column: 9,
            span: 8544..8550,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 10,
            span: 8550..8551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 261,
            column: 11,
            span: 8551..8552,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 261,
            column: 14,
            span: 8553..8555,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 261,
            column: 19,
            span: 8556..8560,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 261,
            column: 23,
            span: 8561..8564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 261,
            column: 25,
            span: 8565..8566,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 261,
            column: 28,
            span: 8567..8569,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 261,
            column: 31,
            span: 8569..8572,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 32,
            span: 8572..8573,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 262,
            column: 0,
            span: 8574..8577,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 265,
            column: 6,
            span: 8597..8602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 265,
            column: 8,
            span: 8603..8604,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 265,
            column: 10,
            span: 8605..8606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 265,
            column: 23,
            span: 8607..8619,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 265,
            column: 24,
            span: 8619..8620,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 265,
            column: 25,
            span: 8620..8621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 265,
            column: 26,
            span: 8621..8622,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 265,
            column: 28,
            span: 8623..8624,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 265,
            column: 31,
            span: 8624..8627,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 265,
            column: 32,
            span: 8627..8628,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 265,
            column: 33,
            span: 8628..8629,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 265,
            column: 35,
            span: 8630..8631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        position: Position {
            line: 265,
            column: 40,
            span: 8631..8636,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 265,
            column: 42,
            span: 8637..8638,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 265,
            column: 51,
            span: 8639..8647,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 265,
            column: 53,
            span: 8648..8649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 265,
            column: 54,
            span: 8649..8650,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 265,
            column: 55,
            span: 8650..8651,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 265,
            column: 62,
            span: 8652..8658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 265,
            column: 64,
            span: 8659..8660,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 265,
            column: 65,
            span: 8660..8661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 265,
            column: 66,
            span: 8661..8662,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 265,
            column: 70,
            span: 8663..8666,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 265,
            column: 71,
            span: 8666..8667,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 265,
            column: 72,
            span: 8667..8668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 266,
            column: 2,
            span: 8669..8670,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 266,
            column: 3,
            span: 8670..8671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 266,
            column: 4,
            span: 8671..8672,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 266,
            column: 5,
            span: 8672..8673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 266,
            column: 6,
            span: 8673..8674,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 266,
            column: 8,
            span: 8675..8676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 266,
            column: 10,
            span: 8677..8678,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 266,
            column: 11,
            span: 8678..8679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 266,
            column: 16,
            span: 8679..8684,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 266,
            column: 17,
            span: 8684..8685,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n   len 2;\n   Llen 2;\n   objsize 2;\n   return 3\n]]",
        ),
        position: Position {
            line: 271,
            column: 3,
            span: 8685..8737,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 271,
            column: 4,
            span: 8737..8738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 271,
            column: 6,
            span: 8739..8740,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 7,
            span: 8740..8741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 272,
            column: 7,
            span: 8742..8748,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 8,
            span: 8748..8749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 272,
            column: 9,
            span: 8749..8750,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 272,
            column: 12,
            span: 8751..8753,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 272,
            column: 15,
            span: 8753..8756,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 272,
            column: 19,
            span: 8757..8760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 272,
            column: 21,
            span: 8761..8762,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 272,
            column: 24,
            span: 8763..8765,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 272,
            column: 27,
            span: 8765..8768,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 272,
            column: 31,
            span: 8769..8772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 272,
            column: 33,
            span: 8773..8774,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 272,
            column: 36,
            span: 8775..8777,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 272,
            column: 38,
            span: 8777..8779,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 272,
            column: 39,
            span: 8779..8780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 274,
            column: 2,
            span: 8782..8783,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 274,
            column: 3,
            span: 8783..8784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 274,
            column: 4,
            span: 8784..8785,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 274,
            column: 6,
            span: 8786..8787,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"234\"",
        ),
        position: Position {
            line: 274,
            column: 12,
            span: 8788..8793,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 274,
            column: 13,
            span: 8793..8794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 274,
            column: 15,
            span: 8795..8796,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 274,
            column: 16,
            span: 8796..8797,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 274,
            column: 17,
            span: 8796..8798,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 274,
            column: 18,
            span: 8798..8799,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 274,
            column: 20,
            span: 8800..8801,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 274,
            column: 0,
            span: 8801..8804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 275,
            column: 2,
            span: 8805..8806,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 275,
            column: 3,
            span: 8806..8807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 275,
            column: 4,
            span: 8807..8808,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 275,
            column: 5,
            span: 8808..8809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 275,
            column: 6,
            span: 8809..8810,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 275,
            column: 8,
            span: 8811..8812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 275,
            column: 10,
            span: 8813..8814,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 275,
            column: 11,
            span: 8814..8815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 275,
            column: 16,
            span: 8815..8820,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 275,
            column: 17,
            span: 8820..8821,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n   len 2;\n   Llen 2;\n   objsize 2;\n   return 3\n]]",
        ),
        position: Position {
            line: 280,
            column: 3,
            span: 8821..8873,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 280,
            column: 4,
            span: 8873..8874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 280,
            column: 6,
            span: 8875..8876,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 280,
            column: 7,
            span: 8876..8877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 281,
            column: 7,
            span: 8878..8884,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 8,
            span: 8884..8885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 281,
            column: 9,
            span: 8885..8886,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 12,
            span: 8887..8889,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"234\"",
        ),
        position: Position {
            line: 281,
            column: 18,
            span: 8890..8895,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 281,
            column: 22,
            span: 8896..8899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 281,
            column: 24,
            span: 8900..8901,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 27,
            span: 8902..8904,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "234",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 281,
            column: 31,
            span: 8904..8908,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 281,
            column: 35,
            span: 8909..8912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 281,
            column: 37,
            span: 8913..8914,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 40,
            span: 8915..8917,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 281,
            column: 42,
            span: 8917..8919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 43,
            span: 8919..8920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 283,
            column: 2,
            span: 8922..8923,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 283,
            column: 3,
            span: 8923..8924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 283,
            column: 4,
            span: 8924..8925,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 283,
            column: 6,
            span: 8926..8927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 283,
            column: 12,
            span: 8928..8933,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 283,
            column: 13,
            span: 8933..8934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 283,
            column: 15,
            span: 8935..8936,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 283,
            column: 16,
            span: 8936..8937,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 283,
            column: 17,
            span: 8936..8938,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 283,
            column: 18,
            span: 8938..8939,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 283,
            column: 20,
            span: 8940..8941,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 283,
            column: 0,
            span: 8941..8944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 284,
            column: 2,
            span: 8945..8946,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 284,
            column: 3,
            span: 8946..8947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 284,
            column: 4,
            span: 8947..8948,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 284,
            column: 6,
            span: 8949..8950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 284,
            column: 8,
            span: 8951..8952,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 284,
            column: 9,
            span: 8952..8953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 284,
            column: 14,
            span: 8953..8958,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 284,
            column: 15,
            span: 8958..8959,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n   len 2;\n   objsize 2;\n   return 2\n]]",
        ),
        position: Position {
            line: 288,
            column: 3,
            span: 8959..9000,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 288,
            column: 4,
            span: 9000..9001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 288,
            column: 6,
            span: 9002..9003,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 288,
            column: 7,
            span: 9003..9004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 289,
            column: 7,
            span: 9005..9011,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 8,
            span: 9011..9012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 289,
            column: 9,
            span: 9012..9013,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 289,
            column: 12,
            span: 9014..9016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 289,
            column: 18,
            span: 9017..9022,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 289,
            column: 22,
            span: 9023..9026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 289,
            column: 24,
            span: 9027..9028,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 289,
            column: 27,
            span: 9029..9031,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 289,
            column: 29,
            span: 9031..9033,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 30,
            span: 9033..9034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 294,
            column: 2,
            span: 9058..9059,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 294,
            column: 4,
            span: 9060..9061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 294,
            column: 17,
            span: 9062..9074,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 18,
            span: 9074..9075,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 294,
            column: 19,
            span: 9075..9076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 294,
            column: 20,
            span: 9076..9077,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 294,
            column: 21,
            span: 9077..9078,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"u\"",
        ),
        position: Position {
            line: 294,
            column: 24,
            span: 9078..9081,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 294,
            column: 25,
            span: 9081..9082,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 294,
            column: 26,
            span: 9082..9083,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 294,
            column: 28,
            span: 9084..9085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__concat",
        ),
        position: Position {
            line: 294,
            column: 36,
            span: 9085..9093,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 294,
            column: 38,
            span: 9094..9095,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 294,
            column: 47,
            span: 9096..9104,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 49,
            span: 9105..9106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 294,
            column: 50,
            span: 9106..9107,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 294,
            column: 51,
            span: 9107..9108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 294,
            column: 52,
            span: 9108..9109,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 53,
            span: 9109..9110,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 294,
            column: 60,
            span: 9111..9117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 294,
            column: 62,
            span: 9118..9119,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 294,
            column: 63,
            span: 9119..9120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 294,
            column: 64,
            span: 9120..9121,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 294,
            column: 66,
            span: 9121..9123,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        position: Position {
            line: 294,
            column: 69,
            span: 9123..9126,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 294,
            column: 71,
            span: 9126..9128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 294,
            column: 72,
            span: 9128..9129,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 294,
            column: 73,
            span: 9129..9130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 294,
            column: 74,
            span: 9130..9131,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 294,
            column: 78,
            span: 9132..9135,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 294,
            column: 79,
            span: 9135..9136,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 80,
            span: 9136..9137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 295,
            column: 2,
            span: 9138..9139,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 295,
            column: 3,
            span: 9139..9140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 295,
            column: 4,
            span: 9140..9141,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 295,
            column: 6,
            span: 9142..9143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 295,
            column: 8,
            span: 9144..9145,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 295,
            column: 9,
            span: 9145..9146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 295,
            column: 14,
            span: 9146..9151,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 295,
            column: 15,
            span: 9151..9152,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  pushnum 5\n  pushvalue 2;\n  pushvalue 2;\n  concat 2;\n  pushvalue -2;\n  return 2;\n]]",
        ),
        position: Position {
            line: 302,
            column: 3,
            span: 9152..9239,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 4,
            span: 9239..9240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 302,
            column: 6,
            span: 9241..9242,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 7,
            span: 9242..9243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 302,
            column: 9,
            span: 9244..9245,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 10,
            span: 9245..9246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 303,
            column: 7,
            span: 9247..9253,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 8,
            span: 9253..9254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 303,
            column: 9,
            span: 9254..9255,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 303,
            column: 12,
            span: 9256..9258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 303,
            column: 14,
            span: 9259..9260,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 303,
            column: 16,
            span: 9260..9262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 303,
            column: 17,
            span: 9262..9263,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 303,
            column: 21,
            span: 9264..9267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 303,
            column: 23,
            span: 9268..9269,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 303,
            column: 26,
            span: 9270..9272,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 303,
            column: 28,
            span: 9272..9274,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 29,
            span: 9274..9275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 306,
            column: 7,
            span: 9303..9309,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 306,
            column: 8,
            span: 9309..9310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 306,
            column: 9,
            span: 9310..9311,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 306,
            column: 10,
            span: 9311..9312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 306,
            column: 15,
            span: 9312..9317,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 306,
            column: 16,
            span: 9317..9318,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat 0; return 1\"",
        ),
        position: Position {
            line: 306,
            column: 36,
            span: 9318..9338,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 306,
            column: 37,
            span: 9338..9339,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 306,
            column: 40,
            span: 9340..9342,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 306,
            column: 43,
            span: 9343..9345,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 306,
            column: 44,
            span: 9345..9346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 309,
            column: 7,
            span: 9373..9379,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 8,
            span: 9379..9380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 309,
            column: 9,
            span: 9380..9381,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 309,
            column: 10,
            span: 9381..9382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 309,
            column: 15,
            span: 9382..9387,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 16,
            span: 9387..9388,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat 1; return 1\"",
        ),
        position: Position {
            line: 309,
            column: 36,
            span: 9388..9408,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 309,
            column: 37,
            span: 9408..9409,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 309,
            column: 44,
            span: 9410..9416,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 45,
            span: 9416..9417,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 309,
            column: 48,
            span: 9418..9420,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 309,
            column: 55,
            span: 9421..9427,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 56,
            span: 9427..9428,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 315,
            column: 9,
            span: 9451..9459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 315,
            column: 11,
            span: 9460..9461,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 12,
            span: 9461..9462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 315,
            column: 13,
            span: 9462..9463,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 14,
            span: 9463..9464,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 315,
            column: 21,
            span: 9465..9471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 315,
            column: 23,
            span: 9472..9473,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 315,
            column: 27,
            span: 9474..9477,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 315,
            column: 29,
            span: 9477..9479,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 315,
            column: 32,
            span: 9480..9482,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 315,
            column: 34,
            span: 9482..9484,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 315,
            column: 0,
            span: 9485..9488,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 317,
            column: 9,
            span: 9490..9498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 317,
            column: 15,
            span: 9499..9504,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 17,
            span: 9505..9506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 317,
            column: 18,
            span: 9506..9507,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 317,
            column: 19,
            span: 9507..9508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 317,
            column: 21,
            span: 9509..9510,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 22,
            span: 9510..9511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 318,
            column: 4,
            span: 9514..9515,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 318,
            column: 6,
            span: 9516..9517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 318,
            column: 8,
            span: 9518..9519,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 318,
            column: 11,
            span: 9520..9522,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 318,
            column: 0,
            span: 9522..9524,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 319,
            column: 8,
            span: 9527..9532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 319,
            column: 13,
            span: 9533..9537,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 319,
            column: 15,
            span: 9538..9539,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    isnumber %d;\n    isstring %d;\n    isfunction %d;\n    iscfunction %d;\n    istable %d;\n    isuserdata %d;\n    isnil %d;\n    isnull %d;\n    return 8\n  ]]",
        ),
        position: Position {
            line: 329,
            column: 5,
            span: 9540..9697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 330,
            column: 7,
            span: 9700..9704,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 330,
            column: 9,
            span: 9705..9706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 330,
            column: 16,
            span: 9707..9713,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 330,
            column: 17,
            span: 9713..9714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 330,
            column: 23,
            span: 9714..9720,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 330,
            column: 24,
            span: 9720..9721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 330,
            column: 28,
            span: 9721..9725,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 29,
            span: 9725..9726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 330,
            column: 31,
            span: 9727..9728,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 32,
            span: 9728..9729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 330,
            column: 34,
            span: 9730..9731,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 35,
            span: 9731..9732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 330,
            column: 37,
            span: 9733..9734,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 38,
            span: 9734..9735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 330,
            column: 40,
            span: 9736..9737,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 41,
            span: 9737..9738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 330,
            column: 43,
            span: 9739..9740,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 44,
            span: 9740..9741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 330,
            column: 46,
            span: 9742..9743,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 47,
            span: 9743..9744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 330,
            column: 49,
            span: 9745..9746,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 50,
            span: 9746..9747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 330,
            column: 52,
            span: 9748..9749,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 330,
            column: 53,
            span: 9749..9750,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 331,
            column: 8,
            span: 9753..9758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 331,
            column: 10,
            span: 9759..9760,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 11,
            span: 9760..9761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 331,
            column: 12,
            span: 9761..9762,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 13,
            span: 9762..9763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 331,
            column: 14,
            span: 9763..9764,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 15,
            span: 9764..9765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 331,
            column: 16,
            span: 9765..9766,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 17,
            span: 9766..9767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 331,
            column: 18,
            span: 9767..9768,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 19,
            span: 9768..9769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 331,
            column: 20,
            span: 9769..9770,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 21,
            span: 9770..9771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 331,
            column: 22,
            span: 9771..9772,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 23,
            span: 9772..9773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 331,
            column: 24,
            span: 9773..9774,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 331,
            column: 26,
            span: 9775..9776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 331,
            column: 28,
            span: 9777..9778,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 331,
            column: 29,
            span: 9778..9779,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 331,
            column: 34,
            span: 9779..9784,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 35,
            span: 9784..9785,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 331,
            column: 39,
            span: 9785..9789,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 40,
            span: 9789..9790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 331,
            column: 42,
            span: 9791..9792,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 43,
            span: 9792..9793,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 332,
            column: 9,
            span: 9796..9802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 332,
            column: 11,
            span: 9803..9804,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 12,
            span: 9804..9805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 332,
            column: 13,
            span: 9805..9806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 14,
            span: 9806..9807,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 332,
            column: 15,
            span: 9807..9808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 332,
            column: 16,
            span: 9808..9809,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 17,
            span: 9809..9810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 332,
            column: 18,
            span: 9810..9811,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 19,
            span: 9811..9812,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 332,
            column: 20,
            span: 9812..9813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 332,
            column: 21,
            span: 9813..9814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 22,
            span: 9814..9815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 332,
            column: 23,
            span: 9815..9816,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 24,
            span: 9816..9817,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 332,
            column: 25,
            span: 9817..9818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 332,
            column: 26,
            span: 9818..9819,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 27,
            span: 9819..9820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 332,
            column: 28,
            span: 9820..9821,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 29,
            span: 9821..9822,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 332,
            column: 30,
            span: 9822..9823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 332,
            column: 31,
            span: 9823..9824,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 32,
            span: 9824..9825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 332,
            column: 33,
            span: 9825..9826,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 34,
            span: 9826..9827,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 332,
            column: 35,
            span: 9827..9828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 332,
            column: 36,
            span: 9828..9829,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 37,
            span: 9829..9830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 332,
            column: 38,
            span: 9830..9831,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 39,
            span: 9831..9832,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 332,
            column: 40,
            span: 9832..9833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 332,
            column: 41,
            span: 9833..9834,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 42,
            span: 9834..9835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 332,
            column: 43,
            span: 9835..9836,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 44,
            span: 9836..9837,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 332,
            column: 45,
            span: 9837..9838,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 46,
            span: 9838..9839,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 332,
            column: 49,
            span: 9838..9842,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 332,
            column: 50,
            span: 9842..9843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 332,
            column: 51,
            span: 9843..9844,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 52,
            span: 9844..9845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 332,
            column: 53,
            span: 9845..9846,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 54,
            span: 9846..9847,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 55,
            span: 9847..9848,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 333,
            column: 0,
            span: 9849..9852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 335,
            column: 7,
            span: 9854..9860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 8,
            span: 9860..9861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 335,
            column: 13,
            span: 9861..9866,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 14,
            span: 9866..9867,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 335,
            column: 15,
            span: 9866..9868,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 16,
            span: 9868..9869,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 335,
            column: 19,
            span: 9870..9872,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 335,
            column: 21,
            span: 9872..9874,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 22,
            span: 9874..9875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 336,
            column: 7,
            span: 9876..9882,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 8,
            span: 9882..9883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 336,
            column: 13,
            span: 9883..9888,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 14,
            span: 9888..9889,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 336,
            column: 19,
            span: 9889..9894,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 20,
            span: 9894..9895,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 336,
            column: 23,
            span: 9896..9898,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 336,
            column: 25,
            span: 9898..9900,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 26,
            span: 9900..9901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 337,
            column: 7,
            span: 9902..9908,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 8,
            span: 9908..9909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 337,
            column: 13,
            span: 9909..9914,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 14,
            span: 9914..9915,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'32'",
        ),
        position: Position {
            line: 337,
            column: 18,
            span: 9915..9919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 19,
            span: 9919..9920,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 337,
            column: 22,
            span: 9921..9923,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 337,
            column: 24,
            span: 9923..9925,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 25,
            span: 9925..9926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 338,
            column: 7,
            span: 9927..9933,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 338,
            column: 8,
            span: 9933..9934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 338,
            column: 13,
            span: 9934..9939,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 338,
            column: 14,
            span: 9939..9940,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 338,
            column: 15,
            span: 9940..9941,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 338,
            column: 16,
            span: 9941..9942,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 338,
            column: 17,
            span: 9942..9943,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 338,
            column: 20,
            span: 9944..9946,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 338,
            column: 22,
            span: 9946..9948,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 338,
            column: 23,
            span: 9948..9949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 339,
            column: 7,
            span: 9950..9956,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 339,
            column: 8,
            span: 9956..9957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 339,
            column: 13,
            span: 9957..9962,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 339,
            column: 14,
            span: 9962..9963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 339,
            column: 19,
            span: 9963..9968,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 339,
            column: 20,
            span: 9968..9969,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 339,
            column: 23,
            span: 9970..9972,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 339,
            column: 25,
            span: 9972..9974,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 339,
            column: 26,
            span: 9974..9975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 340,
            column: 7,
            span: 9976..9982,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 8,
            span: 9982..9983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 340,
            column: 13,
            span: 9983..9988,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 14,
            span: 9988..9989,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 340,
            column: 22,
            span: 9989..9997,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 24,
            span: 9998..9999,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 25,
            span: 9999..10000,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 340,
            column: 29,
            span: 10001..10004,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 30,
            span: 10004..10005,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 340,
            column: 33,
            span: 10006..10008,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 35,
            span: 10008..10010,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 36,
            span: 10010..10011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 341,
            column: 7,
            span: 10012..10018,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 8,
            span: 10018..10019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 341,
            column: 13,
            span: 10019..10024,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 14,
            span: 10024..10025,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 341,
            column: 17,
            span: 10025..10028,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 18,
            span: 10028..10029,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 341,
            column: 21,
            span: 10030..10032,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 341,
            column: 23,
            span: 10032..10034,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 24,
            span: 10034..10035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 342,
            column: 7,
            span: 10036..10042,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 342,
            column: 8,
            span: 10042..10043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 342,
            column: 13,
            span: 10043..10048,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 342,
            column: 14,
            span: 10048..10049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 342,
            column: 16,
            span: 10049..10051,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 342,
            column: 17,
            span: 10051..10052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        position: Position {
            line: 342,
            column: 22,
            span: 10052..10057,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 342,
            column: 23,
            span: 10057..10058,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 342,
            column: 26,
            span: 10059..10061,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 342,
            column: 28,
            span: 10061..10063,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 342,
            column: 29,
            span: 10063..10064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 343,
            column: 7,
            span: 10065..10071,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 8,
            span: 10071..10072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 343,
            column: 13,
            span: 10072..10077,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 14,
            span: 10077..10078,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 343,
            column: 17,
            span: 10078..10081,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 343,
            column: 18,
            span: 10081..10082,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 343,
            column: 21,
            span: 10082..10085,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 343,
            column: 22,
            span: 10085..10086,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 343,
            column: 25,
            span: 10087..10089,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 343,
            column: 29,
            span: 10089..10093,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 343,
            column: 30,
            span: 10093..10094,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 348,
            column: 9,
            span: 10119..10127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 348,
            column: 12,
            span: 10128..10130,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 348,
            column: 14,
            span: 10131..10132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 348,
            column: 15,
            span: 10132..10133,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 348,
            column: 16,
            span: 10133..10134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 348,
            column: 18,
            span: 10135..10136,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 348,
            column: 19,
            span: 10136..10137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 348,
            column: 21,
            span: 10138..10139,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 348,
            column: 22,
            span: 10139..10140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 349,
            column: 4,
            span: 10143..10144,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 349,
            column: 6,
            span: 10145..10146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 349,
            column: 8,
            span: 10147..10148,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 349,
            column: 11,
            span: 10149..10151,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 349,
            column: 0,
            span: 10151..10153,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 350,
            column: 9,
            span: 10156..10162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 350,
            column: 11,
            span: 10163..10164,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 350,
            column: 12,
            span: 10164..10165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 350,
            column: 17,
            span: 10165..10170,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 350,
            column: 18,
            span: 10170..10171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 350,
            column: 24,
            span: 10171..10177,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 350,
            column: 25,
            span: 10177..10178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 350,
            column: 31,
            span: 10178..10184,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 350,
            column: 32,
            span: 10184..10185,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s %d; return 1\"",
        ),
        position: Position {
            line: 350,
            column: 49,
            span: 10185..10202,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 350,
            column: 50,
            span: 10202..10203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 350,
            column: 52,
            span: 10204..10205,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 350,
            column: 53,
            span: 10205..10206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 350,
            column: 55,
            span: 10207..10208,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 350,
            column: 56,
            span: 10208..10209,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 350,
            column: 57,
            span: 10209..10210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 350,
            column: 59,
            span: 10211..10212,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 350,
            column: 60,
            span: 10212..10213,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 351,
            column: 0,
            span: 10214..10217,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 353,
            column: 6,
            span: 10219..10224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        position: Position {
            line: 353,
            column: 11,
            span: 10225..10229,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 353,
            column: 13,
            span: 10230..10231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 353,
            column: 15,
            span: 10232..10233,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 353,
            column: 16,
            span: 10233..10234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 353,
            column: 28,
            span: 10234..10246,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 353,
            column: 29,
            span: 10246..10247,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 353,
            column: 30,
            span: 10246..10248,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 353,
            column: 31,
            span: 10248..10249,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 354,
            column: 6,
            span: 10250..10255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hfunc",
        ),
        position: Position {
            line: 354,
            column: 12,
            span: 10256..10261,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 354,
            column: 14,
            span: 10262..10263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 354,
            column: 21,
            span: 10264..10270,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 354,
            column: 22,
            span: 10270..10271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 354,
            column: 28,
            span: 10271..10277,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 354,
            column: 29,
            span: 10277..10278,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 354,
            column: 31,
            span: 10278..10280,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 354,
            column: 32,
            span: 10280..10281,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 354,
            column: 35,
            span: 10282..10284,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 354,
            column: 36,
            span: 10284..10285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 355,
            column: 7,
            span: 10329..10335,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 355,
            column: 8,
            span: 10335..10336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 355,
            column: 13,
            span: 10336..10341,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 355,
            column: 14,
            span: 10341..10342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 355,
            column: 24,
            span: 10342..10352,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 355,
            column: 25,
            span: 10352..10353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hfunc",
        ),
        position: Position {
            line: 355,
            column: 30,
            span: 10353..10358,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 355,
            column: 31,
            span: 10358..10359,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 355,
            column: 33,
            span: 10359..10361,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 355,
            column: 34,
            span: 10361..10362,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 355,
            column: 35,
            span: 10362..10363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 356,
            column: 7,
            span: 10364..10370,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 356,
            column: 8,
            span: 10370..10371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 356,
            column: 10,
            span: 10371..10373,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 356,
            column: 11,
            span: 10373..10374,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        position: Position {
            line: 356,
            column: 21,
            span: 10374..10384,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 356,
            column: 22,
            span: 10384..10385,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 356,
            column: 24,
            span: 10386..10387,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 356,
            column: 25,
            span: 10387..10388,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 356,
            column: 26,
            span: 10388..10389,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 356,
            column: 29,
            span: 10390..10392,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 356,
            column: 33,
            span: 10393..10396,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 356,
            column: 34,
            span: 10396..10397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 357,
            column: 7,
            span: 10398..10404,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 357,
            column: 8,
            span: 10404..10405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 357,
            column: 10,
            span: 10405..10407,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 357,
            column: 11,
            span: 10407..10408,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        position: Position {
            line: 357,
            column: 21,
            span: 10408..10418,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 357,
            column: 22,
            span: 10418..10419,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 357,
            column: 28,
            span: 10420..10425,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 357,
            column: 29,
            span: 10425..10426,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 357,
            column: 32,
            span: 10427..10429,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 357,
            column: 38,
            span: 10430..10435,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 357,
            column: 39,
            span: 10435..10436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 358,
            column: 7,
            span: 10437..10443,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 358,
            column: 8,
            span: 10443..10444,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 358,
            column: 10,
            span: 10444..10446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 358,
            column: 11,
            span: 10446..10447,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        position: Position {
            line: 358,
            column: 21,
            span: 10447..10457,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 358,
            column: 22,
            span: 10457..10458,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 358,
            column: 25,
            span: 10458..10461,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 358,
            column: 26,
            span: 10461..10462,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 358,
            column: 29,
            span: 10463..10465,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"12\"",
        ),
        position: Position {
            line: 358,
            column: 34,
            span: 10466..10470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 358,
            column: 35,
            span: 10470..10471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 359,
            column: 7,
            span: 10472..10478,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 8,
            span: 10478..10479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 359,
            column: 10,
            span: 10479..10481,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 11,
            span: 10481..10482,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        position: Position {
            line: 359,
            column: 21,
            span: 10482..10492,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 359,
            column: 22,
            span: 10492..10493,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 359,
            column: 25,
            span: 10493..10496,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 359,
            column: 26,
            span: 10496..10497,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 359,
            column: 28,
            span: 10497..10499,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 29,
            span: 10499..10500,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 359,
            column: 32,
            span: 10501..10503,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 359,
            column: 36,
            span: 10504..10507,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 37,
            span: 10507..10508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 360,
            column: 7,
            span: 10509..10515,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 8,
            span: 10515..10516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 360,
            column: 10,
            span: 10516..10518,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 11,
            span: 10518..10519,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 360,
            column: 20,
            span: 10519..10528,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 360,
            column: 21,
            span: 10528..10529,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 360,
            column: 23,
            span: 10530..10531,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 360,
            column: 24,
            span: 10531..10532,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 25,
            span: 10532..10533,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 360,
            column: 28,
            span: 10534..10536,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 360,
            column: 30,
            span: 10536..10538,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 31,
            span: 10538..10539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 361,
            column: 7,
            span: 10540..10546,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 8,
            span: 10546..10547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 361,
            column: 10,
            span: 10547..10549,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 11,
            span: 10549..10550,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 361,
            column: 20,
            span: 10550..10559,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 361,
            column: 21,
            span: 10559..10560,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 361,
            column: 23,
            span: 10561..10562,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 361,
            column: 24,
            span: 10561..10563,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 361,
            column: 25,
            span: 10563..10564,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 361,
            column: 26,
            span: 10563..10565,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 361,
            column: 27,
            span: 10565..10566,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 361,
            column: 28,
            span: 10565..10567,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 361,
            column: 29,
            span: 10567..10568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 30,
            span: 10568..10569,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 361,
            column: 33,
            span: 10570..10572,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 361,
            column: 35,
            span: 10572..10574,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 36,
            span: 10574..10575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 362,
            column: 7,
            span: 10576..10582,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 8,
            span: 10582..10583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 362,
            column: 10,
            span: 10583..10585,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 11,
            span: 10585..10586,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 362,
            column: 20,
            span: 10586..10595,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 362,
            column: 21,
            span: 10595..10596,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\0\\0a\"",
        ),
        position: Position {
            line: 362,
            column: 32,
            span: 10597..10607,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 33,
            span: 10607..10608,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 362,
            column: 36,
            span: 10609..10611,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 362,
            column: 38,
            span: 10611..10613,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 39,
            span: 10613..10614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 363,
            column: 7,
            span: 10615..10621,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 363,
            column: 8,
            span: 10621..10622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 363,
            column: 10,
            span: 10622..10624,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 363,
            column: 11,
            span: 10624..10625,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 363,
            column: 20,
            span: 10625..10634,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 363,
            column: 21,
            span: 10634..10635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 363,
            column: 23,
            span: 10636..10637,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 363,
            column: 24,
            span: 10637..10638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 363,
            column: 35,
            span: 10638..10649,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 363,
            column: 36,
            span: 10649..10650,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 363,
            column: 37,
            span: 10649..10651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 363,
            column: 38,
            span: 10651..10652,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 363,
            column: 39,
            span: 10652..10653,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 363,
            column: 42,
            span: 10654..10656,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 363,
            column: 44,
            span: 10656..10658,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 363,
            column: 45,
            span: 10658..10659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 364,
            column: 7,
            span: 10660..10666,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 364,
            column: 8,
            span: 10666..10667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 364,
            column: 10,
            span: 10667..10669,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 364,
            column: 11,
            span: 10669..10670,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 364,
            column: 20,
            span: 10670..10679,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 364,
            column: 21,
            span: 10679..10680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 364,
            column: 23,
            span: 10681..10682,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 364,
            column: 24,
            span: 10682..10683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 364,
            column: 35,
            span: 10683..10694,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 364,
            column: 36,
            span: 10694..10695,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 364,
            column: 39,
            span: 10694..10698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 364,
            column: 40,
            span: 10698..10699,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 364,
            column: 41,
            span: 10699..10700,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 364,
            column: 44,
            span: 10701..10703,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 364,
            column: 48,
            span: 10703..10707,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 364,
            column: 49,
            span: 10707..10708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 365,
            column: 7,
            span: 10709..10715,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 365,
            column: 8,
            span: 10715..10716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 365,
            column: 10,
            span: 10716..10718,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 365,
            column: 11,
            span: 10718..10719,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 365,
            column: 20,
            span: 10719..10728,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 365,
            column: 21,
            span: 10728..10729,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "124",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 365,
            column: 25,
            span: 10729..10733,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 365,
            column: 26,
            span: 10733..10734,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 365,
            column: 29,
            span: 10735..10737,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 365,
            column: 31,
            span: 10737..10739,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 365,
            column: 32,
            span: 10739..10740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 366,
            column: 7,
            span: 10741..10747,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 366,
            column: 8,
            span: 10747..10748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 366,
            column: 10,
            span: 10748..10750,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 366,
            column: 11,
            span: 10750..10751,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 366,
            column: 20,
            span: 10751..10760,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 366,
            column: 21,
            span: 10760..10761,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 366,
            column: 26,
            span: 10762..10766,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 366,
            column: 27,
            span: 10766..10767,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 366,
            column: 30,
            span: 10768..10770,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 366,
            column: 32,
            span: 10770..10772,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 366,
            column: 33,
            span: 10772..10773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 367,
            column: 7,
            span: 10774..10780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 367,
            column: 8,
            span: 10780..10781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 367,
            column: 10,
            span: 10781..10783,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 367,
            column: 11,
            span: 10783..10784,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        position: Position {
            line: 367,
            column: 21,
            span: 10784..10794,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 367,
            column: 22,
            span: 10794..10795,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 367,
            column: 24,
            span: 10796..10797,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 367,
            column: 25,
            span: 10797..10798,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 26,
            span: 10798..10799,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 367,
            column: 29,
            span: 10800..10802,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 367,
            column: 31,
            span: 10802..10804,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 32,
            span: 10804..10805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 368,
            column: 7,
            span: 10806..10812,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 368,
            column: 8,
            span: 10812..10813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 368,
            column: 10,
            span: 10813..10815,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 368,
            column: 11,
            span: 10815..10816,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        position: Position {
            line: 368,
            column: 21,
            span: 10816..10826,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 368,
            column: 22,
            span: 10826..10827,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"12\"",
        ),
        position: Position {
            line: 368,
            column: 27,
            span: 10828..10832,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 368,
            column: 28,
            span: 10832..10833,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 368,
            column: 31,
            span: 10834..10836,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 368,
            column: 34,
            span: 10836..10839,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 368,
            column: 35,
            span: 10839..10840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 369,
            column: 7,
            span: 10841..10847,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 369,
            column: 8,
            span: 10847..10848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 369,
            column: 10,
            span: 10848..10850,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 369,
            column: 11,
            span: 10850..10851,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        position: Position {
            line: 369,
            column: 21,
            span: 10851..10861,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 22,
            span: 10861..10862,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s2\"",
        ),
        position: Position {
            line: 369,
            column: 27,
            span: 10863..10867,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 369,
            column: 28,
            span: 10867..10868,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 369,
            column: 31,
            span: 10869..10871,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 369,
            column: 33,
            span: 10871..10873,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 369,
            column: 34,
            span: 10873..10874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 370,
            column: 7,
            span: 10875..10881,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 370,
            column: 8,
            span: 10881..10882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 370,
            column: 10,
            span: 10882..10884,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 370,
            column: 11,
            span: 10884..10885,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        position: Position {
            line: 370,
            column: 21,
            span: 10885..10895,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 370,
            column: 22,
            span: 10895..10896,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 370,
            column: 24,
            span: 10896..10898,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 370,
            column: 25,
            span: 10898..10899,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 370,
            column: 28,
            span: 10899..10902,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 370,
            column: 29,
            span: 10902..10903,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 370,
            column: 32,
            span: 10904..10906,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 370,
            column: 34,
            span: 10906..10908,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 370,
            column: 35,
            span: 10908..10909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 371,
            column: 7,
            span: 10910..10916,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 371,
            column: 8,
            span: 10916..10917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 371,
            column: 10,
            span: 10917..10919,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 371,
            column: 11,
            span: 10919..10920,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 371,
            column: 22,
            span: 10920..10931,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 371,
            column: 23,
            span: 10931..10932,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 371,
            column: 26,
            span: 10932..10935,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 371,
            column: 27,
            span: 10935..10936,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 371,
            column: 30,
            span: 10937..10939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        position: Position {
            line: 371,
            column: 35,
            span: 10940..10944,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 371,
            column: 36,
            span: 10944..10945,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 372,
            column: 7,
            span: 10946..10952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 372,
            column: 8,
            span: 10952..10953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 372,
            column: 10,
            span: 10953..10955,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 372,
            column: 11,
            span: 10955..10956,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 372,
            column: 22,
            span: 10956..10967,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 372,
            column: 23,
            span: 10967..10968,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 372,
            column: 28,
            span: 10969..10973,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 372,
            column: 29,
            span: 10973..10974,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 372,
            column: 32,
            span: 10975..10977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        position: Position {
            line: 372,
            column: 37,
            span: 10978..10982,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 372,
            column: 38,
            span: 10982..10983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 373,
            column: 7,
            span: 10984..10990,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 373,
            column: 8,
            span: 10990..10991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 373,
            column: 10,
            span: 10991..10993,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 373,
            column: 11,
            span: 10993..10994,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 373,
            column: 22,
            span: 10994..11005,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 373,
            column: 23,
            span: 11005..11006,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 373,
            column: 27,
            span: 11007..11010,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 373,
            column: 28,
            span: 11010..11011,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 373,
            column: 31,
            span: 11012..11014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        position: Position {
            line: 373,
            column: 36,
            span: 11015..11019,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 373,
            column: 37,
            span: 11019..11020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 374,
            column: 7,
            span: 11021..11027,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 374,
            column: 8,
            span: 11027..11028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 374,
            column: 10,
            span: 11028..11030,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 374,
            column: 11,
            span: 11030..11031,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 374,
            column: 22,
            span: 11031..11042,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 374,
            column: 23,
            span: 11042..11043,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 374,
            column: 29,
            span: 11044..11049,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 374,
            column: 30,
            span: 11049..11050,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 374,
            column: 33,
            span: 11051..11053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        position: Position {
            line: 374,
            column: 38,
            span: 11054..11058,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 374,
            column: 39,
            span: 11058..11059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 375,
            column: 7,
            span: 11060..11066,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 375,
            column: 8,
            span: 11066..11067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 375,
            column: 10,
            span: 11067..11069,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 375,
            column: 11,
            span: 11069..11070,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 375,
            column: 22,
            span: 11070..11081,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 375,
            column: 23,
            span: 11081..11082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 375,
            column: 30,
            span: 11083..11089,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 375,
            column: 31,
            span: 11089..11090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 375,
            column: 34,
            span: 11090..11093,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 375,
            column: 35,
            span: 11093..11094,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 375,
            column: 38,
            span: 11094..11097,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 375,
            column: 39,
            span: 11097..11098,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 375,
            column: 42,
            span: 11098..11101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 375,
            column: 43,
            span: 11101..11102,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 375,
            column: 44,
            span: 11102..11103,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 375,
            column: 47,
            span: 11104..11106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 376,
            column: 10,
            span: 11114..11116,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 376,
            column: 11,
            span: 11116..11117,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 376,
            column: 22,
            span: 11117..11128,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 376,
            column: 23,
            span: 11128..11129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 376,
            column: 30,
            span: 11130..11136,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 376,
            column: 31,
            span: 11136..11137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 376,
            column: 34,
            span: 11137..11140,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 376,
            column: 35,
            span: 11140..11141,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 376,
            column: 38,
            span: 11141..11144,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 376,
            column: 39,
            span: 11144..11145,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 376,
            column: 42,
            span: 11145..11148,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 376,
            column: 43,
            span: 11148..11149,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 376,
            column: 44,
            span: 11149..11150,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 376,
            column: 45,
            span: 11150..11151,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 377,
            column: 3,
            span: 11172..11174,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 378,
            column: 8,
            span: 11196..11201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 378,
            column: 11,
            span: 11202..11204,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 378,
            column: 13,
            span: 11205..11206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 378,
            column: 20,
            span: 11207..11213,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 378,
            column: 21,
            span: 11213..11214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 378,
            column: 24,
            span: 11214..11217,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 378,
            column: 25,
            span: 11217..11218,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 378,
            column: 28,
            span: 11218..11221,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 378,
            column: 29,
            span: 11221..11222,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 378,
            column: 33,
            span: 11222..11226,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 378,
            column: 34,
            span: 11226..11227,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 379,
            column: 8,
            span: 11230..11235,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s2",
        ),
        position: Position {
            line: 379,
            column: 11,
            span: 11236..11238,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 379,
            column: 13,
            span: 11239..11240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 379,
            column: 20,
            span: 11241..11247,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 379,
            column: 21,
            span: 11247..11248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 379,
            column: 24,
            span: 11248..11251,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 379,
            column: 25,
            span: 11251..11252,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 379,
            column: 28,
            span: 11252..11255,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 379,
            column: 29,
            span: 11255..11256,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 379,
            column: 33,
            span: 11256..11260,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 379,
            column: 34,
            span: 11260..11261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 380,
            column: 9,
            span: 11264..11270,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 380,
            column: 10,
            span: 11270..11271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 380,
            column: 12,
            span: 11271..11273,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 380,
            column: 13,
            span: 11273..11274,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 380,
            column: 24,
            span: 11274..11285,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 380,
            column: 25,
            span: 11285..11286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 380,
            column: 28,
            span: 11287..11289,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 380,
            column: 29,
            span: 11289..11290,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 380,
            column: 32,
            span: 11291..11293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 380,
            column: 35,
            span: 11294..11296,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 380,
            column: 36,
            span: 11296..11297,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 380,
            column: 47,
            span: 11297..11308,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 380,
            column: 48,
            span: 11308..11309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s2",
        ),
        position: Position {
            line: 380,
            column: 51,
            span: 11310..11312,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 380,
            column: 52,
            span: 11312..11313,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 380,
            column: 53,
            span: 11313..11314,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 381,
            column: 0,
            span: 11315..11318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 382,
            column: 7,
            span: 11319..11325,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 8,
            span: 11325..11326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 382,
            column: 10,
            span: 11326..11328,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 11,
            span: 11328..11329,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 382,
            column: 22,
            span: 11329..11340,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 382,
            column: 23,
            span: 11340..11341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 382,
            column: 25,
            span: 11342..11343,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 382,
            column: 26,
            span: 11343..11344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 382,
            column: 38,
            span: 11344..11356,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 39,
            span: 11356..11357,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 382,
            column: 41,
            span: 11356..11359,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 42,
            span: 11359..11360,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 43,
            span: 11360..11361,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 382,
            column: 46,
            span: 11362..11364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        position: Position {
            line: 382,
            column: 51,
            span: 11365..11369,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 52,
            span: 11369..11370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 383,
            column: 7,
            span: 11371..11377,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 383,
            column: 8,
            span: 11377..11378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 383,
            column: 10,
            span: 11378..11380,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 383,
            column: 11,
            span: 11380..11381,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 383,
            column: 22,
            span: 11381..11392,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 383,
            column: 23,
            span: 11392..11393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 383,
            column: 26,
            span: 11394..11396,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 383,
            column: 27,
            span: 11396..11397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 383,
            column: 31,
            span: 11397..11401,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 383,
            column: 32,
            span: 11401..11402,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 383,
            column: 35,
            span: 11403..11405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        position: Position {
            line: 383,
            column: 40,
            span: 11406..11410,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 383,
            column: 41,
            span: 11410..11411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 384,
            column: 7,
            span: 11442..11448,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 384,
            column: 8,
            span: 11448..11449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 384,
            column: 10,
            span: 11449..11451,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 384,
            column: 11,
            span: 11451..11452,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 384,
            column: 22,
            span: 11452..11463,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 384,
            column: 23,
            span: 11463..11464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hfunc",
        ),
        position: Position {
            line: 384,
            column: 29,
            span: 11465..11470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 384,
            column: 30,
            span: 11470..11471,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 384,
            column: 33,
            span: 11472..11474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        position: Position {
            line: 384,
            column: 38,
            span: 11475..11479,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 384,
            column: 39,
            span: 11479..11480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 385,
            column: 7,
            span: 11510..11516,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 385,
            column: 8,
            span: 11516..11517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 385,
            column: 10,
            span: 11517..11519,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 385,
            column: 11,
            span: 11519..11520,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 385,
            column: 22,
            span: 11520..11531,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 385,
            column: 23,
            span: 11531..11532,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 385,
            column: 32,
            span: 11533..11541,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 385,
            column: 34,
            span: 11542..11543,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 385,
            column: 35,
            span: 11543..11544,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 385,
            column: 39,
            span: 11545..11548,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 385,
            column: 40,
            span: 11548..11549,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 385,
            column: 43,
            span: 11550..11552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        position: Position {
            line: 385,
            column: 48,
            span: 11553..11557,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 385,
            column: 49,
            span: 11557..11558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 386,
            column: 7,
            span: 11577..11583,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 8,
            span: 11583..11584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 386,
            column: 10,
            span: 11584..11586,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 11,
            span: 11586..11587,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 386,
            column: 22,
            span: 11587..11598,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 386,
            column: 23,
            span: 11598..11599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 386,
            column: 26,
            span: 11600..11602,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 386,
            column: 27,
            span: 11602..11603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        position: Position {
            line: 386,
            column: 32,
            span: 11603..11608,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 33,
            span: 11608..11609,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 386,
            column: 36,
            span: 11610..11612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "null",
        ),
        position: Position {
            line: 386,
            column: 41,
            span: 11613..11617,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 42,
            span: 11617..11618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 387,
            column: 7,
            span: 11638..11644,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 387,
            column: 8,
            span: 11644..11645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 387,
            column: 10,
            span: 11645..11647,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 387,
            column: 11,
            span: 11647..11648,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"func2num\"",
        ),
        position: Position {
            line: 387,
            column: 21,
            span: 11648..11658,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 387,
            column: 22,
            span: 11658..11659,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 387,
            column: 25,
            span: 11659..11662,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 387,
            column: 26,
            span: 11662..11663,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 387,
            column: 29,
            span: 11664..11666,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 387,
            column: 31,
            span: 11666..11668,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 387,
            column: 32,
            span: 11668..11669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 388,
            column: 7,
            span: 11670..11676,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 388,
            column: 8,
            span: 11676..11677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 388,
            column: 10,
            span: 11677..11679,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 388,
            column: 11,
            span: 11679..11680,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"func2num\"",
        ),
        position: Position {
            line: 388,
            column: 21,
            span: 11680..11690,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 388,
            column: 22,
            span: 11690..11691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 388,
            column: 24,
            span: 11692..11693,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 388,
            column: 25,
            span: 11693..11694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 388,
            column: 37,
            span: 11694..11706,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 388,
            column: 38,
            span: 11706..11707,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 388,
            column: 40,
            span: 11706..11709,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 388,
            column: 41,
            span: 11709..11710,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 388,
            column: 42,
            span: 11710..11711,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 388,
            column: 45,
            span: 11712..11714,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 388,
            column: 47,
            span: 11714..11716,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 388,
            column: 48,
            span: 11716..11717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 389,
            column: 7,
            span: 11718..11724,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 389,
            column: 8,
            span: 11724..11725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 389,
            column: 10,
            span: 11725..11727,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 389,
            column: 11,
            span: 11727..11728,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"func2num\"",
        ),
        position: Position {
            line: 389,
            column: 21,
            span: 11728..11738,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 389,
            column: 22,
            span: 11738..11739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 389,
            column: 25,
            span: 11740..11742,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 389,
            column: 26,
            span: 11742..11743,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 389,
            column: 30,
            span: 11743..11747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 389,
            column: 31,
            span: 11747..11748,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 389,
            column: 34,
            span: 11749..11751,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 389,
            column: 36,
            span: 11751..11753,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 389,
            column: 37,
            span: 11753..11754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 390,
            column: 7,
            span: 11779..11785,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 390,
            column: 8,
            span: 11785..11786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 390,
            column: 10,
            span: 11786..11788,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 390,
            column: 11,
            span: 11788..11789,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"func2num\"",
        ),
        position: Position {
            line: 390,
            column: 21,
            span: 11789..11799,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 390,
            column: 22,
            span: 11799..11800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hfunc",
        ),
        position: Position {
            line: 390,
            column: 28,
            span: 11801..11806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 390,
            column: 29,
            span: 11806..11807,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 390,
            column: 32,
            span: 11808..11810,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 390,
            column: 34,
            span: 11810..11812,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 390,
            column: 35,
            span: 11812..11813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 391,
            column: 2,
            span: 11852..11853,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 391,
            column: 4,
            span: 11854..11855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 391,
            column: 7,
            span: 11856..11858,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 391,
            column: 8,
            span: 11858..11859,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tocfunction\"",
        ),
        position: Position {
            line: 391,
            column: 21,
            span: 11859..11872,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 391,
            column: 22,
            span: 11872..11873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 391,
            column: 27,
            span: 11874..11878,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 391,
            column: 28,
            span: 11878..11879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        position: Position {
            line: 391,
            column: 31,
            span: 11879..11882,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 391,
            column: 32,
            span: 11882..11883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 392,
            column: 7,
            span: 11884..11890,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 392,
            column: 8,
            span: 11890..11891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 392,
            column: 9,
            span: 11891..11892,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 392,
            column: 10,
            span: 11892..11893,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 392,
            column: 11,
            span: 11892..11894,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 392,
            column: 12,
            span: 11894..11895,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 392,
            column: 15,
            span: 11896..11898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 392,
            column: 20,
            span: 11899..11903,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 392,
            column: 21,
            span: 11903..11904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        position: Position {
            line: 392,
            column: 24,
            span: 11904..11907,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 392,
            column: 25,
            span: 11907..11908,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 392,
            column: 26,
            span: 11907..11909,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 392,
            column: 27,
            span: 11909..11910,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 392,
            column: 31,
            span: 11911..11914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 392,
            column: 33,
            span: 11915..11916,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 392,
            column: 36,
            span: 11917..11919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 392,
            column: 41,
            span: 11920..11924,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 392,
            column: 42,
            span: 11924..11925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        position: Position {
            line: 392,
            column: 45,
            span: 11925..11928,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 392,
            column: 46,
            span: 11928..11929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 395,
            column: 6,
            span: 11932..11937,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 395,
            column: 7,
            span: 11937..11938,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing panic function\"",
        ),
        position: Position {
            line: 395,
            column: 31,
            span: 11938..11962,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 395,
            column: 32,
            span: 11962..11963,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 396,
            column: 0,
            span: 11964..11966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 398,
            column: 9,
            span: 11988..11994,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 398,
            column: 10,
            span: 11994..11995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 398,
            column: 11,
            span: 11995..11996,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 398,
            column: 12,
            span: 11996..11997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkpanic",
        ),
        position: Position {
            line: 398,
            column: 22,
            span: 11997..12007,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 398,
            column: 23,
            span: 12007..12008,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring hi; error\"",
        ),
        position: Position {
            line: 398,
            column: 45,
            span: 12008..12030,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 398,
            column: 46,
            span: 12030..12031,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 398,
            column: 49,
            span: 12032..12034,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 398,
            column: 54,
            span: 12035..12039,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 398,
            column: 55,
            span: 12039..12040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 401,
            column: 9,
            span: 12078..12084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 401,
            column: 10,
            span: 12084..12085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 401,
            column: 11,
            span: 12085..12086,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 401,
            column: 12,
            span: 12086..12087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkpanic",
        ),
        position: Position {
            line: 401,
            column: 22,
            span: 12087..12097,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 401,
            column: 23,
            span: 12097..12098,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring hi; error;\"",
        ),
        position: Position {
            line: 401,
            column: 46,
            span: 12098..12121,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 401,
            column: 47,
            span: 12121..12122,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[checkstack 5 XX\n      pushstring ' alo'\n      pushstring ' mundo'\n      concat 3]]",
        ),
        position: Position {
            line: 405,
            column: 17,
            span: 12127..12211,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 405,
            column: 18,
            span: 12211..12212,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 405,
            column: 21,
            span: 12213..12215,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi alo mundo\"",
        ),
        position: Position {
            line: 405,
            column: 36,
            span: 12216..12230,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 405,
            column: 37,
            span: 12230..12231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 408,
            column: 9,
            span: 12266..12272,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 408,
            column: 10,
            span: 12272..12273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 408,
            column: 11,
            span: 12273..12274,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 408,
            column: 12,
            span: 12274..12275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkpanic",
        ),
        position: Position {
            line: 408,
            column: 22,
            span: 12275..12285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 408,
            column: 23,
            span: 12285..12286,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadstring 4\"",
        ),
        position: Position {
            line: 408,
            column: 37,
            span: 12286..12300,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 408,
            column: 38,
            span: 12300..12301,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 408,
            column: 41,
            span: 12302..12304,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bad argument #4 (string expected, got no value)\"",
        ),
        position: Position {
            line: 409,
            column: 56,
            span: 12311..12360,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 409,
            column: 57,
            span: 12360..12361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 413,
            column: 4,
            span: 12384..12385,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 413,
            column: 5,
            span: 12385..12386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 413,
            column: 13,
            span: 12386..12394,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 413,
            column: 14,
            span: 12394..12395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 413,
            column: 15,
            span: 12395..12396,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 413,
            column: 16,
            span: 12396..12397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 413,
            column: 24,
            span: 12397..12405,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 413,
            column: 25,
            span: 12405..12406,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 413,
            column: 26,
            span: 12406..12407,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 413,
            column: 27,
            span: 12407..12408,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 413,
            column: 32,
            span: 12407..12413,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 413,
            column: 33,
            span: 12413..12414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 414,
            column: 9,
            span: 12450..12456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 414,
            column: 10,
            span: 12456..12457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 414,
            column: 11,
            span: 12457..12458,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 414,
            column: 12,
            span: 12458..12459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkpanic",
        ),
        position: Position {
            line: 414,
            column: 22,
            span: 12459..12469,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 414,
            column: 23,
            span: 12469..12470,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"newuserdata 20000\"",
        ),
        position: Position {
            line: 414,
            column: 42,
            span: 12470..12489,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 414,
            column: 43,
            span: 12489..12490,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 414,
            column: 46,
            span: 12491..12493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "MEMERRMSG",
        ),
        position: Position {
            line: 414,
            column: 56,
            span: 12494..12503,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 414,
            column: 57,
            span: 12503..12504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 415,
            column: 4,
            span: 12507..12508,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 415,
            column: 5,
            span: 12508..12509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 415,
            column: 13,
            span: 12509..12517,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 14,
            span: 12517..12518,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 415,
            column: 15,
            span: 12517..12519,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 16,
            span: 12519..12520,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 418,
            column: 5,
            span: 12572..12574,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 418,
            column: 9,
            span: 12575..12578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 418,
            column: 15,
            span: 12579..12584,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 418,
            column: 0,
            span: 12585..12589,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 419,
            column: 10,
            span: 12594..12599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 419,
            column: 14,
            span: 12600..12603,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 419,
            column: 16,
            span: 12604..12605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 419,
            column: 18,
            span: 12606..12607,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 419,
            column: 19,
            span: 12607..12608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkpanic",
        ),
        position: Position {
            line: 419,
            column: 29,
            span: 12608..12618,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n      pushstring \"function f() f() end\"\n      loadstring -1; call 0 0\n      getglobal f; call 0 0\n    ]]",
        ),
        position: Position {
            line: 423,
            column: 7,
            span: 12618..12725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 424,
            column: 11,
            span: 12730..12736,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 424,
            column: 12,
            span: 12736..12737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 424,
            column: 18,
            span: 12737..12743,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 424,
            column: 19,
            span: 12743..12744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 424,
            column: 23,
            span: 12744..12748,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 424,
            column: 24,
            span: 12748..12749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 424,
            column: 27,
            span: 12749..12752,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 424,
            column: 28,
            span: 12752..12753,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        position: Position {
            line: 424,
            column: 45,
            span: 12754..12770,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 424,
            column: 46,
            span: 12770..12771,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 424,
            column: 47,
            span: 12771..12772,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 425,
            column: 0,
            span: 12775..12778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 428,
            column: 9,
            span: 12836..12842,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 428,
            column: 10,
            span: 12842..12843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 428,
            column: 11,
            span: 12843..12844,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 428,
            column: 12,
            span: 12844..12845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkpanic",
        ),
        position: Position {
            line: 428,
            column: 22,
            span: 12845..12855,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 428,
            column: 23,
            span: 12855..12856,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    pushstring \"return {__close = function () Y = 'ho'; end}\"\n    newtable\n    loadstring -2\n    call 0 1\n    setmetatable -2\n    toclose -1\n    pushstring \"hi\"\n    error\n  ]]",
        ),
        position: Position {
            line: 437,
            column: 5,
            span: 12856..13034,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 437,
            column: 6,
            span: 13034..13035,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    getglobal Y\n    concat 2         # concat original error with global Y\n  ]]",
        ),
        position: Position {
            line: 441,
            column: 5,
            span: 13038..13120,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 441,
            column: 6,
            span: 13120..13121,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 441,
            column: 9,
            span: 13122..13124,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hiho\"",
        ),
        position: Position {
            line: 441,
            column: 16,
            span: 13125..13131,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 441,
            column: 17,
            span: 13131..13132,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 444,
            column: 0,
            span: 13135..13138,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 447,
            column: 3,
            span: 13164..13166,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 447,
            column: 7,
            span: 13167..13170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 447,
            column: 13,
            span: 13171..13176,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 447,
            column: 0,
            span: 13177..13181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 448,
            column: 8,
            span: 13184..13189,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 448,
            column: 9,
            span: 13189..13190,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack overflow\"",
        ),
        position: Position {
            line: 448,
            column: 33,
            span: 13190..13214,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 448,
            column: 34,
            span: 13214..13215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 449,
            column: 17,
            span: 13218..13232,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 449,
            column: 18,
            span: 13232..13233,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 449,
            column: 24,
            span: 13233..13239,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 449,
            column: 25,
            span: 13239..13240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 450,
            column: 11,
            span: 13243..13251,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 450,
            column: 12,
            span: 13251..13252,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXXX\"",
        ),
        position: Position {
            line: 450,
            column: 18,
            span: 13252..13258,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 450,
            column: 19,
            span: 13258..13259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 450,
            column: 21,
            span: 13260..13261,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 450,
            column: 22,
            span: 13261..13262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 450,
            column: 27,
            span: 13262..13267,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 450,
            column: 28,
            span: 13267..13268,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"checkstack 1000023 XXXX\"",
        ),
        position: Position {
            line: 450,
            column: 54,
            span: 13269..13294,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 450,
            column: 55,
            span: 13294..13295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 452,
            column: 11,
            span: 13344..13352,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 452,
            column: 12,
            span: 13352..13353,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^stack overflow$\"",
        ),
        position: Position {
            line: 452,
            column: 30,
            span: 13353..13371,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 452,
            column: 31,
            span: 13371..13372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 452,
            column: 33,
            span: 13373..13374,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 452,
            column: 34,
            span: 13374..13375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 452,
            column: 39,
            span: 13375..13380,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 452,
            column: 40,
            span: 13380..13381,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"checkstack 1000023 ''\"",
        ),
        position: Position {
            line: 452,
            column: 64,
            span: 13382..13405,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 452,
            column: 65,
            span: 13405..13406,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 453,
            column: 8,
            span: 13409..13414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 453,
            column: 10,
            span: 13415..13416,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 453,
            column: 12,
            span: 13417..13418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 453,
            column: 19,
            span: 13419..13425,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 453,
            column: 20,
            span: 13425..13426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 453,
            column: 23,
            span: 13426..13429,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 453,
            column: 24,
            span: 13429..13430,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnil;checkstack 1 XX;\"",
        ),
        position: Position {
            line: 453,
            column: 50,
            span: 13430..13456,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 453,
            column: 51,
            span: 13456..13457,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 453,
            column: 59,
            span: 13457..13465,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 453,
            column: 60,
            span: 13465..13466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 454,
            column: 11,
            span: 13469..13477,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 454,
            column: 12,
            span: 13477..13478,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 454,
            column: 22,
            span: 13478..13488,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 454,
            column: 23,
            span: 13488..13489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 454,
            column: 25,
            span: 13490..13491,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 454,
            column: 26,
            span: 13491..13492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 454,
            column: 31,
            span: 13492..13497,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 454,
            column: 32,
            span: 13497..13498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 454,
            column: 34,
            span: 13499..13500,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 454,
            column: 35,
            span: 13500..13501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 455,
            column: 17,
            span: 13504..13518,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 455,
            column: 18,
            span: 13518..13519,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        position: Position {
            line: 455,
            column: 27,
            span: 13519..13528,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 455,
            column: 28,
            span: 13528..13529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 456,
            column: 8,
            span: 13532..13537,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 456,
            column: 11,
            span: 13537..13540,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 457,
            column: 0,
            span: 13541..13544,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 459,
            column: 6,
            span: 13546..13551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 459,
            column: 10,
            span: 13552..13555,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 459,
            column: 12,
            span: 13556..13557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 459,
            column: 18,
            span: 13558..13563,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 459,
            column: 22,
            span: 13564..13567,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 459,
            column: 26,
            span: 13567..13571,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 459,
            column: 29,
            span: 13572..13574,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 459,
            column: 0,
            span: 13574..13580,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 460,
            column: 6,
            span: 13581..13586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 460,
            column: 11,
            span: 13587..13591,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 460,
            column: 13,
            span: 13592..13593,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 460,
            column: 15,
            span: 13594..13595,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"checkstack \"",
        ),
        position: Position {
            line: 460,
            column: 28,
            span: 13595..13608,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 460,
            column: 31,
            span: 13609..13611,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 460,
            column: 33,
            span: 13612..13613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 460,
            column: 36,
            span: 13613..13616,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 460,
            column: 38,
            span: 13617..13618,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 460,
            column: 40,
            span: 13618..13620,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 460,
            column: 42,
            span: 13621..13622,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 460,
            column: 46,
            span: 13622..13626,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 460,
            column: 47,
            span: 13626..13627,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 460,
            column: 50,
            span: 13628..13630,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"msg\"",
        ),
        position: Position {
            line: 460,
            column: 56,
            span: 13631..13636,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 460,
            column: 57,
            span: 13636..13637,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"newtable\"",
        ),
        position: Position {
            line: 460,
            column: 68,
            span: 13638..13648,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 460,
            column: 69,
            span: 13648..13649,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 461,
            column: 4,
            span: 13650..13653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 461,
            column: 6,
            span: 13654..13655,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 461,
            column: 8,
            span: 13656..13657,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 461,
            column: 10,
            span: 13657..13659,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 461,
            column: 11,
            span: 13659..13660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 461,
            column: 14,
            span: 13660..13663,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 461,
            column: 0,
            span: 13664..13666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 462,
            column: 7,
            span: 13669..13673,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 462,
            column: 8,
            span: 13673..13674,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 462,
            column: 9,
            span: 13674..13675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 462,
            column: 13,
            span: 13675..13679,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 462,
            column: 15,
            span: 13680..13681,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 462,
            column: 17,
            span: 13681..13683,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 462,
            column: 18,
            span: 13683..13684,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 462,
            column: 20,
            span: 13685..13686,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum \"",
        ),
        position: Position {
            line: 462,
            column: 31,
            span: 13687..13697,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 462,
            column: 34,
            span: 13698..13700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 462,
            column: 0,
            span: 13701..13702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 463,
            column: 7,
            span: 13705..13709,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 463,
            column: 8,
            span: 13709..13710,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 463,
            column: 9,
            span: 13710..13711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 463,
            column: 13,
            span: 13711..13715,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 463,
            column: 15,
            span: 13716..13717,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 463,
            column: 17,
            span: 13717..13719,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 463,
            column: 18,
            span: 13719..13720,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 463,
            column: 20,
            span: 13721..13722,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum \"",
        ),
        position: Position {
            line: 463,
            column: 31,
            span: 13723..13733,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 463,
            column: 34,
            span: 13734..13736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 463,
            column: 36,
            span: 13737..13738,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 463,
            column: 38,
            span: 13739..13740,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 463,
            column: 0,
            span: 13740..13743,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 464,
            column: 0,
            span: 13744..13747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 466,
            column: 5,
            span: 13749..13753,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 466,
            column: 6,
            span: 13753..13754,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 466,
            column: 7,
            span: 13754..13755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 466,
            column: 11,
            span: 13755..13759,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 466,
            column: 13,
            span: 13760..13761,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 466,
            column: 15,
            span: 13761..13763,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 466,
            column: 16,
            span: 13763..13764,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 466,
            column: 18,
            span: 13765..13766,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rawgeti R 2\"",
        ),
        position: Position {
            line: 466,
            column: 32,
            span: 13767..13780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 467,
            column: 5,
            span: 13815..13819,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 467,
            column: 6,
            span: 13819..13820,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 467,
            column: 7,
            span: 13820..13821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 467,
            column: 11,
            span: 13821..13825,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 467,
            column: 13,
            span: 13826..13827,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 467,
            column: 15,
            span: 13827..13829,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 467,
            column: 16,
            span: 13829..13830,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 467,
            column: 18,
            span: 13831..13832,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert \"",
        ),
        position: Position {
            line: 467,
            column: 28,
            span: 13833..13842,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 467,
            column: 31,
            span: 13843..13845,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 467,
            column: 33,
            span: 13846..13847,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 467,
            column: 34,
            span: 13847..13848,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 467,
            column: 35,
            span: 13847..13849,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 467,
            column: 36,
            span: 13849..13850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 467,
            column: 39,
            span: 13850..13853,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 467,
            column: 41,
            span: 13854..13855,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 467,
            column: 43,
            span: 13855..13857,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 467,
            column: 44,
            span: 13857..13858,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 469,
            column: 4,
            span: 13860..13863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 469,
            column: 6,
            span: 13864..13865,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 469,
            column: 8,
            span: 13866..13867,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 469,
            column: 10,
            span: 13867..13869,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 469,
            column: 11,
            span: 13869..13870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 469,
            column: 14,
            span: 13870..13873,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 469,
            column: 0,
            span: 13874..13876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 470,
            column: 7,
            span: 13879..13883,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 470,
            column: 8,
            span: 13883..13884,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 470,
            column: 9,
            span: 13884..13885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 470,
            column: 13,
            span: 13885..13889,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 470,
            column: 15,
            span: 13890..13891,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 470,
            column: 17,
            span: 13891..13893,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 470,
            column: 18,
            span: 13893..13894,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 470,
            column: 20,
            span: 13895..13896,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable \"",
        ),
        position: Position {
            line: 470,
            column: 32,
            span: 13897..13908,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 470,
            column: 35,
            span: 13909..13911,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 470,
            column: 37,
            span: 13912..13913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 470,
            column: 38,
            span: 13913..13914,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 470,
            column: 39,
            span: 13913..13915,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 470,
            column: 40,
            span: 13915..13916,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 470,
            column: 41,
            span: 13916..13917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 470,
            column: 44,
            span: 13917..13920,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 470,
            column: 46,
            span: 13921..13922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 470,
            column: 48,
            span: 13923..13924,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 470,
            column: 50,
            span: 13925..13926,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 470,
            column: 52,
            span: 13926..13928,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 470,
            column: 53,
            span: 13928..13929,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 470,
            column: 55,
            span: 13930..13931,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 470,
            column: 57,
            span: 13931..13933,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 470,
            column: 58,
            span: 13933..13934,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 471,
            column: 0,
            span: 13935..13938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 473,
            column: 5,
            span: 13940..13944,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 473,
            column: 6,
            span: 13944..13945,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 473,
            column: 7,
            span: 13945..13946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 473,
            column: 11,
            span: 13946..13950,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 473,
            column: 13,
            span: 13951..13952,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 473,
            column: 15,
            span: 13952..13954,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 473,
            column: 16,
            span: 13954..13955,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 473,
            column: 18,
            span: 13956..13957,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 2\"",
        ),
        position: Position {
            line: 473,
            column: 29,
            span: 13958..13968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 475,
            column: 5,
            span: 13970..13974,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 475,
            column: 7,
            span: 13975..13976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 475,
            column: 13,
            span: 13977..13982,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 475,
            column: 14,
            span: 13982..13983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        position: Position {
            line: 475,
            column: 20,
            span: 13983..13989,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 475,
            column: 21,
            span: 13989..13990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 475,
            column: 25,
            span: 13990..13994,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 475,
            column: 26,
            span: 13994..13995,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        position: Position {
            line: 475,
            column: 30,
            span: 13996..13999,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 475,
            column: 31,
            span: 13999..14000,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 476,
            column: 6,
            span: 14001..14006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 476,
            column: 8,
            span: 14007..14008,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 476,
            column: 9,
            span: 14008..14009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 476,
            column: 11,
            span: 14010..14011,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 476,
            column: 13,
            span: 14012..14013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 476,
            column: 15,
            span: 14014..14015,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 476,
            column: 16,
            span: 14015..14016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 476,
            column: 21,
            span: 14016..14021,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 476,
            column: 22,
            span: 14021..14022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 476,
            column: 26,
            span: 14022..14026,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 476,
            column: 27,
            span: 14026..14027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 477,
            column: 7,
            span: 14028..14034,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 477,
            column: 8,
            span: 14034..14035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 477,
            column: 9,
            span: 14035..14036,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 477,
            column: 12,
            span: 14037..14039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 477,
            column: 15,
            span: 14040..14042,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 477,
            column: 16,
            span: 14042..14043,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 478,
            column: 4,
            span: 14044..14047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 478,
            column: 6,
            span: 14048..14049,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 478,
            column: 8,
            span: 14050..14051,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 478,
            column: 10,
            span: 14051..14053,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 478,
            column: 11,
            span: 14053..14054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 478,
            column: 14,
            span: 14054..14057,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 478,
            column: 17,
            span: 14058..14060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 478,
            column: 24,
            span: 14061..14067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 478,
            column: 25,
            span: 14067..14068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 478,
            column: 26,
            span: 14068..14069,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 478,
            column: 27,
            span: 14069..14070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 478,
            column: 28,
            span: 14070..14071,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 478,
            column: 29,
            span: 14071..14072,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 478,
            column: 32,
            span: 14073..14075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 478,
            column: 34,
            span: 14076..14077,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 478,
            column: 35,
            span: 14077..14078,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 478,
            column: 37,
            span: 14077..14080,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 478,
            column: 38,
            span: 14080..14081,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 478,
            column: 39,
            span: 14081..14082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 478,
            column: 41,
            span: 14083..14084,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 478,
            column: 42,
            span: 14084..14085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 478,
            column: 43,
            span: 14085..14086,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 478,
            column: 44,
            span: 14086..14087,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 478,
            column: 46,
            span: 14088..14089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        position: Position {
            line: 478,
            column: 52,
            span: 14090..14095,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 478,
            column: 0,
            span: 14096..14099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 479,
            column: 7,
            span: 14100..14106,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 479,
            column: 8,
            span: 14106..14107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 479,
            column: 12,
            span: 14107..14111,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 479,
            column: 13,
            span: 14111..14112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 479,
            column: 14,
            span: 14112..14113,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 479,
            column: 15,
            span: 14113..14114,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 479,
            column: 18,
            span: 14115..14117,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 479,
            column: 22,
            span: 14118..14121,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 479,
            column: 23,
            span: 14121..14122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 480,
            column: 5,
            span: 14123..14127,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 480,
            column: 6,
            span: 14127..14128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 480,
            column: 8,
            span: 14129..14130,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 480,
            column: 9,
            span: 14130..14131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 480,
            column: 11,
            span: 14132..14133,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 480,
            column: 13,
            span: 14134..14135,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 480,
            column: 0,
            span: 14136..14139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 484,
            column: 2,
            span: 14160..14161,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 484,
            column: 4,
            span: 14162..14163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 484,
            column: 6,
            span: 14164..14165,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 484,
            column: 7,
            span: 14165..14166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 484,
            column: 12,
            span: 14166..14171,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 484,
            column: 13,
            span: 14171..14172,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  loadstring 2; pcall 0 1 0;\n  pushvalue 3; insert -2; pcall 1 1 0;\n  pcall 0 0 0;\n  return 1\n]]",
        ),
        position: Position {
            line: 489,
            column: 3,
            span: 14172..14271,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 489,
            column: 4,
            span: 14271..14272,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=150\"",
        ),
        position: Position {
            line: 489,
            column: 12,
            span: 14273..14280,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 489,
            column: 13,
            span: 14280..14281,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 489,
            column: 22,
            span: 14282..14290,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 489,
            column: 24,
            span: 14291..14292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 489,
            column: 25,
            span: 14292..14293,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 489,
            column: 26,
            span: 14293..14294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 489,
            column: 33,
            span: 14295..14301,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 489,
            column: 34,
            span: 14301..14302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 489,
            column: 35,
            span: 14302..14303,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 489,
            column: 37,
            span: 14303..14305,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 489,
            column: 40,
            span: 14305..14308,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 489,
            column: 41,
            span: 14308..14309,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 489,
            column: 42,
            span: 14309..14310,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 489,
            column: 49,
            span: 14311..14317,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 489,
            column: 51,
            span: 14317..14319,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 489,
            column: 55,
            span: 14320..14323,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 489,
            column: 56,
            span: 14323..14324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 491,
            column: 7,
            span: 14326..14332,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 491,
            column: 8,
            span: 14332..14333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 491,
            column: 12,
            span: 14333..14337,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 491,
            column: 13,
            span: 14337..14338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 491,
            column: 14,
            span: 14338..14339,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 491,
            column: 15,
            span: 14339..14340,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 491,
            column: 18,
            span: 14341..14343,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        position: Position {
            line: 491,
            column: 27,
            span: 14344..14352,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 491,
            column: 31,
            span: 14353..14356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 491,
            column: 33,
            span: 14357..14358,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 491,
            column: 36,
            span: 14359..14361,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 491,
            column: 40,
            span: 14361..14365,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 491,
            column: 41,
            span: 14365..14366,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 493,
            column: 9,
            span: 14368..14376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        position: Position {
            line: 493,
            column: 16,
            span: 14377..14383,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 493,
            column: 17,
            span: 14383..14384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 493,
            column: 18,
            span: 14384..14385,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 493,
            column: 19,
            span: 14385..14386,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 493,
            column: 23,
            span: 14387..14390,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 493,
            column: 24,
            span: 14390..14391,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 494,
            column: 8,
            span: 14394..14399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 494,
            column: 12,
            span: 14400..14403,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 494,
            column: 14,
            span: 14404..14405,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 494,
            column: 16,
            span: 14406..14407,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 494,
            column: 19,
            span: 14407..14410,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 494,
            column: 20,
            span: 14410..14411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 495,
            column: 9,
            span: 14414..14420,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 495,
            column: 10,
            span: 14420..14421,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 495,
            column: 11,
            span: 14421..14422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 495,
            column: 14,
            span: 14422..14425,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 495,
            column: 17,
            span: 14426..14428,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 495,
            column: 19,
            span: 14428..14430,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 495,
            column: 20,
            span: 14430..14431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 496,
            column: 9,
            span: 14434..14440,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 496,
            column: 10,
            span: 14440..14441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 496,
            column: 16,
            span: 14441..14447,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 496,
            column: 17,
            span: 14447..14448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 496,
            column: 21,
            span: 14448..14452,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 496,
            column: 22,
            span: 14452..14453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 496,
            column: 25,
            span: 14453..14456,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 496,
            column: 26,
            span: 14456..14457,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 496,
            column: 27,
            span: 14456..14458,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 496,
            column: 28,
            span: 14458..14459,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 496,
            column: 29,
            span: 14459..14460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 496,
            column: 31,
            span: 14461..14462,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 496,
            column: 32,
            span: 14462..14463,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 496,
            column: 33,
            span: 14463..14464,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 497,
            column: 0,
            span: 14465..14468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        position: Position {
            line: 498,
            column: 7,
            span: 14469..14475,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 498,
            column: 8,
            span: 14475..14476,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":1:\"",
        ),
        position: Position {
            line: 498,
            column: 13,
            span: 14476..14481,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 498,
            column: 14,
            span: 14481..14482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 498,
            column: 16,
            span: 14483..14484,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 498,
            column: 17,
            span: 14484..14485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 498,
            column: 22,
            span: 14485..14490,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 498,
            column: 23,
            span: 14490..14491,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadstring 2; return *\"",
        ),
        position: Position {
            line: 498,
            column: 47,
            span: 14491..14515,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 498,
            column: 48,
            span: 14515..14516,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=\"",
        ),
        position: Position {
            line: 498,
            column: 53,
            span: 14517..14521,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 498,
            column: 54,
            span: 14521..14522,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 498,
            column: 55,
            span: 14522..14523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        position: Position {
            line: 499,
            column: 7,
            span: 14524..14530,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 499,
            column: 8,
            span: 14530..14531,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.\"",
        ),
        position: Position {
            line: 499,
            column: 12,
            span: 14531..14535,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 499,
            column: 13,
            span: 14535..14536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 499,
            column: 15,
            span: 14537..14538,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 499,
            column: 16,
            span: 14538..14539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 499,
            column: 21,
            span: 14539..14544,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 499,
            column: 22,
            span: 14544..14545,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadfile 2; return *\"",
        ),
        position: Position {
            line: 499,
            column: 44,
            span: 14545..14567,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 499,
            column: 45,
            span: 14567..14568,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 499,
            column: 49,
            span: 14569..14572,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 499,
            column: 50,
            span: 14572..14573,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 499,
            column: 51,
            span: 14573..14574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        position: Position {
            line: 500,
            column: 7,
            span: 14575..14581,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 500,
            column: 8,
            span: 14581..14582,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxxx\"",
        ),
        position: Position {
            line: 500,
            column: 14,
            span: 14582..14588,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 500,
            column: 15,
            span: 14588..14589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 500,
            column: 17,
            span: 14590..14591,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 500,
            column: 18,
            span: 14591..14592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 500,
            column: 23,
            span: 14592..14597,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 500,
            column: 24,
            span: 14597..14598,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadfile 2; return *\"",
        ),
        position: Position {
            line: 500,
            column: 46,
            span: 14598..14620,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 500,
            column: 47,
            span: 14620..14621,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxxx\"",
        ),
        position: Position {
            line: 500,
            column: 54,
            span: 14622..14628,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 500,
            column: 55,
            span: 14628..14629,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 500,
            column: 56,
            span: 14629..14630,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 503,
            column: 9,
            span: 14672..14680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerrnopro",
        ),
        position: Position {
            line: 503,
            column: 23,
            span: 14681..14694,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 503,
            column: 25,
            span: 14695..14696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        position: Position {
            line: 503,
            column: 29,
            span: 14696..14700,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 503,
            column: 30,
            span: 14700..14701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 503,
            column: 34,
            span: 14702..14705,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 503,
            column: 35,
            span: 14705..14706,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 504,
            column: 8,
            span: 14709..14714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "th",
        ),
        position: Position {
            line: 504,
            column: 11,
            span: 14715..14717,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 504,
            column: 13,
            span: 14718..14719,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 504,
            column: 23,
            span: 14720..14729,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 504,
            column: 24,
            span: 14729..14730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 504,
            column: 30,
            span: 14730..14736,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 504,
            column: 31,
            span: 14736..14737,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 504,
            column: 39,
            span: 14737..14745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 504,
            column: 41,
            span: 14746..14747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 504,
            column: 42,
            span: 14747..14748,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 504,
            column: 46,
            span: 14749..14752,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 504,
            column: 47,
            span: 14752..14753,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 505,
            column: 8,
            span: 14778..14783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stt",
        ),
        position: Position {
            line: 505,
            column: 12,
            span: 14784..14787,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 505,
            column: 13,
            span: 14787..14788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 505,
            column: 17,
            span: 14789..14792,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 505,
            column: 19,
            span: 14793..14794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 505,
            column: 25,
            span: 14795..14800,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 505,
            column: 26,
            span: 14800..14801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 505,
            column: 27,
            span: 14801..14802,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 505,
            column: 28,
            span: 14802..14803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 505,
            column: 33,
            span: 14803..14808,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 505,
            column: 34,
            span: 14808..14809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "th",
        ),
        position: Position {
            line: 505,
            column: 37,
            span: 14810..14812,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 505,
            column: 38,
            span: 14812..14813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        position: Position {
            line: 505,
            column: 43,
            span: 14814..14818,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 505,
            column: 44,
            span: 14818..14819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 506,
            column: 9,
            span: 14842..14848,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 506,
            column: 10,
            span: 14848..14849,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 506,
            column: 13,
            span: 14849..14852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stt",
        ),
        position: Position {
            line: 506,
            column: 17,
            span: 14853..14856,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 506,
            column: 21,
            span: 14857..14860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 506,
            column: 28,
            span: 14861..14867,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 506,
            column: 29,
            span: 14867..14868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 506,
            column: 33,
            span: 14868..14872,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 506,
            column: 34,
            span: 14872..14873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 506,
            column: 37,
            span: 14873..14876,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 506,
            column: 38,
            span: 14876..14877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 506,
            column: 42,
            span: 14878..14881,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 506,
            column: 43,
            span: 14881..14882,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 506,
            column: 44,
            span: 14882..14883,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 507,
            column: 0,
            span: 14884..14887,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 509,
            column: 3,
            span: 14889..14891,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 509,
            column: 7,
            span: 14892..14895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 509,
            column: 13,
            span: 14896..14901,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 509,
            column: 0,
            span: 14902..14906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 510,
            column: 17,
            span: 14909..14923,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 510,
            column: 18,
            span: 14923..14924,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 510,
            column: 24,
            span: 14924..14930,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 510,
            column: 25,
            span: 14930..14931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerrnopro",
        ),
        position: Position {
            line: 511,
            column: 16,
            span: 14966..14979,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 511,
            column: 17,
            span: 14979..14980,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 3; call 0 0\"",
        ),
        position: Position {
            line: 511,
            column: 38,
            span: 14980..15001,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 511,
            column: 39,
            span: 15001..15002,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to call\"",
        ),
        position: Position {
            line: 511,
            column: 57,
            span: 15003..15020,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 511,
            column: 58,
            span: 15020..15021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 512,
            column: 8,
            span: 15024..15029,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack overflow in unprotected thread\"",
        ),
        position: Position {
            line: 512,
            column: 54,
            span: 15029..15075,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 513,
            column: 11,
            span: 15078..15086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 513,
            column: 13,
            span: 15087..15088,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 513,
            column: 15,
            span: 15089..15090,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 513,
            column: 16,
            span: 15090..15091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 513,
            column: 18,
            span: 15092..15093,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 513,
            column: 19,
            span: 15093..15094,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 513,
            column: 20,
            span: 15094..15095,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 513,
            column: 0,
            span: 15096..15099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerrnopro",
        ),
        position: Position {
            line: 514,
            column: 16,
            span: 15102..15115,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 514,
            column: 17,
            span: 15115..15116,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"getglobal 'f'; call 0 0;\"",
        ),
        position: Position {
            line: 514,
            column: 43,
            span: 15116..15142,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 514,
            column: 44,
            span: 15142..15143,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        position: Position {
            line: 514,
            column: 61,
            span: 15144..15160,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 514,
            column: 62,
            span: 15160..15161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 515,
            column: 17,
            span: 15164..15178,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 515,
            column: 18,
            span: 15178..15179,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        position: Position {
            line: 515,
            column: 27,
            span: 15179..15188,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 515,
            column: 28,
            span: 15188..15189,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 516,
            column: 0,
            span: 15190..15193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 517,
            column: 6,
            span: 15194..15199,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        position: Position {
            line: 517,
            column: 9,
            span: 15199..15202,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 522,
            column: 3,
            span: 15230..15232,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 523,
            column: 8,
            span: 15250..15255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 523,
            column: 10,
            span: 15256..15257,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 523,
            column: 12,
            span: 15258..15259,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 523,
            column: 14,
            span: 15260..15261,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 523,
            column: 15,
            span: 15261..15262,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 524,
            column: 8,
            span: 15265..15270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 524,
            column: 11,
            span: 15271..15273,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 524,
            column: 13,
            span: 15274..15275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 524,
            column: 15,
            span: 15276..15277,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 524,
            column: 16,
            span: 15277..15278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 524,
            column: 21,
            span: 15278..15283,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 524,
            column: 22,
            span: 15283..15284,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rawsetp 2 1; return 1\"",
        ),
        position: Position {
            line: 524,
            column: 45,
            span: 15284..15307,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 524,
            column: 46,
            span: 15307..15308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 524,
            column: 48,
            span: 15309..15310,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 524,
            column: 49,
            span: 15310..15311,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 524,
            column: 52,
            span: 15311..15314,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 524,
            column: 53,
            span: 15314..15315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 525,
            column: 9,
            span: 15318..15324,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 525,
            column: 10,
            span: 15324..15325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 525,
            column: 11,
            span: 15325..15326,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 525,
            column: 14,
            span: 15327..15329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 525,
            column: 17,
            span: 15330..15332,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 525,
            column: 18,
            span: 15332..15333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 526,
            column: 9,
            span: 15336..15342,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 526,
            column: 10,
            span: 15342..15343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 526,
            column: 11,
            span: 15343..15344,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 526,
            column: 12,
            span: 15344..15345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 526,
            column: 13,
            span: 15345..15346,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 526,
            column: 14,
            span: 15346..15347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 526,
            column: 26,
            span: 15347..15359,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 526,
            column: 27,
            span: 15359..15360,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 526,
            column: 28,
            span: 15359..15361,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 526,
            column: 29,
            span: 15361..15362,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 526,
            column: 30,
            span: 15362..15363,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 526,
            column: 33,
            span: 15364..15366,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 526,
            column: 36,
            span: 15366..15369,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 526,
            column: 37,
            span: 15369..15370,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 527,
            column: 8,
            span: 15373..15378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 527,
            column: 11,
            span: 15379..15381,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 527,
            column: 12,
            span: 15381..15382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 527,
            column: 16,
            span: 15383..15386,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 527,
            column: 18,
            span: 15387..15388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 527,
            column: 20,
            span: 15389..15390,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 527,
            column: 21,
            span: 15390..15391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 527,
            column: 26,
            span: 15391..15396,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 527,
            column: 27,
            span: 15396..15397,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rawgetp -1 1; return 2\"",
        ),
        position: Position {
            line: 527,
            column: 51,
            span: 15397..15421,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 527,
            column: 52,
            span: 15421..15422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 527,
            column: 54,
            span: 15423..15424,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 527,
            column: 55,
            span: 15424..15425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 528,
            column: 9,
            span: 15428..15434,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 528,
            column: 10,
            span: 15434..15435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 528,
            column: 11,
            span: 15435..15436,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 528,
            column: 14,
            span: 15437..15439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 528,
            column: 17,
            span: 15440..15442,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 528,
            column: 21,
            span: 15443..15446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 528,
            column: 25,
            span: 15447..15450,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 528,
            column: 28,
            span: 15451..15453,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 528,
            column: 31,
            span: 15453..15456,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 528,
            column: 32,
            span: 15456..15457,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 529,
            column: 0,
            span: 15458..15461,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 532,
            column: 3,
            span: 15464..15466,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 533,
            column: 8,
            span: 15505..15510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 533,
            column: 10,
            span: 15511..15512,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 533,
            column: 12,
            span: 15513..15514,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 533,
            column: 14,
            span: 15515..15516,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 533,
            column: 15,
            span: 15516..15517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 534,
            column: 4,
            span: 15520..15521,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 534,
            column: 5,
            span: 15521..15522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 534,
            column: 6,
            span: 15522..15523,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 534,
            column: 7,
            span: 15523..15524,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 534,
            column: 9,
            span: 15525..15526,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 534,
            column: 0,
            span: 15526..15529,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 535,
            column: 8,
            span: 15532..15537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 535,
            column: 13,
            span: 15538..15542,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 535,
            column: 15,
            span: 15543..15544,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable -1; return *\"",
        ),
        position: Position {
            line: 535,
            column: 39,
            span: 15545..15568,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 536,
            column: 8,
            span: 15571..15576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 536,
            column: 12,
            span: 15577..15580,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 536,
            column: 14,
            span: 15581..15582,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 536,
            column: 16,
            span: 15583..15584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 536,
            column: 17,
            span: 15584..15585,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 536,
            column: 18,
            span: 15585..15586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 536,
            column: 23,
            span: 15586..15591,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 536,
            column: 24,
            span: 15591..15592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 536,
            column: 28,
            span: 15592..15596,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 536,
            column: 29,
            span: 15596..15597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 536,
            column: 31,
            span: 15598..15599,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 536,
            column: 32,
            span: 15599..15600,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 536,
            column: 33,
            span: 15600..15601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 537,
            column: 9,
            span: 15604..15610,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 537,
            column: 10,
            span: 15610..15611,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 537,
            column: 11,
            span: 15611..15612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 537,
            column: 14,
            span: 15612..15615,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 537,
            column: 17,
            span: 15616..15618,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 537,
            column: 19,
            span: 15618..15620,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 537,
            column: 23,
            span: 15621..15624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 537,
            column: 27,
            span: 15625..15628,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 537,
            column: 28,
            span: 15628..15629,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 537,
            column: 29,
            span: 15628..15630,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 537,
            column: 30,
            span: 15630..15631,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 537,
            column: 33,
            span: 15632..15634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 537,
            column: 38,
            span: 15635..15639,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 537,
            column: 42,
            span: 15640..15643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 537,
            column: 46,
            span: 15644..15647,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 537,
            column: 47,
            span: 15647..15648,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 537,
            column: 48,
            span: 15647..15649,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 537,
            column: 49,
            span: 15649..15650,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 537,
            column: 52,
            span: 15651..15653,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 537,
            column: 55,
            span: 15653..15656,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 537,
            column: 56,
            span: 15656..15657,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 539,
            column: 8,
            span: 15661..15666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 539,
            column: 13,
            span: 15667..15671,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 539,
            column: 15,
            span: 15672..15673,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable -2; return *\"",
        ),
        position: Position {
            line: 539,
            column: 39,
            span: 15674..15697,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 540,
            column: 8,
            span: 15700..15705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 540,
            column: 12,
            span: 15706..15709,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 540,
            column: 14,
            span: 15710..15711,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 540,
            column: 16,
            span: 15712..15713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 540,
            column: 17,
            span: 15713..15714,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 540,
            column: 18,
            span: 15714..15715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 540,
            column: 23,
            span: 15715..15720,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 540,
            column: 24,
            span: 15720..15721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 540,
            column: 28,
            span: 15721..15725,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 540,
            column: 29,
            span: 15725..15726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 540,
            column: 31,
            span: 15727..15728,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 540,
            column: 32,
            span: 15728..15729,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 540,
            column: 35,
            span: 15729..15732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 540,
            column: 36,
            span: 15732..15733,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 540,
            column: 37,
            span: 15733..15734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 541,
            column: 9,
            span: 15737..15743,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 541,
            column: 10,
            span: 15743..15744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 541,
            column: 11,
            span: 15744..15745,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 541,
            column: 12,
            span: 15745..15746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 541,
            column: 13,
            span: 15746..15747,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 541,
            column: 14,
            span: 15747..15748,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 541,
            column: 17,
            span: 15749..15751,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 541,
            column: 20,
            span: 15751..15754,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 541,
            column: 21,
            span: 15754..15755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 542,
            column: 9,
            span: 15758..15764,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 542,
            column: 10,
            span: 15764..15765,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 542,
            column: 11,
            span: 15765..15766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 542,
            column: 14,
            span: 15766..15769,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 542,
            column: 17,
            span: 15770..15772,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 542,
            column: 19,
            span: 15772..15774,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 542,
            column: 23,
            span: 15775..15778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 542,
            column: 27,
            span: 15779..15782,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 542,
            column: 28,
            span: 15782..15783,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 542,
            column: 29,
            span: 15782..15784,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 542,
            column: 30,
            span: 15784..15785,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 542,
            column: 33,
            span: 15786..15788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 542,
            column: 38,
            span: 15789..15793,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 542,
            column: 39,
            span: 15793..15794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 545,
            column: 4,
            span: 15807..15808,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 545,
            column: 5,
            span: 15808..15809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 545,
            column: 6,
            span: 15809..15810,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 545,
            column: 7,
            span: 15810..15811,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 545,
            column: 9,
            span: 15812..15813,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 545,
            column: 0,
            span: 15813..15816,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 546,
            column: 8,
            span: 15819..15824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 546,
            column: 13,
            span: 15825..15829,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 546,
            column: 15,
            span: 15830..15831,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rawget -1; return *\"",
        ),
        position: Position {
            line: 546,
            column: 37,
            span: 15832..15853,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 547,
            column: 8,
            span: 15856..15861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 547,
            column: 12,
            span: 15862..15865,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 547,
            column: 14,
            span: 15866..15867,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 547,
            column: 16,
            span: 15868..15869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 547,
            column: 17,
            span: 15869..15870,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 547,
            column: 18,
            span: 15870..15871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 547,
            column: 23,
            span: 15871..15876,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 547,
            column: 24,
            span: 15876..15877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 547,
            column: 28,
            span: 15877..15881,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 547,
            column: 29,
            span: 15881..15882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 547,
            column: 31,
            span: 15883..15884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 547,
            column: 32,
            span: 15884..15885,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 547,
            column: 33,
            span: 15885..15886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 548,
            column: 9,
            span: 15889..15895,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 548,
            column: 10,
            span: 15895..15896,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 548,
            column: 11,
            span: 15896..15897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 548,
            column: 14,
            span: 15897..15900,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 548,
            column: 17,
            span: 15901..15903,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 548,
            column: 19,
            span: 15903..15905,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 548,
            column: 23,
            span: 15906..15909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 548,
            column: 27,
            span: 15910..15913,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 548,
            column: 28,
            span: 15913..15914,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 548,
            column: 29,
            span: 15913..15915,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 548,
            column: 30,
            span: 15915..15916,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 548,
            column: 33,
            span: 15917..15919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 548,
            column: 38,
            span: 15920..15924,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 548,
            column: 42,
            span: 15925..15928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 548,
            column: 46,
            span: 15929..15932,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 548,
            column: 47,
            span: 15932..15933,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 548,
            column: 48,
            span: 15932..15934,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 548,
            column: 49,
            span: 15934..15935,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 548,
            column: 52,
            span: 15936..15938,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 548,
            column: 55,
            span: 15938..15941,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 548,
            column: 56,
            span: 15941..15942,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 550,
            column: 8,
            span: 15946..15951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 550,
            column: 13,
            span: 15952..15956,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 550,
            column: 15,
            span: 15957..15958,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rawset -2; return *\"",
        ),
        position: Position {
            line: 550,
            column: 37,
            span: 15959..15980,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 551,
            column: 8,
            span: 15983..15988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 551,
            column: 12,
            span: 15989..15992,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 551,
            column: 14,
            span: 15993..15994,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 551,
            column: 16,
            span: 15995..15996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 551,
            column: 17,
            span: 15996..15997,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 551,
            column: 18,
            span: 15997..15998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 551,
            column: 23,
            span: 15998..16003,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 551,
            column: 24,
            span: 16003..16004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 551,
            column: 28,
            span: 16004..16008,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 551,
            column: 29,
            span: 16008..16009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 551,
            column: 31,
            span: 16010..16011,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 551,
            column: 32,
            span: 16011..16012,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 551,
            column: 35,
            span: 16012..16015,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 551,
            column: 36,
            span: 16015..16016,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 551,
            column: 37,
            span: 16016..16017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 552,
            column: 9,
            span: 16020..16026,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 552,
            column: 10,
            span: 16026..16027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 552,
            column: 11,
            span: 16027..16028,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 552,
            column: 12,
            span: 16028..16029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 552,
            column: 13,
            span: 16029..16030,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 552,
            column: 14,
            span: 16030..16031,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 552,
            column: 17,
            span: 16032..16034,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 552,
            column: 20,
            span: 16034..16037,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 552,
            column: 21,
            span: 16037..16038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 553,
            column: 9,
            span: 16041..16047,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 553,
            column: 10,
            span: 16047..16048,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 553,
            column: 11,
            span: 16048..16049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 553,
            column: 14,
            span: 16049..16052,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 553,
            column: 17,
            span: 16053..16055,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 553,
            column: 19,
            span: 16055..16057,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 553,
            column: 23,
            span: 16058..16061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 553,
            column: 27,
            span: 16062..16065,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 553,
            column: 28,
            span: 16065..16066,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 553,
            column: 29,
            span: 16065..16067,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 553,
            column: 30,
            span: 16067..16068,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 553,
            column: 33,
            span: 16069..16071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 553,
            column: 38,
            span: 16072..16076,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 553,
            column: 39,
            span: 16076..16077,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 556,
            column: 8,
            span: 16122..16127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 556,
            column: 13,
            span: 16128..16132,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 556,
            column: 15,
            span: 16133..16134,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rawset -1; return *\"",
        ),
        position: Position {
            line: 556,
            column: 37,
            span: 16135..16156,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 557,
            column: 8,
            span: 16159..16164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 557,
            column: 12,
            span: 16165..16168,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 557,
            column: 14,
            span: 16169..16170,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 557,
            column: 16,
            span: 16171..16172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 557,
            column: 17,
            span: 16172..16173,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 557,
            column: 18,
            span: 16173..16174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 557,
            column: 23,
            span: 16174..16179,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 557,
            column: 24,
            span: 16179..16180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 557,
            column: 28,
            span: 16180..16184,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 557,
            column: 29,
            span: 16184..16185,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 557,
            column: 32,
            span: 16185..16188,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 557,
            column: 33,
            span: 16188..16189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 557,
            column: 35,
            span: 16190..16191,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 557,
            column: 36,
            span: 16191..16192,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 557,
            column: 37,
            span: 16192..16193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 558,
            column: 9,
            span: 16196..16202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 558,
            column: 10,
            span: 16202..16203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 558,
            column: 11,
            span: 16203..16204,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 558,
            column: 12,
            span: 16204..16205,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 558,
            column: 14,
            span: 16204..16207,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 558,
            column: 15,
            span: 16207..16208,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 558,
            column: 18,
            span: 16209..16211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 558,
            column: 20,
            span: 16212..16213,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 558,
            column: 21,
            span: 16213..16214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 559,
            column: 9,
            span: 16217..16223,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 559,
            column: 10,
            span: 16223..16224,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 559,
            column: 11,
            span: 16224..16225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 559,
            column: 14,
            span: 16225..16228,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 559,
            column: 17,
            span: 16229..16231,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 559,
            column: 19,
            span: 16231..16233,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 559,
            column: 23,
            span: 16234..16237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 559,
            column: 27,
            span: 16238..16241,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 559,
            column: 28,
            span: 16241..16242,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 559,
            column: 29,
            span: 16241..16243,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 559,
            column: 30,
            span: 16243..16244,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 559,
            column: 33,
            span: 16245..16247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 559,
            column: 38,
            span: 16248..16252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 559,
            column: 39,
            span: 16252..16253,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 561,
            column: 8,
            span: 16257..16262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 561,
            column: 13,
            span: 16263..16267,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 561,
            column: 15,
            span: 16268..16269,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable -1; return *\"",
        ),
        position: Position {
            line: 561,
            column: 39,
            span: 16270..16293,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 562,
            column: 8,
            span: 16296..16301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 562,
            column: 12,
            span: 16302..16305,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 562,
            column: 14,
            span: 16306..16307,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 562,
            column: 16,
            span: 16308..16309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 562,
            column: 17,
            span: 16309..16310,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 562,
            column: 18,
            span: 16310..16311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 562,
            column: 23,
            span: 16311..16316,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 562,
            column: 24,
            span: 16316..16317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 562,
            column: 28,
            span: 16317..16321,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 562,
            column: 29,
            span: 16321..16322,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 562,
            column: 32,
            span: 16322..16325,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 562,
            column: 33,
            span: 16325..16326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 562,
            column: 35,
            span: 16327..16328,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 562,
            column: 36,
            span: 16328..16329,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 562,
            column: 37,
            span: 16329..16330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 563,
            column: 9,
            span: 16333..16339,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 563,
            column: 10,
            span: 16339..16340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 563,
            column: 11,
            span: 16340..16341,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 563,
            column: 12,
            span: 16341..16342,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 563,
            column: 14,
            span: 16341..16344,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 563,
            column: 15,
            span: 16344..16345,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 563,
            column: 18,
            span: 16346..16348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 563,
            column: 20,
            span: 16349..16350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 563,
            column: 21,
            span: 16350..16351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 564,
            column: 9,
            span: 16354..16360,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 564,
            column: 10,
            span: 16360..16361,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 564,
            column: 11,
            span: 16361..16362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 564,
            column: 14,
            span: 16362..16365,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 564,
            column: 17,
            span: 16366..16368,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 564,
            column: 19,
            span: 16368..16370,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 564,
            column: 23,
            span: 16371..16374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 564,
            column: 27,
            span: 16375..16378,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 564,
            column: 28,
            span: 16378..16379,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 564,
            column: 29,
            span: 16378..16380,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 564,
            column: 30,
            span: 16380..16381,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 564,
            column: 33,
            span: 16382..16384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 564,
            column: 38,
            span: 16385..16389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 564,
            column: 39,
            span: 16389..16390,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 566,
            column: 8,
            span: 16394..16399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 566,
            column: 13,
            span: 16400..16404,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 566,
            column: 15,
            span: 16405..16406,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rawseti -1 100; return *\"",
        ),
        position: Position {
            line: 566,
            column: 42,
            span: 16407..16433,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 567,
            column: 8,
            span: 16436..16441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 567,
            column: 12,
            span: 16442..16445,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 567,
            column: 14,
            span: 16446..16447,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 567,
            column: 16,
            span: 16448..16449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 567,
            column: 17,
            span: 16449..16450,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 567,
            column: 18,
            span: 16450..16451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 567,
            column: 23,
            span: 16451..16456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 567,
            column: 24,
            span: 16456..16457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 567,
            column: 28,
            span: 16457..16461,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 567,
            column: 29,
            span: 16461..16462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 567,
            column: 31,
            span: 16463..16464,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 567,
            column: 32,
            span: 16464..16465,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 567,
            column: 33,
            span: 16465..16466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 568,
            column: 9,
            span: 16469..16475,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 568,
            column: 10,
            span: 16475..16476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 568,
            column: 11,
            span: 16476..16477,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 568,
            column: 12,
            span: 16477..16478,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 568,
            column: 15,
            span: 16477..16481,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 568,
            column: 16,
            span: 16481..16482,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 568,
            column: 19,
            span: 16483..16485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 568,
            column: 21,
            span: 16486..16487,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 568,
            column: 22,
            span: 16487..16488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 569,
            column: 9,
            span: 16491..16497,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 569,
            column: 10,
            span: 16497..16498,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 569,
            column: 11,
            span: 16498..16499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 569,
            column: 14,
            span: 16499..16502,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 569,
            column: 17,
            span: 16503..16505,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 569,
            column: 19,
            span: 16505..16507,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 569,
            column: 23,
            span: 16508..16511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 569,
            column: 27,
            span: 16512..16515,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 569,
            column: 28,
            span: 16515..16516,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 569,
            column: 29,
            span: 16515..16517,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 569,
            column: 30,
            span: 16517..16518,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 569,
            column: 33,
            span: 16519..16521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 569,
            column: 38,
            span: 16522..16526,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 569,
            column: 39,
            span: 16526..16527,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 571,
            column: 8,
            span: 16531..16536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 571,
            column: 13,
            span: 16537..16541,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 571,
            column: 15,
            span: 16542..16543,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"seti -1 200; return *\"",
        ),
        position: Position {
            line: 571,
            column: 39,
            span: 16544..16567,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 572,
            column: 8,
            span: 16570..16575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 572,
            column: 12,
            span: 16576..16579,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 572,
            column: 14,
            span: 16580..16581,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 572,
            column: 16,
            span: 16582..16583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 572,
            column: 17,
            span: 16583..16584,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 572,
            column: 18,
            span: 16584..16585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 572,
            column: 23,
            span: 16585..16590,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 572,
            column: 24,
            span: 16590..16591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 572,
            column: 28,
            span: 16591..16595,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 572,
            column: 29,
            span: 16595..16596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 572,
            column: 31,
            span: 16597..16598,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 572,
            column: 32,
            span: 16598..16599,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 572,
            column: 33,
            span: 16599..16600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 573,
            column: 9,
            span: 16603..16609,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 573,
            column: 10,
            span: 16609..16610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 573,
            column: 11,
            span: 16610..16611,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 573,
            column: 12,
            span: 16611..16612,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 573,
            column: 15,
            span: 16611..16615,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 573,
            column: 16,
            span: 16615..16616,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 573,
            column: 19,
            span: 16617..16619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 573,
            column: 21,
            span: 16620..16621,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 573,
            column: 22,
            span: 16621..16622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 574,
            column: 9,
            span: 16625..16631,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 574,
            column: 10,
            span: 16631..16632,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 574,
            column: 11,
            span: 16632..16633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 574,
            column: 14,
            span: 16633..16636,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 574,
            column: 17,
            span: 16637..16639,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 574,
            column: 19,
            span: 16639..16641,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 574,
            column: 23,
            span: 16642..16645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 574,
            column: 27,
            span: 16646..16649,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 574,
            column: 28,
            span: 16649..16650,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 574,
            column: 29,
            span: 16649..16651,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 574,
            column: 30,
            span: 16651..16652,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 574,
            column: 33,
            span: 16653..16655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 574,
            column: 38,
            span: 16656..16660,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 574,
            column: 39,
            span: 16660..16661,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 575,
            column: 0,
            span: 16662..16665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 577,
            column: 2,
            span: 16667..16668,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 577,
            column: 4,
            span: 16669..16670,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 577,
            column: 6,
            span: 16671..16672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 577,
            column: 7,
            span: 16672..16673,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 577,
            column: 8,
            span: 16673..16674,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 577,
            column: 9,
            span: 16673..16675,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 577,
            column: 10,
            span: 16675..16676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 577,
            column: 12,
            span: 16677..16678,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 577,
            column: 13,
            span: 16678..16679,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 577,
            column: 15,
            span: 16678..16681,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 577,
            column: 16,
            span: 16681..16682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 578,
            column: 2,
            span: 16683..16684,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 578,
            column: 3,
            span: 16684..16685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 578,
            column: 5,
            span: 16686..16687,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 578,
            column: 7,
            span: 16688..16689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 578,
            column: 9,
            span: 16690..16691,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 578,
            column: 10,
            span: 16691..16692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 578,
            column: 15,
            span: 16692..16697,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 578,
            column: 16,
            span: 16697..16698,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 2; pushvalue 4; gettable 2; return 2\"",
        ),
        position: Position {
            line: 578,
            column: 63,
            span: 16698..16745,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 578,
            column: 64,
            span: 16745..16746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 579,
            column: 18,
            span: 16763..16764,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 579,
            column: 19,
            span: 16764..16765,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 579,
            column: 21,
            span: 16765..16767,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 579,
            column: 22,
            span: 16767..16768,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 579,
            column: 26,
            span: 16769..16772,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 579,
            column: 27,
            span: 16772..16773,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 579,
            column: 29,
            span: 16773..16775,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 579,
            column: 30,
            span: 16775..16776,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 579,
            column: 34,
            span: 16777..16780,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 579,
            column: 35,
            span: 16780..16781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 580,
            column: 7,
            span: 16782..16788,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 580,
            column: 8,
            span: 16788..16789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 580,
            column: 9,
            span: 16789..16790,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 580,
            column: 12,
            span: 16791..16793,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 580,
            column: 14,
            span: 16793..16795,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 580,
            column: 18,
            span: 16796..16799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 580,
            column: 20,
            span: 16800..16801,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 580,
            column: 23,
            span: 16802..16804,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 580,
            column: 26,
            span: 16804..16807,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 580,
            column: 27,
            span: 16807..16808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 581,
            column: 2,
            span: 16809..16810,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 581,
            column: 3,
            span: 16810..16811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 581,
            column: 8,
            span: 16811..16816,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 581,
            column: 9,
            span: 16816..16817,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable -5\"",
        ),
        position: Position {
            line: 581,
            column: 22,
            span: 16817..16830,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 581,
            column: 23,
            span: 16830..16831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 581,
            column: 25,
            span: 16832..16833,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 581,
            column: 26,
            span: 16833..16834,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 581,
            column: 28,
            span: 16834..16836,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 581,
            column: 29,
            span: 16836..16837,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 581,
            column: 31,
            span: 16837..16839,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 581,
            column: 32,
            span: 16839..16840,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 581,
            column: 36,
            span: 16841..16844,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 581,
            column: 37,
            span: 16844..16845,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 581,
            column: 40,
            span: 16845..16848,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 581,
            column: 41,
            span: 16848..16849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 582,
            column: 7,
            span: 16850..16856,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 582,
            column: 8,
            span: 16856..16857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 582,
            column: 9,
            span: 16857..16858,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 582,
            column: 10,
            span: 16858..16859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 582,
            column: 11,
            span: 16859..16860,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 582,
            column: 14,
            span: 16861..16863,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 582,
            column: 17,
            span: 16863..16866,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 582,
            column: 18,
            span: 16866..16867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 583,
            column: 2,
            span: 16868..16869,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 583,
            column: 3,
            span: 16869..16870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 583,
            column: 4,
            span: 16870..16871,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 583,
            column: 5,
            span: 16871..16872,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 583,
            column: 7,
            span: 16873..16874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 583,
            column: 0,
            span: 16875..16880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 584,
            column: 2,
            span: 16881..16882,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 584,
            column: 4,
            span: 16883..16884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 584,
            column: 6,
            span: 16885..16886,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 584,
            column: 7,
            span: 16886..16887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 584,
            column: 12,
            span: 16887..16892,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 584,
            column: 13,
            span: 16892..16893,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 2; return 1\"",
        ),
        position: Position {
            line: 584,
            column: 35,
            span: 16893..16915,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 584,
            column: 36,
            span: 16915..16916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 584,
            column: 38,
            span: 16917..16918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 584,
            column: 39,
            span: 16918..16919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 585,
            column: 7,
            span: 16959..16965,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 585,
            column: 8,
            span: 16965..16966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 585,
            column: 9,
            span: 16966..16967,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 585,
            column: 12,
            span: 16968..16970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 585,
            column: 18,
            span: 16971..16976,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 585,
            column: 19,
            span: 16976..16977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 586,
            column: 2,
            span: 16978..16979,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 586,
            column: 3,
            span: 16979..16980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 586,
            column: 8,
            span: 16980..16985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 586,
            column: 9,
            span: 16985..16986,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable 2\"",
        ),
        position: Position {
            line: 586,
            column: 21,
            span: 16986..16998,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 586,
            column: 22,
            span: 16998..16999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 586,
            column: 24,
            span: 17000..17001,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 586,
            column: 25,
            span: 17001..17002,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 586,
            column: 29,
            span: 17003..17006,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 586,
            column: 30,
            span: 17006..17007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 587,
            column: 7,
            span: 17049..17055,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 587,
            column: 8,
            span: 17055..17056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 587,
            column: 9,
            span: 17056..17057,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 587,
            column: 10,
            span: 17057..17058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 587,
            column: 11,
            span: 17058..17059,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 587,
            column: 12,
            span: 17059..17060,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 587,
            column: 15,
            span: 17061..17063,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 587,
            column: 19,
            span: 17064..17067,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 587,
            column: 20,
            span: 17067..17068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 589,
            column: 2,
            span: 17070..17071,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 589,
            column: 4,
            span: 17072..17073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 589,
            column: 17,
            span: 17074..17086,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 589,
            column: 18,
            span: 17086..17087,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 589,
            column: 19,
            span: 17087..17088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 589,
            column: 20,
            span: 17088..17089,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 589,
            column: 22,
            span: 17090..17091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 589,
            column: 24,
            span: 17092..17093,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 589,
            column: 25,
            span: 17093..17094,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 589,
            column: 26,
            span: 17094..17095,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 589,
            column: 28,
            span: 17096..17097,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 589,
            column: 29,
            span: 17097..17098,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 589,
            column: 30,
            span: 17098..17099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 590,
            column: 13,
            span: 17100..17112,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 590,
            column: 14,
            span: 17112..17113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 590,
            column: 15,
            span: 17113..17114,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 590,
            column: 16,
            span: 17114..17115,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 590,
            column: 17,
            span: 17115..17116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 590,
            column: 24,
            span: 17116..17123,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 590,
            column: 26,
            span: 17124..17125,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 590,
            column: 35,
            span: 17126..17134,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 590,
            column: 37,
            span: 17135..17136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 590,
            column: 38,
            span: 17136..17137,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 590,
            column: 39,
            span: 17137..17138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 590,
            column: 41,
            span: 17139..17140,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 590,
            column: 42,
            span: 17140..17141,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 590,
            column: 49,
            span: 17142..17148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 590,
            column: 51,
            span: 17149..17150,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 590,
            column: 52,
            span: 17150..17151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 590,
            column: 53,
            span: 17151..17152,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 590,
            column: 54,
            span: 17152..17153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 590,
            column: 55,
            span: 17153..17154,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 590,
            column: 56,
            span: 17154..17155,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 590,
            column: 0,
            span: 17156..17159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 591,
            column: 2,
            span: 17160..17161,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 591,
            column: 3,
            span: 17161..17162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 591,
            column: 5,
            span: 17163..17164,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 591,
            column: 7,
            span: 17165..17166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 591,
            column: 9,
            span: 17167..17168,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 591,
            column: 10,
            span: 17168..17169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 591,
            column: 15,
            span: 17169..17174,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 591,
            column: 16,
            span: 17174..17175,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 3, return 2\"",
        ),
        position: Position {
            line: 591,
            column: 38,
            span: 17175..17197,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 591,
            column: 39,
            span: 17197..17198,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 591,
            column: 41,
            span: 17198..17200,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 591,
            column: 42,
            span: 17200..17201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 591,
            column: 44,
            span: 17202..17203,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 591,
            column: 45,
            span: 17203..17204,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 591,
            column: 48,
            span: 17204..17207,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 591,
            column: 49,
            span: 17207..17208,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 591,
            column: 52,
            span: 17208..17211,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 591,
            column: 53,
            span: 17211..17212,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 591,
            column: 57,
            span: 17213..17216,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 591,
            column: 58,
            span: 17216..17217,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 592,
            column: 7,
            span: 17218..17224,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 592,
            column: 8,
            span: 17224..17225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 592,
            column: 9,
            span: 17225..17226,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 592,
            column: 12,
            span: 17227..17229,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 592,
            column: 15,
            span: 17229..17232,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 592,
            column: 19,
            span: 17233..17236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 592,
            column: 21,
            span: 17237..17238,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 592,
            column: 24,
            span: 17239..17241,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 592,
            column: 27,
            span: 17241..17244,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 592,
            column: 28,
            span: 17244..17245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 593,
            column: 2,
            span: 17246..17247,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 593,
            column: 4,
            span: 17248..17249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 593,
            column: 6,
            span: 17250..17251,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 593,
            column: 7,
            span: 17251..17252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 593,
            column: 12,
            span: 17252..17257,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 593,
            column: 13,
            span: 17257..17258,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"getfield 2 y, return 1\"",
        ),
        position: Position {
            line: 593,
            column: 37,
            span: 17258..17282,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 593,
            column: 38,
            span: 17282..17283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 593,
            column: 40,
            span: 17284..17285,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 593,
            column: 41,
            span: 17285..17286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 594,
            column: 7,
            span: 17287..17293,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 594,
            column: 8,
            span: 17293..17294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 594,
            column: 9,
            span: 17294..17295,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 594,
            column: 12,
            span: 17296..17298,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 594,
            column: 15,
            span: 17298..17301,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 594,
            column: 16,
            span: 17301..17302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 595,
            column: 13,
            span: 17303..17315,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 595,
            column: 14,
            span: 17315..17316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 595,
            column: 15,
            span: 17316..17317,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 595,
            column: 16,
            span: 17317..17318,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 595,
            column: 17,
            span: 17318..17319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 595,
            column: 24,
            span: 17319..17326,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 595,
            column: 26,
            span: 17327..17328,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 595,
            column: 35,
            span: 17329..17337,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 595,
            column: 37,
            span: 17338..17339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 595,
            column: 38,
            span: 17339..17340,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 595,
            column: 39,
            span: 17340..17341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 595,
            column: 41,
            span: 17342..17343,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 595,
            column: 42,
            span: 17343..17344,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 595,
            column: 49,
            span: 17345..17351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 595,
            column: 51,
            span: 17352..17353,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 595,
            column: 52,
            span: 17353..17354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 595,
            column: 53,
            span: 17354..17355,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 595,
            column: 54,
            span: 17355..17356,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 595,
            column: 0,
            span: 17357..17360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 596,
            column: 13,
            span: 17361..17373,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 596,
            column: 14,
            span: 17373..17374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 596,
            column: 15,
            span: 17374..17375,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 596,
            column: 16,
            span: 17375..17376,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 596,
            column: 17,
            span: 17376..17377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        position: Position {
            line: 596,
            column: 27,
            span: 17377..17387,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 596,
            column: 29,
            span: 17388..17389,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 596,
            column: 38,
            span: 17390..17398,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 596,
            column: 40,
            span: 17399..17400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 596,
            column: 41,
            span: 17400..17401,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 596,
            column: 42,
            span: 17401..17402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 596,
            column: 44,
            span: 17403..17404,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 596,
            column: 45,
            span: 17404..17405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 596,
            column: 46,
            span: 17405..17406,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 596,
            column: 48,
            span: 17407..17408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 596,
            column: 50,
            span: 17409..17410,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 596,
            column: 51,
            span: 17410..17411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 596,
            column: 52,
            span: 17411..17412,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 596,
            column: 53,
            span: 17412..17413,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 596,
            column: 55,
            span: 17414..17415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 596,
            column: 57,
            span: 17416..17417,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 596,
            column: 0,
            span: 17418..17421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 597,
            column: 2,
            span: 17422..17423,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 597,
            column: 4,
            span: 17424..17425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 597,
            column: 6,
            span: 17426..17427,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 597,
            column: 7,
            span: 17427..17428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 597,
            column: 12,
            span: 17428..17433,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 597,
            column: 13,
            span: 17433..17434,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert 2; gettable -5; return 1\"",
        ),
        position: Position {
            line: 597,
            column: 46,
            span: 17434..17467,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 597,
            column: 47,
            span: 17467..17468,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 597,
            column: 49,
            span: 17468..17470,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 597,
            column: 50,
            span: 17470..17471,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 597,
            column: 52,
            span: 17471..17473,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 597,
            column: 53,
            span: 17473..17474,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 597,
            column: 55,
            span: 17474..17476,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 597,
            column: 56,
            span: 17476..17477,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 597,
            column: 60,
            span: 17478..17481,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 597,
            column: 61,
            span: 17481..17482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 597,
            column: 63,
            span: 17483..17484,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 597,
            column: 64,
            span: 17484..17485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 598,
            column: 7,
            span: 17486..17492,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 598,
            column: 8,
            span: 17492..17493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 598,
            column: 9,
            span: 17493..17494,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 598,
            column: 12,
            span: 17495..17497,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 598,
            column: 15,
            span: 17497..17500,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 598,
            column: 16,
            span: 17500..17501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 599,
            column: 2,
            span: 17502..17503,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 599,
            column: 4,
            span: 17504..17505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 599,
            column: 6,
            span: 17506..17507,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 599,
            column: 7,
            span: 17507..17508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 599,
            column: 12,
            span: 17508..17513,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 599,
            column: 13,
            span: 17513..17514,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable -5, return 1\"",
        ),
        position: Position {
            line: 599,
            column: 36,
            span: 17514..17537,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 599,
            column: 37,
            span: 17537..17538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 599,
            column: 39,
            span: 17539..17540,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 599,
            column: 40,
            span: 17540..17541,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 599,
            column: 42,
            span: 17541..17543,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 599,
            column: 43,
            span: 17543..17544,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 599,
            column: 45,
            span: 17544..17546,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 599,
            column: 46,
            span: 17546..17547,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 599,
            column: 50,
            span: 17548..17551,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 599,
            column: 51,
            span: 17551..17552,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 599,
            column: 54,
            span: 17552..17555,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 599,
            column: 55,
            span: 17555..17556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 600,
            column: 7,
            span: 17557..17563,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 600,
            column: 8,
            span: 17563..17564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 600,
            column: 9,
            span: 17564..17565,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 600,
            column: 10,
            span: 17565..17566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 600,
            column: 11,
            span: 17566..17567,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 600,
            column: 14,
            span: 17568..17570,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 600,
            column: 17,
            span: 17570..17573,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 600,
            column: 21,
            span: 17574..17577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 600,
            column: 23,
            span: 17578..17579,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 600,
            column: 26,
            span: 17580..17582,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 600,
            column: 28,
            span: 17582..17584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 600,
            column: 29,
            span: 17584..17585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 601,
            column: 2,
            span: 17586..17587,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 601,
            column: 3,
            span: 17587..17588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 601,
            column: 4,
            span: 17588..17589,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 601,
            column: 5,
            span: 17589..17590,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 601,
            column: 7,
            span: 17591..17592,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        position: Position {
            line: 601,
            column: 14,
            span: 17593..17599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 602,
            column: 2,
            span: 17600..17601,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 602,
            column: 4,
            span: 17602..17603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 602,
            column: 6,
            span: 17604..17605,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 602,
            column: 7,
            span: 17605..17606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 602,
            column: 12,
            span: 17606..17611,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 602,
            column: 13,
            span: 17611..17612,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 2, return 1\"",
        ),
        position: Position {
            line: 602,
            column: 35,
            span: 17612..17634,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 602,
            column: 36,
            span: 17634..17635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 602,
            column: 38,
            span: 17636..17637,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 602,
            column: 39,
            span: 17637..17638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 603,
            column: 7,
            span: 17639..17645,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 603,
            column: 8,
            span: 17645..17646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 603,
            column: 9,
            span: 17646..17647,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 603,
            column: 12,
            span: 17648..17650,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        position: Position {
            line: 603,
            column: 19,
            span: 17651..17657,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 603,
            column: 20,
            span: 17657..17658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 604,
            column: 2,
            span: 17659..17660,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 604,
            column: 3,
            span: 17660..17661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 604,
            column: 8,
            span: 17661..17666,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 604,
            column: 9,
            span: 17666..17667,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable 2\"",
        ),
        position: Position {
            line: 604,
            column: 21,
            span: 17667..17679,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 604,
            column: 22,
            span: 17679..17680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 604,
            column: 24,
            span: 17681..17682,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 604,
            column: 25,
            span: 17682..17683,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 604,
            column: 28,
            span: 17683..17686,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 604,
            column: 29,
            span: 17686..17687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 605,
            column: 7,
            span: 17688..17694,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 605,
            column: 8,
            span: 17694..17695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 605,
            column: 9,
            span: 17695..17696,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 605,
            column: 10,
            span: 17696..17697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 605,
            column: 11,
            span: 17697..17698,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 605,
            column: 12,
            span: 17698..17699,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 605,
            column: 15,
            span: 17700..17702,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 605,
            column: 18,
            span: 17702..17705,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 605,
            column: 19,
            span: 17705..17706,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 608,
            column: 3,
            span: 17711..17713,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 609,
            column: 8,
            span: 17762..17767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 609,
            column: 10,
            span: 17768..17769,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 609,
            column: 12,
            span: 17770..17771,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 609,
            column: 14,
            span: 17772..17773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_012345678901234567890123456789012345678901234567890123456789",
        ),
        position: Position {
            line: 609,
            column: 75,
            span: 17773..17834,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 609,
            column: 77,
            span: 17835..17836,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 609,
            column: 80,
            span: 17836..17839,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 609,
            column: 81,
            span: 17839..17840,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 610,
            column: 8,
            span: 17843..17848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 610,
            column: 10,
            span: 17849..17850,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 610,
            column: 12,
            span: 17851..17852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 610,
            column: 14,
            span: 17853..17854,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 610,
            column: 15,
            span: 17854..17855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 610,
            column: 20,
            span: 17855..17860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 610,
            column: 21,
            span: 17860..17861,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    getfield 2 _012345678901234567890123456789012345678901234567890123456789\n    return 1\n  ]]",
        ),
        position: Position {
            line: 613,
            column: 5,
            span: 17861..17958,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 613,
            column: 6,
            span: 17958..17959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 613,
            column: 8,
            span: 17960..17961,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 613,
            column: 9,
            span: 17961..17962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 614,
            column: 9,
            span: 17965..17971,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 614,
            column: 10,
            span: 17971..17972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 614,
            column: 11,
            span: 17972..17973,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 614,
            column: 14,
            span: 17974..17976,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 614,
            column: 17,
            span: 17976..17979,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 614,
            column: 18,
            span: 17979..17980,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 615,
            column: 8,
            span: 17983..17988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 615,
            column: 10,
            span: 17989..17990,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 615,
            column: 12,
            span: 17991..17992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 615,
            column: 14,
            span: 17993..17994,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 615,
            column: 15,
            span: 17994..17995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 615,
            column: 20,
            span: 17995..18000,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 615,
            column: 21,
            span: 18000..18001,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    pushnum 33\n    setglobal _012345678901234567890123456789012345678901234567890123456789\n  ]]",
        ),
        position: Position {
            line: 618,
            column: 5,
            span: 18001..18099,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 618,
            column: 6,
            span: 18099..18100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 619,
            column: 9,
            span: 18103..18109,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 619,
            column: 10,
            span: 18109..18110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_012345678901234567890123456789012345678901234567890123456789",
        ),
        position: Position {
            line: 619,
            column: 71,
            span: 18110..18171,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 619,
            column: 74,
            span: 18172..18174,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 619,
            column: 77,
            span: 18174..18177,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 619,
            column: 78,
            span: 18177..18178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_012345678901234567890123456789012345678901234567890123456789",
        ),
        position: Position {
            line: 620,
            column: 64,
            span: 18181..18242,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 620,
            column: 66,
            span: 18243..18244,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 620,
            column: 0,
            span: 18245..18248,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 621,
            column: 0,
            span: 18249..18252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 624,
            column: 2,
            span: 18270..18271,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 624,
            column: 4,
            span: 18272..18273,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 624,
            column: 6,
            span: 18274..18275,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 624,
            column: 7,
            span: 18275..18276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 625,
            column: 2,
            span: 18277..18278,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 625,
            column: 4,
            span: 18279..18280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 625,
            column: 9,
            span: 18281..18285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 625,
            column: 10,
            span: 18285..18286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 625,
            column: 11,
            span: 18286..18287,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 625,
            column: 12,
            span: 18287..18288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 625,
            column: 17,
            span: 18288..18293,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 625,
            column: 18,
            span: 18293..18294,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"next; return *\"",
        ),
        position: Position {
            line: 625,
            column: 34,
            span: 18294..18310,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 625,
            column: 35,
            span: 18310..18311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 625,
            column: 37,
            span: 18312..18313,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 625,
            column: 38,
            span: 18313..18314,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 625,
            column: 42,
            span: 18315..18318,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 625,
            column: 43,
            span: 18318..18319,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 625,
            column: 44,
            span: 18319..18320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 626,
            column: 7,
            span: 18321..18327,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 626,
            column: 8,
            span: 18327..18328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 626,
            column: 9,
            span: 18328..18329,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 626,
            column: 10,
            span: 18329..18330,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 626,
            column: 12,
            span: 18331..18332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 626,
            column: 13,
            span: 18332..18333,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 626,
            column: 14,
            span: 18333..18334,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 626,
            column: 15,
            span: 18333..18335,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 626,
            column: 16,
            span: 18335..18336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 626,
            column: 17,
            span: 18336..18337,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 626,
            column: 18,
            span: 18337..18338,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 626,
            column: 19,
            span: 18338..18339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 627,
            column: 2,
            span: 18340..18341,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 627,
            column: 4,
            span: 18342..18343,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 627,
            column: 6,
            span: 18344..18345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 627,
            column: 7,
            span: 18345..18346,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 627,
            column: 8,
            span: 18346..18347,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 627,
            column: 9,
            span: 18346..18348,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 627,
            column: 10,
            span: 18348..18349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 628,
            column: 2,
            span: 18350..18351,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 628,
            column: 4,
            span: 18352..18353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 628,
            column: 9,
            span: 18354..18358,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 628,
            column: 10,
            span: 18358..18359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 628,
            column: 11,
            span: 18359..18360,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 628,
            column: 12,
            span: 18360..18361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 628,
            column: 17,
            span: 18361..18366,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 628,
            column: 18,
            span: 18366..18367,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"next; return *\"",
        ),
        position: Position {
            line: 628,
            column: 34,
            span: 18367..18383,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 628,
            column: 35,
            span: 18383..18384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 628,
            column: 37,
            span: 18385..18386,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 628,
            column: 38,
            span: 18386..18387,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 628,
            column: 42,
            span: 18388..18391,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 628,
            column: 43,
            span: 18391..18392,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 628,
            column: 44,
            span: 18392..18393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 629,
            column: 7,
            span: 18394..18400,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 629,
            column: 8,
            span: 18400..18401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 629,
            column: 9,
            span: 18401..18402,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 629,
            column: 10,
            span: 18402..18403,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 629,
            column: 12,
            span: 18404..18405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 629,
            column: 13,
            span: 18405..18406,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 629,
            column: 14,
            span: 18406..18407,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 629,
            column: 15,
            span: 18406..18408,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 629,
            column: 16,
            span: 18408..18409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 629,
            column: 17,
            span: 18409..18410,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 629,
            column: 18,
            span: 18410..18411,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 629,
            column: 21,
            span: 18411..18414,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 629,
            column: 22,
            span: 18414..18415,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 629,
            column: 23,
            span: 18414..18416,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 629,
            column: 24,
            span: 18416..18417,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 629,
            column: 25,
            span: 18417..18418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 630,
            column: 2,
            span: 18419..18420,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 630,
            column: 4,
            span: 18421..18422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 630,
            column: 9,
            span: 18423..18427,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 630,
            column: 10,
            span: 18427..18428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 630,
            column: 11,
            span: 18428..18429,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 630,
            column: 12,
            span: 18429..18430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 630,
            column: 17,
            span: 18430..18435,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 630,
            column: 18,
            span: 18435..18436,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"next; pop 1; next; return *\"",
        ),
        position: Position {
            line: 630,
            column: 47,
            span: 18436..18465,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 630,
            column: 48,
            span: 18465..18466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 630,
            column: 50,
            span: 18467..18468,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 630,
            column: 51,
            span: 18468..18469,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 630,
            column: 55,
            span: 18470..18473,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 630,
            column: 56,
            span: 18473..18474,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 630,
            column: 57,
            span: 18474..18475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 631,
            column: 7,
            span: 18476..18482,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 631,
            column: 8,
            span: 18482..18483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 631,
            column: 9,
            span: 18483..18484,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 631,
            column: 10,
            span: 18484..18485,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 631,
            column: 12,
            span: 18486..18487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 631,
            column: 13,
            span: 18487..18488,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 631,
            column: 14,
            span: 18488..18489,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 631,
            column: 15,
            span: 18488..18490,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 631,
            column: 16,
            span: 18490..18491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 631,
            column: 17,
            span: 18491..18492,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 631,
            column: 18,
            span: 18492..18493,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 631,
            column: 19,
            span: 18493..18494,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 637,
            column: 0,
            span: 18519..18521,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 638,
            column: 8,
            span: 18524..18529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 638,
            column: 10,
            span: 18530..18531,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 638,
            column: 12,
            span: 18532..18533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 638,
            column: 14,
            span: 18534..18535,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 638,
            column: 15,
            span: 18535..18536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 638,
            column: 20,
            span: 18536..18541,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ pushnum 10; pushnum 20; pushcclosure 2; return 1]]",
        ),
        position: Position {
            line: 638,
            column: 73,
            span: 18541..18594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 639,
            column: 4,
            span: 18597..18598,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 639,
            column: 5,
            span: 18598..18599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 639,
            column: 7,
            span: 18600..18601,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 639,
            column: 8,
            span: 18601..18602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 639,
            column: 10,
            span: 18603..18604,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 639,
            column: 12,
            span: 18605..18606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 639,
            column: 14,
            span: 18607..18608,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 639,
            column: 15,
            span: 18608..18609,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushvalue U0; pushvalue U1; pushvalue U2; return 3]]",
        ),
        position: Position {
            line: 639,
            column: 69,
            span: 18609..18663,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 639,
            column: 70,
            span: 18663..18664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 640,
            column: 9,
            span: 18667..18673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 640,
            column: 10,
            span: 18673..18674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 640,
            column: 11,
            span: 18674..18675,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 640,
            column: 14,
            span: 18676..18678,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 640,
            column: 17,
            span: 18678..18681,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 640,
            column: 21,
            span: 18682..18685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 640,
            column: 23,
            span: 18686..18687,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 640,
            column: 26,
            span: 18688..18690,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 640,
            column: 29,
            span: 18690..18693,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 640,
            column: 33,
            span: 18694..18697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 640,
            column: 38,
            span: 18698..18702,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 640,
            column: 39,
            span: 18702..18703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 640,
            column: 40,
            span: 18703..18704,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 640,
            column: 41,
            span: 18704..18705,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 640,
            column: 44,
            span: 18706..18708,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 640,
            column: 52,
            span: 18709..18716,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 640,
            column: 53,
            span: 18716..18717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 641,
            column: 4,
            span: 18720..18721,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 641,
            column: 5,
            span: 18721..18722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 641,
            column: 7,
            span: 18723..18724,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 641,
            column: 9,
            span: 18725..18726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 641,
            column: 11,
            span: 18727..18728,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 641,
            column: 12,
            span: 18728..18729,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[tostring U3; tonumber U4; return 2]]",
        ),
        position: Position {
            line: 641,
            column: 50,
            span: 18729..18767,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 641,
            column: 51,
            span: 18767..18768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 642,
            column: 9,
            span: 18771..18777,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 642,
            column: 10,
            span: 18777..18778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 642,
            column: 11,
            span: 18778..18779,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 642,
            column: 14,
            span: 18780..18782,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 642,
            column: 18,
            span: 18783..18786,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 642,
            column: 22,
            span: 18787..18790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 642,
            column: 24,
            span: 18791..18792,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 642,
            column: 27,
            span: 18793..18795,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 642,
            column: 29,
            span: 18795..18797,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 642,
            column: 30,
            span: 18797..18798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 643,
            column: 4,
            span: 18801..18802,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 643,
            column: 5,
            span: 18802..18803,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushnum 100; pushnum 200; replace U2; replace U1]]",
        ),
        position: Position {
            line: 643,
            column: 57,
            span: 18803..18855,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 643,
            column: 58,
            span: 18855..18856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 644,
            column: 4,
            span: 18859..18860,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 644,
            column: 5,
            span: 18860..18861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 644,
            column: 7,
            span: 18862..18863,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 644,
            column: 9,
            span: 18864..18865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 644,
            column: 11,
            span: 18866..18867,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 644,
            column: 12,
            span: 18867..18868,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushvalue U1; pushvalue U2; return 2]]",
        ),
        position: Position {
            line: 644,
            column: 52,
            span: 18868..18908,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 644,
            column: 53,
            span: 18908..18909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 645,
            column: 9,
            span: 18912..18918,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 645,
            column: 10,
            span: 18918..18919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 645,
            column: 11,
            span: 18919..18920,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 645,
            column: 14,
            span: 18921..18923,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 645,
            column: 18,
            span: 18923..18927,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 645,
            column: 22,
            span: 18928..18931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 645,
            column: 24,
            span: 18932..18933,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 645,
            column: 27,
            span: 18934..18936,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 645,
            column: 31,
            span: 18936..18940,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 645,
            column: 32,
            span: 18940..18941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 646,
            column: 4,
            span: 18944..18945,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 646,
            column: 5,
            span: 18945..18946,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[replace U2; replace U1]]",
        ),
        position: Position {
            line: 646,
            column: 31,
            span: 18946..18972,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 646,
            column: 32,
            span: 18972..18973,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 646,
            column: 34,
            span: 18974..18975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 646,
            column: 35,
            span: 18975..18976,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 646,
            column: 36,
            span: 18976..18977,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 646,
            column: 37,
            span: 18976..18978,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 646,
            column: 38,
            span: 18978..18979,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 646,
            column: 39,
            span: 18979..18980,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 646,
            column: 41,
            span: 18981..18982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 646,
            column: 42,
            span: 18982..18983,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 646,
            column: 43,
            span: 18983..18984,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 646,
            column: 44,
            span: 18983..18985,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 646,
            column: 45,
            span: 18985..18986,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 646,
            column: 46,
            span: 18986..18987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 647,
            column: 4,
            span: 18990..18991,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 647,
            column: 5,
            span: 18991..18992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 647,
            column: 7,
            span: 18993..18994,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 647,
            column: 9,
            span: 18995..18996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 647,
            column: 11,
            span: 18997..18998,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 647,
            column: 12,
            span: 18998..18999,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushvalue U1; pushvalue U2; return 2]]",
        ),
        position: Position {
            line: 647,
            column: 52,
            span: 18999..19039,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 647,
            column: 53,
            span: 19039..19040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 648,
            column: 9,
            span: 19043..19049,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 648,
            column: 10,
            span: 19049..19050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 648,
            column: 11,
            span: 19050..19051,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 648,
            column: 12,
            span: 19051..19052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 648,
            column: 13,
            span: 19052..19053,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 648,
            column: 16,
            span: 19054..19056,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 648,
            column: 18,
            span: 19056..19058,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 648,
            column: 22,
            span: 19059..19062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 648,
            column: 24,
            span: 19063..19064,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 648,
            column: 25,
            span: 19064..19065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 648,
            column: 26,
            span: 19065..19066,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 648,
            column: 29,
            span: 19067..19069,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 648,
            column: 31,
            span: 19069..19071,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 648,
            column: 32,
            span: 19071..19072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 649,
            column: 4,
            span: 19075..19076,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 649,
            column: 5,
            span: 19076..19077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmemory",
        ),
        position: Position {
            line: 649,
            column: 16,
            span: 19077..19088,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 649,
            column: 17,
            span: 19088..19089,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 649,
            column: 18,
            span: 19089..19090,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 650,
            column: 0,
            span: 19091..19094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 654,
            column: 7,
            span: 19149..19155,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 654,
            column: 8,
            span: 19155..19156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 654,
            column: 9,
            span: 19156..19157,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 654,
            column: 10,
            span: 19157..19158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 654,
            column: 15,
            span: 19158..19163,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[isnull U1; return 1]]",
        ),
        position: Position {
            line: 654,
            column: 38,
            span: 19163..19186,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 654,
            column: 41,
            span: 19187..19189,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 654,
            column: 46,
            span: 19190..19194,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 654,
            column: 47,
            span: 19194..19195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 655,
            column: 7,
            span: 19196..19202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 655,
            column: 8,
            span: 19202..19203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 655,
            column: 9,
            span: 19203..19204,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 655,
            column: 10,
            span: 19204..19205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 655,
            column: 15,
            span: 19205..19210,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[isnull U100; return 1]]",
        ),
        position: Position {
            line: 655,
            column: 40,
            span: 19210..19235,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 655,
            column: 43,
            span: 19236..19238,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 655,
            column: 48,
            span: 19239..19243,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 655,
            column: 49,
            span: 19243..19244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 656,
            column: 7,
            span: 19245..19251,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 656,
            column: 8,
            span: 19251..19252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 656,
            column: 9,
            span: 19252..19253,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 656,
            column: 10,
            span: 19253..19254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 656,
            column: 15,
            span: 19254..19259,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushvalue U1; return 1]]",
        ),
        position: Position {
            line: 656,
            column: 41,
            span: 19259..19285,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 656,
            column: 44,
            span: 19286..19288,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 656,
            column: 48,
            span: 19289..19292,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 656,
            column: 49,
            span: 19292..19293,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 658,
            column: 6,
            span: 19295..19300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 658,
            column: 8,
            span: 19301..19302,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 658,
            column: 10,
            span: 19303..19304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 658,
            column: 12,
            span: 19305..19306,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 658,
            column: 13,
            span: 19306..19307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 658,
            column: 18,
            span: 19307..19312,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ pushnum 10; pushnum 20; pushcclosure 2; return 1]]",
        ),
        position: Position {
            line: 658,
            column: 71,
            span: 19312..19365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 659,
            column: 7,
            span: 19366..19372,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 659,
            column: 8,
            span: 19372..19373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 659,
            column: 9,
            span: 19373..19374,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 659,
            column: 10,
            span: 19374..19375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 659,
            column: 17,
            span: 19375..19382,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 659,
            column: 18,
            span: 19382..19383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 659,
            column: 19,
            span: 19383..19384,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 659,
            column: 20,
            span: 19384..19385,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 659,
            column: 22,
            span: 19385..19387,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 659,
            column: 23,
            span: 19387..19388,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 659,
            column: 26,
            span: 19389..19391,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 659,
            column: 29,
            span: 19391..19394,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 659,
            column: 0,
            span: 19395..19398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 660,
            column: 9,
            span: 19406..19407,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 660,
            column: 10,
            span: 19407..19408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 660,
            column: 17,
            span: 19408..19415,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 660,
            column: 18,
            span: 19415..19416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 660,
            column: 19,
            span: 19416..19417,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 660,
            column: 20,
            span: 19417..19418,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 660,
            column: 22,
            span: 19418..19420,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 660,
            column: 23,
            span: 19420..19421,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 660,
            column: 26,
            span: 19422..19424,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 660,
            column: 29,
            span: 19424..19427,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 660,
            column: 0,
            span: 19428..19431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 661,
            column: 9,
            span: 19439..19440,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 661,
            column: 10,
            span: 19440..19441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 661,
            column: 17,
            span: 19441..19448,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 661,
            column: 18,
            span: 19448..19449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 661,
            column: 19,
            span: 19449..19450,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 661,
            column: 20,
            span: 19450..19451,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 661,
            column: 22,
            span: 19451..19453,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 661,
            column: 23,
            span: 19453..19454,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 661,
            column: 26,
            span: 19455..19457,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 661,
            column: 30,
            span: 19458..19461,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 661,
            column: 31,
            span: 19461..19462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 662,
            column: 2,
            span: 19463..19464,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 662,
            column: 3,
            span: 19464..19465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 662,
            column: 10,
            span: 19465..19472,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 662,
            column: 11,
            span: 19472..19473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 662,
            column: 12,
            span: 19473..19474,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 662,
            column: 13,
            span: 19474..19475,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 662,
            column: 15,
            span: 19475..19477,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 662,
            column: 16,
            span: 19477..19478,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 662,
            column: 23,
            span: 19479..19485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 662,
            column: 24,
            span: 19485..19486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 663,
            column: 7,
            span: 19487..19493,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 663,
            column: 8,
            span: 19493..19494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 663,
            column: 9,
            span: 19494..19495,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 663,
            column: 10,
            span: 19495..19496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 663,
            column: 17,
            span: 19496..19503,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 663,
            column: 18,
            span: 19503..19504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 663,
            column: 19,
            span: 19504..19505,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 663,
            column: 20,
            span: 19505..19506,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 663,
            column: 22,
            span: 19506..19508,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 663,
            column: 23,
            span: 19508..19509,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 663,
            column: 26,
            span: 19510..19512,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 663,
            column: 33,
            span: 19513..19519,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 663,
            column: 34,
            span: 19519..19520,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 667,
            column: 0,
            span: 19541..19543,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 668,
            column: 8,
            span: 19546..19551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 668,
            column: 10,
            span: 19552..19553,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 668,
            column: 12,
            span: 19554..19555,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"checkstack 300 msg;\"",
        ),
        position: Position {
            line: 668,
            column: 34,
            span: 19556..19577,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 668,
            column: 37,
            span: 19578..19580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 669,
            column: 19,
            span: 19593..19599,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 669,
            column: 20,
            span: 19599..19600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 669,
            column: 23,
            span: 19600..19603,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 669,
            column: 24,
            span: 19603..19604,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10;\"",
        ),
        position: Position {
            line: 669,
            column: 37,
            span: 19604..19617,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 669,
            column: 38,
            span: 19617..19618,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 669,
            column: 42,
            span: 19618..19622,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 669,
            column: 43,
            span: 19622..19623,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 669,
            column: 46,
            span: 19624..19626,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushcclosure 255; return 1\"",
        ),
        position: Position {
            line: 670,
            column: 41,
            span: 19639..19667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 671,
            column: 4,
            span: 19670..19671,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 671,
            column: 6,
            span: 19672..19673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 671,
            column: 8,
            span: 19674..19675,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 671,
            column: 9,
            span: 19675..19676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 671,
            column: 14,
            span: 19676..19681,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 671,
            column: 15,
            span: 19681..19682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 671,
            column: 16,
            span: 19682..19683,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 671,
            column: 17,
            span: 19683..19684,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 672,
            column: 6,
            span: 19687..19690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 672,
            column: 8,
            span: 19691..19692,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 672,
            column: 9,
            span: 19692..19693,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 672,
            column: 10,
            span: 19692..19694,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 672,
            column: 11,
            span: 19694..19695,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 672,
            column: 14,
            span: 19694..19698,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 672,
            column: 0,
            span: 19699..19701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 673,
            column: 11,
            span: 19706..19712,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 673,
            column: 12,
            span: 19712..19713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 673,
            column: 13,
            span: 19713..19714,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 673,
            column: 14,
            span: 19714..19715,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 673,
            column: 15,
            span: 19715..19716,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushvalue U%d; return 1\"",
        ),
        position: Position {
            line: 673,
            column: 40,
            span: 19716..19741,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 673,
            column: 41,
            span: 19741..19742,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 673,
            column: 42,
            span: 19742..19743,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 673,
            column: 48,
            span: 19743..19749,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 673,
            column: 49,
            span: 19749..19750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 673,
            column: 50,
            span: 19750..19751,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 673,
            column: 51,
            span: 19751..19752,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 673,
            column: 52,
            span: 19752..19753,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 673,
            column: 55,
            span: 19754..19756,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 673,
            column: 58,
            span: 19756..19759,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 673,
            column: 59,
            span: 19759..19760,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 674,
            column: 0,
            span: 19763..19766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 675,
            column: 9,
            span: 19769..19775,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 675,
            column: 10,
            span: 19775..19776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 675,
            column: 11,
            span: 19776..19777,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 675,
            column: 12,
            span: 19777..19778,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isnull U256; return 1\"",
        ),
        position: Position {
            line: 675,
            column: 35,
            span: 19778..19801,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 675,
            column: 36,
            span: 19801..19802,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 675,
            column: 37,
            span: 19802..19803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 676,
            column: 9,
            span: 19806..19812,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 676,
            column: 10,
            span: 19812..19813,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 676,
            column: 13,
            span: 19813..19816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 676,
            column: 15,
            span: 19817..19818,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 676,
            column: 16,
            span: 19818..19819,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isnil U256; return 1\"",
        ),
        position: Position {
            line: 676,
            column: 38,
            span: 19819..19841,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 676,
            column: 39,
            span: 19841..19842,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 676,
            column: 40,
            span: 19842..19843,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 677,
            column: 0,
            span: 19844..19847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 683,
            column: 9,
            span: 19895..19903,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 683,
            column: 10,
            span: 19903..19904,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"got number\"",
        ),
        position: Position {
            line: 683,
            column: 22,
            span: 19904..19916,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 683,
            column: 23,
            span: 19916..19917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 683,
            column: 29,
            span: 19918..19923,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 683,
            column: 30,
            span: 19923..19924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 683,
            column: 42,
            span: 19924..19936,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 683,
            column: 43,
            span: 19936..19937,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 683,
            column: 45,
            span: 19937..19939,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 683,
            column: 46,
            span: 19939..19940,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 683,
            column: 48,
            span: 19941..19942,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 683,
            column: 49,
            span: 19942..19943,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 683,
            column: 50,
            span: 19943..19944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 684,
            column: 9,
            span: 19945..19953,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 684,
            column: 10,
            span: 19953..19954,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"got nil\"",
        ),
        position: Position {
            line: 684,
            column: 19,
            span: 19954..19963,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 684,
            column: 20,
            span: 19963..19964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 684,
            column: 26,
            span: 19965..19970,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 684,
            column: 27,
            span: 19970..19971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 684,
            column: 39,
            span: 19971..19983,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 684,
            column: 40,
            span: 19983..19984,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 684,
            column: 44,
            span: 19985..19988,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 684,
            column: 45,
            span: 19988..19989,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 684,
            column: 47,
            span: 19990..19991,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 684,
            column: 48,
            span: 19991..19992,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 684,
            column: 49,
            span: 19992..19993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 685,
            column: 9,
            span: 19994..20002,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 685,
            column: 10,
            span: 20002..20003,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"got light userdata\"",
        ),
        position: Position {
            line: 685,
            column: 30,
            span: 20003..20023,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 685,
            column: 31,
            span: 20023..20024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 685,
            column: 37,
            span: 20025..20030,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 685,
            column: 38,
            span: 20030..20031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 685,
            column: 50,
            span: 20031..20043,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 685,
            column: 51,
            span: 20043..20044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 685,
            column: 53,
            span: 20045..20046,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 685,
            column: 54,
            span: 20046..20047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 685,
            column: 66,
            span: 20047..20059,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 685,
            column: 67,
            span: 20059..20060,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 685,
            column: 68,
            span: 20059..20061,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 685,
            column: 69,
            span: 20061..20062,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 685,
            column: 70,
            span: 20062..20063,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 685,
            column: 72,
            span: 20064..20065,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 685,
            column: 73,
            span: 20065..20066,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 685,
            column: 74,
            span: 20066..20067,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 688,
            column: 6,
            span: 20101..20106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 688,
            column: 8,
            span: 20107..20108,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 688,
            column: 10,
            span: 20109..20110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 688,
            column: 12,
            span: 20111..20112,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 688,
            column: 13,
            span: 20112..20113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 688,
            column: 24,
            span: 20113..20124,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 688,
            column: 25,
            span: 20124..20125,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 688,
            column: 26,
            span: 20124..20126,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 688,
            column: 27,
            span: 20126..20127,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 688,
            column: 30,
            span: 20127..20130,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 688,
            column: 31,
            span: 20130..20131,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 689,
            column: 4,
            span: 20132..20135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 689,
            column: 6,
            span: 20136..20137,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 689,
            column: 8,
            span: 20138..20139,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 689,
            column: 10,
            span: 20139..20141,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 689,
            column: 11,
            span: 20141..20142,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 689,
            column: 14,
            span: 20142..20145,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 689,
            column: 0,
            span: 20146..20148,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 690,
            column: 8,
            span: 20151..20156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 690,
            column: 10,
            span: 20157..20158,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 690,
            column: 11,
            span: 20158..20159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 690,
            column: 13,
            span: 20160..20161,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 690,
            column: 15,
            span: 20162..20163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 690,
            column: 21,
            span: 20164..20169,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 690,
            column: 22,
            span: 20169..20170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 690,
            column: 34,
            span: 20170..20182,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 690,
            column: 35,
            span: 20182..20183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 690,
            column: 36,
            span: 20183..20184,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 690,
            column: 37,
            span: 20184..20185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 690,
            column: 39,
            span: 20186..20187,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 690,
            column: 40,
            span: 20187..20188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 691,
            column: 9,
            span: 20191..20197,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 691,
            column: 10,
            span: 20197..20198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 691,
            column: 11,
            span: 20198..20199,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 691,
            column: 14,
            span: 20200..20202,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 691,
            column: 18,
            span: 20203..20206,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 691,
            column: 22,
            span: 20207..20210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 691,
            column: 24,
            span: 20211..20212,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 691,
            column: 25,
            span: 20212..20213,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 692,
            column: 0,
            span: 20214..20217,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 693,
            column: 3,
            span: 20218..20220,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 694,
            column: 8,
            span: 20249..20254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 694,
            column: 10,
            span: 20255..20256,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 694,
            column: 11,
            span: 20256..20257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 694,
            column: 13,
            span: 20258..20259,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 694,
            column: 15,
            span: 20260..20261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 694,
            column: 21,
            span: 20262..20267,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 694,
            column: 22,
            span: 20267..20268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 694,
            column: 34,
            span: 20268..20280,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 694,
            column: 35,
            span: 20280..20281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 694,
            column: 36,
            span: 20281..20282,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 694,
            column: 37,
            span: 20282..20283,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 694,
            column: 39,
            span: 20284..20285,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 694,
            column: 40,
            span: 20284..20286,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 694,
            column: 41,
            span: 20286..20287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 695,
            column: 9,
            span: 20290..20296,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 695,
            column: 10,
            span: 20296..20297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 695,
            column: 11,
            span: 20297..20298,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 695,
            column: 14,
            span: 20299..20301,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 695,
            column: 18,
            span: 20302..20305,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 695,
            column: 22,
            span: 20306..20309,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 695,
            column: 26,
            span: 20310..20313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 695,
            column: 28,
            span: 20314..20315,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 695,
            column: 29,
            span: 20315..20316,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 696,
            column: 8,
            span: 20319..20324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 696,
            column: 10,
            span: 20325..20326,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 696,
            column: 11,
            span: 20326..20327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 696,
            column: 13,
            span: 20328..20329,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 696,
            column: 15,
            span: 20330..20331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 696,
            column: 21,
            span: 20332..20337,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 696,
            column: 22,
            span: 20337..20338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 696,
            column: 34,
            span: 20338..20350,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 696,
            column: 35,
            span: 20350..20351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 696,
            column: 36,
            span: 20351..20352,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 696,
            column: 37,
            span: 20352..20353,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 696,
            column: 40,
            span: 20353..20356,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 696,
            column: 41,
            span: 20356..20357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 697,
            column: 9,
            span: 20360..20366,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 697,
            column: 10,
            span: 20366..20367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 697,
            column: 11,
            span: 20367..20368,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 697,
            column: 14,
            span: 20369..20371,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 697,
            column: 18,
            span: 20372..20375,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 697,
            column: 22,
            span: 20376..20379,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 697,
            column: 26,
            span: 20380..20383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 697,
            column: 28,
            span: 20384..20385,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 697,
            column: 29,
            span: 20385..20386,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 698,
            column: 0,
            span: 20387..20390,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 699,
            column: 6,
            span: 20391..20396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 699,
            column: 8,
            span: 20397..20398,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 699,
            column: 10,
            span: 20399..20400,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 699,
            column: 12,
            span: 20401..20402,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 699,
            column: 16,
            span: 20402..20406,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 699,
            column: 17,
            span: 20406..20407,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 699,
            column: 23,
            span: 20408..20413,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 699,
            column: 24,
            span: 20413..20414,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".56",
                },
            ),
        ),
        position: Position {
            line: 699,
            column: 29,
            span: 20414..20419,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 699,
            column: 30,
            span: 20419..20420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 699,
            column: 36,
            span: 20421..20426,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 699,
            column: 37,
            span: 20426..20427,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 699,
            column: 39,
            span: 20428..20429,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 699,
            column: 40,
            span: 20429..20430,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 699,
            column: 41,
            span: 20430..20431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 699,
            column: 43,
            span: 20432..20433,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 699,
            column: 44,
            span: 20433..20434,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XYZ\"",
        ),
        position: Position {
            line: 699,
            column: 50,
            span: 20435..20440,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 699,
            column: 51,
            span: 20440..20441,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 700,
            column: 4,
            span: 20442..20445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 700,
            column: 6,
            span: 20446..20447,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 700,
            column: 7,
            span: 20447..20448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 700,
            column: 9,
            span: 20449..20450,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 700,
            column: 12,
            span: 20451..20453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 700,
            column: 19,
            span: 20454..20460,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 700,
            column: 20,
            span: 20460..20461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 700,
            column: 21,
            span: 20461..20462,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 700,
            column: 22,
            span: 20462..20463,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 700,
            column: 0,
            span: 20464..20466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 701,
            column: 8,
            span: 20469..20474,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 701,
            column: 9,
            span: 20474..20475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 701,
            column: 21,
            span: 20475..20487,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 701,
            column: 22,
            span: 20487..20488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 701,
            column: 23,
            span: 20488..20489,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 701,
            column: 24,
            span: 20489..20490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 701,
            column: 26,
            span: 20491..20492,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 701,
            column: 27,
            span: 20492..20493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 701,
            column: 29,
            span: 20494..20495,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 701,
            column: 30,
            span: 20495..20496,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 702,
            column: 0,
            span: 20497..20500,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 703,
            column: 4,
            span: 20501..20504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 703,
            column: 6,
            span: 20505..20506,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 703,
            column: 7,
            span: 20506..20507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 703,
            column: 9,
            span: 20508..20509,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 703,
            column: 12,
            span: 20510..20512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 703,
            column: 19,
            span: 20513..20519,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 703,
            column: 20,
            span: 20519..20520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 703,
            column: 21,
            span: 20520..20521,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 703,
            column: 22,
            span: 20521..20522,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 703,
            column: 0,
            span: 20523..20525,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 704,
            column: 8,
            span: 20528..20533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v1",
        ),
        position: Position {
            line: 704,
            column: 11,
            span: 20534..20536,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 704,
            column: 12,
            span: 20536..20537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 704,
            column: 14,
            span: 20538..20539,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 704,
            column: 16,
            span: 20540..20541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 704,
            column: 22,
            span: 20542..20547,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 704,
            column: 23,
            span: 20547..20548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 704,
            column: 35,
            span: 20548..20560,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 704,
            column: 36,
            span: 20560..20561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 704,
            column: 37,
            span: 20561..20562,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 704,
            column: 38,
            span: 20562..20563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 704,
            column: 40,
            span: 20564..20565,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 704,
            column: 41,
            span: 20565..20566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 705,
            column: 9,
            span: 20569..20575,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 705,
            column: 10,
            span: 20575..20576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v1",
        ),
        position: Position {
            line: 705,
            column: 12,
            span: 20576..20578,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 705,
            column: 15,
            span: 20579..20581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 705,
            column: 17,
            span: 20582..20583,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 705,
            column: 21,
            span: 20584..20587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 705,
            column: 23,
            span: 20588..20589,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 705,
            column: 24,
            span: 20589..20590,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 706,
            column: 0,
            span: 20591..20594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 708,
            column: 7,
            span: 20596..20602,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 708,
            column: 8,
            span: 20602..20603,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 708,
            column: 11,
            span: 20603..20606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 708,
            column: 17,
            span: 20607..20612,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 708,
            column: 18,
            span: 20612..20613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 708,
            column: 30,
            span: 20613..20625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 708,
            column: 31,
            span: 20625..20626,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 708,
            column: 32,
            span: 20625..20627,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 708,
            column: 33,
            span: 20627..20628,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 708,
            column: 34,
            span: 20628..20629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 710,
            column: 6,
            span: 20631..20636,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 710,
            column: 7,
            span: 20636..20637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 710,
            column: 19,
            span: 20637..20649,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 710,
            column: 20,
            span: 20649..20650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 710,
            column: 21,
            span: 20650..20651,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 710,
            column: 22,
            span: 20651..20652,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 710,
            column: 31,
            span: 20653..20661,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 710,
            column: 33,
            span: 20662..20663,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 710,
            column: 34,
            span: 20663..20664,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 710,
            column: 41,
            span: 20665..20671,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 710,
            column: 44,
            span: 20671..20674,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 710,
            column: 48,
            span: 20675..20678,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 710,
            column: 49,
            span: 20678..20679,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 710,
            column: 52,
            span: 20679..20682,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 710,
            column: 53,
            span: 20682..20683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 711,
            column: 15,
            span: 20684..20698,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 711,
            column: 16,
            span: 20698..20699,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 711,
            column: 17,
            span: 20699..20700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 712,
            column: 7,
            span: 20739..20745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 712,
            column: 8,
            span: 20745..20746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 712,
            column: 13,
            span: 20746..20751,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 712,
            column: 14,
            span: 20751..20752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 712,
            column: 26,
            span: 20752..20764,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 712,
            column: 27,
            span: 20764..20765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 712,
            column: 28,
            span: 20765..20766,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 712,
            column: 29,
            span: 20766..20767,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 712,
            column: 32,
            span: 20767..20770,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 712,
            column: 33,
            span: 20770..20771,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 712,
            column: 34,
            span: 20771..20772,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 712,
            column: 35,
            span: 20772..20773,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 712,
            column: 38,
            span: 20774..20776,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 712,
            column: 41,
            span: 20776..20779,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 712,
            column: 42,
            span: 20779..20780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 714,
            column: 6,
            span: 20782..20787,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 714,
            column: 7,
            span: 20787..20788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 714,
            column: 19,
            span: 20788..20800,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 714,
            column: 20,
            span: 20800..20801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 714,
            column: 21,
            span: 20801..20802,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 714,
            column: 22,
            span: 20802..20803,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "134",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 714,
            column: 26,
            span: 20803..20807,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 714,
            column: 27,
            span: 20807..20808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 715,
            column: 15,
            span: 20809..20823,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 715,
            column: 16,
            span: 20823..20824,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 715,
            column: 17,
            span: 20824..20825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 716,
            column: 7,
            span: 20876..20882,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 716,
            column: 8,
            span: 20882..20883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 716,
            column: 13,
            span: 20883..20888,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 716,
            column: 14,
            span: 20888..20889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 716,
            column: 26,
            span: 20889..20901,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 716,
            column: 27,
            span: 20901..20902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 716,
            column: 28,
            span: 20902..20903,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 716,
            column: 29,
            span: 20903..20904,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 716,
            column: 32,
            span: 20905..20907,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "134",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 716,
            column: 36,
            span: 20907..20911,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 716,
            column: 37,
            span: 20911..20912,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 720,
            column: 0,
            span: 20946..20948,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 721,
            column: 8,
            span: 20951..20956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldmode",
        ),
        position: Position {
            line: 721,
            column: 16,
            span: 20957..20964,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 721,
            column: 18,
            span: 20965..20966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 721,
            column: 33,
            span: 20967..20981,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 721,
            column: 34,
            span: 20981..20982,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"incremental\"",
        ),
        position: Position {
            line: 721,
            column: 47,
            span: 20982..20995,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 721,
            column: 48,
            span: 20995..20996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 722,
            column: 4,
            span: 20999..21000,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 722,
            column: 5,
            span: 21000..21001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcstate",
        ),
        position: Position {
            line: 722,
            column: 12,
            span: 21001..21008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 722,
            column: 13,
            span: 21008..21009,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"atomic\"",
        ),
        position: Position {
            line: 722,
            column: 21,
            span: 21009..21017,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 722,
            column: 22,
            span: 21017..21018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 723,
            column: 9,
            span: 21021..21027,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 723,
            column: 10,
            span: 21027..21028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 723,
            column: 11,
            span: 21028..21029,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 723,
            column: 12,
            span: 21029..21030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gccolor",
        ),
        position: Position {
            line: 723,
            column: 19,
            span: 21030..21037,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 723,
            column: 20,
            span: 21037..21038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 723,
            column: 21,
            span: 21038..21039,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 723,
            column: 22,
            span: 21039..21040,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 723,
            column: 25,
            span: 21041..21043,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"black\"",
        ),
        position: Position {
            line: 723,
            column: 33,
            span: 21044..21051,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 723,
            column: 34,
            span: 21051..21052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 724,
            column: 8,
            span: 21055..21060,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 724,
            column: 9,
            span: 21060..21061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 724,
            column: 21,
            span: 21061..21073,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 724,
            column: 22,
            span: 21073..21074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 724,
            column: 23,
            span: 21074..21075,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 724,
            column: 24,
            span: 21075..21076,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 724,
            column: 26,
            span: 21077..21078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 724,
            column: 27,
            span: 21078..21079,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 724,
            column: 29,
            span: 21080..21081,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 724,
            column: 33,
            span: 21081..21085,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 724,
            column: 34,
            span: 21085..21086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 724,
            column: 35,
            span: 21086..21087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 725,
            column: 4,
            span: 21090..21091,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 725,
            column: 5,
            span: 21091..21092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcstate",
        ),
        position: Position {
            line: 725,
            column: 12,
            span: 21092..21099,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 725,
            column: 13,
            span: 21099..21100,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pause\"",
        ),
        position: Position {
            line: 725,
            column: 20,
            span: 21100..21107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 725,
            column: 21,
            span: 21107..21108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 726,
            column: 9,
            span: 21135..21141,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 726,
            column: 10,
            span: 21141..21142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 726,
            column: 15,
            span: 21142..21147,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 726,
            column: 16,
            span: 21147..21148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 726,
            column: 28,
            span: 21148..21160,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 726,
            column: 29,
            span: 21160..21161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 726,
            column: 30,
            span: 21161..21162,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 726,
            column: 31,
            span: 21162..21163,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 726,
            column: 32,
            span: 21163..21164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 726,
            column: 33,
            span: 21164..21165,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 726,
            column: 36,
            span: 21166..21168,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 726,
            column: 40,
            span: 21168..21172,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 726,
            column: 41,
            span: 21172..21173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 727,
            column: 17,
            span: 21203..21217,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 727,
            column: 18,
            span: 21217..21218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldmode",
        ),
        position: Position {
            line: 727,
            column: 25,
            span: 21218..21225,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 727,
            column: 26,
            span: 21225..21226,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 728,
            column: 0,
            span: 21227..21230,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 731,
            column: 4,
            span: 21258..21261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 731,
            column: 6,
            span: 21262..21263,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 731,
            column: 8,
            span: 21264..21265,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 731,
            column: 10,
            span: 21265..21267,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 731,
            column: 11,
            span: 21267..21268,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 731,
            column: 16,
            span: 21268..21273,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 731,
            column: 0,
            span: 21274..21276,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 732,
            column: 8,
            span: 21279..21284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bb",
        ),
        position: Position {
            line: 732,
            column: 11,
            span: 21285..21287,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 732,
            column: 13,
            span: 21288..21289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 732,
            column: 15,
            span: 21290..21291,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 732,
            column: 16,
            span: 21291..21292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 732,
            column: 27,
            span: 21292..21303,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 732,
            column: 28,
            span: 21303..21304,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 732,
            column: 29,
            span: 21303..21305,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 732,
            column: 30,
            span: 21305..21306,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 732,
            column: 32,
            span: 21306..21308,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 732,
            column: 33,
            span: 21308..21309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 733,
            column: 8,
            span: 21312..21317,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 733,
            column: 9,
            span: 21317..21318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 733,
            column: 21,
            span: 21318..21330,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 733,
            column: 22,
            span: 21330..21331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bb",
        ),
        position: Position {
            line: 733,
            column: 24,
            span: 21331..21333,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 733,
            column: 25,
            span: 21333..21334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 733,
            column: 27,
            span: 21335..21336,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 733,
            column: 28,
            span: 21336..21337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 734,
            column: 4,
            span: 21340..21341,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 734,
            column: 6,
            span: 21342..21343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bb",
        ),
        position: Position {
            line: 734,
            column: 0,
            span: 21344..21346,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 735,
            column: 0,
            span: 21347..21350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 736,
            column: 15,
            span: 21351..21365,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 736,
            column: 16,
            span: 21365..21366,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 736,
            column: 17,
            span: 21366..21367,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 737,
            column: 4,
            span: 21407..21410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 737,
            column: 6,
            span: 21411..21412,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 737,
            column: 8,
            span: 21413..21414,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 737,
            column: 10,
            span: 21414..21416,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 737,
            column: 11,
            span: 21416..21417,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 737,
            column: 16,
            span: 21417..21422,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 737,
            column: 0,
            span: 21423..21425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 738,
            column: 4,
            span: 21428..21429,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 738,
            column: 6,
            span: 21430..21431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 738,
            column: 12,
            span: 21432..21437,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 738,
            column: 13,
            span: 21437..21438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 738,
            column: 25,
            span: 21438..21450,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 738,
            column: 26,
            span: 21450..21451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 738,
            column: 27,
            span: 21451..21452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 738,
            column: 28,
            span: 21452..21453,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 739,
            column: 0,
            span: 21454..21457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 740,
            column: 7,
            span: 21458..21464,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 740,
            column: 8,
            span: 21464..21465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 740,
            column: 13,
            span: 21465..21470,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 740,
            column: 14,
            span: 21470..21471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 740,
            column: 26,
            span: 21471..21483,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 740,
            column: 27,
            span: 21483..21484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 740,
            column: 28,
            span: 21484..21485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 740,
            column: 29,
            span: 21485..21486,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 740,
            column: 30,
            span: 21486..21487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 740,
            column: 31,
            span: 21487..21488,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 740,
            column: 34,
            span: 21489..21491,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 740,
            column: 38,
            span: 21491..21495,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 740,
            column: 39,
            span: 21495..21496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 741,
            column: 2,
            span: 21497..21498,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 741,
            column: 4,
            span: 21499..21500,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 741,
            column: 0,
            span: 21501..21504,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 747,
            column: 6,
            span: 21555..21560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 747,
            column: 8,
            span: 21561..21562,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 747,
            column: 10,
            span: 21563..21564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 747,
            column: 12,
            span: 21565..21566,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 747,
            column: 13,
            span: 21566..21567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 747,
            column: 16,
            span: 21567..21570,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 747,
            column: 17,
            span: 21570..21571,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 747,
            column: 18,
            span: 21571..21572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 748,
            column: 2,
            span: 21573..21574,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 748,
            column: 3,
            span: 21574..21575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 748,
            column: 8,
            span: 21575..21580,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 748,
            column: 9,
            span: 21580..21581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 748,
            column: 10,
            span: 21581..21582,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 748,
            column: 11,
            span: 21582..21583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 749,
            column: 7,
            span: 21584..21590,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 749,
            column: 8,
            span: 21590..21591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 749,
            column: 9,
            span: 21591..21592,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 749,
            column: 10,
            span: 21592..21593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 749,
            column: 13,
            span: 21593..21596,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 749,
            column: 14,
            span: 21596..21597,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 749,
            column: 15,
            span: 21597..21598,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 749,
            column: 18,
            span: 21599..21601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 749,
            column: 20,
            span: 21602..21603,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 749,
            column: 21,
            span: 21603..21604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 751,
            column: 4,
            span: 21606..21609,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 751,
            column: 6,
            span: 21610..21611,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 751,
            column: 8,
            span: 21612..21613,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 751,
            column: 9,
            span: 21613..21614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 752,
            column: 4,
            span: 21615..21618,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 752,
            column: 6,
            span: 21619..21620,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 752,
            column: 0,
            span: 21620..21624,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 753,
            column: 4,
            span: 21625..21628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 753,
            column: 6,
            span: 21629..21630,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 753,
            column: 7,
            span: 21630..21631,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 753,
            column: 8,
            span: 21630..21632,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 753,
            column: 9,
            span: 21632..21633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 753,
            column: 12,
            span: 21633..21636,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 753,
            column: 15,
            span: 21637..21639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 754,
            column: 6,
            span: 21665..21668,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 754,
            column: 7,
            span: 21668..21669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 754,
            column: 8,
            span: 21669..21670,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 754,
            column: 9,
            span: 21670..21671,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 754,
            column: 11,
            span: 21672..21673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 754,
            column: 13,
            span: 21674..21675,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 754,
            column: 14,
            span: 21675..21676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 754,
            column: 17,
            span: 21676..21679,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 754,
            column: 18,
            span: 21679..21680,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 754,
            column: 19,
            span: 21680..21681,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 754,
            column: 20,
            span: 21681..21682,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 754,
            column: 21,
            span: 21682..21683,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 755,
            column: 0,
            span: 21684..21687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 757,
            column: 7,
            span: 21689..21695,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 757,
            column: 8,
            span: 21695..21696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 757,
            column: 9,
            span: 21696..21697,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 757,
            column: 10,
            span: 21697..21698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 757,
            column: 13,
            span: 21698..21701,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 757,
            column: 14,
            span: 21701..21702,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 757,
            column: 17,
            span: 21702..21705,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 757,
            column: 18,
            span: 21705..21706,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 757,
            column: 21,
            span: 21707..21709,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 757,
            column: 23,
            span: 21710..21711,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 757,
            column: 24,
            span: 21710..21712,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 757,
            column: 28,
            span: 21713..21716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 757,
            column: 30,
            span: 21717..21718,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 757,
            column: 31,
            span: 21718..21719,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 757,
            column: 37,
            span: 21719..21725,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 757,
            column: 38,
            span: 21725..21726,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 757,
            column: 39,
            span: 21726..21727,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 757,
            column: 40,
            span: 21726..21728,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 757,
            column: 41,
            span: 21728..21729,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 757,
            column: 44,
            span: 21730..21732,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 757,
            column: 48,
            span: 21733..21736,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 757,
            column: 49,
            span: 21736..21737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 758,
            column: 2,
            span: 21738..21739,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 758,
            column: 3,
            span: 21739..21740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 758,
            column: 8,
            span: 21740..21745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 758,
            column: 9,
            span: 21745..21746,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 758,
            column: 10,
            span: 21746..21747,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 758,
            column: 11,
            span: 21746..21748,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 758,
            column: 12,
            span: 21748..21749,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 758,
            column: 13,
            span: 21749..21750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 758,
            column: 15,
            span: 21751..21752,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 758,
            column: 16,
            span: 21752..21753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 758,
            column: 21,
            span: 21753..21758,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 758,
            column: 22,
            span: 21758..21759,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 758,
            column: 23,
            span: 21759..21760,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 758,
            column: 24,
            span: 21759..21761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 758,
            column: 25,
            span: 21761..21762,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 760,
            column: 4,
            span: 21764..21767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 760,
            column: 6,
            span: 21768..21769,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 760,
            column: 7,
            span: 21769..21770,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 760,
            column: 8,
            span: 21769..21771,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 760,
            column: 9,
            span: 21771..21772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 760,
            column: 12,
            span: 21772..21775,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 760,
            column: 15,
            span: 21776..21778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 761,
            column: 4,
            span: 21802..21803,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 761,
            column: 5,
            span: 21803..21804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 761,
            column: 10,
            span: 21804..21809,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 761,
            column: 11,
            span: 21809..21810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 761,
            column: 14,
            span: 21810..21813,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 761,
            column: 15,
            span: 21813..21814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 761,
            column: 16,
            span: 21814..21815,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 761,
            column: 17,
            span: 21815..21816,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 761,
            column: 18,
            span: 21816..21817,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 762,
            column: 0,
            span: 21818..21821,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 764,
            column: 9,
            span: 21823..21831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "printlocks",
        ),
        position: Position {
            line: 764,
            column: 20,
            span: 21832..21842,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 764,
            column: 22,
            span: 21843..21844,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 764,
            column: 23,
            span: 21844..21845,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 765,
            column: 8,
            span: 21848..21853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 765,
            column: 10,
            span: 21854..21855,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 765,
            column: 12,
            span: 21856..21857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 765,
            column: 14,
            span: 21858..21859,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 765,
            column: 15,
            span: 21859..21860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 765,
            column: 24,
            span: 21860..21869,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 765,
            column: 25,
            span: 21869..21870,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable R; return 1\"",
        ),
        position: Position {
            line: 765,
            column: 47,
            span: 21870..21892,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 765,
            column: 48,
            span: 21892..21893,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 766,
            column: 8,
            span: 21896..21901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 766,
            column: 10,
            span: 21902..21903,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 766,
            column: 12,
            span: 21904..21905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 766,
            column: 14,
            span: 21906..21907,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 766,
            column: 15,
            span: 21907..21908,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 766,
            column: 18,
            span: 21908..21911,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 766,
            column: 19,
            span: 21911..21912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 767,
            column: 8,
            span: 21915..21920,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 767,
            column: 9,
            span: 21920..21921,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 767,
            column: 12,
            span: 21921..21924,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 767,
            column: 13,
            span: 21924..21925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 767,
            column: 15,
            span: 21926..21927,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 767,
            column: 16,
            span: 21927..21928,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 768,
            column: 6,
            span: 21931..21934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 768,
            column: 8,
            span: 21935..21936,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 768,
            column: 9,
            span: 21936..21937,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 768,
            column: 10,
            span: 21936..21938,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 768,
            column: 11,
            span: 21938..21939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 768,
            column: 12,
            span: 21939..21940,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 768,
            column: 0,
            span: 21941..21943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 769,
            column: 10,
            span: 21948..21953,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 769,
            column: 11,
            span: 21953..21954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 769,
            column: 12,
            span: 21954..21955,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 769,
            column: 13,
            span: 21955..21956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 769,
            column: 15,
            span: 21957..21958,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 769,
            column: 16,
            span: 21958..21959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 769,
            column: 17,
            span: 21959..21960,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 769,
            column: 18,
            span: 21960..21961,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 769,
            column: 19,
            span: 21961..21962,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 770,
            column: 0,
            span: 21965..21968,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 771,
            column: 0,
            span: 21969..21972,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 774,
            column: 4,
            span: 21975..21978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 774,
            column: 6,
            span: 21979..21980,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 774,
            column: 7,
            span: 21980..21981,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 774,
            column: 8,
            span: 21980..21982,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 774,
            column: 9,
            span: 21982..21983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 774,
            column: 12,
            span: 21983..21986,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 774,
            column: 15,
            span: 21987..21989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 775,
            column: 6,
            span: 22015..22018,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 775,
            column: 7,
            span: 22018..22019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 775,
            column: 8,
            span: 22019..22020,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 775,
            column: 9,
            span: 22020..22021,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 775,
            column: 11,
            span: 22022..22023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 775,
            column: 13,
            span: 22024..22025,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 775,
            column: 14,
            span: 22025..22026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 775,
            column: 17,
            span: 22026..22029,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 775,
            column: 18,
            span: 22029..22030,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 775,
            column: 19,
            span: 22030..22031,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 775,
            column: 20,
            span: 22031..22032,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 775,
            column: 21,
            span: 22032..22033,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 776,
            column: 0,
            span: 22034..22037,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 778,
            column: 4,
            span: 22039..22042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 778,
            column: 6,
            span: 22043..22044,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 778,
            column: 7,
            span: 22044..22045,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 778,
            column: 8,
            span: 22044..22046,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 778,
            column: 9,
            span: 22046..22047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 778,
            column: 12,
            span: 22047..22050,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 778,
            column: 13,
            span: 22050..22051,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 778,
            column: 14,
            span: 22050..22052,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 778,
            column: 17,
            span: 22053..22055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 779,
            column: 4,
            span: 22083..22084,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 779,
            column: 5,
            span: 22084..22085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 779,
            column: 10,
            span: 22085..22090,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 779,
            column: 11,
            span: 22090..22091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 779,
            column: 14,
            span: 22091..22094,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 779,
            column: 15,
            span: 22094..22095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 779,
            column: 16,
            span: 22095..22096,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 779,
            column: 17,
            span: 22096..22097,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 779,
            column: 18,
            span: 22097..22098,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 780,
            column: 0,
            span: 22099..22102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 782,
            column: 7,
            span: 22104..22110,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 782,
            column: 8,
            span: 22110..22111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 782,
            column: 12,
            span: 22111..22115,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 782,
            column: 13,
            span: 22115..22116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 782,
            column: 14,
            span: 22116..22117,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 782,
            column: 15,
            span: 22117..22118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 782,
            column: 21,
            span: 22118..22124,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 782,
            column: 22,
            span: 22124..22125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 782,
            column: 25,
            span: 22125..22128,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 782,
            column: 26,
            span: 22128..22129,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 782,
            column: 27,
            span: 22128..22130,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 782,
            column: 28,
            span: 22130..22131,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 782,
            column: 29,
            span: 22131..22132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 782,
            column: 30,
            span: 22132..22133,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 782,
            column: 33,
            span: 22134..22136,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 782,
            column: 41,
            span: 22137..22144,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 782,
            column: 42,
            span: 22144..22145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 785,
            column: 7,
            span: 22148..22154,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 785,
            column: 8,
            span: 22154..22155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 785,
            column: 9,
            span: 22155..22156,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 785,
            column: 10,
            span: 22156..22157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 785,
            column: 16,
            span: 22157..22163,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 785,
            column: 17,
            span: 22163..22164,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 785,
            column: 18,
            span: 22164..22165,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 785,
            column: 19,
            span: 22164..22166,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 785,
            column: 20,
            span: 22166..22167,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 785,
            column: 23,
            span: 22168..22170,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 785,
            column: 27,
            span: 22171..22174,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 785,
            column: 28,
            span: 22174..22175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 788,
            column: 2,
            span: 22178..22179,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 788,
            column: 4,
            span: 22180..22181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 788,
            column: 6,
            span: 22182..22183,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 788,
            column: 7,
            span: 22183..22184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 788,
            column: 10,
            span: 22184..22187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 788,
            column: 11,
            span: 22187..22188,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 788,
            column: 12,
            span: 22188..22189,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 788,
            column: 13,
            span: 22189..22190,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 788,
            column: 14,
            span: 22190..22191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 790,
            column: 15,
            span: 22193..22207,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 790,
            column: 16,
            span: 22207..22208,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 790,
            column: 17,
            span: 22208..22209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 792,
            column: 7,
            span: 22211..22217,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 792,
            column: 8,
            span: 22217..22218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 792,
            column: 12,
            span: 22218..22222,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 792,
            column: 13,
            span: 22222..22223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 792,
            column: 14,
            span: 22223..22224,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 792,
            column: 15,
            span: 22224..22225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 792,
            column: 21,
            span: 22225..22231,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 792,
            column: 22,
            span: 22231..22232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 792,
            column: 23,
            span: 22232..22233,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 792,
            column: 24,
            span: 22233..22234,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 792,
            column: 25,
            span: 22234..22235,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 792,
            column: 28,
            span: 22236..22238,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 792,
            column: 36,
            span: 22239..22246,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 792,
            column: 37,
            span: 22246..22247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 796,
            column: 3,
            span: 22302..22304,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 796,
            column: 5,
            span: 22305..22306,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 796,
            column: 7,
            span: 22307..22308,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 796,
            column: 8,
            span: 22308..22309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 797,
            column: 3,
            span: 22310..22312,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 797,
            column: 5,
            span: 22313..22314,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 797,
            column: 7,
            span: 22315..22316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 797,
            column: 8,
            span: 22316..22317,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 797,
            column: 9,
            span: 22317..22318,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 797,
            column: 10,
            span: 22317..22319,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 797,
            column: 11,
            span: 22319..22320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 798,
            column: 2,
            span: 22321..22322,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 798,
            column: 4,
            span: 22323..22324,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 798,
            column: 8,
            span: 22325..22328,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 798,
            column: 9,
            span: 22328..22329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 798,
            column: 11,
            span: 22330..22331,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 798,
            column: 13,
            span: 22332..22333,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 798,
            column: 0,
            span: 22334..22337,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 799,
            column: 6,
            span: 22338..22343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 799,
            column: 0,
            span: 22344..22345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 800,
            column: 2,
            span: 22346..22347,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 800,
            column: 4,
            span: 22348..22349,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 800,
            column: 13,
            span: 22350..22358,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 800,
            column: 15,
            span: 22359..22360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 800,
            column: 16,
            span: 22360..22361,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 800,
            column: 17,
            span: 22361..22362,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 801,
            column: 8,
            span: 22365..22370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udval",
        ),
        position: Position {
            line: 801,
            column: 14,
            span: 22371..22376,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 801,
            column: 16,
            span: 22377..22378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 801,
            column: 18,
            span: 22379..22380,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 801,
            column: 19,
            span: 22380..22381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 801,
            column: 27,
            span: 22381..22389,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 801,
            column: 28,
            span: 22389..22390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 801,
            column: 29,
            span: 22390..22391,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 801,
            column: 30,
            span: 22391..22392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 802,
            column: 8,
            span: 22395..22400,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 802,
            column: 9,
            span: 22400..22401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 802,
            column: 15,
            span: 22401..22407,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 802,
            column: 16,
            span: 22407..22408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 802,
            column: 18,
            span: 22408..22410,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 802,
            column: 19,
            span: 22410..22411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udval",
        ),
        position: Position {
            line: 802,
            column: 25,
            span: 22412..22417,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 802,
            column: 26,
            span: 22417..22418,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 803,
            column: 8,
            span: 22421..22426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 803,
            column: 10,
            span: 22427..22428,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 803,
            column: 12,
            span: 22429..22430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 803,
            column: 14,
            span: 22431..22432,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 803,
            column: 15,
            span: 22432..22433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 803,
            column: 26,
            span: 22433..22444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 803,
            column: 27,
            span: 22444..22445,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 803,
            column: 30,
            span: 22444..22448,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 803,
            column: 31,
            span: 22448..22449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 804,
            column: 4,
            span: 22472..22473,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 804,
            column: 6,
            span: 22474..22475,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 804,
            column: 0,
            span: 22476..22479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 805,
            column: 9,
            span: 22482..22488,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 805,
            column: 10,
            span: 22488..22489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 805,
            column: 15,
            span: 22489..22494,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 805,
            column: 16,
            span: 22494..22495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 805,
            column: 28,
            span: 22495..22507,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 805,
            column: 29,
            span: 22507..22508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 805,
            column: 30,
            span: 22508..22509,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 805,
            column: 31,
            span: 22509..22510,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 805,
            column: 32,
            span: 22510..22511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 805,
            column: 36,
            span: 22511..22515,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 805,
            column: 39,
            span: 22516..22518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 805,
            column: 41,
            span: 22519..22520,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 805,
            column: 42,
            span: 22520..22521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 806,
            column: 9,
            span: 22524..22530,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 806,
            column: 10,
            span: 22530..22531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 806,
            column: 14,
            span: 22531..22535,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 806,
            column: 15,
            span: 22535..22536,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table.insert({}, {})\"",
        ),
        position: Position {
            line: 806,
            column: 37,
            span: 22536..22558,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 806,
            column: 38,
            span: 22558..22559,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 806,
            column: 39,
            span: 22559..22560,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 806,
            column: 40,
            span: 22560..22561,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 806,
            column: 41,
            span: 22561..22562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 807,
            column: 9,
            span: 22590..22596,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 807,
            column: 10,
            span: 22596..22597,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 807,
            column: 13,
            span: 22597..22600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 807,
            column: 28,
            span: 22601..22615,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 807,
            column: 29,
            span: 22615..22616,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 807,
            column: 30,
            span: 22616..22617,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 807,
            column: 31,
            span: 22617..22618,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 808,
            column: 8,
            span: 22648..22653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        position: Position {
            line: 808,
            column: 14,
            span: 22654..22659,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 808,
            column: 16,
            span: 22660..22661,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 808,
            column: 18,
            span: 22662..22663,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 808,
            column: 19,
            span: 22663..22664,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 809,
            column: 5,
            span: 22703..22705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 809,
            column: 7,
            span: 22706..22707,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 809,
            column: 10,
            span: 22708..22710,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 809,
            column: 14,
            span: 22711..22714,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 809,
            column: 0,
            span: 22715..22719,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 810,
            column: 11,
            span: 22724..22730,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 810,
            column: 12,
            span: 22730..22731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 810,
            column: 16,
            span: 22731..22735,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 810,
            column: 17,
            span: 22735..22736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 810,
            column: 18,
            span: 22736..22737,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 810,
            column: 19,
            span: 22737..22738,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 810,
            column: 22,
            span: 22739..22741,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        position: Position {
            line: 810,
            column: 33,
            span: 22742..22752,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 810,
            column: 34,
            span: 22752..22753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 811,
            column: 11,
            span: 22758..22764,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 811,
            column: 12,
            span: 22764..22765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 811,
            column: 13,
            span: 22765..22766,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 811,
            column: 14,
            span: 22766..22767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 811,
            column: 22,
            span: 22767..22775,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 811,
            column: 23,
            span: 22775..22776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 811,
            column: 24,
            span: 22776..22777,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 811,
            column: 25,
            span: 22777..22778,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 811,
            column: 28,
            span: 22779..22781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 811,
            column: 30,
            span: 22782..22783,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 811,
            column: 31,
            span: 22783..22784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 812,
            column: 10,
            span: 22789..22794,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 812,
            column: 11,
            span: 22794..22795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 812,
            column: 23,
            span: 22795..22807,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 812,
            column: 24,
            span: 22807..22808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 812,
            column: 25,
            span: 22808..22809,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 812,
            column: 26,
            span: 22809..22810,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 813,
            column: 0,
            span: 22834..22837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 814,
            column: 4,
            span: 22840..22841,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 814,
            column: 6,
            span: 22842..22843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 814,
            column: 8,
            span: 22844..22845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 815,
            column: 4,
            span: 22872..22873,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 815,
            column: 6,
            span: 22874..22875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udval",
        ),
        position: Position {
            line: 815,
            column: 0,
            span: 22876..22881,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 816,
            column: 9,
            span: 22884..22890,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 816,
            column: 11,
            span: 22890..22892,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 816,
            column: 12,
            span: 22892..22893,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 816,
            column: 13,
            span: 22892..22894,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 816,
            column: 14,
            span: 22894..22895,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 816,
            column: 0,
            span: 22894..22896,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 817,
            column: 0,
            span: 22897..22900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 818,
            column: 3,
            span: 22901..22903,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 818,
            column: 4,
            span: 22903..22904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 818,
            column: 8,
            span: 22904..22908,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 818,
            column: 10,
            span: 22909..22910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 818,
            column: 0,
            span: 22911..22912,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 821,
            column: 0,
            span: 22978..22980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 822,
            column: 17,
            span: 22983..22997,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 822,
            column: 18,
            span: 22997..22998,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 822,
            column: 19,
            span: 22998..22999,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 822,
            column: 20,
            span: 22999..23000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 823,
            column: 17,
            span: 23003..23017,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 823,
            column: 18,
            span: 23017..23018,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 823,
            column: 19,
            span: 23018..23019,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 823,
            column: 20,
            span: 23019..23020,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 824,
            column: 8,
            span: 23023..23028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 824,
            column: 10,
            span: 23029..23030,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 824,
            column: 12,
            span: 23031..23032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 824,
            column: 27,
            span: 23033..23047,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 824,
            column: 28,
            span: 23047..23048,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 824,
            column: 35,
            span: 23048..23055,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 824,
            column: 36,
            span: 23055..23056,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 824,
            column: 37,
            span: 23056..23057,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 825,
            column: 8,
            span: 23060..23065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 825,
            column: 10,
            span: 23066..23067,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 825,
            column: 12,
            span: 23068..23069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 825,
            column: 14,
            span: 23070..23071,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 825,
            column: 15,
            span: 23071..23072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 825,
            column: 26,
            span: 23072..23083,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 825,
            column: 27,
            span: 23083..23084,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5001",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 825,
            column: 31,
            span: 23083..23088,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 825,
            column: 32,
            span: 23088..23089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 826,
            column: 9,
            span: 23092..23098,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 826,
            column: 10,
            span: 23098..23099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 826,
            column: 11,
            span: 23099..23100,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 826,
            column: 12,
            span: 23100..23101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 826,
            column: 17,
            span: 23101..23106,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 826,
            column: 18,
            span: 23106..23107,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize 2; return 1\"",
        ),
        position: Position {
            line: 826,
            column: 39,
            span: 23107..23128,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 826,
            column: 40,
            span: 23128..23129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 826,
            column: 42,
            span: 23130..23131,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 826,
            column: 43,
            span: 23131..23132,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 826,
            column: 46,
            span: 23133..23135,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5001",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 826,
            column: 51,
            span: 23135..23140,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 826,
            column: 52,
            span: 23140..23141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 827,
            column: 9,
            span: 23144..23150,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 827,
            column: 10,
            span: 23150..23151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 827,
            column: 24,
            span: 23151..23165,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 827,
            column: 25,
            span: 23165..23166,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 827,
            column: 32,
            span: 23166..23173,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 827,
            column: 33,
            span: 23173..23174,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 827,
            column: 36,
            span: 23175..23177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 827,
            column: 38,
            span: 23178..23179,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 827,
            column: 39,
            span: 23179..23180,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 827,
            column: 40,
            span: 23179..23181,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 827,
            column: 41,
            span: 23181..23182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 828,
            column: 4,
            span: 23185..23186,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 828,
            column: 6,
            span: 23187..23188,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 828,
            column: 0,
            span: 23189..23192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 829,
            column: 17,
            span: 23195..23209,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 829,
            column: 18,
            span: 23209..23210,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 829,
            column: 19,
            span: 23210..23211,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 829,
            column: 20,
            span: 23211..23212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 830,
            column: 9,
            span: 23215..23221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 830,
            column: 10,
            span: 23221..23222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 830,
            column: 24,
            span: 23222..23236,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 830,
            column: 25,
            span: 23236..23237,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 830,
            column: 32,
            span: 23237..23244,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 830,
            column: 33,
            span: 23244..23245,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 830,
            column: 36,
            span: 23246..23248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 830,
            column: 38,
            span: 23249..23250,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 830,
            column: 39,
            span: 23250..23251,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 830,
            column: 40,
            span: 23250..23252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 830,
            column: 41,
            span: 23252..23253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 832,
            column: 4,
            span: 23285..23286,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 832,
            column: 6,
            span: 23287..23288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 832,
            column: 21,
            span: 23289..23303,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 832,
            column: 22,
            span: 23303..23304,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 832,
            column: 29,
            span: 23304..23311,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 832,
            column: 30,
            span: 23311..23312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 833,
            column: 17,
            span: 23315..23329,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 833,
            column: 18,
            span: 23329..23330,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 833,
            column: 24,
            span: 23330..23336,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 833,
            column: 25,
            span: 23336..23337,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 834,
            column: 6,
            span: 23340..23343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 834,
            column: 8,
            span: 23344..23345,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 834,
            column: 9,
            span: 23345..23346,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 834,
            column: 10,
            span: 23345..23347,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 834,
            column: 11,
            span: 23347..23348,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 834,
            column: 15,
            span: 23347..23352,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 834,
            column: 18,
            span: 23353..23355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 834,
            column: 20,
            span: 23356..23357,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 834,
            column: 21,
            span: 23357..23358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 834,
            column: 32,
            span: 23358..23369,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 834,
            column: 33,
            span: 23369..23370,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 834,
            column: 34,
            span: 23369..23371,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 834,
            column: 35,
            span: 23371..23372,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 834,
            column: 0,
            span: 23373..23376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 835,
            column: 9,
            span: 23379..23385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 835,
            column: 10,
            span: 23385..23386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 835,
            column: 24,
            span: 23386..23400,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 835,
            column: 25,
            span: 23400..23401,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 835,
            column: 32,
            span: 23401..23408,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 835,
            column: 33,
            span: 23408..23409,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 835,
            column: 35,
            span: 23410..23411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 835,
            column: 37,
            span: 23412..23413,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 835,
            column: 38,
            span: 23413..23414,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 835,
            column: 40,
            span: 23413..23416,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 835,
            column: 41,
            span: 23416..23417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 836,
            column: 17,
            span: 23420..23434,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 836,
            column: 18,
            span: 23434..23435,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 836,
            column: 19,
            span: 23435..23436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 837,
            column: 9,
            span: 23439..23445,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 837,
            column: 10,
            span: 23445..23446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 837,
            column: 24,
            span: 23446..23460,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 837,
            column: 25,
            span: 23460..23461,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 837,
            column: 32,
            span: 23461..23468,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 837,
            column: 33,
            span: 23468..23469,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 837,
            column: 36,
            span: 23470..23472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 837,
            column: 38,
            span: 23473..23474,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 837,
            column: 39,
            span: 23474..23475,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 837,
            column: 40,
            span: 23474..23476,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 837,
            column: 41,
            span: 23476..23477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 839,
            column: 17,
            span: 23506..23520,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 839,
            column: 18,
            span: 23520..23521,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 839,
            column: 19,
            span: 23521..23522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 840,
            column: 4,
            span: 23525..23526,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 840,
            column: 6,
            span: 23527..23528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 840,
            column: 21,
            span: 23529..23543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 840,
            column: 22,
            span: 23543..23544,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 840,
            column: 29,
            span: 23544..23551,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 840,
            column: 30,
            span: 23551..23552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 841,
            column: 17,
            span: 23555..23569,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 841,
            column: 18,
            span: 23569..23570,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 841,
            column: 24,
            span: 23570..23576,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 841,
            column: 25,
            span: 23576..23577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 842,
            column: 4,
            span: 23580..23581,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 842,
            column: 6,
            span: 23582..23583,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 842,
            column: 8,
            span: 23584..23585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 842,
            column: 12,
            span: 23585..23589,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 842,
            column: 14,
            span: 23590..23591,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 842,
            column: 23,
            span: 23592..23600,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 842,
            column: 25,
            span: 23601..23602,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 842,
            column: 26,
            span: 23602..23603,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 842,
            column: 30,
            span: 23604..23607,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 842,
            column: 31,
            span: 23607..23608,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 843,
            column: 6,
            span: 23611..23614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 843,
            column: 8,
            span: 23615..23616,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 843,
            column: 9,
            span: 23616..23617,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 843,
            column: 10,
            span: 23616..23618,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 843,
            column: 11,
            span: 23618..23619,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 843,
            column: 15,
            span: 23618..23623,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 843,
            column: 18,
            span: 23624..23626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 843,
            column: 24,
            span: 23627..23632,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 843,
            column: 25,
            span: 23632..23633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 843,
            column: 37,
            span: 23633..23645,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 843,
            column: 38,
            span: 23645..23646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 843,
            column: 39,
            span: 23646..23647,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 843,
            column: 40,
            span: 23647..23648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 843,
            column: 51,
            span: 23648..23659,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 843,
            column: 52,
            span: 23659..23660,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 843,
            column: 53,
            span: 23659..23661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 843,
            column: 54,
            span: 23661..23662,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 843,
            column: 55,
            span: 23662..23663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 843,
            column: 57,
            span: 23664..23665,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 843,
            column: 58,
            span: 23665..23666,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 843,
            column: 0,
            span: 23667..23670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 844,
            column: 9,
            span: 23673..23679,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 844,
            column: 10,
            span: 23679..23680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 844,
            column: 24,
            span: 23680..23694,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 844,
            column: 25,
            span: 23694..23695,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 844,
            column: 32,
            span: 23695..23702,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 844,
            column: 33,
            span: 23702..23703,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 844,
            column: 36,
            span: 23704..23706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 844,
            column: 38,
            span: 23707..23708,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 844,
            column: 39,
            span: 23708..23709,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 844,
            column: 41,
            span: 23708..23711,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 844,
            column: 42,
            span: 23711..23712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 845,
            column: 17,
            span: 23715..23729,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 845,
            column: 18,
            span: 23729..23730,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 845,
            column: 19,
            span: 23730..23731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 846,
            column: 9,
            span: 23792..23798,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 846,
            column: 10,
            span: 23798..23799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 846,
            column: 24,
            span: 23799..23813,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 846,
            column: 25,
            span: 23813..23814,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 846,
            column: 32,
            span: 23814..23821,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 846,
            column: 33,
            span: 23821..23822,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 846,
            column: 36,
            span: 23823..23825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 846,
            column: 38,
            span: 23826..23827,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 846,
            column: 39,
            span: 23827..23828,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 846,
            column: 41,
            span: 23827..23830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 846,
            column: 42,
            span: 23830..23831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 847,
            column: 17,
            span: 23834..23848,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 847,
            column: 18,
            span: 23848..23849,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 847,
            column: 19,
            span: 23849..23850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 848,
            column: 9,
            span: 23874..23880,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 848,
            column: 10,
            span: 23880..23881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 848,
            column: 24,
            span: 23881..23895,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 848,
            column: 25,
            span: 23895..23896,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 848,
            column: 32,
            span: 23896..23903,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 848,
            column: 33,
            span: 23903..23904,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 848,
            column: 36,
            span: 23905..23907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 848,
            column: 38,
            span: 23908..23909,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 848,
            column: 39,
            span: 23909..23910,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 848,
            column: 40,
            span: 23909..23911,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 848,
            column: 41,
            span: 23911..23912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 849,
            column: 17,
            span: 23915..23929,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 849,
            column: 18,
            span: 23929..23930,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        position: Position {
            line: 849,
            column: 27,
            span: 23930..23939,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 849,
            column: 28,
            span: 23939..23940,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 850,
            column: 0,
            span: 23941..23944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 853,
            column: 15,
            span: 23947..23961,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 853,
            column: 16,
            span: 23961..23962,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 853,
            column: 22,
            span: 23962..23968,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 853,
            column: 23,
            span: 23968..23969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 856,
            column: 2,
            span: 24007..24008,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 856,
            column: 4,
            span: 24009..24010,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 856,
            column: 6,
            span: 24011..24012,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 856,
            column: 7,
            span: 24012..24013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 856,
            column: 18,
            span: 24013..24024,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 856,
            column: 19,
            span: 24024..24025,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 856,
            column: 20,
            span: 24024..24026,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 856,
            column: 21,
            span: 24026..24027,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 856,
            column: 22,
            span: 24027..24028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 856,
            column: 28,
            span: 24029..24034,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 856,
            column: 29,
            span: 24034..24035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 856,
            column: 41,
            span: 24035..24047,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 856,
            column: 42,
            span: 24047..24048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 856,
            column: 43,
            span: 24048..24049,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 856,
            column: 44,
            span: 24049..24050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 856,
            column: 47,
            span: 24051..24053,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 856,
            column: 48,
            span: 24053..24054,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 856,
            column: 49,
            span: 24054..24055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 856,
            column: 52,
            span: 24056..24058,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 856,
            column: 54,
            span: 24059..24060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 856,
            column: 56,
            span: 24061..24062,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 856,
            column: 57,
            span: 24062..24063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 856,
            column: 65,
            span: 24063..24071,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 856,
            column: 66,
            span: 24071..24072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 856,
            column: 67,
            span: 24072..24073,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 856,
            column: 68,
            span: 24073..24074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 857,
            column: 2,
            span: 24075..24076,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 857,
            column: 4,
            span: 24077..24078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 857,
            column: 6,
            span: 24079..24080,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 857,
            column: 7,
            span: 24080..24081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 857,
            column: 18,
            span: 24081..24092,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 857,
            column: 19,
            span: 24092..24093,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 857,
            column: 20,
            span: 24092..24094,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 857,
            column: 21,
            span: 24094..24095,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 857,
            column: 22,
            span: 24095..24096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 857,
            column: 28,
            span: 24097..24102,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 857,
            column: 29,
            span: 24102..24103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 857,
            column: 41,
            span: 24103..24115,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 857,
            column: 42,
            span: 24115..24116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 857,
            column: 43,
            span: 24116..24117,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 857,
            column: 44,
            span: 24117..24118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 857,
            column: 47,
            span: 24119..24121,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 857,
            column: 48,
            span: 24121..24122,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 857,
            column: 49,
            span: 24122..24123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nb",
        ),
        position: Position {
            line: 857,
            column: 52,
            span: 24124..24126,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 857,
            column: 54,
            span: 24127..24128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 857,
            column: 56,
            span: 24129..24130,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 857,
            column: 57,
            span: 24130..24131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 857,
            column: 65,
            span: 24131..24139,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 857,
            column: 66,
            span: 24139..24140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 857,
            column: 67,
            span: 24140..24141,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 857,
            column: 68,
            span: 24141..24142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 858,
            column: 2,
            span: 24143..24144,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 858,
            column: 4,
            span: 24145..24146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 858,
            column: 6,
            span: 24147..24148,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 858,
            column: 7,
            span: 24148..24149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 858,
            column: 18,
            span: 24149..24160,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 858,
            column: 19,
            span: 24160..24161,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 858,
            column: 20,
            span: 24160..24162,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 858,
            column: 21,
            span: 24162..24163,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 858,
            column: 22,
            span: 24163..24164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 858,
            column: 28,
            span: 24165..24170,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 858,
            column: 29,
            span: 24170..24171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 858,
            column: 41,
            span: 24171..24183,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 858,
            column: 42,
            span: 24183..24184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 858,
            column: 43,
            span: 24184..24185,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 858,
            column: 44,
            span: 24185..24186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 858,
            column: 47,
            span: 24187..24189,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 858,
            column: 48,
            span: 24189..24190,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 858,
            column: 49,
            span: 24190..24191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nc",
        ),
        position: Position {
            line: 858,
            column: 52,
            span: 24192..24194,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 858,
            column: 54,
            span: 24195..24196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 858,
            column: 56,
            span: 24197..24198,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 858,
            column: 57,
            span: 24198..24199,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 858,
            column: 65,
            span: 24199..24207,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 858,
            column: 66,
            span: 24207..24208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 858,
            column: 67,
            span: 24208..24209,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 858,
            column: 68,
            span: 24209..24210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 861,
            column: 2,
            span: 24250..24251,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 861,
            column: 4,
            span: 24252..24253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 861,
            column: 6,
            span: 24254..24255,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 861,
            column: 7,
            span: 24255..24256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 861,
            column: 18,
            span: 24256..24267,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 861,
            column: 19,
            span: 24267..24268,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 861,
            column: 20,
            span: 24267..24269,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 861,
            column: 21,
            span: 24269..24270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 862,
            column: 2,
            span: 24271..24272,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 862,
            column: 4,
            span: 24273..24274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 862,
            column: 6,
            span: 24275..24276,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 862,
            column: 7,
            span: 24276..24277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 862,
            column: 18,
            span: 24277..24288,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 862,
            column: 19,
            span: 24288..24289,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 862,
            column: 20,
            span: 24288..24290,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 862,
            column: 21,
            span: 24290..24291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 864,
            column: 9,
            span: 24293..24301,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 864,
            column: 10,
            span: 24301..24302,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"FILE%* expected, got userdata\"",
        ),
        position: Position {
            line: 864,
            column: 41,
            span: 24302..24333,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 864,
            column: 42,
            span: 24333..24334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 864,
            column: 45,
            span: 24335..24337,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 864,
            column: 46,
            span: 24337..24338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 864,
            column: 51,
            span: 24338..24343,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 864,
            column: 52,
            span: 24343..24344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 864,
            column: 54,
            span: 24345..24346,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 864,
            column: 55,
            span: 24346..24347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 865,
            column: 9,
            span: 24348..24356,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 865,
            column: 10,
            span: 24356..24357,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"FILE%* expected, got userdata\"",
        ),
        position: Position {
            line: 865,
            column: 41,
            span: 24357..24388,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 865,
            column: 42,
            span: 24388..24389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 865,
            column: 45,
            span: 24390..24392,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 865,
            column: 46,
            span: 24392..24393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 865,
            column: 51,
            span: 24393..24398,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 865,
            column: 52,
            span: 24398..24399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 865,
            column: 54,
            span: 24400..24401,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 865,
            column: 55,
            span: 24401..24402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 867,
            column: 7,
            span: 24404..24410,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 867,
            column: 8,
            span: 24410..24411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 867,
            column: 13,
            span: 24411..24416,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 867,
            column: 14,
            span: 24416..24417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 867,
            column: 26,
            span: 24417..24429,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 867,
            column: 27,
            span: 24429..24430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 867,
            column: 28,
            span: 24430..24431,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 867,
            column: 29,
            span: 24431..24432,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 867,
            column: 32,
            span: 24433..24435,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 867,
            column: 36,
            span: 24436..24439,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 867,
            column: 40,
            span: 24440..24443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 867,
            column: 46,
            span: 24444..24449,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 867,
            column: 47,
            span: 24449..24450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 867,
            column: 59,
            span: 24450..24462,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 867,
            column: 60,
            span: 24462..24463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 867,
            column: 61,
            span: 24463..24464,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 867,
            column: 62,
            span: 24464..24465,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 867,
            column: 65,
            span: 24466..24468,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 867,
            column: 69,
            span: 24469..24472,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 867,
            column: 70,
            span: 24472..24473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 869,
            column: 2,
            span: 24475..24476,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 869,
            column: 3,
            span: 24476..24477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 869,
            column: 4,
            span: 24477..24478,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 869,
            column: 5,
            span: 24478..24479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 869,
            column: 8,
            span: 24479..24482,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 869,
            column: 9,
            span: 24482..24483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 869,
            column: 10,
            span: 24483..24484,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 869,
            column: 11,
            span: 24484..24485,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 869,
            column: 12,
            span: 24485..24486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 870,
            column: 2,
            span: 24487..24488,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 870,
            column: 3,
            span: 24488..24489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 870,
            column: 4,
            span: 24489..24490,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 870,
            column: 5,
            span: 24490..24491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 870,
            column: 8,
            span: 24491..24494,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 870,
            column: 9,
            span: 24494..24495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 870,
            column: 10,
            span: 24495..24496,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 870,
            column: 11,
            span: 24496..24497,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 870,
            column: 12,
            span: 24497..24498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 871,
            column: 2,
            span: 24499..24500,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 871,
            column: 3,
            span: 24500..24501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 871,
            column: 4,
            span: 24501..24502,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 871,
            column: 5,
            span: 24502..24503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 871,
            column: 8,
            span: 24503..24506,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 871,
            column: 9,
            span: 24506..24507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 871,
            column: 10,
            span: 24507..24508,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 871,
            column: 11,
            span: 24508..24509,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 871,
            column: 12,
            span: 24509..24510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 872,
            column: 2,
            span: 24511..24512,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 872,
            column: 4,
            span: 24513..24514,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 872,
            column: 6,
            span: 24515..24516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 872,
            column: 7,
            span: 24516..24517,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 872,
            column: 8,
            span: 24517..24518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 872,
            column: 14,
            span: 24518..24524,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 872,
            column: 15,
            span: 24524..24525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 872,
            column: 16,
            span: 24525..24526,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 872,
            column: 17,
            span: 24526..24527,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 872,
            column: 18,
            span: 24527..24528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 872,
            column: 20,
            span: 24529..24530,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 872,
            column: 21,
            span: 24530..24531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 872,
            column: 27,
            span: 24531..24537,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 872,
            column: 28,
            span: 24537..24538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 872,
            column: 29,
            span: 24538..24539,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 872,
            column: 30,
            span: 24539..24540,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 872,
            column: 31,
            span: 24540..24541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 872,
            column: 33,
            span: 24542..24543,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 872,
            column: 34,
            span: 24543..24544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 872,
            column: 40,
            span: 24544..24550,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 872,
            column: 41,
            span: 24550..24551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 872,
            column: 42,
            span: 24551..24552,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 872,
            column: 43,
            span: 24552..24553,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 872,
            column: 44,
            span: 24553..24554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 873,
            column: 7,
            span: 24555..24561,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 873,
            column: 8,
            span: 24561..24562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 873,
            column: 9,
            span: 24562..24563,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 873,
            column: 10,
            span: 24563..24564,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 873,
            column: 11,
            span: 24563..24565,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 873,
            column: 12,
            span: 24565..24566,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 873,
            column: 15,
            span: 24567..24569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 873,
            column: 17,
            span: 24570..24571,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 873,
            column: 21,
            span: 24572..24575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 873,
            column: 23,
            span: 24576..24577,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 873,
            column: 24,
            span: 24577..24578,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 873,
            column: 25,
            span: 24577..24579,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 873,
            column: 26,
            span: 24579..24580,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 873,
            column: 29,
            span: 24581..24583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 873,
            column: 31,
            span: 24584..24585,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 873,
            column: 35,
            span: 24586..24589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 873,
            column: 37,
            span: 24590..24591,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 873,
            column: 38,
            span: 24591..24592,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 873,
            column: 39,
            span: 24591..24593,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 873,
            column: 40,
            span: 24593..24594,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 873,
            column: 43,
            span: 24595..24597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 873,
            column: 45,
            span: 24598..24599,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 873,
            column: 46,
            span: 24599..24600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 875,
            column: 2,
            span: 24602..24603,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 875,
            column: 3,
            span: 24603..24604,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 875,
            column: 6,
            span: 24604..24607,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 875,
            column: 7,
            span: 24607..24608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 875,
            column: 9,
            span: 24609..24610,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 875,
            column: 10,
            span: 24610..24611,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 875,
            column: 13,
            span: 24611..24614,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 875,
            column: 14,
            span: 24614..24615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 875,
            column: 16,
            span: 24616..24617,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 875,
            column: 17,
            span: 24617..24618,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 875,
            column: 20,
            span: 24618..24621,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 875,
            column: 21,
            span: 24621..24622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 876,
            column: 2,
            span: 24623..24624,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 876,
            column: 3,
            span: 24624..24625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 876,
            column: 8,
            span: 24625..24630,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 876,
            column: 9,
            span: 24630..24631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 876,
            column: 10,
            span: 24631..24632,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 876,
            column: 11,
            span: 24632..24633,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 876,
            column: 12,
            span: 24633..24634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 876,
            column: 14,
            span: 24635..24636,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 876,
            column: 15,
            span: 24636..24637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 876,
            column: 20,
            span: 24637..24642,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 876,
            column: 21,
            span: 24642..24643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 876,
            column: 22,
            span: 24643..24644,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 876,
            column: 23,
            span: 24644..24645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 878,
            column: 15,
            span: 24647..24661,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 878,
            column: 16,
            span: 24661..24662,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 878,
            column: 17,
            span: 24662..24663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 881,
            column: 7,
            span: 24713..24719,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 881,
            column: 8,
            span: 24719..24720,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 881,
            column: 9,
            span: 24720..24721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 881,
            column: 11,
            span: 24721..24723,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 881,
            column: 14,
            span: 24724..24726,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 881,
            column: 16,
            span: 24726..24728,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 881,
            column: 20,
            span: 24729..24732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 881,
            column: 23,
            span: 24733..24735,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 881,
            column: 24,
            span: 24735..24736,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 881,
            column: 25,
            span: 24735..24737,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 881,
            column: 26,
            span: 24737..24738,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 881,
            column: 29,
            span: 24739..24741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nc",
        ),
        position: Position {
            line: 881,
            column: 32,
            span: 24742..24744,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 881,
            column: 33,
            span: 24744..24745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 883,
            column: 2,
            span: 24747..24748,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 883,
            column: 4,
            span: 24749..24750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 883,
            column: 6,
            span: 24751..24752,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 883,
            column: 7,
            span: 24752..24753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 883,
            column: 13,
            span: 24753..24759,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 883,
            column: 14,
            span: 24759..24760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 883,
            column: 15,
            span: 24760..24761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 883,
            column: 16,
            span: 24761..24762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 884,
            column: 7,
            span: 24763..24769,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 884,
            column: 8,
            span: 24769..24770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 884,
            column: 12,
            span: 24770..24774,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 884,
            column: 13,
            span: 24774..24775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 884,
            column: 14,
            span: 24775..24776,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 884,
            column: 15,
            span: 24776..24777,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 884,
            column: 18,
            span: 24778..24780,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'userdata'",
        ),
        position: Position {
            line: 884,
            column: 29,
            span: 24781..24791,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 884,
            column: 33,
            span: 24792..24795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 884,
            column: 39,
            span: 24796..24801,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 884,
            column: 40,
            span: 24801..24802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 884,
            column: 52,
            span: 24802..24814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 884,
            column: 53,
            span: 24814..24815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 884,
            column: 54,
            span: 24815..24816,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 884,
            column: 55,
            span: 24816..24817,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 884,
            column: 58,
            span: 24818..24820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 884,
            column: 61,
            span: 24821..24823,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 884,
            column: 62,
            span: 24823..24824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 885,
            column: 2,
            span: 24825..24826,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 885,
            column: 4,
            span: 24827..24828,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 885,
            column: 0,
            span: 24828..24831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 886,
            column: 3,
            span: 24832..24834,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 886,
            column: 4,
            span: 24834..24835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 886,
            column: 5,
            span: 24835..24836,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 886,
            column: 7,
            span: 24837..24838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 886,
            column: 9,
            span: 24839..24840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 887,
            column: 3,
            span: 24858..24860,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 887,
            column: 4,
            span: 24860..24861,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 887,
            column: 7,
            span: 24861..24864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 888,
            column: 2,
            span: 24887..24888,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 888,
            column: 4,
            span: 24889..24890,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 888,
            column: 0,
            span: 24891..24894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 889,
            column: 2,
            span: 24895..24896,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 889,
            column: 4,
            span: 24897..24898,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 889,
            column: 0,
            span: 24899..24902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 890,
            column: 2,
            span: 24903..24904,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 890,
            column: 3,
            span: 24904..24905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 890,
            column: 8,
            span: 24905..24910,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 890,
            column: 9,
            span: 24910..24911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 890,
            column: 10,
            span: 24911..24912,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 890,
            column: 11,
            span: 24912..24913,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 890,
            column: 12,
            span: 24913..24914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        position: Position {
            line: 891,
            column: 3,
            span: 24915..24917,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 891,
            column: 5,
            span: 24918..24919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 891,
            column: 7,
            span: 24920..24921,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 891,
            column: 8,
            span: 24921..24922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 891,
            column: 19,
            span: 24922..24933,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 891,
            column: 20,
            span: 24933..24934,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 891,
            column: 21,
            span: 24933..24935,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 891,
            column: 22,
            span: 24935..24936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 892,
            column: 6,
            span: 24937..24942,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 892,
            column: 7,
            span: 24942..24943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 892,
            column: 19,
            span: 24943..24955,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 892,
            column: 20,
            span: 24955..24956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        position: Position {
            line: 892,
            column: 22,
            span: 24956..24958,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 892,
            column: 23,
            span: 24958..24959,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 892,
            column: 25,
            span: 24960..24961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 892,
            column: 29,
            span: 24961..24965,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 892,
            column: 30,
            span: 24965..24966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 892,
            column: 31,
            span: 24966..24967,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 892,
            column: 32,
            span: 24967..24968,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 892,
            column: 33,
            span: 24968..24969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        position: Position {
            line: 893,
            column: 3,
            span: 24970..24972,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 893,
            column: 5,
            span: 24973..24974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 893,
            column: 7,
            span: 24975..24976,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 893,
            column: 8,
            span: 24976..24977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 893,
            column: 16,
            span: 24977..24985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 893,
            column: 17,
            span: 24985..24986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        position: Position {
            line: 893,
            column: 19,
            span: 24986..24988,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 893,
            column: 20,
            span: 24988..24989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 894,
            column: 15,
            span: 24990..25004,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 894,
            column: 16,
            span: 25004..25005,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 894,
            column: 17,
            span: 25005..25006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 895,
            column: 7,
            span: 25007..25013,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 895,
            column: 8,
            span: 25013..25014,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 895,
            column: 9,
            span: 25014..25015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 895,
            column: 11,
            span: 25015..25017,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 895,
            column: 14,
            span: 25018..25020,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 895,
            column: 16,
            span: 25020..25022,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 895,
            column: 17,
            span: 25022..25023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 897,
            column: 7,
            span: 25053..25059,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 897,
            column: 8,
            span: 25059..25060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 897,
            column: 10,
            span: 25060..25062,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 897,
            column: 11,
            span: 25062..25063,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 897,
            column: 12,
            span: 25062..25064,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 897,
            column: 13,
            span: 25064..25065,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 897,
            column: 16,
            span: 25066..25068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        position: Position {
            line: 897,
            column: 19,
            span: 25069..25071,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 897,
            column: 23,
            span: 25072..25075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 897,
            column: 26,
            span: 25076..25078,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 897,
            column: 27,
            span: 25078..25079,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 897,
            column: 28,
            span: 25078..25080,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 897,
            column: 29,
            span: 25080..25081,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 897,
            column: 32,
            span: 25082..25084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nb",
        ),
        position: Position {
            line: 897,
            column: 35,
            span: 25085..25087,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 897,
            column: 39,
            span: 25088..25091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 897,
            column: 42,
            span: 25092..25094,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 897,
            column: 43,
            span: 25094..25095,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 897,
            column: 44,
            span: 25094..25096,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 897,
            column: 45,
            span: 25096..25097,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 897,
            column: 48,
            span: 25098..25100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 897,
            column: 51,
            span: 25101..25103,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 897,
            column: 52,
            span: 25103..25104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 899,
            column: 15,
            span: 25106..25120,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        position: Position {
            line: 899,
            column: 24,
            span: 25120..25129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 902,
            column: 2,
            span: 25132..25133,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 902,
            column: 3,
            span: 25133..25134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 902,
            column: 6,
            span: 25135..25137,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 902,
            column: 8,
            span: 25138..25139,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 902,
            column: 10,
            span: 25140..25141,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 902,
            column: 11,
            span: 25141..25142,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 902,
            column: 12,
            span: 25142..25143,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 902,
            column: 14,
            span: 25144..25145,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 902,
            column: 15,
            span: 25145..25146,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 903,
            column: 4,
            span: 25147..25150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 903,
            column: 6,
            span: 25151..25152,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 903,
            column: 7,
            span: 25152..25153,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 903,
            column: 9,
            span: 25152..25155,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 903,
            column: 10,
            span: 25155..25156,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 903,
            column: 11,
            span: 25155..25157,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 903,
            column: 12,
            span: 25157..25158,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 903,
            column: 13,
            span: 25158..25159,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 903,
            column: 14,
            span: 25158..25160,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 903,
            column: 0,
            span: 25161..25163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 904,
            column: 4,
            span: 25166..25167,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 904,
            column: 5,
            span: 25167..25168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 904,
            column: 6,
            span: 25168..25169,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 904,
            column: 7,
            span: 25169..25170,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 904,
            column: 9,
            span: 25171..25172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 904,
            column: 11,
            span: 25173..25174,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 904,
            column: 12,
            span: 25174..25175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 904,
            column: 23,
            span: 25175..25186,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 904,
            column: 24,
            span: 25186..25187,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 904,
            column: 25,
            span: 25186..25188,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 904,
            column: 26,
            span: 25188..25189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 905,
            column: 8,
            span: 25192..25197,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 905,
            column: 9,
            span: 25197..25198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 905,
            column: 21,
            span: 25198..25210,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 905,
            column: 22,
            span: 25210..25211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 905,
            column: 23,
            span: 25211..25212,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 905,
            column: 24,
            span: 25212..25213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 905,
            column: 25,
            span: 25213..25214,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 905,
            column: 26,
            span: 25214..25215,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 905,
            column: 27,
            span: 25215..25216,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 905,
            column: 29,
            span: 25217..25218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 905,
            column: 33,
            span: 25218..25222,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 905,
            column: 34,
            span: 25222..25223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 905,
            column: 35,
            span: 25223..25224,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 905,
            column: 36,
            span: 25224..25225,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 905,
            column: 37,
            span: 25225..25226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 906,
            column: 5,
            span: 25229..25231,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 906,
            column: 6,
            span: 25231..25232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 906,
            column: 7,
            span: 25232..25233,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 906,
            column: 8,
            span: 25233..25234,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 906,
            column: 10,
            span: 25235..25236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 906,
            column: 12,
            span: 25237..25238,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 906,
            column: 13,
            span: 25238..25239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 906,
            column: 21,
            span: 25239..25247,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 906,
            column: 22,
            span: 25247..25248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 906,
            column: 23,
            span: 25248..25249,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 906,
            column: 24,
            span: 25249..25250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 906,
            column: 25,
            span: 25250..25251,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 906,
            column: 26,
            span: 25251..25252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 906,
            column: 27,
            span: 25252..25253,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 907,
            column: 0,
            span: 25254..25257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 908,
            column: 3,
            span: 25258..25260,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 908,
            column: 5,
            span: 25261..25262,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 908,
            column: 7,
            span: 25263..25264,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 908,
            column: 8,
            span: 25264..25265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 909,
            column: 2,
            span: 25266..25267,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 909,
            column: 4,
            span: 25268..25269,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 909,
            column: 8,
            span: 25270..25273,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 909,
            column: 9,
            span: 25273..25274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 909,
            column: 24,
            span: 25275..25289,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 909,
            column: 25,
            span: 25289..25290,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 909,
            column: 26,
            span: 25290..25291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 910,
            column: 7,
            span: 25292..25298,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 910,
            column: 8,
            span: 25298..25299,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 910,
            column: 9,
            span: 25299..25300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 910,
            column: 11,
            span: 25300..25302,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 910,
            column: 14,
            span: 25303..25305,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 910,
            column: 17,
            span: 25305..25308,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 910,
            column: 18,
            span: 25308..25309,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 911,
            column: 4,
            span: 25310..25313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 911,
            column: 6,
            span: 25314..25315,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 911,
            column: 7,
            span: 25315..25316,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 911,
            column: 8,
            span: 25315..25317,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 911,
            column: 9,
            span: 25317..25318,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 911,
            column: 11,
            span: 25317..25320,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 911,
            column: 14,
            span: 25321..25323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 911,
            column: 21,
            span: 25324..25330,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 911,
            column: 22,
            span: 25330..25331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 911,
            column: 24,
            span: 25331..25333,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 911,
            column: 25,
            span: 25333..25334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 911,
            column: 26,
            span: 25334..25335,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 911,
            column: 27,
            span: 25335..25336,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 911,
            column: 30,
            span: 25337..25339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 911,
            column: 33,
            span: 25340..25342,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 911,
            column: 34,
            span: 25342..25343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 911,
            column: 35,
            span: 25343..25344,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 911,
            column: 36,
            span: 25344..25345,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 911,
            column: 37,
            span: 25345..25346,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 911,
            column: 0,
            span: 25347..25350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 912,
            column: 3,
            span: 25351..25353,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 912,
            column: 5,
            span: 25354..25355,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 912,
            column: 0,
            span: 25356..25359,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 915,
            column: 4,
            span: 25362..25365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 915,
            column: 6,
            span: 25366..25367,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 915,
            column: 7,
            span: 25367..25368,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 915,
            column: 8,
            span: 25367..25369,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 915,
            column: 9,
            span: 25369..25370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 915,
            column: 12,
            span: 25370..25373,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 915,
            column: 13,
            span: 25373..25374,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 915,
            column: 14,
            span: 25373..25375,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 915,
            column: 17,
            span: 25376..25378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 916,
            column: 4,
            span: 25408..25409,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 916,
            column: 5,
            span: 25409..25410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 916,
            column: 10,
            span: 25410..25415,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 916,
            column: 11,
            span: 25415..25416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 916,
            column: 14,
            span: 25416..25419,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 916,
            column: 15,
            span: 25419..25420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 916,
            column: 16,
            span: 25420..25421,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 916,
            column: 17,
            span: 25421..25422,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 916,
            column: 18,
            span: 25422..25423,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 917,
            column: 0,
            span: 25424..25427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 919,
            column: 2,
            span: 25429..25430,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 919,
            column: 4,
            span: 25431..25432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 919,
            column: 6,
            span: 25433..25434,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 919,
            column: 7,
            span: 25434..25435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 919,
            column: 18,
            span: 25435..25446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 919,
            column: 19,
            span: 25446..25447,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "41",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 919,
            column: 21,
            span: 25446..25449,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 919,
            column: 22,
            span: 25449..25450,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 919,
            column: 23,
            span: 25450..25451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 919,
            column: 29,
            span: 25452..25457,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 919,
            column: 30,
            span: 25457..25458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 919,
            column: 42,
            span: 25458..25470,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 919,
            column: 43,
            span: 25470..25471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 919,
            column: 44,
            span: 25471..25472,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 919,
            column: 45,
            span: 25472..25473,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 919,
            column: 47,
            span: 25474..25475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 919,
            column: 51,
            span: 25475..25479,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 919,
            column: 52,
            span: 25479..25480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 919,
            column: 53,
            span: 25480..25481,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 919,
            column: 54,
            span: 25481..25482,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 919,
            column: 55,
            span: 25482..25483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 920,
            column: 7,
            span: 25484..25490,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 920,
            column: 8,
            span: 25490..25491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 920,
            column: 9,
            span: 25491..25492,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 920,
            column: 10,
            span: 25492..25493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 920,
            column: 15,
            span: 25493..25498,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 920,
            column: 16,
            span: 25498..25499,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize 2; return 1\"",
        ),
        position: Position {
            line: 920,
            column: 37,
            span: 25499..25520,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 920,
            column: 38,
            span: 25520..25521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 920,
            column: 40,
            span: 25522..25523,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 920,
            column: 41,
            span: 25523..25524,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 920,
            column: 44,
            span: 25525..25527,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "41",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 920,
            column: 47,
            span: 25527..25530,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 920,
            column: 48,
            span: 25530..25531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 921,
            column: 3,
            span: 25532..25534,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 921,
            column: 5,
            span: 25535..25536,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 921,
            column: 7,
            span: 25537..25538,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 921,
            column: 8,
            span: 25538..25539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 922,
            column: 2,
            span: 25540..25541,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 922,
            column: 4,
            span: 25542..25543,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 922,
            column: 6,
            span: 25544..25545,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 922,
            column: 7,
            span: 25545..25546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 922,
            column: 8,
            span: 25546..25547,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 922,
            column: 9,
            span: 25547..25548,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 922,
            column: 11,
            span: 25549..25550,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 922,
            column: 13,
            span: 25550..25552,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 922,
            column: 14,
            span: 25552..25553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 923,
            column: 2,
            span: 25554..25555,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 923,
            column: 4,
            span: 25556..25557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 923,
            column: 6,
            span: 25558..25559,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 923,
            column: 7,
            span: 25559..25560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 923,
            column: 15,
            span: 25560..25568,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 923,
            column: 16,
            span: 25568..25569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 923,
            column: 17,
            span: 25569..25570,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 923,
            column: 18,
            span: 25570..25571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 924,
            column: 15,
            span: 25572..25586,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 924,
            column: 16,
            span: 25586..25587,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 924,
            column: 17,
            span: 25587..25588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 926,
            column: 7,
            span: 25640..25646,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 926,
            column: 8,
            span: 25646..25647,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 926,
            column: 9,
            span: 25647..25648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 926,
            column: 11,
            span: 25648..25650,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 926,
            column: 14,
            span: 25651..25653,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 926,
            column: 16,
            span: 25653..25655,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 926,
            column: 17,
            span: 25655..25656,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 927,
            column: 4,
            span: 25657..25660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 927,
            column: 6,
            span: 25661..25662,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 927,
            column: 9,
            span: 25663..25665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 927,
            column: 15,
            span: 25666..25671,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 927,
            column: 16,
            span: 25671..25672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 927,
            column: 17,
            span: 25672..25673,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 927,
            column: 18,
            span: 25673..25674,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 927,
            column: 21,
            span: 25675..25677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 927,
            column: 23,
            span: 25678..25679,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 927,
            column: 24,
            span: 25679..25680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 927,
            column: 25,
            span: 25680..25681,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 927,
            column: 26,
            span: 25681..25682,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 927,
            column: 28,
            span: 25683..25684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        position: Position {
            line: 927,
            column: 34,
            span: 25685..25690,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 927,
            column: 0,
            span: 25691..25694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 928,
            column: 15,
            span: 25695..25709,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 928,
            column: 16,
            span: 25709..25710,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 928,
            column: 17,
            span: 25710..25711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 929,
            column: 7,
            span: 25712..25718,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 929,
            column: 8,
            span: 25718..25719,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 929,
            column: 9,
            span: 25719..25720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 929,
            column: 11,
            span: 25720..25722,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 929,
            column: 14,
            span: 25723..25725,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 929,
            column: 16,
            span: 25725..25727,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 929,
            column: 20,
            span: 25728..25731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 929,
            column: 23,
            span: 25732..25734,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 929,
            column: 24,
            span: 25734..25735,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 929,
            column: 25,
            span: 25734..25736,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 929,
            column: 26,
            span: 25736..25737,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 929,
            column: 29,
            span: 25738..25740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 929,
            column: 31,
            span: 25741..25742,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 929,
            column: 32,
            span: 25742..25743,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 932,
            column: 7,
            span: 25797..25803,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 932,
            column: 8,
            span: 25803..25804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 932,
            column: 9,
            span: 25804..25805,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 932,
            column: 10,
            span: 25805..25806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 932,
            column: 15,
            span: 25806..25811,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 932,
            column: 16,
            span: 25811..25812,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 2 4; return 1\"",
        ),
        position: Position {
            line: 932,
            column: 42,
            span: 25812..25838,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 932,
            column: 43,
            span: 25838..25839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 932,
            column: 49,
            span: 25840..25845,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 932,
            column: 50,
            span: 25845..25846,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 932,
            column: 52,
            span: 25846..25848,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 932,
            column: 53,
            span: 25848..25849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 932,
            column: 59,
            span: 25850..25855,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 932,
            column: 60,
            span: 25855..25856,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 932,
            column: 63,
            span: 25856..25859,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 932,
            column: 64,
            span: 25859..25860,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 932,
            column: 65,
            span: 25860..25861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 933,
            column: 7,
            span: 25862..25868,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 933,
            column: 8,
            span: 25868..25869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 933,
            column: 9,
            span: 25869..25870,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 933,
            column: 10,
            span: 25870..25871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 933,
            column: 15,
            span: 25871..25876,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 933,
            column: 16,
            span: 25876..25877,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 3 2; return 1\"",
        ),
        position: Position {
            line: 933,
            column: 42,
            span: 25877..25903,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 933,
            column: 43,
            span: 25903..25904,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 933,
            column: 49,
            span: 25905..25910,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 933,
            column: 50,
            span: 25910..25911,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 933,
            column: 56,
            span: 25912..25917,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 933,
            column: 57,
            span: 25917..25918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 933,
            column: 58,
            span: 25918..25919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 934,
            column: 7,
            span: 25920..25926,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 934,
            column: 8,
            span: 25926..25927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 934,
            column: 9,
            span: 25927..25928,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 934,
            column: 10,
            span: 25928..25929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 934,
            column: 15,
            span: 25929..25934,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 934,
            column: 16,
            span: 25934..25935,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 2 3; return 1\"",
        ),
        position: Position {
            line: 934,
            column: 42,
            span: 25935..25961,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 934,
            column: 43,
            span: 25961..25962,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 934,
            column: 47,
            span: 25963..25966,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 934,
            column: 48,
            span: 25966..25967,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 934,
            column: 52,
            span: 25968..25971,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 934,
            column: 53,
            span: 25971..25972,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 934,
            column: 54,
            span: 25972..25973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 935,
            column: 7,
            span: 25974..25980,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 935,
            column: 8,
            span: 25980..25981,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 935,
            column: 11,
            span: 25981..25984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 935,
            column: 13,
            span: 25985..25986,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 935,
            column: 14,
            span: 25986..25987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 935,
            column: 19,
            span: 25987..25992,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 935,
            column: 20,
            span: 25992..25993,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 2 3; return 1\"",
        ),
        position: Position {
            line: 935,
            column: 46,
            span: 25993..26019,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 935,
            column: 47,
            span: 26019..26020,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 935,
            column: 49,
            span: 26021..26022,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 935,
            column: 50,
            span: 26022..26023,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 935,
            column: 51,
            span: 26023..26024,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 935,
            column: 53,
            span: 26025..26026,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 935,
            column: 54,
            span: 26026..26027,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 935,
            column: 55,
            span: 26027..26028,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 935,
            column: 56,
            span: 26028..26029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 936,
            column: 7,
            span: 26030..26036,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 936,
            column: 8,
            span: 26036..26037,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 936,
            column: 11,
            span: 26037..26040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 936,
            column: 13,
            span: 26041..26042,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 936,
            column: 14,
            span: 26042..26043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 936,
            column: 19,
            span: 26043..26048,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 936,
            column: 20,
            span: 26048..26049,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 2 3; return 1\"",
        ),
        position: Position {
            line: 936,
            column: 46,
            span: 26049..26075,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 936,
            column: 47,
            span: 26075..26076,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 936,
            column: 48,
            span: 26076..26077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 937,
            column: 7,
            span: 26078..26084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 937,
            column: 8,
            span: 26084..26085,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 937,
            column: 11,
            span: 26085..26088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 937,
            column: 13,
            span: 26089..26090,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 937,
            column: 14,
            span: 26090..26091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 937,
            column: 19,
            span: 26091..26096,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 937,
            column: 20,
            span: 26096..26097,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 2 3; return 1\"",
        ),
        position: Position {
            line: 937,
            column: 46,
            span: 26097..26123,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 937,
            column: 47,
            span: 26123..26124,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 937,
            column: 49,
            span: 26124..26126,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 937,
            column: 50,
            span: 26126..26127,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 937,
            column: 51,
            span: 26127..26128,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 940,
            column: 0,
            span: 26166..26168,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 941,
            column: 8,
            span: 26171..26176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        position: Position {
            line: 941,
            column: 12,
            span: 26177..26180,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 941,
            column: 14,
            span: 26181..26182,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 941,
            column: 16,
            span: 26183..26184,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 941,
            column: 17,
            span: 26184..26185,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 942,
            column: 8,
            span: 26188..26193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 942,
            column: 10,
            span: 26194..26195,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 942,
            column: 12,
            span: 26196..26197,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 942,
            column: 14,
            span: 26198..26199,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        position: Position {
            line: 942,
            column: 18,
            span: 26199..26203,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 942,
            column: 20,
            span: 26204..26205,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 942,
            column: 29,
            span: 26206..26214,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 942,
            column: 31,
            span: 26215..26216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 942,
            column: 32,
            span: 26216..26217,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 942,
            column: 33,
            span: 26217..26218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 942,
            column: 34,
            span: 26218..26219,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 942,
            column: 35,
            span: 26219..26220,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 942,
            column: 42,
            span: 26221..26227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        position: Position {
            line: 942,
            column: 46,
            span: 26228..26231,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 942,
            column: 47,
            span: 26231..26232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 942,
            column: 48,
            span: 26232..26233,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 942,
            column: 49,
            span: 26233..26234,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 942,
            column: 52,
            span: 26235..26237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        position: Position {
            line: 942,
            column: 56,
            span: 26238..26241,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 942,
            column: 57,
            span: 26241..26242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 942,
            column: 58,
            span: 26242..26243,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 942,
            column: 59,
            span: 26243..26244,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 942,
            column: 63,
            span: 26245..26248,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 942,
            column: 64,
            span: 26248..26249,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 943,
            column: 8,
            span: 26252..26257,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 943,
            column: 17,
            span: 26258..26266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 943,
            column: 19,
            span: 26267..26268,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 943,
            column: 20,
            span: 26268..26269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 943,
            column: 21,
            span: 26269..26270,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 943,
            column: 22,
            span: 26270..26271,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 944,
            column: 10,
            span: 26276..26281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 944,
            column: 12,
            span: 26282..26283,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 944,
            column: 14,
            span: 26284..26285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 944,
            column: 16,
            span: 26286..26287,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 944,
            column: 17,
            span: 26287..26288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 944,
            column: 28,
            span: 26288..26299,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 944,
            column: 29,
            span: 26299..26300,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 944,
            column: 30,
            span: 26299..26301,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 944,
            column: 31,
            span: 26301..26302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 945,
            column: 10,
            span: 26307..26312,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 945,
            column: 11,
            span: 26312..26313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 945,
            column: 23,
            span: 26313..26325,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 945,
            column: 24,
            span: 26325..26326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 945,
            column: 25,
            span: 26326..26327,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 945,
            column: 26,
            span: 26327..26328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 945,
            column: 28,
            span: 26329..26330,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 945,
            column: 29,
            span: 26330..26331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        position: Position {
            line: 946,
            column: 8,
            span: 26336..26339,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 946,
            column: 9,
            span: 26339..26340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 946,
            column: 10,
            span: 26340..26341,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 946,
            column: 11,
            span: 26341..26342,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 946,
            column: 13,
            span: 26343..26344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 946,
            column: 0,
            span: 26345..26346,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 947,
            column: 11,
            span: 26351..26357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 947,
            column: 0,
            span: 26358..26359,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 948,
            column: 0,
            span: 26362..26365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 949,
            column: 9,
            span: 26368..26374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 949,
            column: 10,
            span: 26374..26375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 949,
            column: 11,
            span: 26375..26376,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 949,
            column: 12,
            span: 26376..26377,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 949,
            column: 14,
            span: 26376..26379,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 949,
            column: 15,
            span: 26379..26380,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 949,
            column: 18,
            span: 26381..26383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 949,
            column: 20,
            span: 26384..26385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 949,
            column: 21,
            span: 26385..26386,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 949,
            column: 23,
            span: 26385..26388,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 949,
            column: 24,
            span: 26388..26389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 949,
            column: 25,
            span: 26389..26390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 950,
            column: 9,
            span: 26393..26399,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 950,
            column: 10,
            span: 26399..26400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 950,
            column: 11,
            span: 26400..26401,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 950,
            column: 12,
            span: 26401..26402,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 950,
            column: 14,
            span: 26401..26404,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 950,
            column: 15,
            span: 26404..26405,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 950,
            column: 18,
            span: 26406..26408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 950,
            column: 20,
            span: 26409..26410,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 950,
            column: 21,
            span: 26410..26411,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 950,
            column: 23,
            span: 26410..26413,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 950,
            column: 24,
            span: 26413..26414,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 950,
            column: 25,
            span: 26414..26415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 951,
            column: 9,
            span: 26418..26424,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 951,
            column: 10,
            span: 26424..26425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 951,
            column: 11,
            span: 26425..26426,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 951,
            column: 12,
            span: 26426..26427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 951,
            column: 17,
            span: 26427..26432,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 951,
            column: 18,
            span: 26432..26433,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 2 3; return 1\"",
        ),
        position: Position {
            line: 951,
            column: 44,
            span: 26433..26459,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 951,
            column: 45,
            span: 26459..26460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 951,
            column: 47,
            span: 26461..26462,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 951,
            column: 48,
            span: 26462..26463,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 951,
            column: 50,
            span: 26462..26465,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 951,
            column: 51,
            span: 26465..26466,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 951,
            column: 52,
            span: 26466..26467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 951,
            column: 54,
            span: 26468..26469,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 951,
            column: 55,
            span: 26469..26470,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 951,
            column: 57,
            span: 26469..26472,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 951,
            column: 58,
            span: 26472..26473,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 951,
            column: 59,
            span: 26473..26474,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 951,
            column: 60,
            span: 26474..26475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 952,
            column: 9,
            span: 26478..26484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 952,
            column: 10,
            span: 26484..26485,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 952,
            column: 13,
            span: 26485..26488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 952,
            column: 15,
            span: 26489..26490,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 952,
            column: 16,
            span: 26490..26491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 952,
            column: 21,
            span: 26491..26496,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 952,
            column: 22,
            span: 26496..26497,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 2 3; return 1\"",
        ),
        position: Position {
            line: 952,
            column: 48,
            span: 26497..26523,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 952,
            column: 49,
            span: 26523..26524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 952,
            column: 51,
            span: 26525..26526,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 952,
            column: 52,
            span: 26526..26527,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 952,
            column: 54,
            span: 26526..26529,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 952,
            column: 55,
            span: 26529..26530,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 952,
            column: 56,
            span: 26530..26531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 952,
            column: 58,
            span: 26532..26533,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 952,
            column: 59,
            span: 26533..26534,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 952,
            column: 61,
            span: 26533..26536,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 952,
            column: 62,
            span: 26536..26537,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 952,
            column: 63,
            span: 26537..26538,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 952,
            column: 64,
            span: 26538..26539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 953,
            column: 4,
            span: 26542..26543,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 953,
            column: 5,
            span: 26543..26544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        position: Position {
            line: 953,
            column: 9,
            span: 26544..26548,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 953,
            column: 11,
            span: 26549..26550,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 953,
            column: 0,
            span: 26551..26554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 954,
            column: 9,
            span: 26557..26563,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 954,
            column: 10,
            span: 26563..26564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 954,
            column: 11,
            span: 26564..26565,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 954,
            column: 12,
            span: 26565..26566,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 954,
            column: 14,
            span: 26565..26568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 954,
            column: 15,
            span: 26568..26569,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 954,
            column: 18,
            span: 26570..26572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 954,
            column: 20,
            span: 26573..26574,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 954,
            column: 21,
            span: 26574..26575,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 954,
            column: 23,
            span: 26574..26577,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 954,
            column: 24,
            span: 26577..26578,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 954,
            column: 25,
            span: 26578..26579,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 955,
            column: 0,
            span: 26580..26583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 957,
            column: 6,
            span: 26585..26590,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 957,
            column: 9,
            span: 26590..26593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 962,
            column: 3,
            span: 26636..26638,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 962,
            column: 4,
            span: 26638..26639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 962,
            column: 5,
            span: 26639..26640,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 962,
            column: 7,
            span: 26641..26642,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 962,
            column: 9,
            span: 26643..26644,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 962,
            column: 10,
            span: 26644..26645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 963,
            column: 2,
            span: 26646..26647,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 963,
            column: 3,
            span: 26647..26648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 963,
            column: 10,
            span: 26648..26655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 963,
            column: 11,
            span: 26655..26656,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  # set a line hook after 3 count hooks\n  sethook 4 0 '\n    getglobal t;\n    pushvalue -3; append -2\n    pushvalue -2; append -2\n  ']]",
        ),
        position: Position {
            line: 969,
            column: 6,
            span: 26656..26793,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 969,
            column: 7,
            span: 26793..26794,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        position: Position {
            line: 969,
            column: 11,
            span: 26795..26798,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 969,
            column: 12,
            span: 26798..26799,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 969,
            column: 14,
            span: 26799..26801,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 969,
            column: 15,
            span: 26801..26802,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 970,
            column: 6,
            span: 26803..26808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 970,
            column: 8,
            span: 26809..26810,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 970,
            column: 10,
            span: 26811..26812,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 970,
            column: 12,
            span: 26812..26814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 971,
            column: 2,
            span: 26829..26830,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 971,
            column: 4,
            span: 26831..26832,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 971,
            column: 6,
            span: 26832..26834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 972,
            column: 2,
            span: 26849..26850,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 972,
            column: 4,
            span: 26851..26852,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 972,
            column: 6,
            span: 26852..26854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 973,
            column: 2,
            span: 26887..26888,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 973,
            column: 4,
            span: 26889..26890,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 973,
            column: 6,
            span: 26890..26892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 974,
            column: 2,
            span: 26908..26909,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 974,
            column: 4,
            span: 26910..26911,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 974,
            column: 6,
            span: 26911..26913,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 975,
            column: 6,
            span: 26929..26934,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 975,
            column: 7,
            span: 26934..26935,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 975,
            column: 14,
            span: 26935..26942,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 975,
            column: 15,
            span: 26942..26943,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 975,
            column: 16,
            span: 26943..26944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 976,
            column: 2,
            span: 26945..26946,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 976,
            column: 4,
            span: 26947..26948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 976,
            column: 7,
            span: 26949..26951,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 976,
            column: 8,
            span: 26951..26952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 976,
            column: 0,
            span: 26952..26953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 977,
            column: 7,
            span: 26954..26960,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 977,
            column: 8,
            span: 26960..26961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 977,
            column: 9,
            span: 26961..26962,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 977,
            column: 10,
            span: 26962..26963,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 977,
            column: 11,
            span: 26962..26964,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 977,
            column: 12,
            span: 26964..26965,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 977,
            column: 15,
            span: 26966..26968,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        position: Position {
            line: 977,
            column: 22,
            span: 26969..26975,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 977,
            column: 23,
            span: 26975..26976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 978,
            column: 5,
            span: 26977..26981,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 978,
            column: 7,
            span: 26982..26983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 978,
            column: 9,
            span: 26984..26985,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 978,
            column: 10,
            span: 26985..26986,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 978,
            column: 11,
            span: 26985..26987,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 978,
            column: 12,
            span: 26987..26988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 979,
            column: 7,
            span: 26989..26995,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 979,
            column: 8,
            span: 26995..26996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 979,
            column: 9,
            span: 26996..26997,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 979,
            column: 10,
            span: 26997..26998,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 979,
            column: 11,
            span: 26997..26999,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 979,
            column: 12,
            span: 26999..27000,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 979,
            column: 15,
            span: 27001..27003,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        position: Position {
            line: 979,
            column: 22,
            span: 27004..27010,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 979,
            column: 26,
            span: 27011..27014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 979,
            column: 28,
            span: 27015..27016,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 979,
            column: 29,
            span: 27016..27017,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 979,
            column: 30,
            span: 27016..27018,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 979,
            column: 31,
            span: 27018..27019,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 979,
            column: 34,
            span: 27020..27022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 979,
            column: 39,
            span: 27023..27027,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 979,
            column: 41,
            span: 27028..27029,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 979,
            column: 43,
            span: 27029..27031,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 979,
            column: 44,
            span: 27031..27032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 980,
            column: 7,
            span: 27033..27039,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 980,
            column: 8,
            span: 27039..27040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 980,
            column: 9,
            span: 27040..27041,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 980,
            column: 10,
            span: 27041..27042,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 980,
            column: 11,
            span: 27041..27043,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 980,
            column: 12,
            span: 27043..27044,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 980,
            column: 15,
            span: 27045..27047,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        position: Position {
            line: 980,
            column: 22,
            span: 27048..27054,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 980,
            column: 26,
            span: 27055..27058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 980,
            column: 28,
            span: 27059..27060,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 980,
            column: 29,
            span: 27060..27061,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 980,
            column: 30,
            span: 27060..27062,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 980,
            column: 31,
            span: 27062..27063,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 980,
            column: 34,
            span: 27064..27066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 980,
            column: 39,
            span: 27067..27071,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 980,
            column: 41,
            span: 27072..27073,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 980,
            column: 43,
            span: 27073..27075,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 980,
            column: 44,
            span: 27075..27076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 981,
            column: 7,
            span: 27077..27083,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 981,
            column: 8,
            span: 27083..27084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 981,
            column: 9,
            span: 27084..27085,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 981,
            column: 10,
            span: 27085..27086,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 981,
            column: 11,
            span: 27085..27087,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 981,
            column: 12,
            span: 27087..27088,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 981,
            column: 15,
            span: 27089..27091,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 981,
            column: 19,
            span: 27092..27095,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 981,
            column: 20,
            span: 27095..27096,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 985,
            column: 3,
            span: 27173..27175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        position: Position {
            line: 986,
            column: 7,
            span: 27208..27212,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 986,
            column: 8,
            span: 27212..27213,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@off\"",
        ),
        position: Position {
            line: 986,
            column: 14,
            span: 27213..27219,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 986,
            column: 15,
            span: 27219..27220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 987,
            column: 17,
            span: 27223..27237,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 987,
            column: 18,
            span: 27237..27238,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 987,
            column: 24,
            span: 27238..27244,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 987,
            column: 25,
            span: 27244..27245,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 988,
            column: 8,
            span: 27248..27253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 988,
            column: 10,
            span: 27254..27255,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 988,
            column: 12,
            span: 27256..27257,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 988,
            column: 14,
            span: 27258..27259,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 988,
            column: 15,
            span: 27259..27260,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 989,
            column: 6,
            span: 27263..27266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 989,
            column: 8,
            span: 27267..27268,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 989,
            column: 9,
            span: 27268..27269,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 989,
            column: 10,
            span: 27268..27270,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 989,
            column: 11,
            span: 27270..27271,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 989,
            column: 13,
            span: 27270..27273,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 989,
            column: 0,
            span: 27274..27276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 990,
            column: 6,
            span: 27281..27282,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 990,
            column: 7,
            span: 27282..27283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 990,
            column: 8,
            span: 27283..27284,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 990,
            column: 9,
            span: 27284..27285,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 990,
            column: 11,
            span: 27286..27287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 990,
            column: 13,
            span: 27288..27289,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 990,
            column: 14,
            span: 27289..27290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 990,
            column: 25,
            span: 27290..27301,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 990,
            column: 26,
            span: 27301..27302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 990,
            column: 27,
            span: 27302..27303,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 990,
            column: 28,
            span: 27303..27304,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 991,
            column: 0,
            span: 27334..27337,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 992,
            column: 6,
            span: 27340..27343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 992,
            column: 8,
            span: 27344..27345,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 992,
            column: 9,
            span: 27345..27346,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 992,
            column: 10,
            span: 27345..27347,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 992,
            column: 11,
            span: 27347..27348,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 992,
            column: 13,
            span: 27347..27350,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 992,
            column: 14,
            span: 27350..27351,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 992,
            column: 15,
            span: 27350..27352,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 992,
            column: 18,
            span: 27353..27355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 993,
            column: 10,
            span: 27409..27414,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 993,
            column: 11,
            span: 27414..27415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 993,
            column: 23,
            span: 27415..27427,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 993,
            column: 24,
            span: 27427..27428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 993,
            column: 25,
            span: 27428..27429,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 993,
            column: 26,
            span: 27429..27430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 993,
            column: 27,
            span: 27430..27431,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 993,
            column: 28,
            span: 27431..27432,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 993,
            column: 29,
            span: 27432..27433,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 994,
            column: 8,
            span: 27440..27441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 994,
            column: 12,
            span: 27441..27445,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 994,
            column: 14,
            span: 27446..27447,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 994,
            column: 23,
            span: 27448..27456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 994,
            column: 25,
            span: 27457..27458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 994,
            column: 26,
            span: 27458..27459,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 994,
            column: 27,
            span: 27459..27460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 994,
            column: 33,
            span: 27461..27466,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 994,
            column: 34,
            span: 27466..27467,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@expected error in gc\"",
        ),
        position: Position {
            line: 994,
            column: 57,
            span: 27467..27490,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 994,
            column: 58,
            span: 27490..27491,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 994,
            column: 62,
            span: 27492..27495,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 994,
            column: 63,
            span: 27495..27496,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 994,
            column: 64,
            span: 27496..27497,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 995,
            column: 0,
            span: 27500..27503,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 996,
            column: 6,
            span: 27506..27509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 996,
            column: 8,
            span: 27510..27511,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 996,
            column: 9,
            span: 27511..27512,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 996,
            column: 10,
            span: 27511..27513,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 996,
            column: 11,
            span: 27513..27514,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 996,
            column: 13,
            span: 27513..27516,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 996,
            column: 14,
            span: 27516..27517,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 996,
            column: 15,
            span: 27516..27518,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 996,
            column: 18,
            span: 27519..27521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 997,
            column: 10,
            span: 27587..27592,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 997,
            column: 11,
            span: 27592..27593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 997,
            column: 23,
            span: 27593..27605,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 997,
            column: 24,
            span: 27605..27606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 997,
            column: 25,
            span: 27606..27607,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 997,
            column: 26,
            span: 27607..27608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 997,
            column: 27,
            span: 27608..27609,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 997,
            column: 28,
            span: 27609..27610,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 997,
            column: 29,
            span: 27610..27611,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 997,
            column: 31,
            span: 27612..27613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 997,
            column: 35,
            span: 27613..27617,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 997,
            column: 37,
            span: 27618..27619,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 997,
            column: 46,
            span: 27620..27628,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 997,
            column: 48,
            span: 27629..27630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 997,
            column: 49,
            span: 27630..27631,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 997,
            column: 50,
            span: 27631..27632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 997,
            column: 55,
            span: 27633..27637,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 997,
            column: 56,
            span: 27637..27638,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A=A+1\"",
        ),
        position: Position {
            line: 997,
            column: 63,
            span: 27638..27645,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 997,
            column: 64,
            span: 27645..27646,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 997,
            column: 65,
            span: 27646..27647,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 997,
            column: 66,
            span: 27647..27648,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 997,
            column: 70,
            span: 27649..27652,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 997,
            column: 71,
            span: 27652..27653,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 997,
            column: 72,
            span: 27653..27654,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 998,
            column: 0,
            span: 27657..27660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 999,
            column: 4,
            span: 27663..27664,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 999,
            column: 6,
            span: 27665..27666,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 999,
            column: 0,
            span: 27667..27670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 1000,
            column: 5,
            span: 27673..27675,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1000,
            column: 6,
            span: 27675..27676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 1000,
            column: 7,
            span: 27676..27677,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1000,
            column: 9,
            span: 27678..27679,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1000,
            column: 0,
            span: 27679..27681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1001,
            column: 17,
            span: 27684..27698,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1001,
            column: 18,
            span: 27698..27699,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1001,
            column: 19,
            span: 27699..27700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1002,
            column: 9,
            span: 27703..27709,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1002,
            column: 10,
            span: 27709..27710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 1002,
            column: 11,
            span: 27710..27711,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1002,
            column: 14,
            span: 27712..27714,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1002,
            column: 17,
            span: 27714..27717,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1002,
            column: 18,
            span: 27717..27718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1003,
            column: 17,
            span: 27754..27768,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1003,
            column: 18,
            span: 27768..27769,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        position: Position {
            line: 1003,
            column: 27,
            span: 27769..27778,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1003,
            column: 28,
            span: 27778..27779,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "warn",
        ),
        position: Position {
            line: 1004,
            column: 7,
            span: 27782..27786,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1004,
            column: 8,
            span: 27786..27787,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@on\"",
        ),
        position: Position {
            line: 1004,
            column: 13,
            span: 27787..27792,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1004,
            column: 14,
            span: 27792..27793,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1005,
            column: 0,
            span: 27794..27797,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1008,
            column: 0,
            span: 27898..27900,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1009,
            column: 8,
            span: 27903..27908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1009,
            column: 10,
            span: 27909..27910,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1009,
            column: 12,
            span: 27911..27912,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1009,
            column: 14,
            span: 27913..27914,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1009,
            column: 15,
            span: 27914..27915,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1009,
            column: 16,
            span: 27915..27916,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1009,
            column: 22,
            span: 27917..27922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1009,
            column: 26,
            span: 27923..27926,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1009,
            column: 28,
            span: 27927..27928,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1009,
            column: 0,
            span: 27928..27931,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 1010,
            column: 6,
            span: 27934..27937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1010,
            column: 8,
            span: 27938..27939,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1010,
            column: 9,
            span: 27939..27940,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1010,
            column: 10,
            span: 27939..27941,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1010,
            column: 11,
            span: 27941..27942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1010,
            column: 14,
            span: 27942..27945,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1010,
            column: 17,
            span: 27946..27948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1010,
            column: 19,
            span: 27949..27950,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1010,
            column: 20,
            span: 27950..27951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1010,
            column: 21,
            span: 27951..27952,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1010,
            column: 22,
            span: 27952..27953,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1010,
            column: 24,
            span: 27954..27955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1010,
            column: 26,
            span: 27956..27957,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1010,
            column: 27,
            span: 27957..27958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 1010,
            column: 39,
            span: 27958..27970,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1010,
            column: 40,
            span: 27970..27971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1010,
            column: 41,
            span: 27971..27972,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1010,
            column: 42,
            span: 27972..27973,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1010,
            column: 0,
            span: 27974..27977,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 1011,
            column: 6,
            span: 27980..27983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1011,
            column: 8,
            span: 27984..27985,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1011,
            column: 9,
            span: 27985..27986,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1011,
            column: 10,
            span: 27985..27987,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1011,
            column: 11,
            span: 27987..27988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1011,
            column: 14,
            span: 27988..27991,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1011,
            column: 17,
            span: 27992..27994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1011,
            column: 24,
            span: 27995..28001,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1011,
            column: 25,
            span: 28001..28002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1011,
            column: 26,
            span: 28002..28003,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1011,
            column: 27,
            span: 28003..28004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 1011,
            column: 35,
            span: 28004..28012,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1011,
            column: 36,
            span: 28012..28013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1011,
            column: 37,
            span: 28013..28014,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1011,
            column: 38,
            span: 28014..28015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1011,
            column: 39,
            span: 28015..28016,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1011,
            column: 40,
            span: 28016..28017,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1011,
            column: 41,
            span: 28017..28018,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1011,
            column: 44,
            span: 28019..28021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1011,
            column: 46,
            span: 28022..28023,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1011,
            column: 47,
            span: 28023..28024,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1011,
            column: 0,
            span: 28025..28028,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 1012,
            column: 6,
            span: 28031..28034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1012,
            column: 8,
            span: 28035..28036,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1012,
            column: 9,
            span: 28036..28037,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1012,
            column: 10,
            span: 28036..28038,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1012,
            column: 11,
            span: 28038..28039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1012,
            column: 14,
            span: 28039..28042,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1012,
            column: 17,
            span: 28043..28045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1012,
            column: 24,
            span: 28046..28052,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1012,
            column: 25,
            span: 28052..28053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1012,
            column: 26,
            span: 28053..28054,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1012,
            column: 27,
            span: 28054..28055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 1012,
            column: 39,
            span: 28055..28067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1012,
            column: 40,
            span: 28067..28068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1012,
            column: 41,
            span: 28068..28069,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1012,
            column: 42,
            span: 28069..28070,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1012,
            column: 45,
            span: 28071..28073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1012,
            column: 47,
            span: 28074..28075,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1012,
            column: 48,
            span: 28075..28076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1012,
            column: 49,
            span: 28076..28077,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1012,
            column: 50,
            span: 28077..28078,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1012,
            column: 51,
            span: 28078..28079,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1012,
            column: 0,
            span: 28080..28083,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 1013,
            column: 6,
            span: 28086..28089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1013,
            column: 8,
            span: 28090..28091,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1013,
            column: 9,
            span: 28091..28092,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1013,
            column: 10,
            span: 28091..28093,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1013,
            column: 11,
            span: 28093..28094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1013,
            column: 14,
            span: 28094..28097,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1013,
            column: 17,
            span: 28098..28100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1013,
            column: 19,
            span: 28101..28102,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1013,
            column: 20,
            span: 28102..28103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1013,
            column: 21,
            span: 28103..28104,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1013,
            column: 22,
            span: 28104..28105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1013,
            column: 23,
            span: 28105..28106,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1013,
            column: 24,
            span: 28106..28107,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1013,
            column: 25,
            span: 28107..28108,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1013,
            column: 27,
            span: 28109..28110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1013,
            column: 29,
            span: 28111..28112,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1013,
            column: 0,
            span: 28113..28116,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 1014,
            column: 6,
            span: 28119..28122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1014,
            column: 8,
            span: 28123..28124,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1014,
            column: 9,
            span: 28124..28125,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1014,
            column: 10,
            span: 28124..28126,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1014,
            column: 11,
            span: 28126..28127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1014,
            column: 14,
            span: 28127..28130,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1014,
            column: 17,
            span: 28131..28133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1014,
            column: 19,
            span: 28134..28135,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1014,
            column: 20,
            span: 28135..28136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1014,
            column: 21,
            span: 28136..28137,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1014,
            column: 22,
            span: 28137..28138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 1014,
            column: 34,
            span: 28138..28150,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1014,
            column: 35,
            span: 28150..28151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1014,
            column: 36,
            span: 28151..28152,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1014,
            column: 37,
            span: 28152..28153,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1014,
            column: 38,
            span: 28153..28154,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1014,
            column: 40,
            span: 28155..28156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1014,
            column: 42,
            span: 28157..28158,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1014,
            column: 0,
            span: 28159..28162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1015,
            column: 9,
            span: 28165..28171,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1015,
            column: 10,
            span: 28171..28172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 1015,
            column: 14,
            span: 28172..28176,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1015,
            column: 15,
            span: 28176..28177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 1015,
            column: 23,
            span: 28177..28185,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1015,
            column: 24,
            span: 28185..28186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1015,
            column: 25,
            span: 28186..28187,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1015,
            column: 26,
            span: 28187..28188,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1015,
            column: 27,
            span: 28187..28189,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1015,
            column: 28,
            span: 28189..28190,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1015,
            column: 29,
            span: 28190..28191,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1015,
            column: 30,
            span: 28191..28192,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1015,
            column: 33,
            span: 28193..28195,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 1015,
            column: 42,
            span: 28196..28204,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1015,
            column: 43,
            span: 28204..28205,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1016,
            column: 0,
            span: 28206..28209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1021,
            column: 2,
            span: 28313..28314,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1021,
            column: 3,
            span: 28314..28315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 1021,
            column: 13,
            span: 28315..28325,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1021,
            column: 14,
            span: 28325..28326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1021,
            column: 15,
            span: 28326..28327,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1021,
            column: 16,
            span: 28327..28328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 1021,
            column: 24,
            span: 28328..28336,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1021,
            column: 25,
            span: 28336..28337,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1021,
            column: 26,
            span: 28337..28338,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1021,
            column: 27,
            span: 28338..28339,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1021,
            column: 28,
            span: 28339..28340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1022,
            column: 3,
            span: 28341..28343,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1022,
            column: 5,
            span: 28344..28345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1022,
            column: 7,
            span: 28346..28347,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1022,
            column: 8,
            span: 28347..28348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 1022,
            column: 16,
            span: 28348..28356,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1022,
            column: 17,
            span: 28356..28357,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1022,
            column: 18,
            span: 28357..28358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1023,
            column: 7,
            span: 28359..28365,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1023,
            column: 8,
            span: 28365..28366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1023,
            column: 10,
            span: 28366..28368,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1023,
            column: 11,
            span: 28368..28369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1025,
            column: 7,
            span: 28371..28377,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1025,
            column: 8,
            span: 28377..28378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1025,
            column: 9,
            span: 28378..28379,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1025,
            column: 10,
            span: 28379..28380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 1025,
            column: 18,
            span: 28380..28388,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1025,
            column: 19,
            span: 28388..28389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1025,
            column: 21,
            span: 28389..28391,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1025,
            column: 22,
            span: 28391..28392,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X='a'; return 'a'\"",
        ),
        position: Position {
            line: 1025,
            column: 42,
            span: 28393..28412,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1025,
            column: 43,
            span: 28412..28413,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1025,
            column: 46,
            span: 28414..28416,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 1025,
            column: 50,
            span: 28417..28420,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1025,
            column: 51,
            span: 28420..28421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1028,
            column: 7,
            span: 28424..28430,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1028,
            column: 8,
            span: 28430..28431,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 1028,
            column: 9,
            span: 28431..28432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 1028,
            column: 13,
            span: 28432..28436,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1028,
            column: 14,
            span: 28436..28437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1028,
            column: 15,
            span: 28437..28438,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1028,
            column: 16,
            span: 28438..28439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 1028,
            column: 24,
            span: 28439..28447,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1028,
            column: 25,
            span: 28447..28448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1028,
            column: 27,
            span: 28448..28450,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1028,
            column: 28,
            span: 28450..28451,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function f () return 'alo', 3 end; f()\"",
        ),
        position: Position {
            line: 1028,
            column: 69,
            span: 28452..28492,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1028,
            column: 70,
            span: 28492..28493,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1028,
            column: 71,
            span: 28493..28494,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1028,
            column: 74,
            span: 28495..28497,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1028,
            column: 76,
            span: 28497..28499,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1028,
            column: 77,
            span: 28499..28500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1030,
            column: 2,
            span: 28502..28503,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1030,
            column: 3,
            span: 28503..28504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1030,
            column: 5,
            span: 28505..28506,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1030,
            column: 7,
            span: 28507..28508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1030,
            column: 9,
            span: 28509..28510,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1030,
            column: 10,
            span: 28510..28511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 1030,
            column: 18,
            span: 28511..28519,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1030,
            column: 19,
            span: 28519..28520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1030,
            column: 21,
            span: 28520..28522,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1030,
            column: 22,
            span: 28522..28523,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return f()\"",
        ),
        position: Position {
            line: 1030,
            column: 35,
            span: 28524..28536,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1030,
            column: 36,
            span: 28536..28537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1031,
            column: 7,
            span: 28538..28544,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1031,
            column: 8,
            span: 28544..28545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1031,
            column: 9,
            span: 28545..28546,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1031,
            column: 12,
            span: 28547..28549,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 1031,
            column: 18,
            span: 28550..28555,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1031,
            column: 22,
            span: 28556..28559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1031,
            column: 24,
            span: 28560..28561,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1031,
            column: 27,
            span: 28562..28564,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'3'",
        ),
        position: Position {
            line: 1031,
            column: 31,
            span: 28565..28568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1031,
            column: 32,
            span: 28568..28569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1033,
            column: 2,
            span: 28571..28572,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1033,
            column: 3,
            span: 28572..28573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 1033,
            column: 11,
            span: 28573..28581,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1033,
            column: 12,
            span: 28581..28582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1033,
            column: 14,
            span: 28582..28584,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1033,
            column: 15,
            span: 28584..28585,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_ERRORMESSAGE = nil\"",
        ),
        position: Position {
            line: 1033,
            column: 37,
            span: 28586..28607,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1033,
            column: 38,
            span: 28607..28608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1035,
            column: 2,
            span: 28640..28641,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1035,
            column: 3,
            span: 28641..28642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 1035,
            column: 5,
            span: 28643..28644,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1035,
            column: 6,
            span: 28644..28645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1035,
            column: 8,
            span: 28646..28647,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1035,
            column: 10,
            span: 28648..28649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1035,
            column: 12,
            span: 28650..28651,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1035,
            column: 13,
            span: 28651..28652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 1035,
            column: 21,
            span: 28652..28660,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1035,
            column: 22,
            span: 28660..28661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1035,
            column: 24,
            span: 28661..28663,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1035,
            column: 25,
            span: 28663..28664,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return sin(1)\"",
        ),
        position: Position {
            line: 1035,
            column: 41,
            span: 28665..28680,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1035,
            column: 42,
            span: 28680..28681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1036,
            column: 7,
            span: 28682..28688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1036,
            column: 8,
            span: 28688..28689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1036,
            column: 9,
            span: 28689..28690,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1036,
            column: 12,
            span: 28691..28693,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1036,
            column: 16,
            span: 28694..28697,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1036,
            column: 20,
            span: 28698..28701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1036,
            column: 22,
            span: 28702..28703,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1036,
            column: 25,
            span: 28704..28706,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1036,
            column: 27,
            span: 28706..28708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1036,
            column: 28,
            span: 28708..28709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1039,
            column: 2,
            span: 28759..28760,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1039,
            column: 3,
            span: 28760..28761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1039,
            column: 5,
            span: 28762..28763,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1039,
            column: 6,
            span: 28763..28764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 1039,
            column: 8,
            span: 28765..28766,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1039,
            column: 10,
            span: 28767..28768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1039,
            column: 12,
            span: 28769..28770,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1039,
            column: 13,
            span: 28770..28771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 1039,
            column: 21,
            span: 28771..28779,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1039,
            column: 22,
            span: 28779..28780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1039,
            column: 24,
            span: 28780..28782,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1039,
            column: 25,
            span: 28782..28783,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return a+\"",
        ),
        position: Position {
            line: 1039,
            column: 37,
            span: 28784..28795,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1039,
            column: 38,
            span: 28795..28796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1040,
            column: 7,
            span: 28797..28803,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1040,
            column: 8,
            span: 28803..28804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1040,
            column: 9,
            span: 28804..28805,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1040,
            column: 12,
            span: 28806..28808,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1040,
            column: 16,
            span: 28809..28812,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1040,
            column: 20,
            span: 28813..28816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 1040,
            column: 22,
            span: 28817..28818,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1040,
            column: 25,
            span: 28819..28821,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1040,
            column: 27,
            span: 28821..28823,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1040,
            column: 31,
            span: 28824..28827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 1040,
            column: 36,
            span: 28828..28832,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1040,
            column: 37,
            span: 28832..28833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1040,
            column: 38,
            span: 28833..28834,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1040,
            column: 39,
            span: 28834..28835,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1040,
            column: 42,
            span: 28836..28838,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 1040,
            column: 51,
            span: 28839..28847,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1040,
            column: 52,
            span: 28847..28848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1042,
            column: 2,
            span: 28873..28874,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1042,
            column: 3,
            span: 28874..28875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        position: Position {
            line: 1042,
            column: 10,
            span: 28875..28882,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1042,
            column: 11,
            span: 28882..28883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1042,
            column: 13,
            span: 28883..28885,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1042,
            column: 14,
            span: 28885..28886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1043,
            column: 2,
            span: 28887..28888,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1043,
            column: 3,
            span: 28888..28889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1043,
            column: 5,
            span: 28890..28891,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1043,
            column: 6,
            span: 28891..28892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 1043,
            column: 8,
            span: 28893..28894,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1043,
            column: 10,
            span: 28895..28896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1043,
            column: 12,
            span: 28897..28898,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1043,
            column: 13,
            span: 28898..28899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 1043,
            column: 21,
            span: 28899..28907,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1043,
            column: 22,
            span: 28907..28908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1043,
            column: 24,
            span: 28908..28910,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1043,
            column: 25,
            span: 28910..28911,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  string = require'string'\n  a = require'_G'; assert(a == _G and require(\"_G\") == a)\n  io = require'io'; assert(type(io.read) == \"function\")\n  assert(require(\"io\") == io)\n  a = require'table'; assert(type(a.insert) == \"function\")\n  a = require'debug'; assert(type(a.getlocal) == \"function\")\n  a = require'math'; assert(type(a.sin) == \"function\")\n  return string.sub('okinama', 1, 2)\n]]",
        ),
        position: Position {
            line: 1052,
            column: 3,
            span: 28912..29300,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1052,
            column: 4,
            span: 29300..29301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1053,
            column: 7,
            span: 29302..29308,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1053,
            column: 8,
            span: 29308..29309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1053,
            column: 9,
            span: 29309..29310,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1053,
            column: 12,
            span: 29311..29313,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        position: Position {
            line: 1053,
            column: 17,
            span: 29314..29318,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1053,
            column: 18,
            span: 29318..29319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1055,
            column: 2,
            span: 29321..29322,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1055,
            column: 3,
            span: 29322..29323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 1055,
            column: 13,
            span: 29323..29333,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1055,
            column: 14,
            span: 29333..29334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1055,
            column: 16,
            span: 29334..29336,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1055,
            column: 17,
            span: 29336..29337,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1055,
            column: 18,
            span: 29337..29338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1058,
            column: 3,
            span: 29341..29343,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1058,
            column: 5,
            span: 29344..29345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1058,
            column: 7,
            span: 29346..29347,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1058,
            column: 8,
            span: 29347..29348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 1058,
            column: 16,
            span: 29348..29356,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1058,
            column: 17,
            span: 29356..29357,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1058,
            column: 18,
            span: 29357..29358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1059,
            column: 2,
            span: 29359..29360,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1059,
            column: 3,
            span: 29360..29361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        position: Position {
            line: 1059,
            column: 10,
            span: 29361..29368,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1059,
            column: 11,
            span: 29368..29369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1059,
            column: 13,
            span: 29369..29371,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1059,
            column: 14,
            span: 29371..29372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1060,
            column: 2,
            span: 29373..29374,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1060,
            column: 3,
            span: 29374..29375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 1060,
            column: 11,
            span: 29375..29383,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1060,
            column: 12,
            span: 29383..29384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1060,
            column: 14,
            span: 29384..29386,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1060,
            column: 15,
            span: 29386..29387,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {}\"",
        ),
        position: Position {
            line: 1060,
            column: 24,
            span: 29388..29396,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1060,
            column: 25,
            span: 29396..29397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1061,
            column: 2,
            span: 29398..29399,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1061,
            column: 3,
            span: 29399..29400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1061,
            column: 8,
            span: 29400..29405,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1061,
            column: 9,
            span: 29405..29406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1061,
            column: 11,
            span: 29406..29408,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1061,
            column: 12,
            span: 29408..29409,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[getglobal \"a\"; pushstring \"x\"; pushint 1;\n             settable -3]]",
        ),
        position: Position {
            line: 1062,
            column: 27,
            span: 29410..29480,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1062,
            column: 28,
            span: 29480..29481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1063,
            column: 7,
            span: 29482..29488,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1063,
            column: 8,
            span: 29488..29489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1063,
            column: 9,
            span: 29489..29490,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1063,
            column: 10,
            span: 29490..29491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 1063,
            column: 18,
            span: 29491..29499,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1063,
            column: 19,
            span: 29499..29500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1063,
            column: 21,
            span: 29500..29502,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1063,
            column: 22,
            span: 29502..29503,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return a.x\"",
        ),
        position: Position {
            line: 1063,
            column: 35,
            span: 29504..29516,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1063,
            column: 36,
            span: 29516..29517,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1063,
            column: 39,
            span: 29518..29520,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        position: Position {
            line: 1063,
            column: 43,
            span: 29521..29524,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1063,
            column: 44,
            span: 29524..29525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1065,
            column: 2,
            span: 29527..29528,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1065,
            column: 3,
            span: 29528..29529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 1065,
            column: 13,
            span: 29529..29539,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1065,
            column: 14,
            span: 29539..29540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1065,
            column: 16,
            span: 29540..29542,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1065,
            column: 17,
            span: 29542..29543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 1067,
            column: 3,
            span: 29545..29547,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1067,
            column: 5,
            span: 29548..29549,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1067,
            column: 0,
            span: 29550..29553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1069,
            column: 6,
            span: 29555..29560,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1069,
            column: 7,
            span: 29560..29561,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 1069,
            column: 10,
            span: 29561..29564,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1069,
            column: 11,
            span: 29564..29565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1073,
            column: 6,
            span: 29748..29753,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing to-be-closed variables\"",
        ),
        position: Position {
            line: 1073,
            column: 38,
            span: 29753..29785,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1075,
            column: 0,
            span: 29787..29789,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1076,
            column: 8,
            span: 29792..29797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "openresource",
        ),
        position: Position {
            line: 1076,
            column: 21,
            span: 29798..29810,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1076,
            column: 23,
            span: 29811..29812,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1076,
            column: 25,
            span: 29813..29814,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1076,
            column: 26,
            span: 29814..29815,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1078,
            column: 8,
            span: 29819..29824,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1078,
            column: 17,
            span: 29825..29833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newresource",
        ),
        position: Position {
            line: 1078,
            column: 29,
            span: 29834..29845,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1078,
            column: 31,
            span: 29846..29847,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1078,
            column: 32,
            span: 29847..29848,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1079,
            column: 10,
            span: 29853..29858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1079,
            column: 12,
            span: 29859..29860,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1079,
            column: 14,
            span: 29861..29862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 1079,
            column: 27,
            span: 29863..29875,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1079,
            column: 28,
            span: 29875..29876,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1079,
            column: 29,
            span: 29876..29877,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1079,
            column: 31,
            span: 29876..29879,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1079,
            column: 32,
            span: 29879..29880,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1079,
            column: 33,
            span: 29880..29881,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1079,
            column: 35,
            span: 29882..29883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__close",
        ),
        position: Position {
            line: 1079,
            column: 42,
            span: 29883..29890,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1079,
            column: 44,
            span: 29891..29892,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1079,
            column: 53,
            span: 29893..29901,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1079,
            column: 54,
            span: 29901..29902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 1079,
            column: 55,
            span: 29902..29903,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1079,
            column: 56,
            span: 29903..29904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1080,
            column: 13,
            span: 29911..29917,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1080,
            column: 14,
            span: 29917..29918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "openresource",
        ),
        position: Position {
            line: 1080,
            column: 26,
            span: 29918..29930,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1080,
            column: 27,
            span: 29930..29931,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 1080,
            column: 28,
            span: 29931..29932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "openresource",
        ),
        position: Position {
            line: 1080,
            column: 40,
            span: 29932..29944,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1080,
            column: 41,
            span: 29944..29945,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1080,
            column: 44,
            span: 29946..29948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 1080,
            column: 46,
            span: 29949..29950,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1080,
            column: 47,
            span: 29950..29951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "openresource",
        ),
        position: Position {
            line: 1081,
            column: 19,
            span: 29958..29970,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1081,
            column: 20,
            span: 29970..29971,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 1081,
            column: 21,
            span: 29971..29972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "openresource",
        ),
        position: Position {
            line: 1081,
            column: 33,
            span: 29972..29984,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1081,
            column: 34,
            span: 29984..29985,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1081,
            column: 36,
            span: 29986..29987,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1081,
            column: 0,
            span: 29988..29991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 1082,
            column: 8,
            span: 29998..29999,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1082,
            column: 9,
            span: 29999..30000,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1082,
            column: 10,
            span: 29999..30001,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1082,
            column: 11,
            span: 30001..30002,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1082,
            column: 13,
            span: 30003..30004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 1082,
            column: 15,
            span: 30005..30006,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1082,
            column: 16,
            span: 30006..30007,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1082,
            column: 17,
            span: 30006..30008,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1082,
            column: 18,
            span: 30008..30009,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1082,
            column: 20,
            span: 30010..30011,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1082,
            column: 0,
            span: 30011..30013,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1083,
            column: 8,
            span: 30018..30021,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1083,
            column: 9,
            span: 30021..30022,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1083,
            column: 10,
            span: 30022..30023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "openresource",
        ),
        position: Position {
            line: 1084,
            column: 17,
            span: 30028..30040,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1084,
            column: 18,
            span: 30040..30041,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 1084,
            column: 19,
            span: 30041..30042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "openresource",
        ),
        position: Position {
            line: 1084,
            column: 31,
            span: 30042..30054,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1084,
            column: 33,
            span: 30055..30056,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1084,
            column: 35,
            span: 30056..30058,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1084,
            column: 36,
            span: 30058..30059,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1084,
            column: 38,
            span: 30060..30061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1084,
            column: 0,
            span: 30062..30063,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1085,
            column: 11,
            span: 30068..30074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1085,
            column: 0,
            span: 30075..30076,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1086,
            column: 0,
            span: 30079..30082,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1088,
            column: 8,
            span: 30086..30091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1088,
            column: 10,
            span: 30092..30093,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1088,
            column: 11,
            span: 30093..30094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1088,
            column: 13,
            span: 30095..30096,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1088,
            column: 15,
            span: 30097..30098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1088,
            column: 17,
            span: 30099..30100,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1088,
            column: 18,
            span: 30100..30101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1088,
            column: 23,
            span: 30101..30106,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1088,
            column: 24,
            span: 30106..30107,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    call 0 1   # create resource\n    pushnil\n    toclose -2  # mark call result to be closed\n    toclose -1  # mark nil to be closed (will be ignored)\n    return 2\n  ]]",
        ),
        position: Position {
            line: 1094,
            column: 5,
            span: 30107..30278,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1094,
            column: 6,
            span: 30278..30279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newresource",
        ),
        position: Position {
            line: 1094,
            column: 18,
            span: 30280..30291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1094,
            column: 19,
            span: 30291..30292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1095,
            column: 9,
            span: 30295..30301,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1095,
            column: 10,
            span: 30301..30302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1095,
            column: 11,
            span: 30302..30303,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1095,
            column: 12,
            span: 30303..30304,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1095,
            column: 13,
            span: 30303..30305,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1095,
            column: 14,
            span: 30305..30306,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1095,
            column: 17,
            span: 30307..30309,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1095,
            column: 20,
            span: 30309..30312,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1095,
            column: 24,
            span: 30313..30316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1095,
            column: 26,
            span: 30317..30318,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1095,
            column: 29,
            span: 30319..30321,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1095,
            column: 33,
            span: 30322..30325,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1095,
            column: 34,
            span: 30325..30326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1096,
            column: 9,
            span: 30329..30335,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1096,
            column: 10,
            span: 30335..30336,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 1096,
            column: 11,
            span: 30336..30337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "openresource",
        ),
        position: Position {
            line: 1096,
            column: 23,
            span: 30337..30349,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1096,
            column: 26,
            span: 30350..30352,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1096,
            column: 28,
            span: 30352..30354,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1096,
            column: 29,
            span: 30354..30355,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1099,
            column: 8,
            span: 30442..30447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1099,
            column: 10,
            span: 30448..30449,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1099,
            column: 12,
            span: 30450..30451,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1099,
            column: 14,
            span: 30452..30453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1099,
            column: 15,
            span: 30453..30454,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1099,
            column: 16,
            span: 30454..30455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1099,
            column: 21,
            span: 30455..30460,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1099,
            column: 22,
            span: 30460..30461,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    call 0 1   # create resource\n    toclose 2 # mark it to be closed\n    return 2\n  ]]",
        ),
        position: Position {
            line: 1103,
            column: 5,
            span: 30461..30551,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1103,
            column: 6,
            span: 30551..30552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newresource",
        ),
        position: Position {
            line: 1103,
            column: 18,
            span: 30553..30564,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1103,
            column: 19,
            span: 30564..30565,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1103,
            column: 20,
            span: 30565..30566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1104,
            column: 9,
            span: 30569..30575,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1104,
            column: 10,
            span: 30575..30576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 1104,
            column: 14,
            span: 30576..30580,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1104,
            column: 15,
            span: 30580..30581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1104,
            column: 16,
            span: 30581..30582,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1104,
            column: 17,
            span: 30582..30583,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1104,
            column: 18,
            span: 30582..30584,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1104,
            column: 19,
            span: 30584..30585,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1104,
            column: 20,
            span: 30585..30586,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1104,
            column: 23,
            span: 30587..30589,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 1104,
            column: 32,
            span: 30590..30598,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1104,
            column: 36,
            span: 30599..30602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1104,
            column: 38,
            span: 30603..30604,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1104,
            column: 39,
            span: 30604..30605,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1104,
            column: 40,
            span: 30604..30606,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1104,
            column: 41,
            span: 30606..30607,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1104,
            column: 42,
            span: 30607..30608,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1104,
            column: 43,
            span: 30607..30609,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1104,
            column: 44,
            span: 30609..30610,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1104,
            column: 47,
            span: 30611..30613,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1104,
            column: 50,
            span: 30613..30616,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1104,
            column: 51,
            span: 30616..30617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1105,
            column: 9,
            span: 30620..30626,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1105,
            column: 10,
            span: 30626..30627,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 1105,
            column: 11,
            span: 30627..30628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "openresource",
        ),
        position: Position {
            line: 1105,
            column: 23,
            span: 30628..30640,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1105,
            column: 26,
            span: 30641..30643,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1105,
            column: 28,
            span: 30643..30645,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1105,
            column: 29,
            span: 30645..30646,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1108,
            column: 8,
            span: 30689..30694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1108,
            column: 10,
            span: 30695..30696,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1108,
            column: 11,
            span: 30696..30697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1108,
            column: 13,
            span: 30698..30699,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1108,
            column: 15,
            span: 30700..30701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 1108,
            column: 21,
            span: 30702..30707,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1108,
            column: 22,
            span: 30707..30708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1108,
            column: 23,
            span: 30708..30709,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1108,
            column: 24,
            span: 30709..30710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 1108,
            column: 33,
            span: 30710..30719,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    call 0 1   # create resource\n    toclose -1 # mark it to be closed\n    error       # resource is the error object\n  ]]",
        ),
        position: Position {
            line: 1112,
            column: 5,
            span: 30719..30844,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1112,
            column: 6,
            span: 30844..30845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newresource",
        ),
        position: Position {
            line: 1112,
            column: 18,
            span: 30846..30857,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1112,
            column: 19,
            span: 30857..30858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1113,
            column: 9,
            span: 30861..30867,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1113,
            column: 10,
            span: 30867..30868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1113,
            column: 11,
            span: 30868..30869,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1113,
            column: 14,
            span: 30870..30872,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 1113,
            column: 20,
            span: 30873..30878,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1113,
            column: 24,
            span: 30879..30882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1113,
            column: 26,
            span: 30883..30884,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1113,
            column: 27,
            span: 30884..30885,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1113,
            column: 28,
            span: 30884..30886,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1113,
            column: 29,
            span: 30886..30887,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1113,
            column: 32,
            span: 30888..30890,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1113,
            column: 35,
            span: 30890..30893,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1113,
            column: 36,
            span: 30893..30894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1114,
            column: 9,
            span: 30897..30903,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1114,
            column: 10,
            span: 30903..30904,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 1114,
            column: 11,
            span: 30904..30905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "openresource",
        ),
        position: Position {
            line: 1114,
            column: 23,
            span: 30905..30917,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1114,
            column: 26,
            span: 30918..30920,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1114,
            column: 28,
            span: 30920..30922,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1114,
            column: 29,
            span: 30922..30923,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1117,
            column: 8,
            span: 30968..30973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1117,
            column: 10,
            span: 30974..30975,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1117,
            column: 11,
            span: 30975..30976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1117,
            column: 13,
            span: 30977..30978,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1117,
            column: 15,
            span: 30979..30980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 1117,
            column: 21,
            span: 30981..30986,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1117,
            column: 22,
            span: 30986..30987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1117,
            column: 23,
            span: 30987..30988,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1117,
            column: 24,
            span: 30988..30989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 1117,
            column: 33,
            span: 30989..30998,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    newtable   # create non-closable object\n    toclose -1 # mark it to be closed (should raise an error)\n    abort  # will not be executed\n  ]]",
        ),
        position: Position {
            line: 1121,
            column: 5,
            span: 30998..31145,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1121,
            column: 6,
            span: 31145..31146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1122,
            column: 9,
            span: 31149..31155,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1122,
            column: 10,
            span: 31155..31156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1122,
            column: 11,
            span: 31156..31157,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1122,
            column: 14,
            span: 31158..31160,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 1122,
            column: 20,
            span: 31161..31166,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1122,
            column: 0,
            span: 31167..31170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1123,
            column: 11,
            span: 31175..31181,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1123,
            column: 12,
            span: 31181..31182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 1123,
            column: 16,
            span: 31182..31186,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1123,
            column: 17,
            span: 31186..31187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1123,
            column: 18,
            span: 31187..31188,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1123,
            column: 19,
            span: 31188..31189,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"non%-closable value\"",
        ),
        position: Position {
            line: 1123,
            column: 41,
            span: 31190..31211,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1123,
            column: 42,
            span: 31211..31212,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1123,
            column: 43,
            span: 31212..31213,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1125,
            column: 8,
            span: 31217..31222,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1125,
            column: 17,
            span: 31223..31231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 1125,
            column: 23,
            span: 31232..31237,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1125,
            column: 25,
            span: 31238..31239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 1125,
            column: 26,
            span: 31239..31240,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1125,
            column: 27,
            span: 31240..31241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1126,
            column: 11,
            span: 31246..31252,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1126,
            column: 12,
            span: 31252..31253,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 1126,
            column: 13,
            span: 31253..31254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "openresource",
        ),
        position: Position {
            line: 1126,
            column: 25,
            span: 31254..31266,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1126,
            column: 28,
            span: 31267..31269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 1126,
            column: 30,
            span: 31270..31271,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1126,
            column: 31,
            span: 31271..31272,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1127,
            column: 0,
            span: 31275..31278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 1130,
            column: 7,
            span: 31322..31326,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1130,
            column: 8,
            span: 31326..31327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xxx",
        ),
        position: Position {
            line: 1130,
            column: 11,
            span: 31327..31330,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1130,
            column: 13,
            span: 31331..31332,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 1130,
            column: 0,
            span: 31333..31337,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1131,
            column: 8,
            span: 31340..31345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1131,
            column: 10,
            span: 31346..31347,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1131,
            column: 12,
            span: 31348..31349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1131,
            column: 14,
            span: 31350..31351,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1131,
            column: 15,
            span: 31351..31352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1131,
            column: 20,
            span: 31352..31357,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1131,
            column: 21,
            span: 31357..31358,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    pushvalue 2  # stack: S, NR, CH, NR\n    call 0 1   # create resource; stack: S, NR, CH, R\n    toclose -1 # mark it to be closed\n    pushvalue 2  #  stack: S, NR, CH, R, NR\n    call 0 1   # create another resource; stack: S, NR, CH, R, R\n    toclose -1 # mark it to be closed\n    pushvalue 3  # stack: S, NR, CH, R, R, CH\n    pushint 2   # there should be two open resources\n    call 1 0  #  stack: S, NR, CH, R, R\n    closeslot -1   # close second resource\n    pushvalue 3  # stack: S, NR, CH, R, R, CH\n    pushint 1   # there should be one open resource\n    call 1 0  # stack: S, NR, CH, R, R\n    closeslot 4\n    setglobal \"xxx\"  # previous op. erased the slot\n    pop 1       # pop other resource from the stack\n    pushint *\n    return 1    # return stack size\n  ]]",
        ),
        position: Position {
            line: 1150,
            column: 5,
            span: 31358..32133,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1150,
            column: 6,
            span: 32133..32134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newresource",
        ),
        position: Position {
            line: 1150,
            column: 18,
            span: 32135..32146,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1150,
            column: 19,
            span: 32146..32147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 1150,
            column: 25,
            span: 32148..32153,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1150,
            column: 26,
            span: 32153..32154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1151,
            column: 9,
            span: 32157..32163,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1151,
            column: 10,
            span: 32163..32164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1151,
            column: 11,
            span: 32164..32165,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1151,
            column: 14,
            span: 32166..32168,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1151,
            column: 16,
            span: 32168..32170,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1151,
            column: 20,
            span: 32171..32174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 1151,
            column: 25,
            span: 32175..32179,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1151,
            column: 26,
            span: 32179..32180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xxx",
        ),
        position: Position {
            line: 1151,
            column: 29,
            span: 32180..32183,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1151,
            column: 32,
            span: 32184..32186,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1151,
            column: 36,
            span: 32187..32190,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1151,
            column: 37,
            span: 32190..32191,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1154,
            column: 8,
            span: 32267..32272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1154,
            column: 10,
            span: 32273..32274,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1154,
            column: 12,
            span: 32275..32276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1154,
            column: 14,
            span: 32277..32278,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1154,
            column: 15,
            span: 32278..32279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1154,
            column: 20,
            span: 32279..32284,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1154,
            column: 21,
            span: 32284..32285,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    pushvalue 2  # stack: S, NR, CH, NR\n    call 0 1   # create resource; stack: S, NR, CH, R\n    toclose -1 # mark it to be closed\n    pushvalue 2  #  stack: S, NR, CH, R, NR\n    call 0 1   # create another resource; stack: S, NR, CH, R, R\n    toclose -1 # mark it to be closed\n    pushvalue 3  # stack: S, NR, CH, R, R, CH\n    pushint 2   # there should be two open resources\n    call 1 0  #  stack: S, NR, CH, R, R\n    pop 1   # pop second resource\n    pushvalue 3  # stack: S, NR, CH, R, CH\n    pushint 1   # there should be one open resource\n    call 1 0  # stack: S, NR, CH, R\n    pop 1       # pop other resource from the stack\n    pushvalue 3  # stack: S, NR, CH, CH\n    pushint 0   # there should be no open resources\n    call 1 0  # stack: S, NR, CH\n    pushint *\n    return 1    # return stack size\n  ]]",
        ),
        position: Position {
            line: 1174,
            column: 5,
            span: 32285..33102,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1174,
            column: 6,
            span: 33102..33103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newresource",
        ),
        position: Position {
            line: 1174,
            column: 18,
            span: 33104..33115,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1174,
            column: 19,
            span: 33115..33116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 1174,
            column: 25,
            span: 33117..33122,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1174,
            column: 26,
            span: 33122..33123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1175,
            column: 9,
            span: 33126..33132,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1175,
            column: 10,
            span: 33132..33133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1175,
            column: 11,
            span: 33133..33134,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1175,
            column: 14,
            span: 33135..33137,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1175,
            column: 16,
            span: 33137..33139,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1175,
            column: 17,
            span: 33139..33140,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1178,
            column: 8,
            span: 33206..33211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1178,
            column: 10,
            span: 33212..33213,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1178,
            column: 11,
            span: 33213..33214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1178,
            column: 13,
            span: 33215..33216,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1178,
            column: 15,
            span: 33217..33218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 1178,
            column: 21,
            span: 33219..33224,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1178,
            column: 22,
            span: 33224..33225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1178,
            column: 23,
            span: 33225..33226,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1178,
            column: 24,
            span: 33226..33227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 1178,
            column: 33,
            span: 33227..33236,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    pushint 32\n    toclose -1\n  ]]",
        ),
        position: Position {
            line: 1181,
            column: 5,
            span: 33236..33273,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1181,
            column: 6,
            span: 33273..33274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1182,
            column: 9,
            span: 33277..33283,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1182,
            column: 10,
            span: 33283..33284,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1182,
            column: 13,
            span: 33284..33287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1182,
            column: 15,
            span: 33288..33289,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1182,
            column: 19,
            span: 33290..33293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1182,
            column: 26,
            span: 33294..33300,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1182,
            column: 27,
            span: 33300..33301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 1182,
            column: 31,
            span: 33301..33305,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1182,
            column: 32,
            span: 33305..33306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1182,
            column: 33,
            span: 33306..33307,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1182,
            column: 34,
            span: 33307..33308,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(C temporary)\"",
        ),
        position: Position {
            line: 1182,
            column: 50,
            span: 33309..33324,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1182,
            column: 51,
            span: 33324..33325,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1182,
            column: 52,
            span: 33325..33326,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1184,
            column: 0,
            span: 33328..33331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1193,
            column: 6,
            span: 33512..33517,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1193,
            column: 7,
            span: 33517..33518,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"memory-allocation errors\"",
        ),
        position: Position {
            line: 1193,
            column: 33,
            span: 33518..33544,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1193,
            column: 34,
            span: 33544..33545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 1195,
            column: 9,
            span: 33547..33555,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1195,
            column: 10,
            span: 33555..33556,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"block too big\"",
        ),
        position: Position {
            line: 1195,
            column: 25,
            span: 33556..33571,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1195,
            column: 26,
            span: 33571..33572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1195,
            column: 28,
            span: 33573..33574,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1195,
            column: 29,
            span: 33574..33575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 1195,
            column: 40,
            span: 33575..33586,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1195,
            column: 41,
            span: 33586..33587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 1195,
            column: 46,
            span: 33588..33592,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1195,
            column: 47,
            span: 33592..33593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        position: Position {
            line: 1195,
            column: 57,
            span: 33593..33603,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1195,
            column: 58,
            span: 33603..33604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1196,
            column: 15,
            span: 33605..33619,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1196,
            column: 16,
            span: 33619..33620,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1196,
            column: 17,
            span: 33620..33621,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1197,
            column: 6,
            span: 33622..33627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1197,
            column: 8,
            span: 33628..33629,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1197,
            column: 10,
            span: 33630..33631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 1197,
            column: 15,
            span: 33632..33636,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a={}; for i=1,100000 do a[i]=i end\"",
        ),
        position: Position {
            line: 1197,
            column: 57,
            span: 33636..33678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1198,
            column: 2,
            span: 33679..33680,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1198,
            column: 3,
            span: 33680..33681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alloccount",
        ),
        position: Position {
            line: 1198,
            column: 13,
            span: 33681..33691,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1198,
            column: 14,
            span: 33691..33692,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1198,
            column: 16,
            span: 33691..33694,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1198,
            column: 17,
            span: 33694..33695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 1199,
            column: 9,
            span: 33696..33704,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1199,
            column: 10,
            span: 33704..33705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "MEMERRMSG",
        ),
        position: Position {
            line: 1199,
            column: 19,
            span: 33705..33714,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1199,
            column: 20,
            span: 33714..33715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1199,
            column: 22,
            span: 33716..33717,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1199,
            column: 23,
            span: 33717..33718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1200,
            column: 2,
            span: 33719..33720,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1200,
            column: 3,
            span: 33720..33721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alloccount",
        ),
        position: Position {
            line: 1200,
            column: 13,
            span: 33721..33731,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1200,
            column: 14,
            span: 33731..33732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1200,
            column: 15,
            span: 33732..33733,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1207,
            column: 9,
            span: 33967..33975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testbytes",
        ),
        position: Position {
            line: 1207,
            column: 19,
            span: 33976..33985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1207,
            column: 21,
            span: 33986..33987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1207,
            column: 22,
            span: 33987..33988,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1207,
            column: 23,
            span: 33988..33989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1207,
            column: 25,
            span: 33990..33991,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1207,
            column: 26,
            span: 33991..33992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1208,
            column: 17,
            span: 33995..34009,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1208,
            column: 18,
            span: 34009..34010,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1208,
            column: 19,
            span: 34010..34011,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1209,
            column: 8,
            span: 34014..34019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 1209,
            column: 10,
            span: 34020..34021,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1209,
            column: 12,
            span: 34022..34023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1209,
            column: 14,
            span: 34024..34025,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1209,
            column: 15,
            span: 34025..34026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 1209,
            column: 23,
            span: 34026..34034,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1209,
            column: 24,
            span: 34034..34035,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1209,
            column: 25,
            span: 34035..34036,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1210,
            column: 8,
            span: 34039..34044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldM",
        ),
        position: Position {
            line: 1210,
            column: 13,
            span: 34045..34049,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1210,
            column: 15,
            span: 34050..34051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 1210,
            column: 0,
            span: 34052..34053,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1211,
            column: 8,
            span: 34056..34061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1211,
            column: 10,
            span: 34062..34063,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1211,
            column: 11,
            span: 34063..34064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1211,
            column: 12,
            span: 34064..34065,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1211,
            column: 14,
            span: 34066..34067,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1211,
            column: 0,
            span: 34068..34071,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 1212,
            column: 8,
            span: 34074..34079,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 1212,
            column: 13,
            span: 34080..34084,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1212,
            column: 0,
            span: 34085..34087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1213,
            column: 19,
            span: 34092..34106,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1213,
            column: 20,
            span: 34106..34107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1213,
            column: 21,
            span: 34107..34108,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1213,
            column: 22,
            span: 34108..34109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1213,
            column: 37,
            span: 34110..34124,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1213,
            column: 38,
            span: 34124..34125,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1213,
            column: 39,
            span: 34125..34126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1214,
            column: 6,
            span: 34131..34132,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1214,
            column: 7,
            span: 34132..34133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 1214,
            column: 15,
            span: 34133..34141,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1214,
            column: 16,
            span: 34141..34142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 1214,
            column: 17,
            span: 34142..34143,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1214,
            column: 18,
            span: 34143..34144,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1215,
            column: 6,
            span: 34149..34150,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1215,
            column: 7,
            span: 34150..34151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1215,
            column: 9,
            span: 34152..34153,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1215,
            column: 11,
            span: 34154..34155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1215,
            column: 13,
            span: 34156..34157,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1215,
            column: 14,
            span: 34157..34158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1215,
            column: 19,
            span: 34158..34163,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1215,
            column: 20,
            span: 34163..34164,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pcall 0 1 0; pushstatus; return 2\"",
        ),
        position: Position {
            line: 1215,
            column: 55,
            span: 34164..34199,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1215,
            column: 56,
            span: 34199..34200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1215,
            column: 58,
            span: 34201..34202,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1215,
            column: 59,
            span: 34202..34203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1216,
            column: 6,
            span: 34208..34209,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1216,
            column: 7,
            span: 34209..34210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 1216,
            column: 15,
            span: 34210..34218,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1216,
            column: 16,
            span: 34218..34219,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1216,
            column: 17,
            span: 34218..34220,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1216,
            column: 18,
            span: 34220..34221,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 1217,
            column: 7,
            span: 34243..34245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1217,
            column: 9,
            span: 34246..34247,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1217,
            column: 13,
            span: 34248..34251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1217,
            column: 15,
            span: 34252..34253,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1217,
            column: 18,
            span: 34254..34256,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        position: Position {
            line: 1217,
            column: 23,
            span: 34257..34261,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 1217,
            column: 28,
            span: 34262..34266,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 1217,
            column: 34,
            span: 34267..34272,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1217,
            column: 38,
            span: 34273..34276,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 1218,
            column: 7,
            span: 34315..34317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1218,
            column: 9,
            span: 34318..34319,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 1218,
            column: 12,
            span: 34320..34322,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        position: Position {
            line: 1218,
            column: 17,
            span: 34323..34327,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1218,
            column: 21,
            span: 34328..34331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1218,
            column: 23,
            span: 34332..34333,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 1218,
            column: 26,
            span: 34334..34336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "MEMERRMSG",
        ),
        position: Position {
            line: 1218,
            column: 36,
            span: 34337..34346,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 1218,
            column: 41,
            span: 34347..34351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 1219,
            column: 12,
            span: 34384..34389,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1219,
            column: 13,
            span: 34389..34390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1219,
            column: 14,
            span: 34390..34391,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1219,
            column: 15,
            span: 34391..34392,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1219,
            column: 17,
            span: 34392..34394,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1219,
            column: 18,
            span: 34394..34395,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1220,
            column: 0,
            span: 34418..34421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 1221,
            column: 6,
            span: 34426..34427,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1221,
            column: 8,
            span: 34428..34429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 1221,
            column: 10,
            span: 34430..34431,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1221,
            column: 12,
            span: 34432..34433,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1221,
            column: 14,
            span: 34433..34435,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1222,
            column: 0,
            span: 34465..34468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1223,
            column: 8,
            span: 34471..34476,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1223,
            column: 9,
            span: 34476..34477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1223,
            column: 15,
            span: 34477..34483,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1223,
            column: 16,
            span: 34483..34484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 1223,
            column: 22,
            span: 34484..34490,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1223,
            column: 23,
            span: 34490..34491,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"minimum memory for %s: %d bytes\"",
        ),
        position: Position {
            line: 1223,
            column: 56,
            span: 34491..34524,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1223,
            column: 57,
            span: 34524..34525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1223,
            column: 59,
            span: 34526..34527,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1223,
            column: 60,
            span: 34527..34528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 1223,
            column: 62,
            span: 34529..34530,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 1223,
            column: 64,
            span: 34531..34532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldM",
        ),
        position: Position {
            line: 1223,
            column: 69,
            span: 34533..34537,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1223,
            column: 70,
            span: 34537..34538,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1223,
            column: 71,
            span: 34538..34539,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1224,
            column: 9,
            span: 34542..34548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1224,
            column: 0,
            span: 34549..34550,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1225,
            column: 0,
            span: 34551..34554,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1232,
            column: 9,
            span: 34778..34786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testalloc",
        ),
        position: Position {
            line: 1232,
            column: 19,
            span: 34787..34796,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1232,
            column: 21,
            span: 34797..34798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1232,
            column: 22,
            span: 34798..34799,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1232,
            column: 23,
            span: 34799..34800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1232,
            column: 25,
            span: 34801..34802,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1232,
            column: 26,
            span: 34802..34803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1233,
            column: 17,
            span: 34806..34820,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1233,
            column: 18,
            span: 34820..34821,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1233,
            column: 19,
            span: 34821..34822,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1234,
            column: 8,
            span: 34825..34830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 1234,
            column: 10,
            span: 34831..34832,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1234,
            column: 12,
            span: 34833..34834,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1234,
            column: 0,
            span: 34834..34836,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1235,
            column: 8,
            span: 34839..34844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1235,
            column: 10,
            span: 34845..34846,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1235,
            column: 11,
            span: 34846..34847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1235,
            column: 12,
            span: 34847..34848,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1235,
            column: 14,
            span: 34849..34850,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1235,
            column: 0,
            span: 34851..34854,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 1236,
            column: 8,
            span: 34857..34862,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 1236,
            column: 13,
            span: 34863..34867,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1236,
            column: 0,
            span: 34868..34870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1237,
            column: 19,
            span: 34875..34889,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1237,
            column: 20,
            span: 34889..34890,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1237,
            column: 21,
            span: 34890..34891,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1237,
            column: 22,
            span: 34891..34892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1237,
            column: 37,
            span: 34893..34907,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1237,
            column: 38,
            span: 34907..34908,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1237,
            column: 39,
            span: 34908..34909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1238,
            column: 6,
            span: 34914..34915,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1238,
            column: 7,
            span: 34915..34916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alloccount",
        ),
        position: Position {
            line: 1238,
            column: 17,
            span: 34916..34926,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1238,
            column: 18,
            span: 34926..34927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 1238,
            column: 19,
            span: 34927..34928,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1238,
            column: 20,
            span: 34928..34929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1239,
            column: 6,
            span: 34934..34935,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1239,
            column: 7,
            span: 34935..34936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1239,
            column: 9,
            span: 34937..34938,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1239,
            column: 11,
            span: 34939..34940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1239,
            column: 13,
            span: 34941..34942,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1239,
            column: 14,
            span: 34942..34943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1239,
            column: 19,
            span: 34943..34948,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1239,
            column: 20,
            span: 34948..34949,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pcall 0 1 0; pushstatus; return 2\"",
        ),
        position: Position {
            line: 1239,
            column: 55,
            span: 34949..34984,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1239,
            column: 56,
            span: 34984..34985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1239,
            column: 58,
            span: 34986..34987,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1239,
            column: 59,
            span: 34987..34988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1240,
            column: 6,
            span: 34993..34994,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1240,
            column: 7,
            span: 34994..34995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alloccount",
        ),
        position: Position {
            line: 1240,
            column: 17,
            span: 34995..35005,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1240,
            column: 18,
            span: 35005..35006,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1240,
            column: 19,
            span: 35006..35007,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 1241,
            column: 7,
            span: 35029..35031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1241,
            column: 9,
            span: 35032..35033,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1241,
            column: 13,
            span: 35034..35037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1241,
            column: 15,
            span: 35038..35039,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1241,
            column: 18,
            span: 35040..35042,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        position: Position {
            line: 1241,
            column: 23,
            span: 35043..35047,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 1241,
            column: 28,
            span: 35048..35052,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 1241,
            column: 34,
            span: 35053..35058,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1241,
            column: 38,
            span: 35059..35062,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 1242,
            column: 7,
            span: 35101..35103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1242,
            column: 9,
            span: 35104..35105,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 1242,
            column: 12,
            span: 35106..35108,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        position: Position {
            line: 1242,
            column: 17,
            span: 35109..35113,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1242,
            column: 21,
            span: 35114..35117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1242,
            column: 23,
            span: 35118..35119,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 1242,
            column: 26,
            span: 35120..35122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "MEMERRMSG",
        ),
        position: Position {
            line: 1242,
            column: 36,
            span: 35123..35132,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 1242,
            column: 41,
            span: 35133..35137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 1243,
            column: 12,
            span: 35170..35175,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1243,
            column: 13,
            span: 35175..35176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1243,
            column: 14,
            span: 35176..35177,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1243,
            column: 15,
            span: 35177..35178,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1243,
            column: 17,
            span: 35178..35180,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1243,
            column: 18,
            span: 35180..35181,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1244,
            column: 0,
            span: 35204..35207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 1245,
            column: 6,
            span: 35212..35213,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1245,
            column: 8,
            span: 35214..35215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 1245,
            column: 10,
            span: 35216..35217,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1245,
            column: 12,
            span: 35218..35219,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1245,
            column: 14,
            span: 35219..35221,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1246,
            column: 0,
            span: 35255..35258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1247,
            column: 8,
            span: 35261..35266,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1247,
            column: 9,
            span: 35266..35267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1247,
            column: 15,
            span: 35267..35273,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1247,
            column: 16,
            span: 35273..35274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 1247,
            column: 22,
            span: 35274..35280,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1247,
            column: 23,
            span: 35280..35281,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"minimum allocations for %s: %d allocations\"",
        ),
        position: Position {
            line: 1247,
            column: 67,
            span: 35281..35325,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1247,
            column: 68,
            span: 35325..35326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1247,
            column: 70,
            span: 35327..35328,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1247,
            column: 71,
            span: 35328..35329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 1247,
            column: 73,
            span: 35330..35331,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1247,
            column: 74,
            span: 35331..35332,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1247,
            column: 75,
            span: 35332..35333,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1248,
            column: 9,
            span: 35336..35342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1248,
            column: 0,
            span: 35343..35344,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1249,
            column: 0,
            span: 35345..35348,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1252,
            column: 6,
            span: 35351..35356,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1252,
            column: 15,
            span: 35357..35365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1252,
            column: 24,
            span: 35366..35374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1252,
            column: 26,
            span: 35375..35376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1252,
            column: 27,
            span: 35376..35377,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1252,
            column: 28,
            span: 35377..35378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1252,
            column: 30,
            span: 35379..35380,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1252,
            column: 31,
            span: 35380..35381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testalloc",
        ),
        position: Position {
            line: 1253,
            column: 12,
            span: 35384..35393,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1253,
            column: 13,
            span: 35393..35394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1253,
            column: 14,
            span: 35394..35395,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1253,
            column: 15,
            span: 35395..35396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1253,
            column: 17,
            span: 35397..35398,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1253,
            column: 18,
            span: 35398..35399,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1254,
            column: 9,
            span: 35402..35408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testbytes",
        ),
        position: Position {
            line: 1254,
            column: 19,
            span: 35409..35418,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1254,
            column: 20,
            span: 35418..35419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1254,
            column: 21,
            span: 35419..35420,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1254,
            column: 22,
            span: 35420..35421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1254,
            column: 24,
            span: 35422..35423,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1254,
            column: 25,
            span: 35423..35424,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1255,
            column: 0,
            span: 35425..35428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1259,
            column: 2,
            span: 35448..35449,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1259,
            column: 4,
            span: 35450..35451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1259,
            column: 13,
            span: 35452..35460,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1259,
            column: 14,
            span: 35460..35461,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"doing nothing\"",
        ),
        position: Position {
            line: 1259,
            column: 29,
            span: 35461..35476,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1259,
            column: 30,
            span: 35476..35477,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1259,
            column: 39,
            span: 35478..35486,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1259,
            column: 41,
            span: 35487..35488,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1259,
            column: 42,
            span: 35488..35489,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1259,
            column: 49,
            span: 35490..35496,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1259,
            column: 52,
            span: 35496..35499,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1259,
            column: 56,
            span: 35500..35503,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1259,
            column: 57,
            span: 35503..35504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1260,
            column: 7,
            span: 35505..35511,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1260,
            column: 8,
            span: 35511..35512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1260,
            column: 9,
            span: 35512..35513,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1260,
            column: 12,
            span: 35514..35516,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1260,
            column: 15,
            span: 35516..35519,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1260,
            column: 16,
            span: 35519..35520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1264,
            column: 9,
            span: 35574..35582,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1264,
            column: 10,
            span: 35582..35583,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"state creation\"",
        ),
        position: Position {
            line: 1264,
            column: 26,
            span: 35583..35599,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1264,
            column: 27,
            span: 35599..35600,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1264,
            column: 36,
            span: 35601..35609,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1264,
            column: 38,
            span: 35610..35611,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1264,
            column: 39,
            span: 35611..35612,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1265,
            column: 8,
            span: 35615..35620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 1265,
            column: 11,
            span: 35621..35623,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1265,
            column: 13,
            span: 35624..35625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1265,
            column: 15,
            span: 35626..35627,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1265,
            column: 16,
            span: 35627..35628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 1265,
            column: 24,
            span: 35628..35636,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1265,
            column: 25,
            span: 35636..35637,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1265,
            column: 26,
            span: 35637..35638,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 1266,
            column: 5,
            span: 35641..35643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 1266,
            column: 8,
            span: 35644..35646,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 1266,
            column: 13,
            span: 35647..35651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1266,
            column: 15,
            span: 35652..35653,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1266,
            column: 16,
            span: 35653..35654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 1266,
            column: 26,
            span: 35654..35664,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1266,
            column: 27,
            span: 35664..35665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 1266,
            column: 29,
            span: 35665..35667,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1266,
            column: 30,
            span: 35667..35668,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1266,
            column: 34,
            span: 35669..35672,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1267,
            column: 9,
            span: 35696..35702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 1267,
            column: 0,
            span: 35703..35705,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1268,
            column: 4,
            span: 35706..35709,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1268,
            column: 5,
            span: 35709..35710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1270,
            column: 9,
            span: 35712..35720,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1270,
            column: 10,
            span: 35720..35721,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"empty-table creation\"",
        ),
        position: Position {
            line: 1270,
            column: 32,
            span: 35721..35743,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1270,
            column: 33,
            span: 35743..35744,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1270,
            column: 42,
            span: 35745..35753,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1270,
            column: 44,
            span: 35754..35755,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1270,
            column: 45,
            span: 35755..35756,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1271,
            column: 9,
            span: 35759..35765,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1271,
            column: 11,
            span: 35766..35767,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1271,
            column: 12,
            span: 35767..35768,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1272,
            column: 4,
            span: 35769..35772,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1272,
            column: 5,
            span: 35772..35773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1274,
            column: 9,
            span: 35775..35783,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1274,
            column: 10,
            span: 35783..35784,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string creation\"",
        ),
        position: Position {
            line: 1274,
            column: 27,
            span: 35784..35801,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1274,
            column: 28,
            span: 35801..35802,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1274,
            column: 37,
            span: 35803..35811,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1274,
            column: 39,
            span: 35812..35813,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1274,
            column: 40,
            span: 35813..35814,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1275,
            column: 9,
            span: 35817..35823,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXX\"",
        ),
        position: Position {
            line: 1275,
            column: 15,
            span: 35824..35829,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 1275,
            column: 18,
            span: 35830..35832,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"YYY\"",
        ),
        position: Position {
            line: 1275,
            column: 24,
            span: 35833..35838,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1276,
            column: 4,
            span: 35839..35842,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1276,
            column: 5,
            span: 35842..35843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1278,
            column: 9,
            span: 35845..35853,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1278,
            column: 10,
            span: 35853..35854,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"coroutine creation\"",
        ),
        position: Position {
            line: 1278,
            column: 30,
            span: 35854..35874,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1278,
            column: 31,
            span: 35874..35875,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1278,
            column: 40,
            span: 35876..35884,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1278,
            column: 41,
            span: 35884..35885,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1278,
            column: 42,
            span: 35885..35886,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1279,
            column: 18,
            span: 35898..35904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1279,
            column: 28,
            span: 35905..35914,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1279,
            column: 29,
            span: 35914..35915,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 1279,
            column: 35,
            span: 35915..35921,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1279,
            column: 36,
            span: 35921..35922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1279,
            column: 41,
            span: 35922..35927,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1279,
            column: 42,
            span: 35927..35928,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1280,
            column: 4,
            span: 35929..35932,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1280,
            column: 5,
            span: 35932..35933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1284,
            column: 9,
            span: 35970..35978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1284,
            column: 10,
            span: 35978..35979,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"to-be-closed variables\"",
        ),
        position: Position {
            line: 1284,
            column: 34,
            span: 35979..36003,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1284,
            column: 35,
            span: 36003..36004,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1284,
            column: 44,
            span: 36005..36013,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1284,
            column: 45,
            span: 36013..36014,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1284,
            column: 46,
            span: 36014..36015,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1285,
            column: 8,
            span: 36018..36023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        position: Position {
            line: 1285,
            column: 0,
            span: 36024..36028,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1286,
            column: 0,
            span: 36031..36033,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1287,
            column: 10,
            span: 36038..36043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1287,
            column: 12,
            span: 36044..36045,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 1287,
            column: 14,
            span: 36046..36047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 1287,
            column: 19,
            span: 36047..36052,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 1287,
            column: 20,
            span: 36052..36053,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1287,
            column: 22,
            span: 36054..36055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 1288,
            column: 27,
            span: 36070..36082,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1288,
            column: 28,
            span: 36082..36083,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1288,
            column: 29,
            span: 36083..36084,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1288,
            column: 30,
            span: 36084..36085,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1288,
            column: 31,
            span: 36085..36086,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1288,
            column: 33,
            span: 36087..36088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__close",
        ),
        position: Position {
            line: 1288,
            column: 40,
            span: 36088..36095,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1288,
            column: 42,
            span: 36096..36097,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1288,
            column: 51,
            span: 36098..36106,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1288,
            column: 53,
            span: 36107..36108,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1288,
            column: 54,
            span: 36108..36109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        position: Position {
            line: 1288,
            column: 59,
            span: 36110..36114,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1288,
            column: 61,
            span: 36115..36116,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 1288,
            column: 66,
            span: 36117..36121,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1288,
            column: 70,
            span: 36122..36125,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1288,
            column: 71,
            span: 36125..36126,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1288,
            column: 72,
            span: 36126..36127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        position: Position {
            line: 1289,
            column: 9,
            span: 36132..36136,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1289,
            column: 11,
            span: 36137..36138,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 1289,
            column: 0,
            span: 36139..36144,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1290,
            column: 10,
            span: 36149..36154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1290,
            column: 12,
            span: 36155..36156,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1290,
            column: 14,
            span: 36157..36158,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1290,
            column: 16,
            span: 36159..36160,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1290,
            column: 17,
            span: 36160..36161,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1291,
            column: 0,
            span: 36164..36167,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1292,
            column: 9,
            span: 36170..36176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flag",
        ),
        position: Position {
            line: 1292,
            column: 0,
            span: 36177..36181,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1293,
            column: 4,
            span: 36182..36185,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1293,
            column: 5,
            span: 36185..36186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 1299,
            column: 3,
            span: 36278..36280,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1299,
            column: 5,
            span: 36281..36282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1299,
            column: 7,
            span: 36283..36284,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1299,
            column: 8,
            span: 36284..36285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1299,
            column: 13,
            span: 36285..36290,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1299,
            column: 14,
            span: 36290..36291,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rawgeti R 1; return 1\"",
        ),
        position: Position {
            line: 1299,
            column: 37,
            span: 36291..36314,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1299,
            column: 38,
            span: 36314..36315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1300,
            column: 7,
            span: 36316..36322,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1300,
            column: 8,
            span: 36322..36323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 1300,
            column: 12,
            span: 36323..36327,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1300,
            column: 13,
            span: 36327..36328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 1300,
            column: 15,
            span: 36328..36330,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1300,
            column: 16,
            span: 36330..36331,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1300,
            column: 19,
            span: 36332..36334,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        position: Position {
            line: 1300,
            column: 28,
            span: 36335..36343,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1300,
            column: 32,
            span: 36344..36347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1300,
            column: 42,
            span: 36348..36357,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1300,
            column: 43,
            span: 36357..36358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "running",
        ),
        position: Position {
            line: 1300,
            column: 50,
            span: 36358..36365,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1300,
            column: 51,
            span: 36365..36366,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1300,
            column: 52,
            span: 36366..36367,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1300,
            column: 55,
            span: 36368..36370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 1300,
            column: 58,
            span: 36371..36373,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1300,
            column: 59,
            span: 36373..36374,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1304,
            column: 9,
            span: 36378..36386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expand",
        ),
        position: Position {
            line: 1304,
            column: 16,
            span: 36387..36393,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1304,
            column: 18,
            span: 36394..36395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 1304,
            column: 19,
            span: 36395..36396,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1304,
            column: 20,
            span: 36396..36397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1304,
            column: 21,
            span: 36397..36398,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1304,
            column: 22,
            span: 36398..36399,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 1305,
            column: 5,
            span: 36402..36404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 1305,
            column: 7,
            span: 36405..36406,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1305,
            column: 9,
            span: 36406..36408,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1305,
            column: 10,
            span: 36407..36409,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 1305,
            column: 15,
            span: 36410..36414,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1305,
            column: 22,
            span: 36415..36421,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 1305,
            column: 25,
            span: 36422..36424,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1305,
            column: 0,
            span: 36425..36428,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1306,
            column: 8,
            span: 36431..36436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 1306,
            column: 10,
            span: 36437..36438,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1306,
            column: 12,
            span: 36439..36440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1306,
            column: 19,
            span: 36441..36447,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1306,
            column: 20,
            span: 36447..36448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 1306,
            column: 23,
            span: 36448..36451,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1306,
            column: 24,
            span: 36451..36452,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        position: Position {
            line: 1306,
            column: 27,
            span: 36452..36455,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1306,
            column: 28,
            span: 36455..36456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 1306,
            column: 30,
            span: 36457..36458,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1306,
            column: 31,
            span: 36458..36459,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1307,
            column: 9,
            span: 36462..36468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1307,
            column: 16,
            span: 36469..36475,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1307,
            column: 17,
            span: 36475..36476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 1307,
            column: 23,
            span: 36476..36482,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1307,
            column: 24,
            span: 36482..36483,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"T.doonnewstack([%s[ %s;\\n collectgarbage(); %s]%s])\\n\"",
        ),
        position: Position {
            line: 1307,
            column: 79,
            span: 36483..36538,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1307,
            column: 80,
            span: 36538..36539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 1308,
            column: 32,
            span: 36570..36571,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1308,
            column: 33,
            span: 36571..36572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1308,
            column: 35,
            span: 36573..36574,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1308,
            column: 36,
            span: 36574..36575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expand",
        ),
        position: Position {
            line: 1308,
            column: 43,
            span: 36576..36582,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1308,
            column: 44,
            span: 36582..36583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 1308,
            column: 45,
            span: 36583..36584,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 1308,
            column: 46,
            span: 36584..36585,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1308,
            column: 47,
            span: 36584..36586,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1308,
            column: 48,
            span: 36586..36587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1308,
            column: 49,
            span: 36587..36588,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1308,
            column: 50,
            span: 36588..36589,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1308,
            column: 51,
            span: 36589..36590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 1308,
            column: 53,
            span: 36591..36592,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1308,
            column: 54,
            span: 36592..36593,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1309,
            column: 0,
            span: 36594..36597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "G",
        ),
        position: Position {
            line: 1311,
            column: 2,
            span: 36599..36600,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1311,
            column: 3,
            span: 36600..36601,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1311,
            column: 4,
            span: 36600..36602,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1311,
            column: 5,
            span: 36602..36603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1311,
            column: 20,
            span: 36604..36618,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1311,
            column: 21,
            span: 36618..36619,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1311,
            column: 22,
            span: 36619..36620,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1311,
            column: 23,
            span: 36620..36621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1311,
            column: 25,
            span: 36622..36623,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1311,
            column: 27,
            span: 36624..36625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1311,
            column: 41,
            span: 36625..36639,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1311,
            column: 42,
            span: 36639..36640,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 1311,
            column: 49,
            span: 36640..36647,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1311,
            column: 50,
            span: 36647..36648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 1312,
            column: 5,
            span: 36649..36653,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1312,
            column: 6,
            span: 36653..36654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expand",
        ),
        position: Position {
            line: 1312,
            column: 12,
            span: 36654..36660,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1312,
            column: 13,
            span: 36660..36661,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1312,
            column: 15,
            span: 36660..36663,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1312,
            column: 16,
            span: 36663..36664,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"G=G+1\"",
        ),
        position: Position {
            line: 1312,
            column: 23,
            span: 36664..36671,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1312,
            column: 24,
            span: 36671..36672,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1312,
            column: 25,
            span: 36672..36673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1312,
            column: 26,
            span: 36673..36674,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1312,
            column: 27,
            span: 36674..36675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1313,
            column: 7,
            span: 36676..36682,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1313,
            column: 8,
            span: 36682..36683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "G",
        ),
        position: Position {
            line: 1313,
            column: 9,
            span: 36683..36684,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1313,
            column: 11,
            span: 36684..36686,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1313,
            column: 13,
            span: 36685..36688,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1313,
            column: 14,
            span: 36688..36689,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1313,
            column: 15,
            span: 36689..36690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1313,
            column: 30,
            span: 36691..36705,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1313,
            column: 31,
            span: 36705..36706,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1313,
            column: 32,
            span: 36706..36707,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1313,
            column: 33,
            span: 36707..36708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1315,
            column: 9,
            span: 36738..36746,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1315,
            column: 10,
            span: 36746..36747,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"running code on new thread\"",
        ),
        position: Position {
            line: 1315,
            column: 38,
            span: 36747..36775,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1315,
            column: 39,
            span: 36775..36776,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1315,
            column: 48,
            span: 36777..36785,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1315,
            column: 50,
            span: 36786..36787,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1315,
            column: 51,
            span: 36787..36788,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1316,
            column: 9,
            span: 36791..36797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1316,
            column: 11,
            span: 36798..36799,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1316,
            column: 12,
            span: 36799..36800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doonnewstack",
        ),
        position: Position {
            line: 1316,
            column: 24,
            span: 36800..36812,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1316,
            column: 25,
            span: 36812..36813,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=1\"",
        ),
        position: Position {
            line: 1316,
            column: 30,
            span: 36813..36818,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1316,
            column: 31,
            span: 36818..36819,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1316,
            column: 34,
            span: 36820..36822,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1316,
            column: 36,
            span: 36822..36824,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1317,
            column: 4,
            span: 36850..36853,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1317,
            column: 5,
            span: 36853..36854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1322,
            column: 9,
            span: 36887..36895,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1322,
            column: 10,
            span: 36895..36896,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadstring\"",
        ),
        position: Position {
            line: 1322,
            column: 22,
            span: 36896..36908,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1322,
            column: 23,
            span: 36908..36909,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1322,
            column: 32,
            span: 36910..36918,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1322,
            column: 34,
            span: 36919..36920,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1322,
            column: 35,
            span: 36920..36921,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1323,
            column: 9,
            span: 36924..36930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 1323,
            column: 14,
            span: 36931..36935,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1323,
            column: 15,
            span: 36935..36936,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=1\"",
        ),
        position: Position {
            line: 1323,
            column: 20,
            span: 36936..36941,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1323,
            column: 21,
            span: 36941..36942,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1324,
            column: 4,
            span: 36971..36974,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1324,
            column: 5,
            span: 36974..36975,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1327,
            column: 6,
            span: 36978..36983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testprog",
        ),
        position: Position {
            line: 1327,
            column: 15,
            span: 36984..36992,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1327,
            column: 17,
            span: 36993..36994,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal function foo () return end\nlocal t = {\"x\"}\na = \"aaa\"\nfor i = 1, #t do a=a..t[i] end\nreturn true\n]]",
        ),
        position: Position {
            line: 1333,
            column: 3,
            span: 36995..37102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 1336,
            column: 3,
            span: 37131..37133,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1336,
            column: 4,
            span: 37133..37134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1336,
            column: 5,
            span: 37134..37135,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1336,
            column: 7,
            span: 37136..37137,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1336,
            column: 0,
            span: 37138..37141,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1337,
            column: 6,
            span: 37142..37147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 1337,
            column: 8,
            span: 37148..37149,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1337,
            column: 10,
            span: 37150..37151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 1337,
            column: 12,
            span: 37151..37153,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1337,
            column: 13,
            span: 37153..37154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        position: Position {
            line: 1337,
            column: 20,
            span: 37154..37161,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1337,
            column: 21,
            span: 37161..37162,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1337,
            column: 22,
            span: 37162..37163,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1338,
            column: 6,
            span: 37164..37169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1338,
            column: 8,
            span: 37170..37171,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1338,
            column: 10,
            span: 37172..37173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1338,
            column: 17,
            span: 37174..37180,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1338,
            column: 18,
            span: 37180..37181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 1338,
            column: 20,
            span: 37181..37183,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1338,
            column: 21,
            span: 37183..37184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 1338,
            column: 25,
            span: 37184..37188,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1338,
            column: 26,
            span: 37188..37189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 1338,
            column: 27,
            span: 37189..37190,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1338,
            column: 28,
            span: 37190..37191,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        position: Position {
            line: 1338,
            column: 32,
            span: 37192..37195,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1338,
            column: 33,
            span: 37195..37196,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1338,
            column: 34,
            span: 37196..37197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1339,
            column: 2,
            span: 37198..37199,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 1339,
            column: 3,
            span: 37199..37200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 1339,
            column: 8,
            span: 37200..37205,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1339,
            column: 9,
            span: 37205..37206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testprog",
        ),
        position: Position {
            line: 1339,
            column: 17,
            span: 37206..37214,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1339,
            column: 18,
            span: 37214..37215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1340,
            column: 2,
            span: 37216..37217,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 1340,
            column: 3,
            span: 37217..37218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 1340,
            column: 8,
            span: 37218..37223,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1340,
            column: 9,
            span: 37223..37224,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1340,
            column: 10,
            span: 37224..37225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1341,
            column: 9,
            span: 37226..37234,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1341,
            column: 10,
            span: 37234..37235,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dofile\"",
        ),
        position: Position {
            line: 1341,
            column: 18,
            span: 37235..37243,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1341,
            column: 19,
            span: 37243..37244,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1341,
            column: 28,
            span: 37245..37253,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1341,
            column: 30,
            span: 37254..37255,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1341,
            column: 31,
            span: 37255..37256,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1342,
            column: 8,
            span: 37259..37264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1342,
            column: 10,
            span: 37265..37266,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1342,
            column: 12,
            span: 37267..37268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 1342,
            column: 21,
            span: 37269..37277,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1342,
            column: 22,
            span: 37277..37278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 1342,
            column: 23,
            span: 37278..37279,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1342,
            column: 24,
            span: 37279..37280,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1343,
            column: 9,
            span: 37283..37289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1343,
            column: 11,
            span: 37290..37291,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1343,
            column: 15,
            span: 37292..37295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1343,
            column: 17,
            span: 37296..37297,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1343,
            column: 18,
            span: 37297..37298,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1343,
            column: 19,
            span: 37298..37299,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1344,
            column: 4,
            span: 37300..37303,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1344,
            column: 5,
            span: 37303..37304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1345,
            column: 7,
            span: 37305..37311,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1345,
            column: 8,
            span: 37311..37312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 1345,
            column: 10,
            span: 37312..37314,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1345,
            column: 11,
            span: 37314..37315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 1345,
            column: 17,
            span: 37315..37321,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1345,
            column: 18,
            span: 37321..37322,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 1345,
            column: 19,
            span: 37322..37323,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1345,
            column: 20,
            span: 37323..37324,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1345,
            column: 21,
            span: 37324..37325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1346,
            column: 7,
            span: 37326..37332,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1346,
            column: 8,
            span: 37332..37333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 1346,
            column: 10,
            span: 37333..37335,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1346,
            column: 11,
            span: 37335..37336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1346,
            column: 12,
            span: 37336..37337,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1346,
            column: 15,
            span: 37338..37340,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaax\"",
        ),
        position: Position {
            line: 1346,
            column: 22,
            span: 37341..37347,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1346,
            column: 23,
            span: 37347..37348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1351,
            column: 9,
            span: 37375..37383,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1351,
            column: 10,
            span: 37383..37384,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gsub\"",
        ),
        position: Position {
            line: 1351,
            column: 16,
            span: 37384..37390,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1351,
            column: 17,
            span: 37390..37391,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1351,
            column: 26,
            span: 37392..37400,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1351,
            column: 28,
            span: 37401..37402,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1351,
            column: 29,
            span: 37402..37403,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1352,
            column: 8,
            span: 37406..37411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1352,
            column: 10,
            span: 37412..37413,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1352,
            column: 11,
            span: 37413..37414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1352,
            column: 13,
            span: 37415..37416,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1352,
            column: 15,
            span: 37417..37418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1352,
            column: 22,
            span: 37419..37425,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1352,
            column: 23,
            span: 37425..37426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 1352,
            column: 27,
            span: 37426..37430,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1352,
            column: 28,
            span: 37430..37431,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 1352,
            column: 37,
            span: 37431..37440,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1352,
            column: 38,
            span: 37440..37441,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(a)\"",
        ),
        position: Position {
            line: 1352,
            column: 44,
            span: 37442..37447,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1352,
            column: 45,
            span: 37447..37448,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1352,
            column: 54,
            span: 37449..37457,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1352,
            column: 56,
            span: 37458..37459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1352,
            column: 57,
            span: 37459..37460,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1352,
            column: 58,
            span: 37460..37461,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1352,
            column: 65,
            span: 37462..37468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1352,
            column: 67,
            span: 37469..37470,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 1352,
            column: 69,
            span: 37470..37472,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 1352,
            column: 72,
            span: 37472..37475,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1352,
            column: 76,
            span: 37476..37479,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1352,
            column: 77,
            span: 37479..37480,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1353,
            column: 9,
            span: 37483..37489,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1353,
            column: 11,
            span: 37490..37491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1353,
            column: 12,
            span: 37491..37492,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1353,
            column: 15,
            span: 37493..37495,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ablo ablo'",
        ),
        position: Position {
            line: 1353,
            column: 27,
            span: 37496..37507,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1353,
            column: 28,
            span: 37507..37508,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1354,
            column: 4,
            span: 37509..37512,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1354,
            column: 5,
            span: 37512..37513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1356,
            column: 9,
            span: 37515..37523,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1356,
            column: 10,
            span: 37523..37524,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dump/undump\"",
        ),
        position: Position {
            line: 1356,
            column: 23,
            span: 37524..37537,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1356,
            column: 24,
            span: 37537..37538,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1356,
            column: 33,
            span: 37539..37547,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1356,
            column: 35,
            span: 37548..37549,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1356,
            column: 36,
            span: 37549..37550,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1357,
            column: 8,
            span: 37553..37558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1357,
            column: 10,
            span: 37559..37560,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1357,
            column: 12,
            span: 37561..37562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 1357,
            column: 17,
            span: 37563..37567,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1357,
            column: 18,
            span: 37567..37568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testprog",
        ),
        position: Position {
            line: 1357,
            column: 26,
            span: 37568..37576,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1357,
            column: 27,
            span: 37576..37577,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1358,
            column: 8,
            span: 37580..37585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1358,
            column: 10,
            span: 37586..37587,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1358,
            column: 12,
            span: 37588..37589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1358,
            column: 14,
            span: 37590..37591,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1358,
            column: 18,
            span: 37592..37595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1358,
            column: 25,
            span: 37596..37602,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1358,
            column: 26,
            span: 37602..37603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 1358,
            column: 30,
            span: 37603..37607,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1358,
            column: 31,
            span: 37607..37608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1358,
            column: 32,
            span: 37608..37609,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1358,
            column: 33,
            span: 37609..37610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1359,
            column: 4,
            span: 37613..37614,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1359,
            column: 6,
            span: 37615..37616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1359,
            column: 8,
            span: 37617..37618,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1359,
            column: 12,
            span: 37619..37622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 1359,
            column: 17,
            span: 37623..37627,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1359,
            column: 18,
            span: 37627..37628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1359,
            column: 19,
            span: 37628..37629,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1359,
            column: 20,
            span: 37629..37630,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1360,
            column: 9,
            span: 37633..37639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1360,
            column: 11,
            span: 37640..37641,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1360,
            column: 15,
            span: 37642..37645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1360,
            column: 17,
            span: 37646..37647,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1360,
            column: 18,
            span: 37647..37648,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1360,
            column: 19,
            span: 37648..37649,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1361,
            column: 4,
            span: 37650..37653,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1361,
            column: 5,
            span: 37653..37654,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1363,
            column: 6,
            span: 37656..37661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 1363,
            column: 8,
            span: 37662..37663,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1363,
            column: 10,
            span: 37664..37665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 1363,
            column: 13,
            span: 37666..37668,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1363,
            column: 14,
            span: 37668..37669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        position: Position {
            line: 1363,
            column: 21,
            span: 37669..37676,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1363,
            column: 22,
            span: 37676..37677,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1363,
            column: 23,
            span: 37677..37678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1364,
            column: 9,
            span: 37679..37687,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1364,
            column: 10,
            span: 37687..37688,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file creation\"",
        ),
        position: Position {
            line: 1364,
            column: 25,
            span: 37688..37703,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1364,
            column: 26,
            span: 37703..37704,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1364,
            column: 35,
            span: 37705..37713,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1364,
            column: 37,
            span: 37714..37715,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1364,
            column: 38,
            span: 37715..37716,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1365,
            column: 8,
            span: 37719..37724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1365,
            column: 10,
            span: 37725..37726,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1365,
            column: 12,
            span: 37727..37728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1365,
            column: 19,
            span: 37729..37735,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1365,
            column: 20,
            span: 37735..37736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 1365,
            column: 22,
            span: 37736..37738,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1365,
            column: 23,
            span: 37738..37739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 1365,
            column: 27,
            span: 37739..37743,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1365,
            column: 28,
            span: 37743..37744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 1365,
            column: 29,
            span: 37744..37745,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1365,
            column: 30,
            span: 37745..37746,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        position: Position {
            line: 1365,
            column: 34,
            span: 37747..37750,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1365,
            column: 35,
            span: 37750..37751,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1365,
            column: 36,
            span: 37751..37752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1366,
            column: 9,
            span: 37755..37761,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1366,
            column: 11,
            span: 37762..37763,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1366,
            column: 14,
            span: 37763..37766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 1366,
            column: 17,
            span: 37767..37769,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1366,
            column: 18,
            span: 37769..37770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 1366,
            column: 22,
            span: 37770..37774,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nomenaoexistente\"",
        ),
        position: Position {
            line: 1366,
            column: 40,
            span: 37774..37792,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1366,
            column: 41,
            span: 37792..37793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 1367,
            column: 5,
            span: 37796..37798,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1367,
            column: 6,
            span: 37798..37799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 1367,
            column: 11,
            span: 37799..37804,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1367,
            column: 12,
            span: 37804..37805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1367,
            column: 13,
            span: 37805..37806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1367,
            column: 14,
            span: 37806..37807,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1367,
            column: 15,
            span: 37807..37808,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1368,
            column: 9,
            span: 37811..37817,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1368,
            column: 13,
            span: 37818..37821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 1368,
            column: 22,
            span: 37822..37830,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nomenaoexistente'",
        ),
        position: Position {
            line: 1368,
            column: 40,
            span: 37830..37848,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1369,
            column: 4,
            span: 37849..37852,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1369,
            column: 5,
            span: 37852..37853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1370,
            column: 7,
            span: 37854..37860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1370,
            column: 8,
            span: 37860..37861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 1370,
            column: 10,
            span: 37861..37863,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1370,
            column: 11,
            span: 37863..37864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 1370,
            column: 17,
            span: 37864..37870,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1370,
            column: 18,
            span: 37870..37871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 1370,
            column: 19,
            span: 37871..37872,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1370,
            column: 20,
            span: 37872..37873,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1370,
            column: 21,
            span: 37873..37874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1372,
            column: 9,
            span: 37876..37884,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1372,
            column: 10,
            span: 37884..37885,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table creation\"",
        ),
        position: Position {
            line: 1372,
            column: 26,
            span: 37885..37901,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1372,
            column: 27,
            span: 37901..37902,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1372,
            column: 36,
            span: 37903..37911,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1372,
            column: 38,
            span: 37912..37913,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1372,
            column: 39,
            span: 37913..37914,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1373,
            column: 8,
            span: 37917..37922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1373,
            column: 10,
            span: 37923..37924,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1373,
            column: 11,
            span: 37924..37925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1373,
            column: 15,
            span: 37926..37929,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1373,
            column: 17,
            span: 37930..37931,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1373,
            column: 19,
            span: 37932..37933,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1373,
            column: 20,
            span: 37933..37934,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1373,
            column: 21,
            span: 37934..37935,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1373,
            column: 0,
            span: 37935..37938,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 1374,
            column: 6,
            span: 37941..37944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1374,
            column: 8,
            span: 37945..37946,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1374,
            column: 9,
            span: 37946..37947,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1374,
            column: 10,
            span: 37946..37948,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1374,
            column: 11,
            span: 37948..37949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1374,
            column: 14,
            span: 37949..37952,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1374,
            column: 17,
            span: 37953..37955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1374,
            column: 19,
            span: 37956..37957,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1374,
            column: 20,
            span: 37957..37958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1374,
            column: 21,
            span: 37958..37959,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1374,
            column: 22,
            span: 37959..37960,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1374,
            column: 24,
            span: 37961..37962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1374,
            column: 26,
            span: 37963..37964,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1374,
            column: 27,
            span: 37964..37965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1374,
            column: 29,
            span: 37966..37967,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1374,
            column: 30,
            span: 37967..37968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1374,
            column: 31,
            span: 37968..37969,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 1374,
            column: 33,
            span: 37969..37971,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 1374,
            column: 36,
            span: 37971..37974,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1374,
            column: 37,
            span: 37974..37975,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1374,
            column: 39,
            span: 37976..37977,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1374,
            column: 41,
            span: 37978..37979,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1374,
            column: 42,
            span: 37979..37980,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1374,
            column: 0,
            span: 37981..37984,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1375,
            column: 9,
            span: 37987..37993,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1375,
            column: 11,
            span: 37994..37995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 1375,
            column: 15,
            span: 37995..37999,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1375,
            column: 16,
            span: 37999..38000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1375,
            column: 17,
            span: 38000..38001,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1375,
            column: 18,
            span: 38001..38002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1375,
            column: 21,
            span: 38002..38005,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 1375,
            column: 23,
            span: 38005..38007,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 1375,
            column: 26,
            span: 38007..38010,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1375,
            column: 27,
            span: 38010..38011,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1375,
            column: 28,
            span: 38011..38012,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1375,
            column: 31,
            span: 38013..38015,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 1375,
            column: 39,
            span: 38016..38023,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1375,
            column: 43,
            span: 38024..38027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1375,
            column: 45,
            span: 38028..38029,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1375,
            column: 46,
            span: 38029..38030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1375,
            column: 49,
            span: 38030..38033,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1375,
            column: 50,
            span: 38033..38034,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1375,
            column: 53,
            span: 38035..38037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1375,
            column: 57,
            span: 38038..38041,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1375,
            column: 58,
            span: 38041..38042,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1376,
            column: 4,
            span: 38043..38046,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1376,
            column: 5,
            span: 38046..38047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1378,
            column: 9,
            span: 38049..38057,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1378,
            column: 10,
            span: 38057..38058,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"constructors\"",
        ),
        position: Position {
            line: 1378,
            column: 24,
            span: 38058..38072,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1378,
            column: 25,
            span: 38072..38073,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1378,
            column: 34,
            span: 38074..38082,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1378,
            column: 36,
            span: 38083..38084,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1378,
            column: 37,
            span: 38084..38085,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1379,
            column: 8,
            span: 38088..38093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1379,
            column: 10,
            span: 38094..38095,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1379,
            column: 12,
            span: 38096..38097,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1379,
            column: 14,
            span: 38098..38099,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1379,
            column: 16,
            span: 38098..38101,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1379,
            column: 17,
            span: 38101..38102,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1379,
            column: 20,
            span: 38102..38105,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1379,
            column: 21,
            span: 38105..38106,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1379,
            column: 24,
            span: 38106..38109,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1379,
            column: 25,
            span: 38109..38110,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1379,
            column: 28,
            span: 38110..38113,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1379,
            column: 29,
            span: 38113..38114,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1379,
            column: 32,
            span: 38114..38117,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1379,
            column: 33,
            span: 38117..38118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1379,
            column: 35,
            span: 38119..38120,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1379,
            column: 36,
            span: 38120..38121,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1379,
            column: 37,
            span: 38120..38122,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1379,
            column: 38,
            span: 38122..38123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1379,
            column: 40,
            span: 38124..38125,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1379,
            column: 41,
            span: 38125..38126,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1379,
            column: 42,
            span: 38125..38127,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1379,
            column: 43,
            span: 38127..38128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 1379,
            column: 45,
            span: 38129..38130,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1379,
            column: 46,
            span: 38130..38131,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1379,
            column: 47,
            span: 38130..38132,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1379,
            column: 48,
            span: 38132..38133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 1379,
            column: 50,
            span: 38134..38135,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1379,
            column: 51,
            span: 38135..38136,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1379,
            column: 52,
            span: 38135..38137,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1379,
            column: 53,
            span: 38137..38138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 1379,
            column: 55,
            span: 38139..38140,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1379,
            column: 56,
            span: 38140..38141,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1379,
            column: 57,
            span: 38140..38142,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1379,
            column: 58,
            span: 38142..38143,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1380,
            column: 9,
            span: 38146..38152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1380,
            column: 11,
            span: 38153..38154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 1380,
            column: 15,
            span: 38154..38158,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1380,
            column: 16,
            span: 38158..38159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1380,
            column: 17,
            span: 38159..38160,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1380,
            column: 18,
            span: 38160..38161,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1380,
            column: 21,
            span: 38162..38164,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 1380,
            column: 29,
            span: 38165..38172,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1380,
            column: 33,
            span: 38173..38176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1380,
            column: 35,
            span: 38177..38178,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1380,
            column: 36,
            span: 38178..38179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 1380,
            column: 37,
            span: 38179..38180,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1380,
            column: 40,
            span: 38181..38183,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1380,
            column: 42,
            span: 38183..38185,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1380,
            column: 43,
            span: 38185..38186,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1381,
            column: 4,
            span: 38187..38190,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1381,
            column: 5,
            span: 38190..38191,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1383,
            column: 6,
            span: 38193..38198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1383,
            column: 8,
            span: 38199..38200,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1383,
            column: 10,
            span: 38201..38202,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1383,
            column: 0,
            span: 38202..38204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 1384,
            column: 6,
            span: 38205..38210,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1384,
            column: 8,
            span: 38211..38212,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1384,
            column: 0,
            span: 38213..38216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1385,
            column: 9,
            span: 38217..38225,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1385,
            column: 10,
            span: 38225..38226,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"closure creation\"",
        ),
        position: Position {
            line: 1385,
            column: 28,
            span: 38226..38244,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1385,
            column: 29,
            span: 38244..38245,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1385,
            column: 38,
            span: 38246..38254,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1385,
            column: 40,
            span: 38255..38256,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1385,
            column: 41,
            span: 38256..38257,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1386,
            column: 11,
            span: 38260..38268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 1386,
            column: 17,
            span: 38269..38274,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1386,
            column: 19,
            span: 38275..38276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1386,
            column: 20,
            span: 38276..38277,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1386,
            column: 21,
            span: 38277..38278,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1387,
            column: 10,
            span: 38282..38288,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1387,
            column: 19,
            span: 38289..38297,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1387,
            column: 21,
            span: 38298..38299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1387,
            column: 22,
            span: 38299..38300,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1387,
            column: 23,
            span: 38300..38301,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1387,
            column: 30,
            span: 38302..38308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1387,
            column: 32,
            span: 38309..38310,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1387,
            column: 34,
            span: 38311..38312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1387,
            column: 36,
            span: 38313..38314,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1387,
            column: 0,
            span: 38315..38318,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1388,
            column: 0,
            span: 38321..38324,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1389,
            column: 9,
            span: 38327..38333,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1389,
            column: 11,
            span: 38334..38335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 1389,
            column: 16,
            span: 38335..38340,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1389,
            column: 17,
            span: 38340..38341,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1389,
            column: 18,
            span: 38340..38342,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1389,
            column: 19,
            span: 38342..38343,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1389,
            column: 20,
            span: 38343..38344,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1389,
            column: 21,
            span: 38343..38345,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1389,
            column: 22,
            span: 38345..38346,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1389,
            column: 25,
            span: 38347..38349,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1389,
            column: 27,
            span: 38349..38351,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1389,
            column: 28,
            span: 38351..38352,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1390,
            column: 4,
            span: 38353..38356,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1390,
            column: 5,
            span: 38356..38357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1392,
            column: 9,
            span: 38359..38367,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1392,
            column: 10,
            span: 38367..38368,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"using coroutines\"",
        ),
        position: Position {
            line: 1392,
            column: 28,
            span: 38368..38386,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1392,
            column: 29,
            span: 38386..38387,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1392,
            column: 38,
            span: 38388..38396,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1392,
            column: 40,
            span: 38397..38398,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1392,
            column: 41,
            span: 38398..38399,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1393,
            column: 8,
            span: 38402..38407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1393,
            column: 10,
            span: 38408..38409,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1393,
            column: 12,
            span: 38410..38411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1393,
            column: 22,
            span: 38412..38421,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1393,
            column: 23,
            span: 38421..38422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 1393,
            column: 27,
            span: 38422..38426,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1393,
            column: 28,
            span: 38426..38427,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1393,
            column: 36,
            span: 38427..38435,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1393,
            column: 38,
            span: 38436..38437,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1393,
            column: 39,
            span: 38437..38438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1394,
            column: 24,
            span: 38453..38462,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1394,
            column: 25,
            span: 38462..38463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 1394,
            column: 30,
            span: 38463..38468,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1394,
            column: 31,
            span: 38468..38469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1394,
            column: 37,
            span: 38469..38475,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1394,
            column: 38,
            span: 38475..38476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 1394,
            column: 41,
            span: 38476..38479,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1394,
            column: 42,
            span: 38479..38480,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 1394,
            column: 45,
            span: 38480..38483,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1394,
            column: 46,
            span: 38483..38484,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1394,
            column: 49,
            span: 38484..38487,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1394,
            column: 50,
            span: 38487..38488,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1394,
            column: 51,
            span: 38488..38489,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1395,
            column: 21,
            span: 38504..38510,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1395,
            column: 23,
            span: 38511..38512,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1395,
            column: 24,
            span: 38512..38513,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1396,
            column: 16,
            span: 38526..38529,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1396,
            column: 17,
            span: 38529..38530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1397,
            column: 9,
            span: 38533..38539,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1397,
            column: 10,
            span: 38539..38540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1397,
            column: 16,
            span: 38540..38546,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1397,
            column: 17,
            span: 38546..38547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 1397,
            column: 20,
            span: 38547..38550,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1397,
            column: 21,
            span: 38550..38551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1397,
            column: 22,
            span: 38551..38552,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1397,
            column: 23,
            span: 38552..38553,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1397,
            column: 24,
            span: 38553..38554,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1397,
            column: 25,
            span: 38554..38555,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1397,
            column: 28,
            span: 38556..38558,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1397,
            column: 31,
            span: 38558..38561,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1397,
            column: 32,
            span: 38561..38562,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1398,
            column: 9,
            span: 38565..38571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1398,
            column: 11,
            span: 38572..38573,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1398,
            column: 12,
            span: 38573..38574,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1398,
            column: 13,
            span: 38574..38575,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1399,
            column: 4,
            span: 38576..38579,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1399,
            column: 5,
            span: 38579..38580,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1401,
            column: 3,
            span: 38582..38584,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1402,
            column: 8,
            span: 38609..38614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1402,
            column: 12,
            span: 38615..38618,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1402,
            column: 14,
            span: 38619..38620,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1402,
            column: 0,
            span: 38620..38624,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1403,
            column: 8,
            span: 38627..38632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1403,
            column: 10,
            span: 38633..38634,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1403,
            column: 12,
            span: 38635..38636,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1403,
            column: 14,
            span: 38637..38638,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1403,
            column: 15,
            span: 38638..38639,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1403,
            column: 16,
            span: 38639..38640,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 1403,
            column: 20,
            span: 38641..38644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1403,
            column: 22,
            span: 38645..38646,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1403,
            column: 24,
            span: 38647..38648,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1403,
            column: 26,
            span: 38648..38650,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1403,
            column: 27,
            span: 38650..38651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1403,
            column: 31,
            span: 38652..38655,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1403,
            column: 34,
            span: 38656..38658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1403,
            column: 36,
            span: 38659..38660,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1403,
            column: 37,
            span: 38660..38661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1403,
            column: 38,
            span: 38661..38662,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1403,
            column: 39,
            span: 38662..38663,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1403,
            column: 41,
            span: 38664..38665,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01234567890123456789\"",
        ),
        position: Position {
            line: 1403,
            column: 64,
            span: 38666..38688,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1403,
            column: 0,
            span: 38689..38692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1404,
            column: 11,
            span: 38695..38703,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1404,
            column: 12,
            span: 38703..38704,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"auxiliary buffer\"",
        ),
        position: Position {
            line: 1404,
            column: 30,
            span: 38704..38722,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1404,
            column: 31,
            span: 38722..38723,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1404,
            column: 40,
            span: 38724..38732,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1404,
            column: 42,
            span: 38733..38734,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1404,
            column: 43,
            span: 38734..38735,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1405,
            column: 11,
            span: 38740..38746,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1405,
            column: 13,
            span: 38747..38748,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 1405,
            column: 14,
            span: 38748..38749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 1405,
            column: 19,
            span: 38749..38754,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1405,
            column: 20,
            span: 38754..38755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        position: Position {
            line: 1405,
            column: 26,
            span: 38755..38761,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1405,
            column: 27,
            span: 38761..38762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1405,
            column: 28,
            span: 38762..38763,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1405,
            column: 29,
            span: 38763..38764,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",\"",
        ),
        position: Position {
            line: 1405,
            column: 33,
            span: 38765..38768,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1405,
            column: 34,
            span: 38768..38769,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1405,
            column: 37,
            span: 38770..38772,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1405,
            column: 40,
            span: 38772..38775,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 1405,
            column: 41,
            span: 38775..38776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1405,
            column: 44,
            span: 38776..38779,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1405,
            column: 46,
            span: 38780..38781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1405,
            column: 50,
            span: 38782..38785,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 1405,
            column: 52,
            span: 38786..38787,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1405,
            column: 54,
            span: 38787..38789,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1405,
            column: 55,
            span: 38789..38790,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1406,
            column: 6,
            span: 38793..38796,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1406,
            column: 7,
            span: 38796..38797,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1407,
            column: 0,
            span: 38798..38801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1409,
            column: 9,
            span: 38803..38811,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1409,
            column: 10,
            span: 38811..38812,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"growing stack\"",
        ),
        position: Position {
            line: 1409,
            column: 25,
            span: 38812..38827,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1409,
            column: 26,
            span: 38827..38828,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1409,
            column: 35,
            span: 38829..38837,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1409,
            column: 37,
            span: 38838..38839,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1409,
            column: 38,
            span: 38839..38840,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1410,
            column: 8,
            span: 38843..38848,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1410,
            column: 17,
            span: 38849..38857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 1410,
            column: 21,
            span: 38858..38861,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1410,
            column: 23,
            span: 38862..38863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 1410,
            column: 24,
            span: 38863..38864,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1410,
            column: 25,
            span: 38864..38865,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 1411,
            column: 7,
            span: 38870..38872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 1411,
            column: 9,
            span: 38873..38874,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1411,
            column: 12,
            span: 38875..38877,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1411,
            column: 14,
            span: 38877..38879,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 1411,
            column: 19,
            span: 38880..38884,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1411,
            column: 26,
            span: 38885..38891,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1411,
            column: 28,
            span: 38891..38893,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 1411,
            column: 33,
            span: 38894..38898,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1411,
            column: 40,
            span: 38899..38905,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1411,
            column: 42,
            span: 38905..38907,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1411,
            column: 44,
            span: 38908..38909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 1411,
            column: 48,
            span: 38910..38913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1411,
            column: 49,
            span: 38913..38914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 1411,
            column: 50,
            span: 38914..38915,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 1411,
            column: 52,
            span: 38916..38917,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1411,
            column: 54,
            span: 38917..38919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1411,
            column: 55,
            span: 38919..38920,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1411,
            column: 0,
            span: 38921..38924,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1412,
            column: 0,
            span: 38927..38930,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1413,
            column: 9,
            span: 38933..38939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 1413,
            column: 13,
            span: 38940..38943,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1413,
            column: 14,
            span: 38943..38944,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1413,
            column: 17,
            span: 38943..38947,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1413,
            column: 18,
            span: 38947..38948,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1414,
            column: 4,
            span: 38949..38952,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1414,
            column: 5,
            span: 38952..38953,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1419,
            column: 3,
            span: 39028..39030,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1420,
            column: 8,
            span: 39074..39079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1420,
            column: 12,
            span: 39080..39083,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1420,
            column: 14,
            span: 39084..39085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1420,
            column: 16,
            span: 39086..39087,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1420,
            column: 17,
            span: 39087..39088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1420,
            column: 22,
            span: 39088..39093,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1420,
            column: 23,
            span: 39093..39094,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[rawcheckstack 500000; return 1]]",
        ),
        position: Position {
            line: 1420,
            column: 57,
            span: 39094..39128,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1420,
            column: 58,
            span: 39128..39129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1421,
            column: 9,
            span: 39132..39138,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1421,
            column: 10,
            span: 39138..39139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1421,
            column: 13,
            span: 39139..39142,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1421,
            column: 16,
            span: 39143..39145,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 1421,
            column: 22,
            span: 39146..39151,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1421,
            column: 23,
            span: 39151..39152,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1422,
            column: 8,
            span: 39155..39160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 1422,
            column: 10,
            span: 39161..39162,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1422,
            column: 12,
            span: 39163..39164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1422,
            column: 14,
            span: 39165..39166,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1422,
            column: 15,
            span: 39166..39167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 1422,
            column: 23,
            span: 39167..39175,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1422,
            column: 24,
            span: 39175..39176,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1422,
            column: 25,
            span: 39176..39177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1423,
            column: 4,
            span: 39180..39181,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1423,
            column: 5,
            span: 39181..39182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alloccount",
        ),
        position: Position {
            line: 1423,
            column: 15,
            span: 39182..39192,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1423,
            column: 16,
            span: 39192..39193,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1423,
            column: 17,
            span: 39192..39194,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1423,
            column: 18,
            span: 39194..39195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1424,
            column: 6,
            span: 39242..39245,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1424,
            column: 8,
            span: 39246..39247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1424,
            column: 10,
            span: 39248..39249,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1424,
            column: 11,
            span: 39249..39250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1424,
            column: 16,
            span: 39250..39255,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1424,
            column: 17,
            span: 39255..39256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 1424,
            column: 18,
            span: 39256..39257,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1424,
            column: 19,
            span: 39257..39258,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[rawcheckstack 5000; return 1]]",
        ),
        position: Position {
            line: 1424,
            column: 52,
            span: 39259..39291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1424,
            column: 53,
            span: 39291..39292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1425,
            column: 4,
            span: 39295..39296,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1425,
            column: 5,
            span: 39296..39297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alloccount",
        ),
        position: Position {
            line: 1425,
            column: 15,
            span: 39297..39307,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1425,
            column: 16,
            span: 39307..39308,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1425,
            column: 17,
            span: 39308..39309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1426,
            column: 4,
            span: 39312..39313,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1426,
            column: 5,
            span: 39313..39314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 1426,
            column: 15,
            span: 39314..39324,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1426,
            column: 16,
            span: 39324..39325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 1426,
            column: 17,
            span: 39325..39326,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1426,
            column: 18,
            span: 39326..39327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1427,
            column: 9,
            span: 39330..39336,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1427,
            column: 10,
            span: 39336..39337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1427,
            column: 13,
            span: 39337..39340,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1427,
            column: 16,
            span: 39341..39343,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 1427,
            column: 22,
            span: 39344..39349,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1427,
            column: 23,
            span: 39349..39350,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1428,
            column: 0,
            span: 39351..39354,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1430,
            column: 3,
            span: 39356..39358,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1431,
            column: 8,
            span: 39401..39406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 1431,
            column: 10,
            span: 39407..39408,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1431,
            column: 12,
            span: 39409..39410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1431,
            column: 14,
            span: 39411..39412,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1431,
            column: 15,
            span: 39412..39413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 1431,
            column: 23,
            span: 39413..39421,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1431,
            column: 24,
            span: 39421..39422,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1431,
            column: 25,
            span: 39422..39423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1432,
            column: 4,
            span: 39426..39427,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1432,
            column: 5,
            span: 39427..39428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alloccount",
        ),
        position: Position {
            line: 1432,
            column: 15,
            span: 39428..39438,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1432,
            column: 16,
            span: 39438..39439,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1432,
            column: 17,
            span: 39438..39440,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1432,
            column: 18,
            span: 39440..39441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1433,
            column: 4,
            span: 39444..39445,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1433,
            column: 5,
            span: 39445..39446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 1433,
            column: 15,
            span: 39446..39456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1433,
            column: 16,
            span: 39456..39457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 1433,
            column: 17,
            span: 39457..39458,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1433,
            column: 18,
            span: 39458..39459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1434,
            column: 4,
            span: 39462..39463,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1434,
            column: 5,
            span: 39463..39464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alloccount",
        ),
        position: Position {
            line: 1434,
            column: 15,
            span: 39464..39474,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1434,
            column: 16,
            span: 39474..39475,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1434,
            column: 17,
            span: 39475..39476,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1435,
            column: 0,
            span: 39477..39480,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1437,
            column: 3,
            span: 39482..39484,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1438,
            column: 8,
            span: 39532..39537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 1438,
            column: 10,
            span: 39538..39539,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1438,
            column: 12,
            span: 39540..39541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1438,
            column: 14,
            span: 39542..39543,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1438,
            column: 15,
            span: 39543..39544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 1438,
            column: 23,
            span: 39544..39552,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1438,
            column: 24,
            span: 39552..39553,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1438,
            column: 25,
            span: 39553..39554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1439,
            column: 4,
            span: 39557..39558,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1439,
            column: 5,
            span: 39558..39559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        position: Position {
            line: 1439,
            column: 12,
            span: 39559..39566,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1439,
            column: 13,
            span: 39566..39567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 1439,
            column: 14,
            span: 39567..39568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1439,
            column: 15,
            span: 39568..39569,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1440,
            column: 8,
            span: 39572..39577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1440,
            column: 12,
            span: 39578..39581,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1440,
            column: 14,
            span: 39582..39583,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1440,
            column: 16,
            span: 39584..39585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1440,
            column: 17,
            span: 39585..39586,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1440,
            column: 18,
            span: 39586..39587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 1440,
            column: 26,
            span: 39587..39595,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1440,
            column: 27,
            span: 39595..39596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 1440,
            column: 28,
            span: 39596..39597,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1440,
            column: 29,
            span: 39597..39598,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    _ENV = require\"_G\"\n    local T = require\"T\"\n    local a = {}\n    for i = 1, 1000 do a[i] = 'i' .. i end    -- grow string table\n    local stsize, stuse = T.querystr()\n    assert(stuse > 1000)\n    local function foo (n)\n      if n > 0 then foo(n - 1) end\n    end\n    foo(180)    -- grow stack\n    local _, stksize = T.stacklevel()\n    assert(stksize > 180)\n    a = nil\n    T.alloccount(0)\n    collectgarbage()\n    T.alloccount()\n    -- stack and string table could not be reallocated,\n    -- so they kept their sizes (without errors)\n    assert(select(2, T.stacklevel()) == stksize)\n    assert(T.querystr() == stsize)\n    return 'ok'\n  ]]",
        ),
        position: Position {
            line: 1462,
            column: 5,
            span: 39599..40243,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1462,
            column: 6,
            span: 40243..40244,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1462,
            column: 7,
            span: 40244..40245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1463,
            column: 9,
            span: 40248..40254,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1463,
            column: 10,
            span: 40254..40255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1463,
            column: 13,
            span: 40255..40258,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1463,
            column: 16,
            span: 40259..40261,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ok'",
        ),
        position: Position {
            line: 1463,
            column: 21,
            span: 40262..40266,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1463,
            column: 22,
            span: 40266..40267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1464,
            column: 4,
            span: 40270..40271,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1464,
            column: 5,
            span: 40271..40272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 1464,
            column: 15,
            span: 40272..40282,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1464,
            column: 16,
            span: 40282..40283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 1464,
            column: 17,
            span: 40283..40284,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1464,
            column: 18,
            span: 40284..40285,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1465,
            column: 0,
            span: 40286..40289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1467,
            column: 6,
            span: 40291..40296,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 1467,
            column: 9,
            span: 40296..40299,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1470,
            column: 6,
            span: 40334..40339,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1470,
            column: 15,
            span: 40340..40348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 1470,
            column: 20,
            span: 40349..40353,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1470,
            column: 22,
            span: 40354..40355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1470,
            column: 23,
            span: 40355..40356,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1470,
            column: 24,
            span: 40356..40357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1470,
            column: 26,
            span: 40358..40359,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1470,
            column: 27,
            span: 40359..40360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 1470,
            column: 29,
            span: 40361..40362,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1470,
            column: 30,
            span: 40362..40363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1471,
            column: 4,
            span: 40366..40367,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1471,
            column: 5,
            span: 40367..40368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1471,
            column: 7,
            span: 40369..40370,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1471,
            column: 9,
            span: 40371..40372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1471,
            column: 11,
            span: 40373..40374,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1471,
            column: 12,
            span: 40374..40375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1471,
            column: 17,
            span: 40375..40380,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1471,
            column: 18,
            span: 40380..40381,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gsub 2 3 4; gettop; return 2\"",
        ),
        position: Position {
            line: 1471,
            column: 48,
            span: 40381..40411,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1471,
            column: 49,
            span: 40411..40412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1471,
            column: 51,
            span: 40413..40414,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1471,
            column: 52,
            span: 40414..40415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1471,
            column: 54,
            span: 40416..40417,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1471,
            column: 55,
            span: 40417..40418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 1471,
            column: 57,
            span: 40419..40420,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1471,
            column: 58,
            span: 40420..40421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1472,
            column: 9,
            span: 40424..40430,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1472,
            column: 10,
            span: 40430..40431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1472,
            column: 11,
            span: 40431..40432,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1472,
            column: 14,
            span: 40433..40435,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1472,
            column: 16,
            span: 40435..40437,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1472,
            column: 17,
            span: 40437..40438,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1473,
            column: 9,
            span: 40441..40447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1473,
            column: 0,
            span: 40448..40449,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1474,
            column: 0,
            span: 40450..40453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1476,
            column: 7,
            span: 40455..40461,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1476,
            column: 8,
            span: 40461..40462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 1476,
            column: 12,
            span: 40462..40466,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1476,
            column: 13,
            span: 40466..40467,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo.alo.uhuh.\"",
        ),
        position: Position {
            line: 1476,
            column: 28,
            span: 40467..40482,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1476,
            column: 29,
            span: 40482..40483,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 1476,
            column: 33,
            span: 40484..40487,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1476,
            column: 34,
            span: 40487..40488,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//\"",
        ),
        position: Position {
            line: 1476,
            column: 39,
            span: 40489..40493,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1476,
            column: 40,
            span: 40493..40494,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1476,
            column: 43,
            span: 40495..40497,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo//alo//uhuh//\"",
        ),
        position: Position {
            line: 1476,
            column: 62,
            span: 40498..40516,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1476,
            column: 63,
            span: 40516..40517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1477,
            column: 7,
            span: 40518..40524,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1477,
            column: 8,
            span: 40524..40525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 1477,
            column: 12,
            span: 40525..40529,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1477,
            column: 13,
            span: 40529..40530,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo.alo.uhuh.\"",
        ),
        position: Position {
            line: 1477,
            column: 28,
            span: 40530..40545,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1477,
            column: 29,
            span: 40545..40546,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 1477,
            column: 35,
            span: 40547..40552,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1477,
            column: 36,
            span: 40552..40553,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//\"",
        ),
        position: Position {
            line: 1477,
            column: 41,
            span: 40554..40558,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1477,
            column: 42,
            span: 40558..40559,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1477,
            column: 45,
            span: 40560..40562,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//.//.uhuh.\"",
        ),
        position: Position {
            line: 1477,
            column: 59,
            span: 40563..40576,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1477,
            column: 60,
            span: 40576..40577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1478,
            column: 7,
            span: 40578..40584,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1478,
            column: 8,
            span: 40584..40585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 1478,
            column: 12,
            span: 40585..40589,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1478,
            column: 13,
            span: 40589..40590,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 1478,
            column: 15,
            span: 40590..40592,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1478,
            column: 16,
            span: 40592..40593,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 1478,
            column: 22,
            span: 40594..40599,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1478,
            column: 23,
            span: 40599..40600,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//\"",
        ),
        position: Position {
            line: 1478,
            column: 28,
            span: 40601..40605,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1478,
            column: 29,
            span: 40605..40606,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1478,
            column: 32,
            span: 40607..40609,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 1478,
            column: 35,
            span: 40610..40612,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1478,
            column: 36,
            span: 40612..40613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1479,
            column: 7,
            span: 40614..40620,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1479,
            column: 8,
            span: 40620..40621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 1479,
            column: 12,
            span: 40621..40625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1479,
            column: 13,
            span: 40625..40626,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"...\"",
        ),
        position: Position {
            line: 1479,
            column: 18,
            span: 40626..40631,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1479,
            column: 19,
            span: 40631..40632,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 1479,
            column: 23,
            span: 40633..40636,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1479,
            column: 24,
            span: 40636..40637,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"/.\"",
        ),
        position: Position {
            line: 1479,
            column: 29,
            span: 40638..40642,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1479,
            column: 30,
            span: 40642..40643,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1479,
            column: 33,
            span: 40644..40646,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"/././.\"",
        ),
        position: Position {
            line: 1479,
            column: 42,
            span: 40647..40655,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1479,
            column: 43,
            span: 40655..40656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1480,
            column: 7,
            span: 40657..40663,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1480,
            column: 8,
            span: 40663..40664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 1480,
            column: 12,
            span: 40664..40668,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1480,
            column: 13,
            span: 40668..40669,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"...\"",
        ),
        position: Position {
            line: 1480,
            column: 18,
            span: 40669..40674,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1480,
            column: 19,
            span: 40674..40675,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"...\"",
        ),
        position: Position {
            line: 1480,
            column: 25,
            span: 40676..40681,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1480,
            column: 26,
            span: 40681..40682,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 1480,
            column: 29,
            span: 40683..40685,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1480,
            column: 30,
            span: 40685..40686,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1480,
            column: 33,
            span: 40687..40689,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 1480,
            column: 36,
            span: 40690..40692,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1480,
            column: 37,
            span: 40692..40693,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1484,
            column: 6,
            span: 40725..40730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        position: Position {
            line: 1484,
            column: 14,
            span: 40731..40738,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1484,
            column: 15,
            span: 40738..40739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1484,
            column: 19,
            span: 40740..40743,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1484,
            column: 20,
            span: 40743..40744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1484,
            column: 24,
            span: 40745..40748,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1484,
            column: 26,
            span: 40749..40750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1484,
            column: 28,
            span: 40751..40752,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1484,
            column: 29,
            span: 40752..40753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1484,
            column: 34,
            span: 40753..40758,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1484,
            column: 35,
            span: 40758..40759,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"newmetatable xuxu; gettop; return 3\"",
        ),
        position: Position {
            line: 1484,
            column: 72,
            span: 40759..40796,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1484,
            column: 73,
            span: 40796..40797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1485,
            column: 7,
            span: 40798..40804,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1485,
            column: 8,
            span: 40804..40805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 1485,
            column: 12,
            span: 40805..40809,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1485,
            column: 13,
            span: 40809..40810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        position: Position {
            line: 1485,
            column: 20,
            span: 40810..40817,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1485,
            column: 21,
            span: 40817..40818,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1485,
            column: 24,
            span: 40819..40821,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        position: Position {
            line: 1485,
            column: 32,
            span: 40822..40829,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1485,
            column: 36,
            span: 40830..40833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1485,
            column: 40,
            span: 40834..40837,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1485,
            column: 44,
            span: 40838..40841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1485,
            column: 48,
            span: 40842..40845,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1485,
            column: 51,
            span: 40846..40848,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1485,
            column: 53,
            span: 40848..40850,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1485,
            column: 54,
            span: 40850..40851,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1486,
            column: 6,
            span: 40852..40857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 1486,
            column: 8,
            span: 40858..40859,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1486,
            column: 9,
            span: 40859..40860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1486,
            column: 13,
            span: 40861..40864,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1486,
            column: 14,
            span: 40864..40865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1486,
            column: 18,
            span: 40866..40869,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1486,
            column: 20,
            span: 40870..40871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1486,
            column: 22,
            span: 40872..40873,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1486,
            column: 23,
            span: 40873..40874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1486,
            column: 28,
            span: 40874..40879,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1486,
            column: 29,
            span: 40879..40880,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"newmetatable xuxu; gettop; return 3\"",
        ),
        position: Position {
            line: 1486,
            column: 66,
            span: 40880..40917,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1486,
            column: 67,
            span: 40917..40918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1487,
            column: 7,
            span: 40919..40925,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1487,
            column: 8,
            span: 40925..40926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        position: Position {
            line: 1487,
            column: 15,
            span: 40926..40933,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1487,
            column: 18,
            span: 40934..40936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 1487,
            column: 20,
            span: 40937..40938,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1487,
            column: 24,
            span: 40939..40942,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1487,
            column: 28,
            span: 40943..40946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1487,
            column: 32,
            span: 40947..40950,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1487,
            column: 36,
            span: 40951..40954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1487,
            column: 40,
            span: 40955..40958,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1487,
            column: 43,
            span: 40959..40961,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1487,
            column: 45,
            span: 40961..40963,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1487,
            column: 46,
            span: 40963..40964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 1488,
            column: 2,
            span: 40965..40966,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1488,
            column: 3,
            span: 40966..40967,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1488,
            column: 7,
            span: 40968..40971,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1488,
            column: 8,
            span: 40971..40972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1488,
            column: 12,
            span: 40973..40976,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1488,
            column: 14,
            span: 40977..40978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1488,
            column: 16,
            span: 40979..40980,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1488,
            column: 17,
            span: 40980..40981,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1488,
            column: 22,
            span: 40981..40986,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1488,
            column: 23,
            span: 40986..40987,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"newmetatable xuxu1; gettop; return 3\"",
        ),
        position: Position {
            line: 1488,
            column: 61,
            span: 40987..41025,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1488,
            column: 62,
            span: 41025..41026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1489,
            column: 7,
            span: 41027..41033,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1489,
            column: 8,
            span: 41033..41034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        position: Position {
            line: 1489,
            column: 15,
            span: 41034..41041,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 1489,
            column: 18,
            span: 41042..41044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 1489,
            column: 20,
            span: 41045..41046,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1489,
            column: 24,
            span: 41047..41050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1489,
            column: 28,
            span: 41051..41054,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1489,
            column: 32,
            span: 41055..41058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1489,
            column: 36,
            span: 41059..41062,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1489,
            column: 39,
            span: 41063..41065,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1489,
            column: 41,
            span: 41065..41067,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1489,
            column: 42,
            span: 41067..41068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1491,
            column: 2,
            span: 41070..41071,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1491,
            column: 4,
            span: 41072..41073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1491,
            column: 6,
            span: 41074..41075,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1491,
            column: 7,
            span: 41075..41076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 1491,
            column: 18,
            span: 41076..41087,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1491,
            column: 19,
            span: 41087..41088,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1491,
            column: 20,
            span: 41087..41089,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1491,
            column: 21,
            span: 41089..41090,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1491,
            column: 22,
            span: 41090..41091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 1492,
            column: 2,
            span: 41092..41093,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1492,
            column: 4,
            span: 41094..41095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1492,
            column: 6,
            span: 41096..41097,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1492,
            column: 7,
            span: 41097..41098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 1492,
            column: 18,
            span: 41098..41109,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1492,
            column: 19,
            span: 41109..41110,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1492,
            column: 20,
            span: 41109..41111,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1492,
            column: 21,
            span: 41111..41112,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1492,
            column: 22,
            span: 41112..41113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1493,
            column: 2,
            span: 41114..41115,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1493,
            column: 3,
            span: 41115..41116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1493,
            column: 8,
            span: 41116..41121,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1493,
            column: 9,
            span: 41121..41122,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring xuxu; gettable R; setmetatable 2\"",
        ),
        position: Position {
            line: 1493,
            column: 54,
            span: 41122..41167,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1493,
            column: 55,
            span: 41167..41168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1493,
            column: 57,
            span: 41169..41170,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1493,
            column: 58,
            span: 41170..41171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1494,
            column: 7,
            span: 41172..41178,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1494,
            column: 8,
            span: 41178..41179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 1494,
            column: 20,
            span: 41179..41191,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1494,
            column: 21,
            span: 41191..41192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1494,
            column: 22,
            span: 41192..41193,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1494,
            column: 23,
            span: 41193..41194,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1494,
            column: 26,
            span: 41195..41197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        position: Position {
            line: 1494,
            column: 34,
            span: 41198..41205,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1494,
            column: 35,
            span: 41205..41206,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1498,
            column: 6,
            span: 41255..41260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1498,
            column: 11,
            span: 41261..41265,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1498,
            column: 12,
            span: 41265..41266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1498,
            column: 17,
            span: 41267..41271,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1498,
            column: 18,
            span: 41271..41272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1498,
            column: 22,
            span: 41273..41276,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1498,
            column: 24,
            span: 41277..41278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1498,
            column: 26,
            span: 41279..41280,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1498,
            column: 27,
            span: 41280..41281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1498,
            column: 32,
            span: 41281..41286,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1498,
            column: 33,
            span: 41286..41287,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[testudata -1 xuxu\n   \t \t\t\t  testudata 2 xuxu\n\t\t\t\t  gettop\n\t\t\t\t  return 3]]",
        ),
        position: Position {
            line: 1501,
            column: 17,
            span: 41287..41363,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1501,
            column: 18,
            span: 41363..41364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1501,
            column: 20,
            span: 41365..41366,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1501,
            column: 21,
            span: 41366..41367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1502,
            column: 7,
            span: 41368..41374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1502,
            column: 8,
            span: 41374..41375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1502,
            column: 12,
            span: 41375..41379,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1502,
            column: 16,
            span: 41380..41383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1502,
            column: 21,
            span: 41384..41388,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1502,
            column: 25,
            span: 41389..41392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1502,
            column: 29,
            span: 41393..41396,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1502,
            column: 32,
            span: 41397..41399,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1502,
            column: 34,
            span: 41399..41401,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1502,
            column: 35,
            span: 41401..41402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1505,
            column: 5,
            span: 41423..41427,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1505,
            column: 6,
            span: 41427..41428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1505,
            column: 11,
            span: 41429..41433,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1505,
            column: 12,
            span: 41433..41434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1505,
            column: 16,
            span: 41435..41438,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1505,
            column: 18,
            span: 41439..41440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1505,
            column: 20,
            span: 41441..41442,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1505,
            column: 21,
            span: 41442..41443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1505,
            column: 26,
            span: 41443..41448,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1505,
            column: 27,
            span: 41448..41449,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[testudata -1 xuxu1\n\t\t\t    testudata 2 xuxu1\n\t\t\t    gettop\n\t\t\t    return 3]]",
        ),
        position: Position {
            line: 1508,
            column: 18,
            span: 41449..41526,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1508,
            column: 19,
            span: 41526..41527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1508,
            column: 21,
            span: 41528..41529,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1508,
            column: 22,
            span: 41529..41530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1509,
            column: 7,
            span: 41531..41537,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1509,
            column: 8,
            span: 41537..41538,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1509,
            column: 11,
            span: 41538..41541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1509,
            column: 16,
            span: 41542..41546,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1509,
            column: 20,
            span: 41547..41550,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1509,
            column: 24,
            span: 41551..41554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1509,
            column: 29,
            span: 41555..41559,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1509,
            column: 33,
            span: 41560..41563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1509,
            column: 37,
            span: 41564..41567,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1509,
            column: 40,
            span: 41568..41570,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1509,
            column: 42,
            span: 41570..41572,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1509,
            column: 43,
            span: 41572..41573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1512,
            column: 5,
            span: 41596..41600,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1512,
            column: 6,
            span: 41600..41601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1512,
            column: 11,
            span: 41602..41606,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1512,
            column: 12,
            span: 41606..41607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1512,
            column: 16,
            span: 41608..41611,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1512,
            column: 18,
            span: 41612..41613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1512,
            column: 20,
            span: 41614..41615,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1512,
            column: 21,
            span: 41615..41616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1512,
            column: 26,
            span: 41616..41621,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1512,
            column: 27,
            span: 41621..41622,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[testudata -1 xuxu2\n\t\t\t    testudata 2 xuxu2\n\t\t\t    gettop\n\t\t\t    return 3]]",
        ),
        position: Position {
            line: 1515,
            column: 18,
            span: 41622..41699,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1515,
            column: 19,
            span: 41699..41700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1515,
            column: 21,
            span: 41701..41702,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1515,
            column: 22,
            span: 41702..41703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1516,
            column: 7,
            span: 41704..41710,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1516,
            column: 8,
            span: 41710..41711,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1516,
            column: 11,
            span: 41711..41714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1516,
            column: 16,
            span: 41715..41719,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1516,
            column: 20,
            span: 41720..41723,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1516,
            column: 24,
            span: 41724..41727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1516,
            column: 29,
            span: 41728..41732,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1516,
            column: 33,
            span: 41733..41736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1516,
            column: 37,
            span: 41737..41740,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1516,
            column: 40,
            span: 41741..41743,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1516,
            column: 42,
            span: 41743..41745,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1516,
            column: 43,
            span: 41745..41746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1519,
            column: 5,
            span: 41777..41781,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1519,
            column: 6,
            span: 41781..41782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1519,
            column: 11,
            span: 41783..41787,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1519,
            column: 12,
            span: 41787..41788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1519,
            column: 16,
            span: 41789..41792,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1519,
            column: 18,
            span: 41793..41794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1519,
            column: 20,
            span: 41795..41796,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1519,
            column: 21,
            span: 41796..41797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1519,
            column: 26,
            span: 41797..41802,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1519,
            column: 27,
            span: 41802..41803,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[testudata -1 xuxu\n\t\t\t    testudata 2 xuxu\n\t\t\t    gettop\n\t\t\t    return 3]]",
        ),
        position: Position {
            line: 1522,
            column: 18,
            span: 41803..41878,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1522,
            column: 19,
            span: 41878..41879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 1522,
            column: 21,
            span: 41880..41881,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1522,
            column: 22,
            span: 41881..41882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1523,
            column: 7,
            span: 41883..41889,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1523,
            column: 8,
            span: 41889..41890,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1523,
            column: 11,
            span: 41890..41893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1523,
            column: 16,
            span: 41894..41898,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1523,
            column: 20,
            span: 41899..41902,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1523,
            column: 24,
            span: 41903..41906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1523,
            column: 29,
            span: 41907..41911,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1523,
            column: 33,
            span: 41912..41915,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1523,
            column: 37,
            span: 41916..41919,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1523,
            column: 40,
            span: 41920..41922,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1523,
            column: 42,
            span: 41922..41924,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1523,
            column: 43,
            span: 41924..41925,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1526,
            column: 0,
            span: 41947..41949,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1527,
            column: 8,
            span: 41952..41957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 1527,
            column: 10,
            span: 41958..41959,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1527,
            column: 12,
            span: 41960..41961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 1527,
            column: 18,
            span: 41962..41967,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1527,
            column: 19,
            span: 41967..41968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getregistry",
        ),
        position: Position {
            line: 1527,
            column: 30,
            span: 41968..41979,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1527,
            column: 31,
            span: 41979..41980,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1527,
            column: 32,
            span: 41980..41981,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1528,
            column: 9,
            span: 41984..41990,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1528,
            column: 10,
            span: 41990..41991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 1528,
            column: 11,
            span: 41991..41992,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1528,
            column: 12,
            span: 41992..41993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        position: Position {
            line: 1528,
            column: 16,
            span: 41993..41997,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1528,
            column: 19,
            span: 41998..42000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        position: Position {
            line: 1528,
            column: 27,
            span: 42001..42008,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1528,
            column: 31,
            span: 42009..42012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 1528,
            column: 33,
            span: 42013..42014,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1528,
            column: 34,
            span: 42014..42015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu1",
        ),
        position: Position {
            line: 1528,
            column: 39,
            span: 42015..42020,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1528,
            column: 42,
            span: 42021..42023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 1528,
            column: 44,
            span: 42024..42025,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1528,
            column: 45,
            span: 42025..42026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 1529,
            column: 4,
            span: 42029..42030,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1529,
            column: 5,
            span: 42030..42031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        position: Position {
            line: 1529,
            column: 9,
            span: 42031..42035,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1529,
            column: 11,
            span: 42036..42037,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1529,
            column: 15,
            span: 42038..42041,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1529,
            column: 16,
            span: 42041..42042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 1529,
            column: 18,
            span: 42043..42044,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1529,
            column: 19,
            span: 42044..42045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu1",
        ),
        position: Position {
            line: 1529,
            column: 24,
            span: 42045..42050,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1529,
            column: 26,
            span: 42051..42052,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1529,
            column: 0,
            span: 42053..42056,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1530,
            column: 0,
            span: 42057..42060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1532,
            column: 6,
            span: 42062..42067,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 1532,
            column: 10,
            span: 42067..42071,
        },
    },
]
