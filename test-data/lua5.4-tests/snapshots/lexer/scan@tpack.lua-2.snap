---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/tpack.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 4,
            column: 6,
            span: 68..73,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 4,
            column: 11,
            span: 74..78,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 4,
            column: 13,
            span: 79..80,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 4,
            column: 20,
            span: 81..87,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 4,
            column: 21,
            span: 87..88,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 4,
            column: 0,
            span: 88..92,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 5,
            column: 6,
            span: 93..98,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 5,
            column: 15,
            span: 99..107,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 5,
            column: 17,
            span: 108..109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 5,
            column: 24,
            span: 110..116,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 5,
            column: 25,
            span: 116..117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 5,
            column: 0,
            span: 117..125,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 6,
            column: 6,
            span: 126..131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 6,
            column: 13,
            span: 132..138,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 6,
            column: 15,
            span: 139..140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 6,
            column: 22,
            span: 141..147,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 6,
            column: 23,
            span: 147..148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 6,
            column: 0,
            span: 148..154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 8,
            column: 6,
            span: 156..161,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing pack/unpack\"",
        ),
        position: Position {
            line: 8,
            column: 28,
            span: 162..183,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 11,
            column: 6,
            span: 214..219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NB",
        ),
        position: Position {
            line: 11,
            column: 9,
            span: 220..222,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 11,
            column: 11,
            span: 223..224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 11,
            column: 0,
            span: 224..227,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 13,
            column: 6,
            span: 229..234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeshort",
        ),
        position: Position {
            line: 13,
            column: 16,
            span: 235..244,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 13,
            column: 18,
            span: 245..246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 13,
            column: 27,
            span: 247..255,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 28,
            span: 255..256,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"h\"",
        ),
        position: Position {
            line: 13,
            column: 31,
            span: 256..259,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 32,
            span: 259..260,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 14,
            column: 6,
            span: 261..266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeint",
        ),
        position: Position {
            line: 14,
            column: 14,
            span: 267..274,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 14,
            column: 16,
            span: 275..276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 14,
            column: 25,
            span: 277..285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 26,
            span: 285..286,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        position: Position {
            line: 14,
            column: 29,
            span: 286..289,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 30,
            span: 289..290,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 15,
            column: 6,
            span: 291..296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizelong",
        ),
        position: Position {
            line: 15,
            column: 15,
            span: 297..305,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 15,
            column: 17,
            span: 306..307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 15,
            column: 26,
            span: 308..316,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 27,
            span: 316..317,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 15,
            column: 30,
            span: 317..320,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 31,
            span: 320..321,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 16,
            column: 6,
            span: 322..327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizesize_t",
        ),
        position: Position {
            line: 16,
            column: 17,
            span: 328..338,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 16,
            column: 19,
            span: 339..340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 16,
            column: 28,
            span: 341..349,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 29,
            span: 349..350,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"T\"",
        ),
        position: Position {
            line: 16,
            column: 32,
            span: 350..353,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 33,
            span: 353..354,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 17,
            column: 6,
            span: 355..360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 17,
            column: 13,
            span: 361..367,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 17,
            column: 15,
            span: 368..369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 17,
            column: 24,
            span: 370..378,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 25,
            span: 378..379,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"j\"",
        ),
        position: Position {
            line: 17,
            column: 28,
            span: 379..382,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 29,
            span: 382..383,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 18,
            column: 6,
            span: 384..389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizefloat",
        ),
        position: Position {
            line: 18,
            column: 16,
            span: 390..399,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 18,
            column: 18,
            span: 400..401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 18,
            column: 27,
            span: 402..410,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 28,
            span: 410..411,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        position: Position {
            line: 18,
            column: 31,
            span: 411..414,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 32,
            span: 414..415,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 19,
            column: 6,
            span: 416..421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizedouble",
        ),
        position: Position {
            line: 19,
            column: 17,
            span: 422..432,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 19,
            column: 19,
            span: 433..434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 19,
            column: 28,
            span: 435..443,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 29,
            span: 443..444,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"d\"",
        ),
        position: Position {
            line: 19,
            column: 32,
            span: 444..447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 33,
            span: 447..448,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 20,
            column: 6,
            span: 449..454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizenumber",
        ),
        position: Position {
            line: 20,
            column: 17,
            span: 455..465,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 20,
            column: 19,
            span: 466..467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 20,
            column: 28,
            span: 468..476,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 29,
            span: 476..477,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 20,
            column: 32,
            span: 477..480,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 33,
            span: 480..481,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 21,
            column: 6,
            span: 482..487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "little",
        ),
        position: Position {
            line: 21,
            column: 13,
            span: 488..494,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 21,
            column: 15,
            span: 495..496,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 17,
            span: 497..498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 21,
            column: 21,
            span: 498..502,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 22,
            span: 502..503,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i2\"",
        ),
        position: Position {
            line: 21,
            column: 26,
            span: 503..507,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 27,
            span: 507..508,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 21,
            column: 29,
            span: 508..510,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 30,
            span: 510..511,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 21,
            column: 33,
            span: 512..514,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\1\\0\"",
        ),
        position: Position {
            line: 21,
            column: 40,
            span: 515..521,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 41,
            span: 521..522,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 22,
            column: 6,
            span: 523..528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "align",
        ),
        position: Position {
            line: 22,
            column: 12,
            span: 529..534,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 22,
            column: 14,
            span: 535..536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 22,
            column: 23,
            span: 537..545,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 24,
            span: 545..546,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!xXi16\"",
        ),
        position: Position {
            line: 22,
            column: 32,
            span: 546..554,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 33,
            span: 554..555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 24,
            column: 7,
            span: 557..563,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 24,
            column: 8,
            span: 563..564,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 24,
            column: 9,
            span: 563..565,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 24,
            column: 12,
            span: 566..568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeshort",
        ),
        position: Position {
            line: 24,
            column: 22,
            span: 569..578,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 24,
            column: 26,
            span: 579..582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeshort",
        ),
        position: Position {
            line: 24,
            column: 36,
            span: 583..592,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 24,
            column: 39,
            span: 593..595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeint",
        ),
        position: Position {
            line: 24,
            column: 47,
            span: 596..603,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 24,
            column: 51,
            span: 604..607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeint",
        ),
        position: Position {
            line: 24,
            column: 59,
            span: 608..615,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 24,
            column: 62,
            span: 616..618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizelong",
        ),
        position: Position {
            line: 24,
            column: 71,
            span: 619..627,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 24,
            column: 0,
            span: 628..631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizefloat",
        ),
        position: Position {
            line: 25,
            column: 17,
            span: 639..648,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 25,
            column: 20,
            span: 649..651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizedouble",
        ),
        position: Position {
            line: 25,
            column: 31,
            span: 652..662,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 25,
            column: 32,
            span: 662..663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 27,
            column: 6,
            span: 665..670,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 7,
            span: 670..671,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"platform:\"",
        ),
        position: Position {
            line: 27,
            column: 18,
            span: 671..682,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 19,
            span: 682..683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 28,
            column: 6,
            span: 684..689,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 7,
            span: 689..690,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 28,
            column: 13,
            span: 690..696,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 28,
            column: 14,
            span: 696..697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 28,
            column: 20,
            span: 697..703,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 21,
            span: 703..704,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\tshort %d, int %d, long %d, size_t %d, float %d, double %d,\\n\\z\n   \\tlua Integer %d, lua Number %d\"",
        ),
        position: Position {
            line: 30,
            column: 36,
            span: 707..808,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 30,
            column: 37,
            span: 808..809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeshort",
        ),
        position: Position {
            line: 31,
            column: 13,
            span: 813..822,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 14,
            span: 822..823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeint",
        ),
        position: Position {
            line: 31,
            column: 22,
            span: 824..831,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 23,
            span: 831..832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizelong",
        ),
        position: Position {
            line: 31,
            column: 32,
            span: 833..841,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 33,
            span: 841..842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizesize_t",
        ),
        position: Position {
            line: 31,
            column: 44,
            span: 843..853,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 45,
            span: 853..854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizefloat",
        ),
        position: Position {
            line: 31,
            column: 55,
            span: 855..864,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 56,
            span: 864..865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizedouble",
        ),
        position: Position {
            line: 31,
            column: 67,
            span: 866..876,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 68,
            span: 876..877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 32,
            column: 10,
            span: 881..887,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 11,
            span: 887..888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizenumber",
        ),
        position: Position {
            line: 32,
            column: 22,
            span: 889..899,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 23,
            span: 899..900,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 24,
            span: 900..901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 33,
            column: 6,
            span: 902..907,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 7,
            span: 907..908,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\t\"",
        ),
        position: Position {
            line: 33,
            column: 11,
            span: 908..912,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 33,
            column: 14,
            span: 913..915,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 16,
            span: 916..917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "little",
        ),
        position: Position {
            line: 33,
            column: 22,
            span: 917..923,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 33,
            column: 26,
            span: 924..927,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"little\"",
        ),
        position: Position {
            line: 33,
            column: 35,
            span: 928..936,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 33,
            column: 38,
            span: 937..939,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"big\"",
        ),
        position: Position {
            line: 33,
            column: 44,
            span: 940..945,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 45,
            span: 945..946,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 33,
            column: 48,
            span: 947..949,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" endian\"",
        ),
        position: Position {
            line: 33,
            column: 58,
            span: 950..959,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 59,
            span: 959..960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 34,
            column: 6,
            span: 961..966,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 7,
            span: 966..967,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\talignment: \"",
        ),
        position: Position {
            line: 34,
            column: 22,
            span: 967..982,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 34,
            column: 25,
            span: 983..985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "align",
        ),
        position: Position {
            line: 34,
            column: 31,
            span: 986..991,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 32,
            span: 991..992,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 38,
            column: 9,
            span: 1024..1032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 38,
            column: 20,
            span: 1033..1043,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 22,
            span: 1044..1045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 38,
            column: 25,
            span: 1045..1048,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 38,
            column: 26,
            span: 1048..1049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 38,
            column: 28,
            span: 1050..1051,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 38,
            column: 29,
            span: 1051..1052,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 38,
            column: 33,
            span: 1053..1056,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 34,
            span: 1056..1057,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 39,
            column: 8,
            span: 1060..1065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 39,
            column: 15,
            span: 1066..1072,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 16,
            span: 1072..1073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 39,
            column: 20,
            span: 1074..1077,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 39,
            column: 22,
            span: 1078..1079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 39,
            column: 28,
            span: 1080..1085,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 29,
            span: 1085..1086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 39,
            column: 30,
            span: 1086..1087,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 31,
            span: 1087..1088,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 39,
            column: 35,
            span: 1089..1092,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 36,
            span: 1092..1093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 41,
            column: 9,
            span: 1125..1131,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 10,
            span: 1131..1132,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 41,
            column: 13,
            span: 1132..1135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 41,
            column: 20,
            span: 1136..1142,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 41,
            column: 24,
            span: 1143..1146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 41,
            column: 31,
            span: 1147..1153,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 41,
            column: 32,
            span: 1153..1154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 41,
            column: 36,
            span: 1154..1158,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 37,
            span: 1158..1159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 41,
            column: 40,
            span: 1159..1162,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 41,
            span: 1162..1163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 41,
            column: 45,
            span: 1164..1167,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 46,
            span: 1167..1168,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 47,
            span: 1168..1169,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 42,
            column: 0,
            span: 1170..1173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 45,
            column: 7,
            span: 1215..1221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 8,
            span: 1221..1222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 45,
            column: 14,
            span: 1222..1228,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 15,
            span: 1228..1229,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        position: Position {
            line: 45,
            column: 18,
            span: 1229..1232,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 19,
            span: 1232..1233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 45,
            column: 24,
            span: 1234..1238,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 25,
            span: 1238..1239,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        position: Position {
            line: 45,
            column: 28,
            span: 1239..1242,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 29,
            span: 1242..1243,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xff",
            ),
        ),
        position: Position {
            line: 45,
            column: 34,
            span: 1243..1248,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 35,
            span: 1248..1249,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 36,
            span: 1249..1250,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 45,
            column: 39,
            span: 1251..1253,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xff",
            ),
        ),
        position: Position {
            line: 45,
            column: 44,
            span: 1253..1258,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 45,
            span: 1258..1259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 46,
            column: 7,
            span: 1260..1266,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 8,
            span: 1266..1267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 46,
            column: 14,
            span: 1267..1273,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 15,
            span: 1273..1274,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 46,
            column: 18,
            span: 1274..1277,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 19,
            span: 1277..1278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 46,
            column: 24,
            span: 1279..1283,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 25,
            span: 1283..1284,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 46,
            column: 28,
            span: 1284..1287,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 29,
            span: 1287..1288,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7f",
            ),
        ),
        position: Position {
            line: 46,
            column: 34,
            span: 1288..1293,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 35,
            span: 1293..1294,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 36,
            span: 1294..1295,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 46,
            column: 39,
            span: 1296..1298,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7f",
            ),
        ),
        position: Position {
            line: 46,
            column: 44,
            span: 1298..1303,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 45,
            span: 1303..1304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 47,
            column: 7,
            span: 1305..1311,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 8,
            span: 1311..1312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 47,
            column: 14,
            span: 1312..1318,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 15,
            span: 1318..1319,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 47,
            column: 18,
            span: 1319..1322,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 19,
            span: 1322..1323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 47,
            column: 24,
            span: 1324..1328,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 25,
            span: 1328..1329,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 47,
            column: 28,
            span: 1329..1332,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 29,
            span: 1332..1333,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 47,
            column: 31,
            span: 1334..1335,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80",
            ),
        ),
        position: Position {
            line: 47,
            column: 35,
            span: 1334..1339,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 36,
            span: 1339..1340,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 37,
            span: 1340..1341,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 47,
            column: 40,
            span: 1342..1344,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 47,
            column: 42,
            span: 1345..1346,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80",
            ),
        ),
        position: Position {
            line: 47,
            column: 46,
            span: 1345..1350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 47,
            span: 1350..1351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 49,
            column: 7,
            span: 1353..1359,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 8,
            span: 1359..1360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 49,
            column: 14,
            span: 1360..1366,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 15,
            span: 1366..1367,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"H\"",
        ),
        position: Position {
            line: 49,
            column: 18,
            span: 1367..1370,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 49,
            column: 19,
            span: 1370..1371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 49,
            column: 24,
            span: 1372..1376,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 25,
            span: 1376..1377,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"H\"",
        ),
        position: Position {
            line: 49,
            column: 28,
            span: 1377..1380,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 49,
            column: 29,
            span: 1380..1381,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffff",
            ),
        ),
        position: Position {
            line: 49,
            column: 36,
            span: 1381..1388,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 37,
            span: 1388..1389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 38,
            span: 1389..1390,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 49,
            column: 41,
            span: 1391..1393,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffff",
            ),
        ),
        position: Position {
            line: 49,
            column: 48,
            span: 1393..1400,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 49,
            span: 1400..1401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 50,
            column: 7,
            span: 1402..1408,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 8,
            span: 1408..1409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 50,
            column: 14,
            span: 1409..1415,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 15,
            span: 1415..1416,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"h\"",
        ),
        position: Position {
            line: 50,
            column: 18,
            span: 1416..1419,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 50,
            column: 19,
            span: 1419..1420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 50,
            column: 24,
            span: 1421..1425,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 25,
            span: 1425..1426,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"h\"",
        ),
        position: Position {
            line: 50,
            column: 28,
            span: 1426..1429,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 50,
            column: 29,
            span: 1429..1430,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fff",
            ),
        ),
        position: Position {
            line: 50,
            column: 36,
            span: 1430..1437,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 37,
            span: 1437..1438,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 38,
            span: 1438..1439,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 50,
            column: 41,
            span: 1440..1442,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fff",
            ),
        ),
        position: Position {
            line: 50,
            column: 48,
            span: 1442..1449,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 49,
            span: 1449..1450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 51,
            column: 7,
            span: 1451..1457,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 8,
            span: 1457..1458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 51,
            column: 14,
            span: 1458..1464,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 15,
            span: 1464..1465,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"h\"",
        ),
        position: Position {
            line: 51,
            column: 18,
            span: 1465..1468,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 51,
            column: 19,
            span: 1468..1469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 51,
            column: 24,
            span: 1470..1474,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 25,
            span: 1474..1475,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"h\"",
        ),
        position: Position {
            line: 51,
            column: 28,
            span: 1475..1478,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 51,
            column: 29,
            span: 1478..1479,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 51,
            column: 31,
            span: 1480..1481,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x8000",
            ),
        ),
        position: Position {
            line: 51,
            column: 37,
            span: 1480..1487,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 38,
            span: 1487..1488,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 39,
            span: 1488..1489,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 51,
            column: 42,
            span: 1490..1492,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 51,
            column: 44,
            span: 1493..1494,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x8000",
            ),
        ),
        position: Position {
            line: 51,
            column: 50,
            span: 1493..1500,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 51,
            span: 1500..1501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 53,
            column: 7,
            span: 1503..1509,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 8,
            span: 1509..1510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 53,
            column: 14,
            span: 1510..1516,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 15,
            span: 1516..1517,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 53,
            column: 18,
            span: 1517..1520,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 19,
            span: 1520..1521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 53,
            column: 24,
            span: 1522..1526,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 25,
            span: 1526..1527,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 53,
            column: 28,
            span: 1527..1530,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 29,
            span: 1530..1531,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        position: Position {
            line: 53,
            column: 40,
            span: 1531..1542,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 41,
            span: 1542..1543,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 42,
            span: 1543..1544,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 53,
            column: 45,
            span: 1545..1547,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        position: Position {
            line: 53,
            column: 56,
            span: 1547..1558,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 57,
            span: 1558..1559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 54,
            column: 7,
            span: 1560..1566,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 8,
            span: 1566..1567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 54,
            column: 14,
            span: 1567..1573,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 15,
            span: 1573..1574,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 54,
            column: 18,
            span: 1574..1577,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 19,
            span: 1577..1578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 54,
            column: 24,
            span: 1579..1583,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 25,
            span: 1583..1584,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 54,
            column: 28,
            span: 1584..1587,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 29,
            span: 1587..1588,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fffffff",
            ),
        ),
        position: Position {
            line: 54,
            column: 40,
            span: 1588..1599,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 41,
            span: 1599..1600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 42,
            span: 1600..1601,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 54,
            column: 45,
            span: 1602..1604,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fffffff",
            ),
        ),
        position: Position {
            line: 54,
            column: 56,
            span: 1604..1615,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 57,
            span: 1615..1616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 55,
            column: 7,
            span: 1617..1623,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 8,
            span: 1623..1624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 55,
            column: 14,
            span: 1624..1630,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 15,
            span: 1630..1631,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 55,
            column: 18,
            span: 1631..1634,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 19,
            span: 1634..1635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 55,
            column: 24,
            span: 1636..1640,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 25,
            span: 1640..1641,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 55,
            column: 28,
            span: 1641..1644,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 29,
            span: 1644..1645,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 55,
            column: 31,
            span: 1646..1647,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80000000",
            ),
        ),
        position: Position {
            line: 55,
            column: 41,
            span: 1646..1657,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 42,
            span: 1657..1658,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 43,
            span: 1658..1659,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 55,
            column: 46,
            span: 1660..1662,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 55,
            column: 48,
            span: 1663..1664,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80000000",
            ),
        ),
        position: Position {
            line: 55,
            column: 58,
            span: 1663..1674,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 59,
            span: 1674..1675,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 58,
            column: 4,
            span: 1678..1681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 58,
            column: 6,
            span: 1682..1683,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 58,
            column: 8,
            span: 1684..1685,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 58,
            column: 10,
            span: 1685..1687,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 11,
            span: 1687..1688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NB",
        ),
        position: Position {
            line: 58,
            column: 14,
            span: 1689..1691,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 58,
            column: 0,
            span: 1692..1694,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 60,
            column: 8,
            span: 1750..1755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 60,
            column: 10,
            span: 1756..1757,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 60,
            column: 12,
            span: 1758..1759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 60,
            column: 19,
            span: 1760..1766,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 60,
            column: 20,
            span: 1766..1767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 60,
            column: 23,
            span: 1767..1770,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 24,
            span: 1770..1771,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xff\"",
        ),
        position: Position {
            line: 60,
            column: 30,
            span: 1771..1777,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 31,
            span: 1777..1778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 60,
            column: 33,
            span: 1779..1780,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 34,
            span: 1780..1781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 61,
            column: 9,
            span: 1784..1790,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 10,
            span: 1790..1791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 61,
            column: 14,
            span: 1791..1795,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 15,
            span: 1795..1796,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        position: Position {
            line: 61,
            column: 18,
            span: 1796..1799,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 61,
            column: 21,
            span: 1800..1802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 61,
            column: 23,
            span: 1803..1804,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 24,
            span: 1804..1805,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 61,
            column: 26,
            span: 1806..1807,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 27,
            span: 1806..1808,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 28,
            span: 1808..1809,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 61,
            column: 31,
            span: 1810..1812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 61,
            column: 33,
            span: 1813..1814,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 34,
            span: 1814..1815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 62,
            column: 9,
            span: 1818..1824,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 10,
            span: 1824..1825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 62,
            column: 18,
            span: 1825..1833,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 19,
            span: 1833..1834,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        position: Position {
            line: 62,
            column: 22,
            span: 1834..1837,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 62,
            column: 25,
            span: 1838..1840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 62,
            column: 27,
            span: 1841..1842,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 28,
            span: 1842..1843,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 62,
            column: 31,
            span: 1844..1846,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 62,
            column: 33,
            span: 1847..1848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 62,
            column: 34,
            span: 1848..1849,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 35,
            span: 1849..1850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 63,
            column: 9,
            span: 1853..1859,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 10,
            span: 1859..1860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 63,
            column: 16,
            span: 1860..1866,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 17,
            span: 1866..1867,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        position: Position {
            line: 63,
            column: 20,
            span: 1867..1870,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 63,
            column: 23,
            span: 1871..1873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 63,
            column: 25,
            span: 1874..1875,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 63,
            column: 26,
            span: 1875..1876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 63,
            column: 28,
            span: 1877..1878,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 29,
            span: 1878..1879,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 63,
            column: 32,
            span: 1880..1882,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 63,
            column: 34,
            span: 1883..1884,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 63,
            column: 35,
            span: 1883..1885,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 36,
            span: 1885..1886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 66,
            column: 4,
            span: 1931..1932,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 66,
            column: 6,
            span: 1933..1934,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xAA\"",
        ),
        position: Position {
            line: 66,
            column: 13,
            span: 1935..1941,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 66,
            column: 16,
            span: 1942..1944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 66,
            column: 23,
            span: 1945..1951,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 66,
            column: 24,
            span: 1951..1952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 66,
            column: 27,
            span: 1952..1955,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 28,
            span: 1955..1956,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 66,
            column: 32,
            span: 1956..1960,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 33,
            span: 1960..1961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 66,
            column: 35,
            span: 1962..1963,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 66,
            column: 37,
            span: 1964..1965,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 39,
            span: 1965..1967,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 40,
            span: 1967..1968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 67,
            column: 9,
            span: 1971..1977,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 10,
            span: 1977..1978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 67,
            column: 14,
            span: 1978..1982,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 15,
            span: 1982..1983,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<I\"",
        ),
        position: Position {
            line: 67,
            column: 19,
            span: 1983..1987,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 67,
            column: 22,
            span: 1988..1990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 67,
            column: 24,
            span: 1991..1992,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 25,
            span: 1992..1993,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xAA",
            ),
        ),
        position: Position {
            line: 67,
            column: 30,
            span: 1993..1998,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 31,
            span: 1998..1999,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 67,
            column: 34,
            span: 2000..2002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 67,
            column: 36,
            span: 2003..2004,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 37,
            span: 2004..2005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 68,
            column: 9,
            span: 2008..2014,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 10,
            span: 2014..2015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 68,
            column: 16,
            span: 2015..2021,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 17,
            span: 2021..2022,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<I\"",
        ),
        position: Position {
            line: 68,
            column: 21,
            span: 2022..2026,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 68,
            column: 24,
            span: 2027..2029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 68,
            column: 26,
            span: 2030..2031,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 27,
            span: 2031..2032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 68,
            column: 29,
            span: 2033..2034,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 30,
            span: 2034..2035,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 68,
            column: 33,
            span: 2036..2038,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xAA",
            ),
        ),
        position: Position {
            line: 68,
            column: 38,
            span: 2038..2043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 39,
            span: 2043..2044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 69,
            column: 9,
            span: 2047..2053,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 10,
            span: 2053..2054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 69,
            column: 14,
            span: 2054..2058,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 15,
            span: 2058..2059,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">I\"",
        ),
        position: Position {
            line: 69,
            column: 19,
            span: 2059..2063,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 69,
            column: 22,
            span: 2064..2066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 69,
            column: 24,
            span: 2067..2068,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 25,
            span: 2068..2069,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xAA",
            ),
        ),
        position: Position {
            line: 69,
            column: 30,
            span: 2069..2074,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 31,
            span: 2074..2075,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 69,
            column: 34,
            span: 2076..2078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 69,
            column: 36,
            span: 2079..2080,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 69,
            column: 37,
            span: 2080..2081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        position: Position {
            line: 69,
            column: 44,
            span: 2081..2088,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 45,
            span: 2088..2089,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 46,
            span: 2089..2090,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 47,
            span: 2090..2091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 70,
            column: 9,
            span: 2094..2100,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 10,
            span: 2100..2101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 70,
            column: 16,
            span: 2101..2107,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 17,
            span: 2107..2108,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">I\"",
        ),
        position: Position {
            line: 70,
            column: 21,
            span: 2108..2112,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 70,
            column: 24,
            span: 2113..2115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 70,
            column: 26,
            span: 2116..2117,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 27,
            span: 2117..2118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 70,
            column: 29,
            span: 2119..2120,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 70,
            column: 30,
            span: 2120..2121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        position: Position {
            line: 70,
            column: 37,
            span: 2121..2128,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 38,
            span: 2128..2129,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 39,
            span: 2129..2130,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 40,
            span: 2130..2131,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 70,
            column: 43,
            span: 2132..2134,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xAA",
            ),
        ),
        position: Position {
            line: 70,
            column: 48,
            span: 2134..2139,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 49,
            span: 2139..2140,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 71,
            column: 0,
            span: 2141..2144,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 73,
            column: 0,
            span: 2146..2148,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 74,
            column: 8,
            span: 2151..2156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 74,
            column: 13,
            span: 2157..2161,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 74,
            column: 15,
            span: 2162..2163,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x13121110090807060504030201",
            ),
        ),
        position: Position {
            line: 74,
            column: 0,
            span: 2163..2192,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 75,
            column: 8,
            span: 2195..2200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 75,
            column: 10,
            span: 2201..2202,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 75,
            column: 12,
            span: 2203..2204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 75,
            column: 17,
            span: 2205..2209,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 18,
            span: 2209..2210,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<j\"",
        ),
        position: Position {
            line: 75,
            column: 22,
            span: 2210..2214,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 23,
            span: 2214..2215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 75,
            column: 28,
            span: 2216..2220,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 29,
            span: 2220..2221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 76,
            column: 9,
            span: 2224..2230,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 10,
            span: 2230..2231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 76,
            column: 16,
            span: 2231..2237,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 17,
            span: 2237..2238,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<j\"",
        ),
        position: Position {
            line: 76,
            column: 21,
            span: 2238..2242,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 22,
            span: 2242..2243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 76,
            column: 24,
            span: 2244..2245,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 25,
            span: 2245..2246,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 76,
            column: 28,
            span: 2247..2249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 76,
            column: 33,
            span: 2250..2254,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 34,
            span: 2254..2255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 77,
            column: 9,
            span: 2258..2264,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 10,
            span: 2264..2265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 77,
            column: 16,
            span: 2265..2271,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 17,
            span: 2271..2272,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 77,
            column: 21,
            span: 2272..2276,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 77,
            column: 24,
            span: 2277..2279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 77,
            column: 31,
            span: 2280..2286,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 77,
            column: 33,
            span: 2287..2288,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 35,
            span: 2288..2290,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 36,
            span: 2290..2291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 77,
            column: 38,
            span: 2292..2293,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 77,
            column: 41,
            span: 2294..2296,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 77,
            column: 46,
            span: 2297..2301,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 47,
            span: 2301..2302,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 77,
            column: 50,
            span: 2303..2305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 77,
            column: 55,
            span: 2306..2310,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 56,
            span: 2310..2311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 78,
            column: 9,
            span: 2314..2320,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 10,
            span: 2320..2321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 78,
            column: 16,
            span: 2321..2327,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 17,
            span: 2327..2328,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 78,
            column: 21,
            span: 2328..2332,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 78,
            column: 24,
            span: 2333..2335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 78,
            column: 31,
            span: 2336..2342,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 78,
            column: 33,
            span: 2343..2344,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 78,
            column: 35,
            span: 2344..2346,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 36,
            span: 2346..2347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 78,
            column: 38,
            span: 2348..2349,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 78,
            column: 41,
            span: 2350..2352,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 78,
            column: 46,
            span: 2353..2357,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 47,
            span: 2357..2358,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 78,
            column: 50,
            span: 2359..2361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 78,
            column: 55,
            span: 2362..2366,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 56,
            span: 2366..2367,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 80,
            column: 6,
            span: 2371..2374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 80,
            column: 8,
            span: 2375..2376,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 80,
            column: 10,
            span: 2377..2378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 80,
            column: 17,
            span: 2379..2385,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 80,
            column: 19,
            span: 2386..2387,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 21,
            span: 2387..2389,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 22,
            span: 2389..2390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NB",
        ),
        position: Position {
            line: 80,
            column: 25,
            span: 2391..2393,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 80,
            column: 0,
            span: 2394..2396,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 81,
            column: 10,
            span: 2401..2406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 81,
            column: 12,
            span: 2407..2408,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 81,
            column: 14,
            span: 2409..2410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 81,
            column: 19,
            span: 2411..2415,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 20,
            span: 2415..2416,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<j\"",
        ),
        position: Position {
            line: 81,
            column: 24,
            span: 2416..2420,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 25,
            span: 2420..2421,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 81,
            column: 27,
            span: 2422..2423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 81,
            column: 31,
            span: 2423..2427,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 32,
            span: 2427..2428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 82,
            column: 11,
            span: 2433..2439,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 12,
            span: 2439..2440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 82,
            column: 18,
            span: 2440..2446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 19,
            span: 2446..2447,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<j\"",
        ),
        position: Position {
            line: 82,
            column: 23,
            span: 2447..2451,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 82,
            column: 24,
            span: 2451..2452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 82,
            column: 26,
            span: 2453..2454,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 27,
            span: 2454..2455,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 82,
            column: 30,
            span: 2456..2458,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 82,
            column: 32,
            span: 2459..2460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 82,
            column: 36,
            span: 2460..2464,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 37,
            span: 2464..2465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 84,
            column: 11,
            span: 2512..2518,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 12,
            span: 2518..2519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 84,
            column: 18,
            span: 2519..2525,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 19,
            span: 2525..2526,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 84,
            column: 23,
            span: 2526..2530,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 84,
            column: 26,
            span: 2531..2533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 84,
            column: 28,
            span: 2534..2535,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 84,
            column: 29,
            span: 2535..2536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 84,
            column: 31,
            span: 2537..2538,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 84,
            column: 34,
            span: 2539..2541,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 36,
            span: 2542..2543,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xFF\"",
        ),
        position: Position {
            line: 84,
            column: 42,
            span: 2543..2549,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 43,
            span: 2549..2550,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 84,
            column: 44,
            span: 2550..2551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 84,
            column: 47,
            span: 2551..2554,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 48,
            span: 2554..2555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 84,
            column: 49,
            span: 2555..2556,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 84,
            column: 51,
            span: 2557..2558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 84,
            column: 58,
            span: 2559..2565,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 59,
            span: 2565..2566,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 60,
            span: 2566..2567,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 84,
            column: 63,
            span: 2568..2570,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 84,
            column: 65,
            span: 2571..2572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 84,
            column: 69,
            span: 2572..2576,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 70,
            span: 2576..2577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 85,
            column: 11,
            span: 2582..2588,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 12,
            span: 2588..2589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 85,
            column: 18,
            span: 2589..2595,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 19,
            span: 2595..2596,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 85,
            column: 23,
            span: 2596..2600,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 85,
            column: 26,
            span: 2601..2603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 85,
            column: 28,
            span: 2604..2605,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 29,
            span: 2605..2606,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 31,
            span: 2607..2608,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xFF\"",
        ),
        position: Position {
            line: 85,
            column: 37,
            span: 2608..2614,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 38,
            span: 2614..2615,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 85,
            column: 39,
            span: 2615..2616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 85,
            column: 42,
            span: 2616..2619,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 43,
            span: 2619..2620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 85,
            column: 44,
            span: 2620..2621,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 85,
            column: 46,
            span: 2622..2623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 85,
            column: 53,
            span: 2624..2630,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 54,
            span: 2630..2631,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 85,
            column: 57,
            span: 2632..2634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 85,
            column: 59,
            span: 2635..2636,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 85,
            column: 60,
            span: 2636..2637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        position: Position {
            line: 85,
            column: 67,
            span: 2637..2644,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 68,
            span: 2644..2645,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 69,
            span: 2645..2646,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 70,
            span: 2646..2647,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 85,
            column: 73,
            span: 2648..2650,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 85,
            column: 75,
            span: 2651..2652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 85,
            column: 79,
            span: 2652..2656,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 80,
            span: 2656..2657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 86,
            column: 11,
            span: 2662..2668,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 12,
            span: 2668..2669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 86,
            column: 18,
            span: 2669..2675,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 19,
            span: 2675..2676,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<I\"",
        ),
        position: Position {
            line: 86,
            column: 23,
            span: 2676..2680,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 86,
            column: 26,
            span: 2681..2683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 86,
            column: 28,
            span: 2684..2685,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 29,
            span: 2685..2686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 86,
            column: 31,
            span: 2687..2688,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 86,
            column: 34,
            span: 2689..2691,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 36,
            span: 2692..2693,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 86,
            column: 40,
            span: 2693..2697,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 41,
            span: 2697..2698,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 86,
            column: 42,
            span: 2698..2699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 86,
            column: 45,
            span: 2699..2702,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 46,
            span: 2702..2703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 86,
            column: 47,
            span: 2703..2704,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 86,
            column: 49,
            span: 2705..2706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 86,
            column: 56,
            span: 2707..2713,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 57,
            span: 2713..2714,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 58,
            span: 2714..2715,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 86,
            column: 61,
            span: 2716..2718,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 86,
            column: 63,
            span: 2719..2720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 86,
            column: 67,
            span: 2720..2724,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 68,
            span: 2724..2725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 89,
            column: 15,
            span: 2748..2758,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 16,
            span: 2758..2759,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"does not fit\"",
        ),
        position: Position {
            line: 89,
            column: 30,
            span: 2759..2773,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 31,
            span: 2773..2774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 89,
            column: 38,
            span: 2775..2781,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 39,
            span: 2781..2782,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<I\"",
        ),
        position: Position {
            line: 89,
            column: 44,
            span: 2783..2787,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 89,
            column: 47,
            span: 2788..2790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 89,
            column: 49,
            span: 2791..2792,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 50,
            span: 2792..2793,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 52,
            span: 2794..2795,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x00\"",
        ),
        position: Position {
            line: 89,
            column: 58,
            span: 2795..2801,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 59,
            span: 2801..2802,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 89,
            column: 60,
            span: 2802..2803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 89,
            column: 63,
            span: 2803..2806,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 64,
            span: 2806..2807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 89,
            column: 65,
            span: 2807..2808,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 89,
            column: 67,
            span: 2809..2810,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 69,
            span: 2810..2812,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 70,
            span: 2812..2813,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 89,
            column: 73,
            span: 2814..2816,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\1\"",
        ),
        position: Position {
            line: 89,
            column: 78,
            span: 2817..2821,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 79,
            span: 2821..2822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 90,
            column: 15,
            span: 2827..2837,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 16,
            span: 2837..2838,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"does not fit\"",
        ),
        position: Position {
            line: 90,
            column: 30,
            span: 2838..2852,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 31,
            span: 2852..2853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 90,
            column: 38,
            span: 2854..2860,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 39,
            span: 2860..2861,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 90,
            column: 44,
            span: 2862..2866,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 90,
            column: 47,
            span: 2867..2869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 90,
            column: 49,
            span: 2870..2871,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 50,
            span: 2871..2872,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\1\"",
        ),
        position: Position {
            line: 90,
            column: 55,
            span: 2873..2877,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 90,
            column: 58,
            span: 2878..2880,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 60,
            span: 2881..2882,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x00\"",
        ),
        position: Position {
            line: 90,
            column: 66,
            span: 2882..2888,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 67,
            span: 2888..2889,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 90,
            column: 68,
            span: 2889..2890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 90,
            column: 71,
            span: 2890..2893,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 72,
            span: 2893..2894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 90,
            column: 73,
            span: 2894..2895,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 90,
            column: 75,
            span: 2896..2897,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 90,
            column: 77,
            span: 2897..2899,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 78,
            span: 2899..2900,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 79,
            span: 2900..2901,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 91,
            column: 0,
            span: 2904..2907,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 92,
            column: 0,
            span: 2908..2911,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 94,
            column: 4,
            span: 2913..2916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 94,
            column: 6,
            span: 2917..2918,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 94,
            column: 8,
            span: 2919..2920,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 94,
            column: 10,
            span: 2920..2922,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 94,
            column: 11,
            span: 2922..2923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 94,
            column: 18,
            span: 2924..2930,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 94,
            column: 0,
            span: 2931..2933,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 95,
            column: 8,
            span: 2936..2941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lstr",
        ),
        position: Position {
            line: 95,
            column: 13,
            span: 2942..2946,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 95,
            column: 15,
            span: 2947..2948,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\1\\2\\3\\4\\5\\6\\7\\8\\9\\10\\11\\12\\13\"",
        ),
        position: Position {
            line: 95,
            column: 48,
            span: 2949..2981,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 96,
            column: 8,
            span: 2984..2989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 96,
            column: 13,
            span: 2990..2994,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 96,
            column: 15,
            span: 2995..2996,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x13121110090807060504030201",
            ),
        ),
        position: Position {
            line: 96,
            column: 0,
            span: 2996..3025,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 97,
            column: 8,
            span: 3028..3033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 97,
            column: 10,
            span: 3034..3035,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 97,
            column: 12,
            span: 3036..3037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lnum",
        ),
        position: Position {
            line: 97,
            column: 17,
            span: 3038..3042,
        },
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        position: Position {
            line: 97,
            column: 19,
            span: 3043..3044,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 21,
            span: 3045..3046,
        },
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        position: Position {
            line: 97,
            column: 22,
            span: 3046..3047,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 23,
            span: 3047..3048,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 97,
            column: 24,
            span: 3048..3049,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 25,
            span: 3048..3050,
        },
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        position: Position {
            line: 97,
            column: 28,
            span: 3051..3053,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 30,
            span: 3054..3055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 97,
            column: 31,
            span: 3055..3056,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 97,
            column: 33,
            span: 3057..3058,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 35,
            span: 3058..3060,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 36,
            span: 3060..3061,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 37,
            span: 3061..3062,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 38,
            span: 3062..3063,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 98,
            column: 8,
            span: 3066..3071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 98,
            column: 10,
            span: 3072..3073,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 98,
            column: 12,
            span: 3074..3075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 98,
            column: 19,
            span: 3076..3082,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 98,
            column: 20,
            span: 3082..3083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 98,
            column: 23,
            span: 3083..3086,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 24,
            span: 3086..3087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lstr",
        ),
        position: Position {
            line: 98,
            column: 28,
            span: 3087..3091,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 29,
            span: 3091..3092,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 31,
            span: 3092..3094,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 32,
            span: 3094..3095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 98,
            column: 34,
            span: 3096..3097,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 35,
            span: 3097..3098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 99,
            column: 9,
            span: 3101..3107,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 10,
            span: 3107..3108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 99,
            column: 14,
            span: 3108..3112,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 15,
            span: 3112..3113,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 99,
            column: 19,
            span: 3113..3117,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 99,
            column: 22,
            span: 3118..3120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 99,
            column: 24,
            span: 3121..3122,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 99,
            column: 25,
            span: 3122..3123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 99,
            column: 27,
            span: 3124..3125,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 28,
            span: 3125..3126,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 99,
            column: 31,
            span: 3127..3129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 99,
            column: 33,
            span: 3130..3131,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 34,
            span: 3131..3132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 100,
            column: 9,
            span: 3135..3141,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 10,
            span: 3141..3142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 100,
            column: 14,
            span: 3142..3146,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 15,
            span: 3146..3147,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 100,
            column: 19,
            span: 3147..3151,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 100,
            column: 22,
            span: 3152..3154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 100,
            column: 24,
            span: 3155..3156,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 100,
            column: 25,
            span: 3156..3157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 100,
            column: 27,
            span: 3158..3159,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 28,
            span: 3159..3160,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 100,
            column: 31,
            span: 3161..3163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 100,
            column: 33,
            span: 3164..3165,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 100,
            column: 34,
            span: 3165..3166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        position: Position {
            line: 100,
            column: 41,
            span: 3166..3173,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 42,
            span: 3173..3174,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 43,
            span: 3174..3175,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 44,
            span: 3175..3176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 101,
            column: 9,
            span: 3179..3185,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 10,
            span: 3185..3186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 101,
            column: 16,
            span: 3186..3192,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 17,
            span: 3192..3193,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 101,
            column: 21,
            span: 3193..3197,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 101,
            column: 24,
            span: 3198..3200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 101,
            column: 26,
            span: 3201..3202,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 101,
            column: 27,
            span: 3202..3203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 101,
            column: 29,
            span: 3204..3205,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 101,
            column: 30,
            span: 3205..3206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        position: Position {
            line: 101,
            column: 37,
            span: 3206..3213,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 38,
            span: 3213..3214,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 39,
            span: 3214..3215,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 40,
            span: 3215..3216,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 101,
            column: 43,
            span: 3217..3219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 101,
            column: 45,
            span: 3220..3221,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 46,
            span: 3221..3222,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 102,
            column: 0,
            span: 3223..3226,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 105,
            column: 0,
            span: 3246..3248,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 106,
            column: 8,
            span: 3251..3256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 106,
            column: 10,
            span: 3257..3258,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 106,
            column: 12,
            span: 3259..3260,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xf0",
            ),
        ),
        position: Position {
            line: 106,
            column: 0,
            span: 3260..3265,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 107,
            column: 6,
            span: 3268..3271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 107,
            column: 8,
            span: 3272..3273,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 107,
            column: 10,
            span: 3274..3275,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 12,
            span: 3275..3277,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 13,
            span: 3277..3278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 107,
            column: 20,
            span: 3279..3285,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 107,
            column: 22,
            span: 3286..3287,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 24,
            span: 3287..3289,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 107,
            column: 0,
            span: 3290..3292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 108,
            column: 11,
            span: 3297..3303,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 12,
            span: 3303..3304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 108,
            column: 18,
            span: 3304..3310,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 19,
            span: 3310..3311,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 108,
            column: 23,
            span: 3311..3315,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 108,
            column: 25,
            span: 3315..3317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 108,
            column: 26,
            span: 3317..3318,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 27,
            span: 3318..3319,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xf0\"",
        ),
        position: Position {
            line: 108,
            column: 34,
            span: 3320..3326,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 108,
            column: 36,
            span: 3326..3328,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 37,
            span: 3328..3329,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xff\"",
        ),
        position: Position {
            line: 108,
            column: 43,
            span: 3329..3335,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 44,
            span: 3335..3336,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 108,
            column: 45,
            span: 3336..3337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 108,
            column: 48,
            span: 3337..3340,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 49,
            span: 3340..3341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 108,
            column: 50,
            span: 3341..3342,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 108,
            column: 52,
            span: 3343..3344,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 54,
            span: 3344..3346,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 55,
            span: 3346..3347,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 56,
            span: 3347..3348,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 108,
            column: 59,
            span: 3349..3351,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 108,
            column: 61,
            span: 3352..3353,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 63,
            span: 3352..3355,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 64,
            span: 3355..3356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 109,
            column: 11,
            span: 3361..3367,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 12,
            span: 3367..3368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 109,
            column: 18,
            span: 3368..3374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 19,
            span: 3374..3375,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">I\"",
        ),
        position: Position {
            line: 109,
            column: 23,
            span: 3375..3379,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 109,
            column: 25,
            span: 3379..3381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 109,
            column: 26,
            span: 3381..3382,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 109,
            column: 27,
            span: 3382..3383,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xf0\"",
        ),
        position: Position {
            line: 109,
            column: 34,
            span: 3384..3390,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 109,
            column: 36,
            span: 3390..3392,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 37,
            span: 3392..3393,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xff\"",
        ),
        position: Position {
            line: 109,
            column: 43,
            span: 3393..3399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 44,
            span: 3399..3400,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 109,
            column: 45,
            span: 3400..3401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 109,
            column: 48,
            span: 3401..3404,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 49,
            span: 3404..3405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 109,
            column: 50,
            span: 3405..3406,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 109,
            column: 52,
            span: 3407..3408,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 109,
            column: 54,
            span: 3408..3410,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 55,
            span: 3410..3411,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 56,
            span: 3411..3412,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 109,
            column: 59,
            span: 3413..3415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 109,
            column: 61,
            span: 3416..3417,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 62,
            span: 3417..3418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 110,
            column: 6,
            span: 3423..3424,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 110,
            column: 8,
            span: 3425..3426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 110,
            column: 10,
            span: 3427..3428,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 110,
            column: 12,
            span: 3429..3430,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "256",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 16,
            span: 3430..3434,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 110,
            column: 18,
            span: 3435..3436,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xff",
            ),
        ),
        position: Position {
            line: 110,
            column: 0,
            span: 3436..3441,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 111,
            column: 0,
            span: 3444..3447,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 112,
            column: 0,
            span: 3448..3451,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 115,
            column: 0,
            span: 3473..3475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 116,
            column: 9,
            span: 3478..3484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 10,
            span: 3484..3485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 116,
            column: 14,
            span: 3485..3489,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 15,
            span: 3489..3490,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i2 <i2\"",
        ),
        position: Position {
            line: 116,
            column: 24,
            span: 3490..3499,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 25,
            span: 3499..3500,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 116,
            column: 28,
            span: 3500..3503,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 116,
            column: 29,
            span: 3503..3504,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 116,
            column: 32,
            span: 3504..3507,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 33,
            span: 3507..3508,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 116,
            column: 36,
            span: 3509..3511,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\10\\20\\0\"",
        ),
        position: Position {
            line: 116,
            column: 49,
            span: 3512..3524,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 50,
            span: 3524..3525,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 117,
            column: 8,
            span: 3528..3533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 117,
            column: 10,
            span: 3534..3535,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 11,
            span: 3535..3536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 117,
            column: 13,
            span: 3537..3538,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 117,
            column: 15,
            span: 3539..3540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 117,
            column: 22,
            span: 3541..3547,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 23,
            span: 3547..3548,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i2 >i2\"",
        ),
        position: Position {
            line: 117,
            column: 32,
            span: 3548..3557,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 117,
            column: 33,
            span: 3557..3558,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\10\\0\\0\\20\"",
        ),
        position: Position {
            line: 117,
            column: 46,
            span: 3559..3571,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 47,
            span: 3571..3572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 118,
            column: 9,
            span: 3575..3581,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 10,
            span: 3581..3582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 118,
            column: 11,
            span: 3582..3583,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 118,
            column: 14,
            span: 3584..3586,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 118,
            column: 17,
            span: 3586..3589,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 118,
            column: 21,
            span: 3590..3593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 118,
            column: 23,
            span: 3594..3595,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 118,
            column: 26,
            span: 3596..3598,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 118,
            column: 29,
            span: 3598..3601,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 30,
            span: 3601..3602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 119,
            column: 9,
            span: 3605..3611,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 10,
            span: 3611..3612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 119,
            column: 14,
            span: 3612..3616,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 15,
            span: 3616..3617,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=i4\"",
        ),
        position: Position {
            line: 119,
            column: 20,
            span: 3617..3622,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 21,
            span: 3622..3623,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2001",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 119,
            column: 26,
            span: 3623..3628,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 27,
            span: 3628..3629,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 119,
            column: 30,
            span: 3630..3632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 119,
            column: 35,
            span: 3633..3637,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 36,
            span: 3637..3638,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i4\"",
        ),
        position: Position {
            line: 119,
            column: 40,
            span: 3638..3642,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 119,
            column: 41,
            span: 3642..3643,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2001",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 119,
            column: 46,
            span: 3643..3648,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 47,
            span: 3648..3649,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 48,
            span: 3649..3650,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 120,
            column: 0,
            span: 3651..3654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 122,
            column: 6,
            span: 3656..3661,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 122,
            column: 7,
            span: 3661..3662,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing invalid formats\"",
        ),
        position: Position {
            line: 122,
            column: 32,
            span: 3662..3687,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 122,
            column: 33,
            span: 3687..3688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 124,
            column: 11,
            span: 3690..3700,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 12,
            span: 3700..3701,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of limits\"",
        ),
        position: Position {
            line: 124,
            column: 27,
            span: 3701..3716,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 28,
            span: 3716..3717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 124,
            column: 33,
            span: 3718..3722,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 34,
            span: 3722..3723,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i0\"",
        ),
        position: Position {
            line: 124,
            column: 39,
            span: 3724..3728,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 40,
            span: 3728..3729,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 124,
            column: 42,
            span: 3729..3731,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 43,
            span: 3731..3732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 125,
            column: 11,
            span: 3733..3743,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 12,
            span: 3743..3744,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of limits\"",
        ),
        position: Position {
            line: 125,
            column: 27,
            span: 3744..3759,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 28,
            span: 3759..3760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 125,
            column: 33,
            span: 3761..3765,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 34,
            span: 3765..3766,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        position: Position {
            line: 125,
            column: 38,
            span: 3767..3770,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 125,
            column: 41,
            span: 3771..3773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NB",
        ),
        position: Position {
            line: 125,
            column: 44,
            span: 3774..3776,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 125,
            column: 46,
            span: 3777..3778,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 125,
            column: 48,
            span: 3778..3780,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 49,
            span: 3780..3781,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 125,
            column: 51,
            span: 3781..3783,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 52,
            span: 3783..3784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 126,
            column: 11,
            span: 3785..3795,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 12,
            span: 3795..3796,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of limits\"",
        ),
        position: Position {
            line: 126,
            column: 27,
            span: 3796..3811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 28,
            span: 3811..3812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 126,
            column: 33,
            span: 3813..3817,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 34,
            span: 3817..3818,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!\"",
        ),
        position: Position {
            line: 126,
            column: 38,
            span: 3819..3822,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 126,
            column: 41,
            span: 3823..3825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NB",
        ),
        position: Position {
            line: 126,
            column: 44,
            span: 3826..3828,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 126,
            column: 46,
            span: 3829..3830,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 126,
            column: 48,
            span: 3830..3832,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 49,
            span: 3832..3833,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 126,
            column: 51,
            span: 3833..3835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 52,
            span: 3835..3836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 127,
            column: 11,
            span: 3837..3847,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 12,
            span: 3847..3848,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%(17%) out of limits %[1,16%]\"",
        ),
        position: Position {
            line: 127,
            column: 43,
            span: 3848..3879,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 44,
            span: 3879..3880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 127,
            column: 49,
            span: 3881..3885,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 50,
            span: 3885..3886,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Xi\"",
        ),
        position: Position {
            line: 127,
            column: 55,
            span: 3887..3891,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 127,
            column: 58,
            span: 3892..3894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NB",
        ),
        position: Position {
            line: 127,
            column: 61,
            span: 3895..3897,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 127,
            column: 63,
            span: 3898..3899,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 127,
            column: 65,
            span: 3899..3901,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 66,
            span: 3901..3902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 128,
            column: 11,
            span: 3903..3913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 12,
            span: 3913..3914,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid format option 'r'\"",
        ),
        position: Position {
            line: 128,
            column: 39,
            span: 3914..3941,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 40,
            span: 3941..3942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 128,
            column: 45,
            span: 3943..3947,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 46,
            span: 3947..3948,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i3r\"",
        ),
        position: Position {
            line: 128,
            column: 52,
            span: 3949..3954,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 53,
            span: 3954..3955,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 55,
            span: 3955..3957,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 56,
            span: 3957..3958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 129,
            column: 11,
            span: 3959..3969,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 12,
            span: 3969..3970,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"16%-byte integer\"",
        ),
        position: Position {
            line: 129,
            column: 30,
            span: 3970..3988,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 31,
            span: 3988..3989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 129,
            column: 38,
            span: 3990..3996,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 39,
            span: 3996..3997,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i16\"",
        ),
        position: Position {
            line: 129,
            column: 45,
            span: 3998..4003,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 46,
            span: 4003..4004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 129,
            column: 53,
            span: 4005..4011,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 129,
            column: 54,
            span: 4011..4012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 129,
            column: 57,
            span: 4012..4015,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 58,
            span: 4015..4016,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\3'",
        ),
        position: Position {
            line: 129,
            column: 62,
            span: 4016..4020,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 63,
            span: 4020..4021,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 66,
            span: 4021..4024,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 67,
            span: 4024..4025,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 68,
            span: 4025..4026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 130,
            column: 11,
            span: 4027..4037,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 12,
            span: 4037..4038,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not power of 2\"",
        ),
        position: Position {
            line: 130,
            column: 28,
            span: 4038..4054,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 29,
            span: 4054..4055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 130,
            column: 34,
            span: 4056..4060,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 35,
            span: 4060..4061,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!4i3\"",
        ),
        position: Position {
            line: 130,
            column: 42,
            span: 4062..4068,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 43,
            span: 4068..4069,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 130,
            column: 45,
            span: 4069..4071,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 46,
            span: 4071..4072,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 130,
            column: 47,
            span: 4072..4073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 131,
            column: 11,
            span: 4074..4084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 12,
            span: 4084..4085,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"missing size\"",
        ),
        position: Position {
            line: 131,
            column: 26,
            span: 4085..4099,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 27,
            span: 4099..4100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 131,
            column: 32,
            span: 4101..4105,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 33,
            span: 4105..4106,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        position: Position {
            line: 131,
            column: 37,
            span: 4107..4110,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 131,
            column: 38,
            span: 4110..4111,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 131,
            column: 41,
            span: 4112..4114,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 42,
            span: 4114..4115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 132,
            column: 11,
            span: 4116..4126,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 132,
            column: 12,
            span: 4126..4127,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"variable%-length format\"",
        ),
        position: Position {
            line: 132,
            column: 37,
            span: 4127..4152,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 132,
            column: 38,
            span: 4152..4153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 132,
            column: 47,
            span: 4154..4162,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 132,
            column: 48,
            span: 4162..4163,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s\"",
        ),
        position: Position {
            line: 132,
            column: 52,
            span: 4164..4167,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 132,
            column: 53,
            span: 4167..4168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 133,
            column: 11,
            span: 4169..4179,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 12,
            span: 4179..4180,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"variable%-length format\"",
        ),
        position: Position {
            line: 133,
            column: 37,
            span: 4180..4205,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 133,
            column: 38,
            span: 4205..4206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 133,
            column: 47,
            span: 4207..4215,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 133,
            column: 48,
            span: 4215..4216,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z\"",
        ),
        position: Position {
            line: 133,
            column: 52,
            span: 4217..4220,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 53,
            span: 4220..4221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 136,
            column: 11,
            span: 4288..4298,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 12,
            span: 4298..4299,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid format\"",
        ),
        position: Position {
            line: 136,
            column: 28,
            span: 4299..4315,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 29,
            span: 4315..4316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 136,
            column: 38,
            span: 4317..4325,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 39,
            span: 4325..4326,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c1\"",
        ),
        position: Position {
            line: 136,
            column: 44,
            span: 4327..4331,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 136,
            column: 47,
            span: 4332..4334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 136,
            column: 54,
            span: 4335..4341,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 136,
            column: 55,
            span: 4341..4342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 136,
            column: 58,
            span: 4342..4345,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 59,
            span: 4345..4346,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        position: Position {
            line: 136,
            column: 62,
            span: 4346..4349,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 63,
            span: 4349..4350,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 136,
            column: 66,
            span: 4350..4353,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 67,
            span: 4353..4354,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 68,
            span: 4354..4355,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 138,
            column: 3,
            span: 4357..4359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 138,
            column: 12,
            span: 4360..4368,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 13,
            span: 4368..4369,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        position: Position {
            line: 138,
            column: 16,
            span: 4369..4372,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 17,
            span: 4372..4373,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 138,
            column: 20,
            span: 4374..4376,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 138,
            column: 22,
            span: 4376..4378,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 138,
            column: 0,
            span: 4379..4383,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 140,
            column: 8,
            span: 4447..4452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 140,
            column: 10,
            span: 4453..4454,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 140,
            column: 12,
            span: 4455..4456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 140,
            column: 19,
            span: 4457..4463,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 140,
            column: 20,
            span: 4463..4464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 140,
            column: 23,
            span: 4464..4467,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 140,
            column: 24,
            span: 4467..4468,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c268435456\"",
        ),
        position: Position {
            line: 140,
            column: 36,
            span: 4468..4480,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 37,
            span: 4480..4481,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 39,
            span: 4481..4483,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 140,
            column: 40,
            span: 4483..4484,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 41,
            span: 4483..4485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 42,
            span: 4485..4486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 141,
            column: 13,
            span: 4489..4499,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 141,
            column: 14,
            span: 4499..4500,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too large\"",
        ),
        position: Position {
            line: 141,
            column: 25,
            span: 4500..4511,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 26,
            span: 4511..4512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 141,
            column: 35,
            span: 4513..4521,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 36,
            span: 4521..4522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 141,
            column: 38,
            span: 4523..4524,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 141,
            column: 39,
            span: 4524..4525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 143,
            column: 4,
            span: 4548..4549,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 143,
            column: 6,
            span: 4550..4551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 143,
            column: 13,
            span: 4552..4558,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 143,
            column: 14,
            span: 4558..4559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 143,
            column: 17,
            span: 4559..4562,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 18,
            span: 4562..4563,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c268435456\"",
        ),
        position: Position {
            line: 143,
            column: 30,
            span: 4563..4575,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 143,
            column: 31,
            span: 4575..4576,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 143,
            column: 33,
            span: 4576..4578,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 143,
            column: 34,
            span: 4578..4579,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 143,
            column: 35,
            span: 4578..4580,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 143,
            column: 37,
            span: 4581..4582,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 143,
            column: 39,
            span: 4582..4584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 40,
            span: 4584..4585,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 143,
            column: 43,
            span: 4586..4588,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c268435455\"",
        ),
        position: Position {
            line: 143,
            column: 56,
            span: 4589..4601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 144,
            column: 9,
            span: 4604..4610,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 10,
            span: 4610..4611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 144,
            column: 18,
            span: 4611..4619,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 19,
            span: 4619..4620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 144,
            column: 20,
            span: 4620..4621,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 21,
            span: 4621..4622,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 144,
            column: 24,
            span: 4623..4625,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fffffff",
            ),
        ),
        position: Position {
            line: 144,
            column: 35,
            span: 4625..4636,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 36,
            span: 4636..4637,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 145,
            column: 0,
            span: 4638..4641,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 148,
            column: 4,
            span: 4666..4669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 148,
            column: 6,
            span: 4670..4671,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 148,
            column: 8,
            span: 4672..4673,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 10,
            span: 4673..4675,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 11,
            span: 4675..4676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sizeLI",
        ),
        position: Position {
            line: 148,
            column: 18,
            span: 4677..4683,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 148,
            column: 20,
            span: 4684..4685,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 22,
            span: 4685..4687,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 148,
            column: 0,
            span: 4688..4690,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 149,
            column: 8,
            span: 4693..4698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "umax",
        ),
        position: Position {
            line: 149,
            column: 13,
            span: 4699..4703,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 149,
            column: 15,
            span: 4704..4705,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 17,
            span: 4706..4707,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 18,
            span: 4706..4708,
        },
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        position: Position {
            line: 149,
            column: 21,
            span: 4709..4711,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 23,
            span: 4712..4713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 149,
            column: 24,
            span: 4713..4714,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 149,
            column: 26,
            span: 4715..4716,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 28,
            span: 4716..4718,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 29,
            span: 4718..4719,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 30,
            span: 4719..4720,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 149,
            column: 32,
            span: 4721..4722,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 149,
            column: 0,
            span: 4722..4724,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 150,
            column: 8,
            span: 4727..4732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 150,
            column: 12,
            span: 4733..4736,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 150,
            column: 14,
            span: 4737..4738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "umax",
        ),
        position: Position {
            line: 150,
            column: 19,
            span: 4739..4743,
        },
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        position: Position {
            line: 150,
            column: 22,
            span: 4744..4746,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 0,
            span: 4746..4748,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 151,
            column: 8,
            span: 4751..4756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 151,
            column: 12,
            span: 4757..4760,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 151,
            column: 14,
            span: 4761..4762,
        },
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        position: Position {
            line: 151,
            column: 16,
            span: 4763..4764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 151,
            column: 0,
            span: 4764..4767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 152,
            column: 13,
            span: 4770..4780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 14,
            span: 4780..4781,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 152,
            column: 24,
            span: 4781..4791,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 25,
            span: 4791..4792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 152,
            column: 30,
            span: 4793..4797,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 31,
            span: 4797..4798,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<I\"",
        ),
        position: Position {
            line: 152,
            column: 36,
            span: 4799..4803,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 152,
            column: 39,
            span: 4804..4806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 152,
            column: 41,
            span: 4807..4808,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 42,
            span: 4808..4809,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 152,
            column: 44,
            span: 4810..4811,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 45,
            span: 4810..4812,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 46,
            span: 4812..4813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 153,
            column: 13,
            span: 4816..4826,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 14,
            span: 4826..4827,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 153,
            column: 24,
            span: 4827..4837,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 25,
            span: 4837..4838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 153,
            column: 30,
            span: 4839..4843,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 31,
            span: 4843..4844,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<I\"",
        ),
        position: Position {
            line: 153,
            column: 36,
            span: 4845..4849,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 153,
            column: 39,
            span: 4850..4852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 153,
            column: 41,
            span: 4853..4854,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 42,
            span: 4854..4855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 153,
            column: 46,
            span: 4856..4859,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 47,
            span: 4859..4860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 154,
            column: 13,
            span: 4863..4873,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 14,
            span: 4873..4874,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 154,
            column: 24,
            span: 4874..4884,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 154,
            column: 25,
            span: 4884..4885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 154,
            column: 30,
            span: 4886..4890,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 154,
            column: 31,
            span: 4890..4891,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">I\"",
        ),
        position: Position {
            line: 154,
            column: 36,
            span: 4892..4896,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 154,
            column: 39,
            span: 4897..4899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 154,
            column: 41,
            span: 4900..4901,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 154,
            column: 42,
            span: 4901..4902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "umax",
        ),
        position: Position {
            line: 154,
            column: 47,
            span: 4903..4907,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 154,
            column: 49,
            span: 4908..4909,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 154,
            column: 51,
            span: 4909..4911,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 52,
            span: 4911..4912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 156,
            column: 13,
            span: 4916..4926,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 14,
            span: 4926..4927,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 156,
            column: 24,
            span: 4927..4937,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 25,
            span: 4937..4938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 156,
            column: 30,
            span: 4939..4943,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 31,
            span: 4943..4944,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 156,
            column: 36,
            span: 4945..4949,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 156,
            column: 39,
            span: 4950..4952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 156,
            column: 41,
            span: 4953..4954,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 156,
            column: 42,
            span: 4954..4955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "umax",
        ),
        position: Position {
            line: 156,
            column: 47,
            span: 4956..4960,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 48,
            span: 4960..4961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 157,
            column: 13,
            span: 4964..4974,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 157,
            column: 14,
            span: 4974..4975,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 157,
            column: 24,
            span: 4975..4985,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 25,
            span: 4985..4986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 157,
            column: 30,
            span: 4987..4991,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 31,
            span: 4991..4992,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 157,
            column: 36,
            span: 4993..4997,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 157,
            column: 39,
            span: 4998..5000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 157,
            column: 41,
            span: 5001..5002,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 42,
            span: 5002..5003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 157,
            column: 46,
            span: 5004..5007,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 157,
            column: 48,
            span: 5008..5009,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 50,
            span: 5009..5011,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 51,
            span: 5011..5012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 158,
            column: 13,
            span: 5015..5025,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 158,
            column: 14,
            span: 5025..5026,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 158,
            column: 24,
            span: 5026..5036,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 158,
            column: 25,
            span: 5036..5037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 158,
            column: 30,
            span: 5038..5042,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 158,
            column: 31,
            span: 5042..5043,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 158,
            column: 36,
            span: 5044..5048,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 158,
            column: 39,
            span: 5049..5051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 158,
            column: 41,
            span: 5052..5053,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 158,
            column: 42,
            span: 5053..5054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 158,
            column: 46,
            span: 5055..5058,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 158,
            column: 48,
            span: 5059..5060,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 158,
            column: 50,
            span: 5060..5062,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 158,
            column: 51,
            span: 5062..5063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 160,
            column: 9,
            span: 5067..5073,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 10,
            span: 5073..5074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 160,
            column: 16,
            span: 5074..5080,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 17,
            span: 5080..5081,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 160,
            column: 21,
            span: 5081..5085,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 160,
            column: 24,
            span: 5086..5088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 160,
            column: 26,
            span: 5089..5090,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 27,
            span: 5090..5091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 160,
            column: 32,
            span: 5092..5096,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 33,
            span: 5096..5097,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">i\"",
        ),
        position: Position {
            line: 160,
            column: 37,
            span: 5097..5101,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 160,
            column: 40,
            span: 5102..5104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 160,
            column: 42,
            span: 5105..5106,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 43,
            span: 5106..5107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 160,
            column: 47,
            span: 5108..5111,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 48,
            span: 5111..5112,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 49,
            span: 5112..5113,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 160,
            column: 52,
            span: 5114..5116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 160,
            column: 56,
            span: 5117..5120,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 57,
            span: 5120..5121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 161,
            column: 9,
            span: 5124..5130,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 10,
            span: 5130..5131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 161,
            column: 16,
            span: 5131..5137,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 17,
            span: 5137..5138,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 161,
            column: 21,
            span: 5138..5142,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 161,
            column: 24,
            span: 5143..5145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 161,
            column: 26,
            span: 5146..5147,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 161,
            column: 27,
            span: 5147..5148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 161,
            column: 32,
            span: 5149..5153,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 33,
            span: 5153..5154,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<i\"",
        ),
        position: Position {
            line: 161,
            column: 37,
            span: 5154..5158,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 161,
            column: 40,
            span: 5159..5161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 161,
            column: 42,
            span: 5162..5163,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 161,
            column: 43,
            span: 5163..5164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 161,
            column: 47,
            span: 5165..5168,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 48,
            span: 5168..5169,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 49,
            span: 5169..5170,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 161,
            column: 52,
            span: 5171..5173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        position: Position {
            line: 161,
            column: 56,
            span: 5174..5177,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 57,
            span: 5177..5178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 162,
            column: 9,
            span: 5181..5187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 10,
            span: 5187..5188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 162,
            column: 16,
            span: 5188..5194,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 17,
            span: 5194..5195,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">I\"",
        ),
        position: Position {
            line: 162,
            column: 21,
            span: 5195..5199,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 162,
            column: 24,
            span: 5200..5202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 162,
            column: 26,
            span: 5203..5204,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 27,
            span: 5204..5205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 162,
            column: 32,
            span: 5206..5210,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 33,
            span: 5210..5211,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">I\"",
        ),
        position: Position {
            line: 162,
            column: 37,
            span: 5211..5215,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 162,
            column: 40,
            span: 5216..5218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 162,
            column: 42,
            span: 5219..5220,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 43,
            span: 5220..5221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "umax",
        ),
        position: Position {
            line: 162,
            column: 48,
            span: 5222..5226,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 49,
            span: 5226..5227,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 50,
            span: 5227..5228,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 162,
            column: 53,
            span: 5229..5231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "umax",
        ),
        position: Position {
            line: 162,
            column: 58,
            span: 5232..5236,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 59,
            span: 5236..5237,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 163,
            column: 0,
            span: 5238..5241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 166,
            column: 7,
            span: 5263..5269,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 8,
            span: 5269..5270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 166,
            column: 14,
            span: 5270..5276,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 15,
            span: 5276..5277,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">j\"",
        ),
        position: Position {
            line: 166,
            column: 19,
            span: 5277..5281,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 166,
            column: 20,
            span: 5281..5282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 166,
            column: 25,
            span: 5283..5287,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 26,
            span: 5287..5288,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">j\"",
        ),
        position: Position {
            line: 166,
            column: 30,
            span: 5288..5292,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 166,
            column: 31,
            span: 5292..5293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 166,
            column: 36,
            span: 5294..5298,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 166,
            column: 37,
            span: 5298..5299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        position: Position {
            line: 166,
            column: 47,
            span: 5299..5309,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 48,
            span: 5309..5310,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 49,
            span: 5310..5311,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 166,
            column: 52,
            span: 5312..5314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 166,
            column: 57,
            span: 5315..5319,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 166,
            column: 58,
            span: 5319..5320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        position: Position {
            line: 166,
            column: 68,
            span: 5320..5330,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 69,
            span: 5330..5331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 167,
            column: 7,
            span: 5332..5338,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 8,
            span: 5338..5339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 167,
            column: 14,
            span: 5339..5345,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 15,
            span: 5345..5346,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<j\"",
        ),
        position: Position {
            line: 167,
            column: 19,
            span: 5346..5350,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 167,
            column: 20,
            span: 5350..5351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 167,
            column: 25,
            span: 5352..5356,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 26,
            span: 5356..5357,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<j\"",
        ),
        position: Position {
            line: 167,
            column: 30,
            span: 5357..5361,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 167,
            column: 31,
            span: 5361..5362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 167,
            column: 36,
            span: 5363..5367,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 37,
            span: 5367..5368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mininteger",
        ),
        position: Position {
            line: 167,
            column: 47,
            span: 5368..5378,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 48,
            span: 5378..5379,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 49,
            span: 5379..5380,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 167,
            column: 52,
            span: 5381..5383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 167,
            column: 57,
            span: 5384..5388,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 58,
            span: 5388..5389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mininteger",
        ),
        position: Position {
            line: 167,
            column: 68,
            span: 5389..5399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 69,
            span: 5399..5400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 168,
            column: 7,
            span: 5401..5407,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 8,
            span: 5407..5408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 168,
            column: 14,
            span: 5408..5414,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 15,
            span: 5414..5415,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<J\"",
        ),
        position: Position {
            line: 168,
            column: 19,
            span: 5415..5419,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 20,
            span: 5419..5420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 168,
            column: 25,
            span: 5421..5425,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 26,
            span: 5425..5426,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<j\"",
        ),
        position: Position {
            line: 168,
            column: 30,
            span: 5426..5430,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 31,
            span: 5430..5431,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 168,
            column: 33,
            span: 5432..5433,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 168,
            column: 34,
            span: 5432..5434,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 35,
            span: 5434..5435,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 36,
            span: 5435..5436,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 168,
            column: 39,
            span: 5437..5439,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 168,
            column: 41,
            span: 5440..5441,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 168,
            column: 42,
            span: 5440..5442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 43,
            span: 5442..5443,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 170,
            column: 3,
            span: 5475..5477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "little",
        ),
        position: Position {
            line: 170,
            column: 10,
            span: 5478..5484,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 170,
            column: 0,
            span: 5485..5489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 171,
            column: 9,
            span: 5492..5498,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 10,
            span: 5498..5499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 171,
            column: 14,
            span: 5499..5503,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 15,
            span: 5503..5504,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        position: Position {
            line: 171,
            column: 18,
            span: 5504..5507,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 19,
            span: 5507..5508,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 171,
            column: 22,
            span: 5508..5511,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 23,
            span: 5511..5512,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 171,
            column: 26,
            span: 5513..5515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 171,
            column: 31,
            span: 5516..5520,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 32,
            span: 5520..5521,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<f\"",
        ),
        position: Position {
            line: 171,
            column: 36,
            span: 5521..5525,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 37,
            span: 5525..5526,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 171,
            column: 40,
            span: 5526..5529,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 41,
            span: 5529..5530,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 42,
            span: 5530..5531,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 172,
            column: 0,
            span: 5532..5536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 173,
            column: 9,
            span: 5539..5545,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 10,
            span: 5545..5546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 173,
            column: 14,
            span: 5546..5550,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 15,
            span: 5550..5551,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        position: Position {
            line: 173,
            column: 18,
            span: 5551..5554,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 173,
            column: 19,
            span: 5554..5555,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 173,
            column: 22,
            span: 5555..5558,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 23,
            span: 5558..5559,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 173,
            column: 26,
            span: 5560..5562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 173,
            column: 31,
            span: 5563..5567,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 32,
            span: 5567..5568,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">f\"",
        ),
        position: Position {
            line: 173,
            column: 36,
            span: 5568..5572,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 173,
            column: 37,
            span: 5572..5573,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 173,
            column: 40,
            span: 5573..5576,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 41,
            span: 5576..5577,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 42,
            span: 5577..5578,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 174,
            column: 0,
            span: 5579..5582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 176,
            column: 6,
            span: 5584..5589,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing pack/unpack of floating-point numbers\"",
        ),
        position: Position {
            line: 176,
            column: 54,
            span: 5590..5637,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 178,
            column: 4,
            span: 5640..5643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 178,
            column: 6,
            span: 5644..5645,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 7,
            span: 5645..5646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 178,
            column: 9,
            span: 5647..5648,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 178,
            column: 12,
            span: 5649..5651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 178,
            column: 19,
            span: 5652..5658,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 178,
            column: 20,
            span: 5658..5659,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 21,
            span: 5658..5660,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 22,
            span: 5660..5661,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 178,
            column: 24,
            span: 5662..5663,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 27,
            span: 5662..5666,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 28,
            span: 5666..5667,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".9",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 32,
            span: 5667..5671,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 33,
            span: 5671..5672,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 35,
            span: 5672..5674,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 178,
            column: 36,
            span: 5674..5675,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 37,
            span: 5674..5676,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 38,
            span: 5676..5677,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 178,
            column: 40,
            span: 5678..5679,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 41,
            span: 5678..5680,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 178,
            column: 42,
            span: 5680..5681,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 43,
            span: 5680..5682,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 44,
            span: 5682..5683,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "20",
            },
        ),
        position: Position {
            line: 178,
            column: 49,
            span: 5683..5688,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 50,
            span: 5688..5689,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 178,
            column: 52,
            span: 5690..5691,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "20",
            },
        ),
        position: Position {
            line: 178,
            column: 56,
            span: 5690..5695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 57,
            span: 5695..5696,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 61,
            span: 5696..5700,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 62,
            span: 5700..5701,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: ".7",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 69,
            span: 5701..5708,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 178,
            column: 70,
            span: 5708..5709,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 178,
            column: 0,
            span: 5710..5712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 179,
            column: 11,
            span: 5717..5723,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 12,
            span: 5723..5724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 179,
            column: 18,
            span: 5724..5730,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 19,
            span: 5730..5731,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 179,
            column: 22,
            span: 5731..5734,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 179,
            column: 23,
            span: 5734..5735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 179,
            column: 28,
            span: 5736..5740,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 29,
            span: 5740..5741,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 179,
            column: 32,
            span: 5741..5744,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 179,
            column: 33,
            span: 5744..5745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 179,
            column: 35,
            span: 5746..5747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 36,
            span: 5747..5748,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 37,
            span: 5748..5749,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 179,
            column: 40,
            span: 5750..5752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 179,
            column: 42,
            span: 5753..5754,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 43,
            span: 5754..5755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 180,
            column: 11,
            span: 5760..5766,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 12,
            span: 5766..5767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 180,
            column: 18,
            span: 5767..5773,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 19,
            span: 5773..5774,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<n\"",
        ),
        position: Position {
            line: 180,
            column: 23,
            span: 5774..5778,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 180,
            column: 24,
            span: 5778..5779,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 180,
            column: 29,
            span: 5780..5784,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 30,
            span: 5784..5785,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<n\"",
        ),
        position: Position {
            line: 180,
            column: 34,
            span: 5785..5789,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 180,
            column: 35,
            span: 5789..5790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 180,
            column: 37,
            span: 5791..5792,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 38,
            span: 5792..5793,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 39,
            span: 5793..5794,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 180,
            column: 42,
            span: 5795..5797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 180,
            column: 44,
            span: 5798..5799,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 45,
            span: 5799..5800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 181,
            column: 11,
            span: 5805..5811,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 12,
            span: 5811..5812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 181,
            column: 18,
            span: 5812..5818,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 19,
            span: 5818..5819,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">n\"",
        ),
        position: Position {
            line: 181,
            column: 23,
            span: 5819..5823,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 181,
            column: 24,
            span: 5823..5824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 181,
            column: 29,
            span: 5825..5829,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 30,
            span: 5829..5830,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">n\"",
        ),
        position: Position {
            line: 181,
            column: 34,
            span: 5830..5834,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 181,
            column: 35,
            span: 5834..5835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 181,
            column: 37,
            span: 5836..5837,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 38,
            span: 5837..5838,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 39,
            span: 5838..5839,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 181,
            column: 42,
            span: 5840..5842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 181,
            column: 44,
            span: 5843..5844,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 45,
            span: 5844..5845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 182,
            column: 11,
            span: 5850..5856,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 12,
            span: 5856..5857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 182,
            column: 16,
            span: 5857..5861,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 17,
            span: 5861..5862,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<f\"",
        ),
        position: Position {
            line: 182,
            column: 21,
            span: 5862..5866,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 182,
            column: 22,
            span: 5866..5867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 182,
            column: 24,
            span: 5868..5869,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 25,
            span: 5869..5870,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 182,
            column: 28,
            span: 5871..5873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 182,
            column: 33,
            span: 5874..5878,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 34,
            span: 5878..5879,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">f\"",
        ),
        position: Position {
            line: 182,
            column: 38,
            span: 5879..5883,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 182,
            column: 39,
            span: 5883..5884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 182,
            column: 41,
            span: 5885..5886,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 42,
            span: 5886..5887,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 182,
            column: 43,
            span: 5887..5888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        position: Position {
            line: 182,
            column: 50,
            span: 5888..5895,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 51,
            span: 5895..5896,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 52,
            span: 5896..5897,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 53,
            span: 5897..5898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 183,
            column: 11,
            span: 5903..5909,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 12,
            span: 5909..5910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 183,
            column: 16,
            span: 5910..5914,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 17,
            span: 5914..5915,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">d\"",
        ),
        position: Position {
            line: 183,
            column: 21,
            span: 5915..5919,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 183,
            column: 22,
            span: 5919..5920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 183,
            column: 24,
            span: 5921..5922,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 25,
            span: 5922..5923,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 183,
            column: 28,
            span: 5924..5926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 183,
            column: 33,
            span: 5927..5931,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 34,
            span: 5931..5932,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<d\"",
        ),
        position: Position {
            line: 183,
            column: 38,
            span: 5932..5936,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 183,
            column: 39,
            span: 5936..5937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 183,
            column: 41,
            span: 5938..5939,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 42,
            span: 5939..5940,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 183,
            column: 43,
            span: 5940..5941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        position: Position {
            line: 183,
            column: 50,
            span: 5941..5948,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 51,
            span: 5948..5949,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 52,
            span: 5949..5950,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 53,
            span: 5950..5951,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 184,
            column: 0,
            span: 5952..5955,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 187,
            column: 4,
            span: 6018..6021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 187,
            column: 6,
            span: 6022..6023,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 7,
            span: 6023..6024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 187,
            column: 9,
            span: 6025..6026,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 187,
            column: 12,
            span: 6027..6029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        position: Position {
            line: 187,
            column: 19,
            span: 6030..6036,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 187,
            column: 20,
            span: 6036..6037,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 21,
            span: 6036..6038,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 22,
            span: 6038..6039,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 187,
            column: 24,
            span: 6040..6041,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 27,
            span: 6040..6044,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 28,
            span: 6044..6045,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 30,
            span: 6045..6047,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 187,
            column: 31,
            span: 6047..6048,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 32,
            span: 6047..6049,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 33,
            span: 6049..6050,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 187,
            column: 35,
            span: 6051..6052,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 36,
            span: 6051..6053,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 187,
            column: 37,
            span: 6053..6054,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 38,
            span: 6053..6055,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 39,
            span: 6055..6056,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "10",
            },
        ),
        position: Position {
            line: 187,
            column: 44,
            span: 6056..6061,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 45,
            span: 6061..6062,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 187,
            column: 47,
            span: 6063..6064,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "9",
            },
        ),
        position: Position {
            line: 187,
            column: 50,
            span: 6063..6067,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 51,
            span: 6067..6068,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 55,
            span: 6068..6072,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 56,
            span: 6072..6073,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: ".25",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 64,
            span: 6073..6081,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 187,
            column: 65,
            span: 6081..6082,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 187,
            column: 0,
            span: 6083..6085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 188,
            column: 9,
            span: 6088..6094,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 10,
            span: 6094..6095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 188,
            column: 16,
            span: 6095..6101,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 17,
            span: 6101..6102,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<f\"",
        ),
        position: Position {
            line: 188,
            column: 21,
            span: 6102..6106,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 22,
            span: 6106..6107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 188,
            column: 27,
            span: 6108..6112,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 28,
            span: 6112..6113,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<f\"",
        ),
        position: Position {
            line: 188,
            column: 32,
            span: 6113..6117,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 33,
            span: 6117..6118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 188,
            column: 35,
            span: 6119..6120,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 36,
            span: 6120..6121,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 37,
            span: 6121..6122,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 188,
            column: 40,
            span: 6123..6125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 188,
            column: 42,
            span: 6126..6127,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 43,
            span: 6127..6128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 189,
            column: 9,
            span: 6131..6137,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 10,
            span: 6137..6138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 189,
            column: 16,
            span: 6138..6144,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 17,
            span: 6144..6145,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">f\"",
        ),
        position: Position {
            line: 189,
            column: 21,
            span: 6145..6149,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 22,
            span: 6149..6150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 189,
            column: 27,
            span: 6151..6155,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 28,
            span: 6155..6156,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">f\"",
        ),
        position: Position {
            line: 189,
            column: 32,
            span: 6156..6160,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 33,
            span: 6160..6161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 189,
            column: 35,
            span: 6162..6163,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 36,
            span: 6163..6164,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 37,
            span: 6164..6165,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 189,
            column: 40,
            span: 6166..6168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 189,
            column: 42,
            span: 6169..6170,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 43,
            span: 6170..6171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 190,
            column: 9,
            span: 6174..6180,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 10,
            span: 6180..6181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 190,
            column: 16,
            span: 6181..6187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 17,
            span: 6187..6188,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<d\"",
        ),
        position: Position {
            line: 190,
            column: 21,
            span: 6188..6192,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 190,
            column: 22,
            span: 6192..6193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 190,
            column: 27,
            span: 6194..6198,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 28,
            span: 6198..6199,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<d\"",
        ),
        position: Position {
            line: 190,
            column: 32,
            span: 6199..6203,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 190,
            column: 33,
            span: 6203..6204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 190,
            column: 35,
            span: 6205..6206,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 36,
            span: 6206..6207,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 37,
            span: 6207..6208,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 190,
            column: 40,
            span: 6209..6211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 190,
            column: 42,
            span: 6212..6213,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 43,
            span: 6213..6214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 191,
            column: 9,
            span: 6217..6223,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 10,
            span: 6223..6224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 191,
            column: 16,
            span: 6224..6230,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 17,
            span: 6230..6231,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">d\"",
        ),
        position: Position {
            line: 191,
            column: 21,
            span: 6231..6235,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 22,
            span: 6235..6236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 191,
            column: 27,
            span: 6237..6241,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 28,
            span: 6241..6242,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">d\"",
        ),
        position: Position {
            line: 191,
            column: 32,
            span: 6242..6246,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 33,
            span: 6246..6247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 191,
            column: 35,
            span: 6248..6249,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 36,
            span: 6249..6250,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 37,
            span: 6250..6251,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 191,
            column: 40,
            span: 6252..6254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 191,
            column: 42,
            span: 6255..6256,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 43,
            span: 6256..6257,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 192,
            column: 0,
            span: 6258..6261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 194,
            column: 6,
            span: 6263..6268,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing pack/unpack of strings\"",
        ),
        position: Position {
            line: 194,
            column: 39,
            span: 6269..6301,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 195,
            column: 0,
            span: 6302..6304,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 196,
            column: 8,
            span: 6307..6312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 196,
            column: 10,
            span: 6313..6314,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 196,
            column: 12,
            span: 6315..6316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 196,
            column: 19,
            span: 6317..6323,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 196,
            column: 20,
            span: 6323..6324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 196,
            column: 23,
            span: 6324..6327,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 24,
            span: 6327..6328,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 196,
            column: 29,
            span: 6328..6333,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 196,
            column: 30,
            span: 6333..6334,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 196,
            column: 35,
            span: 6334..6339,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 36,
            span: 6339..6340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 197,
            column: 9,
            span: 6343..6349,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 10,
            span: 6349..6350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 197,
            column: 14,
            span: 6350..6354,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 15,
            span: 6354..6355,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"zB\"",
        ),
        position: Position {
            line: 197,
            column: 19,
            span: 6355..6359,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 20,
            span: 6359..6360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 197,
            column: 22,
            span: 6361..6362,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 23,
            span: 6362..6363,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "247",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 197,
            column: 27,
            span: 6363..6367,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 28,
            span: 6367..6368,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 197,
            column: 31,
            span: 6369..6371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 197,
            column: 33,
            span: 6372..6373,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 197,
            column: 36,
            span: 6374..6376,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\xF7\"",
        ),
        position: Position {
            line: 197,
            column: 45,
            span: 6377..6385,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 46,
            span: 6385..6386,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 198,
            column: 8,
            span: 6389..6394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 198,
            column: 11,
            span: 6395..6397,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 198,
            column: 12,
            span: 6397..6398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 198,
            column: 14,
            span: 6399..6400,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 198,
            column: 16,
            span: 6401..6402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 198,
            column: 23,
            span: 6403..6409,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 198,
            column: 24,
            span: 6409..6410,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"zB\"",
        ),
        position: Position {
            line: 198,
            column: 28,
            span: 6410..6414,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 198,
            column: 29,
            span: 6414..6415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 198,
            column: 31,
            span: 6416..6417,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 198,
            column: 34,
            span: 6418..6420,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\xF9\"",
        ),
        position: Position {
            line: 198,
            column: 43,
            span: 6421..6429,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 198,
            column: 44,
            span: 6429..6430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 199,
            column: 9,
            span: 6433..6439,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 199,
            column: 10,
            span: 6439..6440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 199,
            column: 11,
            span: 6440..6441,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 199,
            column: 14,
            span: 6442..6444,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "249",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 199,
            column: 18,
            span: 6444..6448,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 199,
            column: 22,
            span: 6449..6452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 199,
            column: 25,
            span: 6453..6455,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 199,
            column: 28,
            span: 6456..6458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 199,
            column: 30,
            span: 6459..6460,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 199,
            column: 31,
            span: 6460..6461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 200,
            column: 5,
            span: 6464..6466,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 200,
            column: 7,
            span: 6467..6468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 200,
            column: 12,
            span: 6469..6473,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 200,
            column: 13,
            span: 6473..6474,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s\"",
        ),
        position: Position {
            line: 200,
            column: 16,
            span: 6474..6477,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 17,
            span: 6477..6478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 200,
            column: 19,
            span: 6479..6480,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 200,
            column: 20,
            span: 6480..6481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 201,
            column: 9,
            span: 6484..6490,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 10,
            span: 6490..6491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 201,
            column: 16,
            span: 6491..6497,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 17,
            span: 6497..6498,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s\"",
        ),
        position: Position {
            line: 201,
            column: 20,
            span: 6498..6501,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 201,
            column: 21,
            span: 6501..6502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 201,
            column: 24,
            span: 6503..6505,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 201,
            column: 25,
            span: 6505..6506,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 201,
            column: 28,
            span: 6507..6509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 201,
            column: 30,
            span: 6510..6511,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 201,
            column: 31,
            span: 6511..6512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 203,
            column: 13,
            span: 6516..6526,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 14,
            span: 6526..6527,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"does not fit\"",
        ),
        position: Position {
            line: 203,
            column: 28,
            span: 6527..6541,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 29,
            span: 6541..6542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 203,
            column: 34,
            span: 6543..6547,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 35,
            span: 6547..6548,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s1\"",
        ),
        position: Position {
            line: 203,
            column: 40,
            span: 6549..6553,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 41,
            span: 6553..6554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 203,
            column: 43,
            span: 6555..6556,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 44,
            span: 6556..6557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 205,
            column: 13,
            span: 6561..6571,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 14,
            span: 6571..6572,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"contains zeros\"",
        ),
        position: Position {
            line: 205,
            column: 30,
            span: 6572..6588,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 31,
            span: 6588..6589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 205,
            column: 36,
            span: 6590..6594,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 37,
            span: 6594..6595,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"z\"",
        ),
        position: Position {
            line: 205,
            column: 41,
            span: 6596..6599,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 42,
            span: 6599..6600,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\0\"",
        ),
        position: Position {
            line: 205,
            column: 50,
            span: 6601..6608,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 51,
            span: 6608..6609,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 205,
            column: 52,
            span: 6609..6610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 207,
            column: 13,
            span: 6614..6624,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 14,
            span: 6624..6625,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unfinished string\"",
        ),
        position: Position {
            line: 207,
            column: 33,
            span: 6625..6644,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 34,
            span: 6644..6645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 207,
            column: 41,
            span: 6646..6652,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 42,
            span: 6652..6653,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"zc10000000\"",
        ),
        position: Position {
            line: 207,
            column: 55,
            span: 6654..6666,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 56,
            span: 6666..6667,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 207,
            column: 62,
            span: 6668..6673,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 63,
            span: 6673..6674,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 209,
            column: 6,
            span: 6678..6681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 209,
            column: 8,
            span: 6682..6683,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 209,
            column: 10,
            span: 6684..6685,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 209,
            column: 12,
            span: 6685..6687,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 13,
            span: 6687..6688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NB",
        ),
        position: Position {
            line: 209,
            column: 16,
            span: 6689..6691,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 209,
            column: 0,
            span: 6692..6694,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 210,
            column: 10,
            span: 6699..6704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 210,
            column: 13,
            span: 6705..6707,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 210,
            column: 15,
            span: 6708..6709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 210,
            column: 20,
            span: 6710..6714,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 21,
            span: 6714..6715,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s\"",
        ),
        position: Position {
            line: 210,
            column: 24,
            span: 6715..6718,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 210,
            column: 27,
            span: 6719..6721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 210,
            column: 29,
            span: 6722..6723,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 30,
            span: 6723..6724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 210,
            column: 32,
            span: 6725..6726,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 33,
            span: 6726..6727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 211,
            column: 11,
            span: 6732..6738,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 211,
            column: 12,
            span: 6738..6739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 211,
            column: 18,
            span: 6739..6745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 211,
            column: 19,
            span: 6745..6746,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s\"",
        ),
        position: Position {
            line: 211,
            column: 22,
            span: 6746..6749,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 211,
            column: 25,
            span: 6750..6752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 211,
            column: 27,
            span: 6753..6754,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 28,
            span: 6754..6755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 211,
            column: 31,
            span: 6756..6758,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 211,
            column: 32,
            span: 6758..6759,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 211,
            column: 35,
            span: 6760..6762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 211,
            column: 37,
            span: 6763..6764,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 211,
            column: 41,
            span: 6765..6768,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 211,
            column: 43,
            span: 6769..6770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 211,
            column: 45,
            span: 6770..6772,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 211,
            column: 48,
            span: 6773..6775,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 211,
            column: 50,
            span: 6776..6777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 211,
            column: 51,
            span: 6777..6778,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 211,
            column: 53,
            span: 6779..6780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 211,
            column: 55,
            span: 6781..6782,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 211,
            column: 56,
            span: 6782..6783,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 212,
            column: 0,
            span: 6786..6789,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 213,
            column: 0,
            span: 6790..6793,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 215,
            column: 0,
            span: 6795..6797,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 216,
            column: 8,
            span: 6800..6805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 216,
            column: 10,
            span: 6806..6807,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 216,
            column: 12,
            span: 6808..6809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 216,
            column: 17,
            span: 6810..6814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 216,
            column: 18,
            span: 6814..6815,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s\"",
        ),
        position: Position {
            line: 216,
            column: 21,
            span: 6815..6818,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 22,
            span: 6818..6819,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 216,
            column: 28,
            span: 6820..6825,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 216,
            column: 29,
            span: 6825..6826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 217,
            column: 13,
            span: 6829..6839,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 14,
            span: 6839..6840,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too short\"",
        ),
        position: Position {
            line: 217,
            column: 25,
            span: 6840..6851,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 217,
            column: 26,
            span: 6851..6852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 217,
            column: 33,
            span: 6853..6859,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 217,
            column: 34,
            span: 6859..6860,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s\"",
        ),
        position: Position {
            line: 217,
            column: 38,
            span: 6861..6864,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 217,
            column: 39,
            span: 6864..6865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 217,
            column: 41,
            span: 6866..6867,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 217,
            column: 42,
            span: 6867..6868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 217,
            column: 45,
            span: 6868..6871,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 46,
            span: 6871..6872,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 217,
            column: 47,
            span: 6871..6873,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 217,
            column: 48,
            span: 6873..6874,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 217,
            column: 50,
            span: 6875..6876,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 217,
            column: 51,
            span: 6875..6877,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 52,
            span: 6877..6878,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 53,
            span: 6878..6879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 218,
            column: 13,
            span: 6882..6892,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 218,
            column: 14,
            span: 6892..6893,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too short\"",
        ),
        position: Position {
            line: 218,
            column: 25,
            span: 6893..6904,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 26,
            span: 6904..6905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 218,
            column: 33,
            span: 6906..6912,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 34,
            span: 6912..6913,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c5\"",
        ),
        position: Position {
            line: 218,
            column: 39,
            span: 6914..6918,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 40,
            span: 6918..6919,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcd\"",
        ),
        position: Position {
            line: 218,
            column: 47,
            span: 6920..6926,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 218,
            column: 48,
            span: 6926..6927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 219,
            column: 13,
            span: 6930..6940,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 219,
            column: 14,
            span: 6940..6941,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of limits\"",
        ),
        position: Position {
            line: 219,
            column: 29,
            span: 6941..6956,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 30,
            span: 6956..6957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 219,
            column: 35,
            span: 6958..6962,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 36,
            span: 6962..6963,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s100\"",
        ),
        position: Position {
            line: 219,
            column: 43,
            span: 6964..6970,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 44,
            span: 6970..6971,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 219,
            column: 50,
            span: 6972..6977,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 219,
            column: 51,
            span: 6977..6978,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 220,
            column: 0,
            span: 6979..6982,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 222,
            column: 0,
            span: 6984..6986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 223,
            column: 9,
            span: 6989..6995,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 10,
            span: 6995..6996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 223,
            column: 14,
            span: 6996..7000,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 15,
            span: 7000..7001,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c0\"",
        ),
        position: Position {
            line: 223,
            column: 19,
            span: 7001..7005,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 20,
            span: 7005..7006,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 223,
            column: 23,
            span: 7007..7009,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 24,
            span: 7009..7010,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 223,
            column: 27,
            span: 7011..7013,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 223,
            column: 30,
            span: 7014..7016,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 31,
            span: 7016..7017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 224,
            column: 9,
            span: 7020..7026,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 10,
            span: 7026..7027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 224,
            column: 18,
            span: 7027..7035,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 19,
            span: 7035..7036,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c0\"",
        ),
        position: Position {
            line: 224,
            column: 23,
            span: 7036..7040,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 24,
            span: 7040..7041,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 224,
            column: 27,
            span: 7042..7044,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 29,
            span: 7044..7046,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 30,
            span: 7046..7047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 225,
            column: 9,
            span: 7050..7056,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 10,
            span: 7056..7057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 225,
            column: 16,
            span: 7057..7063,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 17,
            span: 7063..7064,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c0\"",
        ),
        position: Position {
            line: 225,
            column: 21,
            span: 7064..7068,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 22,
            span: 7068..7069,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 225,
            column: 25,
            span: 7070..7072,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 26,
            span: 7072..7073,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 225,
            column: 29,
            span: 7074..7076,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 225,
            column: 32,
            span: 7077..7079,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 33,
            span: 7079..7080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 226,
            column: 9,
            span: 7083..7089,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 10,
            span: 7089..7090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 226,
            column: 14,
            span: 7090..7094,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 15,
            span: 7094..7095,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<! c3\"",
        ),
        position: Position {
            line: 226,
            column: 22,
            span: 7095..7102,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 23,
            span: 7102..7103,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 226,
            column: 29,
            span: 7104..7109,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 30,
            span: 7109..7110,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 226,
            column: 33,
            span: 7111..7113,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 226,
            column: 39,
            span: 7114..7119,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 40,
            span: 7119..7120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 227,
            column: 9,
            span: 7123..7129,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 10,
            span: 7129..7130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 227,
            column: 18,
            span: 7130..7138,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 19,
            span: 7138..7139,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<! c3\"",
        ),
        position: Position {
            line: 227,
            column: 26,
            span: 7139..7146,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 27,
            span: 7146..7147,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 227,
            column: 30,
            span: 7148..7150,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 227,
            column: 32,
            span: 7150..7152,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 33,
            span: 7152..7153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 228,
            column: 9,
            span: 7156..7162,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 10,
            span: 7162..7163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 228,
            column: 14,
            span: 7163..7167,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 15,
            span: 7167..7168,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">!4 c6\"",
        ),
        position: Position {
            line: 228,
            column: 23,
            span: 7168..7176,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 228,
            column: 24,
            span: 7176..7177,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdef\"",
        ),
        position: Position {
            line: 228,
            column: 33,
            span: 7178..7186,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 228,
            column: 34,
            span: 7186..7187,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 228,
            column: 37,
            span: 7188..7190,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdef\"",
        ),
        position: Position {
            line: 228,
            column: 46,
            span: 7191..7199,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 228,
            column: 47,
            span: 7199..7200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 229,
            column: 9,
            span: 7203..7209,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 229,
            column: 10,
            span: 7209..7210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 229,
            column: 14,
            span: 7210..7214,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 229,
            column: 15,
            span: 7214..7215,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c3\"",
        ),
        position: Position {
            line: 229,
            column: 19,
            span: 7215..7219,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 20,
            span: 7219..7220,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123\"",
        ),
        position: Position {
            line: 229,
            column: 26,
            span: 7221..7226,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 229,
            column: 27,
            span: 7226..7227,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 229,
            column: 30,
            span: 7228..7230,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123\"",
        ),
        position: Position {
            line: 229,
            column: 36,
            span: 7231..7236,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 229,
            column: 37,
            span: 7236..7237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 230,
            column: 9,
            span: 7240..7246,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 10,
            span: 7246..7247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 230,
            column: 14,
            span: 7247..7251,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 15,
            span: 7251..7252,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c0\"",
        ),
        position: Position {
            line: 230,
            column: 19,
            span: 7252..7256,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 20,
            span: 7256..7257,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 230,
            column: 23,
            span: 7258..7260,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 24,
            span: 7260..7261,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 230,
            column: 27,
            span: 7262..7264,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 230,
            column: 30,
            span: 7265..7267,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 31,
            span: 7267..7268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 231,
            column: 9,
            span: 7271..7277,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 10,
            span: 7277..7278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 231,
            column: 14,
            span: 7278..7282,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 15,
            span: 7282..7283,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c8\"",
        ),
        position: Position {
            line: 231,
            column: 19,
            span: 7283..7287,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 231,
            column: 20,
            span: 7287..7288,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456\"",
        ),
        position: Position {
            line: 231,
            column: 29,
            span: 7289..7297,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 231,
            column: 30,
            span: 7297..7298,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 231,
            column: 33,
            span: 7299..7301,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456\\0\\0\"",
        ),
        position: Position {
            line: 231,
            column: 46,
            span: 7302..7314,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 231,
            column: 47,
            span: 7314..7315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 232,
            column: 9,
            span: 7318..7324,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 10,
            span: 7324..7325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 232,
            column: 14,
            span: 7325..7329,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 15,
            span: 7329..7330,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c88\"",
        ),
        position: Position {
            line: 232,
            column: 20,
            span: 7330..7335,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 21,
            span: 7335..7336,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 232,
            column: 24,
            span: 7337..7339,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 25,
            span: 7339..7340,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 232,
            column: 28,
            span: 7341..7343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 232,
            column: 35,
            span: 7344..7350,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 232,
            column: 36,
            span: 7350..7351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 232,
            column: 39,
            span: 7351..7354,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 40,
            span: 7354..7355,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 232,
            column: 44,
            span: 7355..7359,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 45,
            span: 7359..7360,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "88",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 232,
            column: 48,
            span: 7360..7363,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 49,
            span: 7363..7364,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 50,
            span: 7364..7365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 233,
            column: 9,
            span: 7368..7374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 10,
            span: 7374..7375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 233,
            column: 14,
            span: 7375..7379,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 15,
            span: 7379..7380,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c188\"",
        ),
        position: Position {
            line: 233,
            column: 21,
            span: 7380..7386,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 22,
            span: 7386..7387,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\"",
        ),
        position: Position {
            line: 233,
            column: 27,
            span: 7388..7392,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 28,
            span: 7392..7393,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 233,
            column: 31,
            span: 7394..7396,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\"",
        ),
        position: Position {
            line: 233,
            column: 36,
            span: 7397..7401,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 233,
            column: 39,
            span: 7402..7404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 233,
            column: 46,
            span: 7405..7411,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 233,
            column: 47,
            span: 7411..7412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 233,
            column: 50,
            span: 7412..7415,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 51,
            span: 7415..7416,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 233,
            column: 55,
            span: 7416..7420,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 56,
            span: 7420..7421,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "188",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 233,
            column: 60,
            span: 7421..7425,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 233,
            column: 62,
            span: 7426..7427,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 233,
            column: 64,
            span: 7427..7429,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 65,
            span: 7429..7430,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 66,
            span: 7430..7431,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 234,
            column: 8,
            span: 7434..7439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 234,
            column: 10,
            span: 7440..7441,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 11,
            span: 7441..7442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 234,
            column: 13,
            span: 7443..7444,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 14,
            span: 7444..7445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 234,
            column: 16,
            span: 7446..7447,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 234,
            column: 18,
            span: 7448..7449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 234,
            column: 25,
            span: 7450..7456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 234,
            column: 26,
            span: 7456..7457,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!4 z c3\"",
        ),
        position: Position {
            line: 234,
            column: 35,
            span: 7457..7466,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 36,
            span: 7466..7467,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdefghi\\0xyz\"",
        ),
        position: Position {
            line: 234,
            column: 53,
            span: 7468..7484,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 234,
            column: 54,
            span: 7484..7485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 235,
            column: 9,
            span: 7488..7494,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 10,
            span: 7494..7495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 235,
            column: 11,
            span: 7495..7496,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 235,
            column: 14,
            span: 7497..7499,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdefghi\"",
        ),
        position: Position {
            line: 235,
            column: 26,
            span: 7500..7511,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 235,
            column: 30,
            span: 7512..7515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 235,
            column: 32,
            span: 7516..7517,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 235,
            column: 35,
            span: 7518..7520,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xyz\"",
        ),
        position: Position {
            line: 235,
            column: 41,
            span: 7521..7526,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 235,
            column: 45,
            span: 7527..7530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 235,
            column: 47,
            span: 7531..7532,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 235,
            column: 50,
            span: 7533..7535,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 235,
            column: 53,
            span: 7535..7538,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 235,
            column: 54,
            span: 7538..7539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 236,
            column: 13,
            span: 7542..7552,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 236,
            column: 14,
            span: 7552..7553,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"longer than\"",
        ),
        position: Position {
            line: 236,
            column: 27,
            span: 7553..7566,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 236,
            column: 28,
            span: 7566..7567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 236,
            column: 33,
            span: 7568..7572,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 236,
            column: 34,
            span: 7572..7573,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c3\"",
        ),
        position: Position {
            line: 236,
            column: 39,
            span: 7574..7578,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 236,
            column: 40,
            span: 7578..7579,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234\"",
        ),
        position: Position {
            line: 236,
            column: 47,
            span: 7580..7586,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 236,
            column: 48,
            span: 7586..7587,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 237,
            column: 0,
            span: 7588..7591,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 241,
            column: 0,
            span: 7633..7635,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 242,
            column: 8,
            span: 7638..7643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 242,
            column: 10,
            span: 7644..7645,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 242,
            column: 12,
            span: 7646..7647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 242,
            column: 17,
            span: 7648..7652,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 18,
            span: 7652..7653,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<b h b f d f n i\"",
        ),
        position: Position {
            line: 242,
            column: 36,
            span: 7653..7671,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 37,
            span: 7671..7672,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 242,
            column: 39,
            span: 7672..7674,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 40,
            span: 7674..7675,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 242,
            column: 42,
            span: 7675..7677,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 43,
            span: 7677..7678,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 242,
            column: 45,
            span: 7678..7680,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 46,
            span: 7680..7681,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 242,
            column: 48,
            span: 7681..7683,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 49,
            span: 7683..7684,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 242,
            column: 51,
            span: 7684..7686,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 52,
            span: 7686..7687,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 242,
            column: 54,
            span: 7687..7689,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 55,
            span: 7689..7690,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 242,
            column: 57,
            span: 7690..7692,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 58,
            span: 7692..7693,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 242,
            column: 60,
            span: 7693..7695,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 61,
            span: 7695..7696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 243,
            column: 9,
            span: 7699..7705,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 10,
            span: 7705..7706,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 243,
            column: 11,
            span: 7706..7707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 243,
            column: 12,
            span: 7707..7708,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 243,
            column: 15,
            span: 7709..7711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 243,
            column: 24,
            span: 7712..7720,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 25,
            span: 7720..7721,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<b h b f d f n i\"",
        ),
        position: Position {
            line: 243,
            column: 43,
            span: 7721..7739,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 44,
            span: 7739..7740,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 45,
            span: 7740..7741,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 244,
            column: 8,
            span: 7744..7749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 244,
            column: 10,
            span: 7750..7751,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 11,
            span: 7751..7752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 244,
            column: 13,
            span: 7753..7754,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 14,
            span: 7754..7755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 244,
            column: 16,
            span: 7756..7757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 17,
            span: 7757..7758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 244,
            column: 19,
            span: 7759..7760,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 20,
            span: 7760..7761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 244,
            column: 22,
            span: 7762..7763,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 23,
            span: 7763..7764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 244,
            column: 25,
            span: 7765..7766,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 26,
            span: 7766..7767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 244,
            column: 28,
            span: 7768..7769,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 29,
            span: 7769..7770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 244,
            column: 31,
            span: 7771..7772,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 244,
            column: 33,
            span: 7773..7774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 244,
            column: 40,
            span: 7775..7781,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 244,
            column: 41,
            span: 7781..7782,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<b h b f d f n i\"",
        ),
        position: Position {
            line: 244,
            column: 59,
            span: 7782..7800,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 60,
            span: 7800..7801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 244,
            column: 62,
            span: 7802..7803,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 244,
            column: 63,
            span: 7803..7804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 245,
            column: 9,
            span: 7807..7813,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 245,
            column: 10,
            span: 7813..7814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 245,
            column: 11,
            span: 7814..7815,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 245,
            column: 14,
            span: 7816..7818,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 245,
            column: 16,
            span: 7818..7820,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 245,
            column: 20,
            span: 7821..7824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 245,
            column: 22,
            span: 7825..7826,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 245,
            column: 25,
            span: 7827..7829,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 245,
            column: 27,
            span: 7829..7831,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 245,
            column: 31,
            span: 7832..7835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 245,
            column: 33,
            span: 7836..7837,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 245,
            column: 36,
            span: 7838..7840,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 245,
            column: 38,
            span: 7840..7842,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 245,
            column: 42,
            span: 7843..7846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 245,
            column: 44,
            span: 7847..7848,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 245,
            column: 47,
            span: 7849..7851,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 245,
            column: 49,
            span: 7851..7853,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 245,
            column: 53,
            span: 7854..7857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 245,
            column: 55,
            span: 7858..7859,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 245,
            column: 58,
            span: 7860..7862,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 245,
            column: 60,
            span: 7862..7864,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 245,
            column: 64,
            span: 7865..7868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 245,
            column: 66,
            span: 7869..7870,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 245,
            column: 69,
            span: 7871..7873,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 245,
            column: 71,
            span: 7873..7875,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 245,
            column: 0,
            span: 7876..7879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 246,
            column: 11,
            span: 7889..7890,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 246,
            column: 14,
            span: 7891..7893,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 246,
            column: 16,
            span: 7893..7895,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 246,
            column: 20,
            span: 7896..7899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 246,
            column: 22,
            span: 7900..7901,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 246,
            column: 25,
            span: 7902..7904,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 246,
            column: 27,
            span: 7904..7906,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 28,
            span: 7906..7907,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 247,
            column: 0,
            span: 7909..7912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 249,
            column: 6,
            span: 7914..7919,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing alignment\"",
        ),
        position: Position {
            line: 249,
            column: 26,
            span: 7920..7939,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 250,
            column: 0,
            span: 7940..7942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 251,
            column: 9,
            span: 7945..7951,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 251,
            column: 10,
            span: 7951..7952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 251,
            column: 14,
            span: 7952..7956,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 251,
            column: 15,
            span: 7956..7957,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" < i1 i2 \"",
        ),
        position: Position {
            line: 251,
            column: 26,
            span: 7957..7968,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 251,
            column: 27,
            span: 7968..7969,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 251,
            column: 29,
            span: 7969..7971,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 251,
            column: 30,
            span: 7971..7972,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 251,
            column: 32,
            span: 7972..7974,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 251,
            column: 33,
            span: 7974..7975,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 251,
            column: 36,
            span: 7976..7978,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\2\\3\\0\"",
        ),
        position: Position {
            line: 251,
            column: 45,
            span: 7979..7987,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 251,
            column: 46,
            span: 7987..7988,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 252,
            column: 8,
            span: 8020..8025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 252,
            column: 10,
            span: 8026..8027,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 252,
            column: 12,
            span: 8028..8029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 252,
            column: 17,
            span: 8030..8034,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 252,
            column: 18,
            span: 8034..8035,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">!8 b Xh i4 i8 c1 Xi8\"",
        ),
        position: Position {
            line: 252,
            column: 41,
            span: 8035..8058,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 42,
            span: 8058..8059,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 252,
            column: 44,
            span: 8060..8061,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 252,
            column: 46,
            span: 8060..8063,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 47,
            span: 8063..8064,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 252,
            column: 51,
            span: 8064..8068,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 52,
            span: 8068..8069,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 252,
            column: 56,
            span: 8069..8073,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 57,
            span: 8073..8074,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xEC\"",
        ),
        position: Position {
            line: 252,
            column: 64,
            span: 8075..8081,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 252,
            column: 65,
            span: 8081..8082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 253,
            column: 9,
            span: 8085..8091,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 10,
            span: 8091..8092,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 253,
            column: 11,
            span: 8092..8093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 253,
            column: 12,
            span: 8093..8094,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 253,
            column: 15,
            span: 8095..8097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 253,
            column: 24,
            span: 8098..8106,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 25,
            span: 8106..8107,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">!8 b Xh i4 i8 c1 Xi8\"",
        ),
        position: Position {
            line: 253,
            column: 48,
            span: 8107..8130,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 49,
            span: 8130..8131,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 50,
            span: 8131..8132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 254,
            column: 9,
            span: 8135..8141,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 10,
            span: 8141..8142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 254,
            column: 11,
            span: 8142..8143,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 254,
            column: 14,
            span: 8144..8146,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xf4\"",
        ),
        position: Position {
            line: 254,
            column: 21,
            span: 8147..8153,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 254,
            column: 24,
            span: 8154..8156,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\"",
        ),
        position: Position {
            line: 254,
            column: 33,
            span: 8157..8165,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 254,
            column: 36,
            span: 8166..8168,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\\100\"",
        ),
        position: Position {
            line: 255,
            column: 27,
            span: 8183..8195,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 255,
            column: 30,
            span: 8196..8198,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\\0\\0\\0\\0\\xC8\"",
        ),
        position: Position {
            line: 256,
            column: 35,
            span: 8213..8233,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 256,
            column: 38,
            span: 8234..8236,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xEC\"",
        ),
        position: Position {
            line: 257,
            column: 21,
            span: 8252..8258,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 257,
            column: 24,
            span: 8259..8261,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\\0\\0\\0\\0\"",
        ),
        position: Position {
            line: 257,
            column: 41,
            span: 8262..8278,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 42,
            span: 8278..8279,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 258,
            column: 8,
            span: 8282..8287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 258,
            column: 10,
            span: 8288..8289,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 258,
            column: 11,
            span: 8289..8290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 258,
            column: 13,
            span: 8291..8292,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 258,
            column: 14,
            span: 8292..8293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 258,
            column: 16,
            span: 8294..8295,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 258,
            column: 17,
            span: 8295..8296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 258,
            column: 19,
            span: 8297..8298,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 258,
            column: 20,
            span: 8298..8299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 258,
            column: 24,
            span: 8300..8303,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 258,
            column: 26,
            span: 8304..8305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 258,
            column: 33,
            span: 8306..8312,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 34,
            span: 8312..8313,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">!8 c1 Xh i4 i8 b Xi8 XI XH\"",
        ),
        position: Position {
            line: 258,
            column: 63,
            span: 8313..8342,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 258,
            column: 64,
            span: 8342..8343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 258,
            column: 66,
            span: 8344..8345,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 67,
            span: 8345..8346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 259,
            column: 9,
            span: 8349..8355,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 10,
            span: 8355..8356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 259,
            column: 11,
            span: 8356..8357,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 259,
            column: 14,
            span: 8358..8360,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xF4\"",
        ),
        position: Position {
            line: 259,
            column: 21,
            span: 8361..8367,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 259,
            column: 25,
            span: 8368..8371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 259,
            column: 27,
            span: 8372..8373,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 259,
            column: 30,
            span: 8374..8376,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 259,
            column: 34,
            span: 8376..8380,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 259,
            column: 38,
            span: 8381..8384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 259,
            column: 40,
            span: 8385..8386,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 259,
            column: 43,
            span: 8387..8389,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 259,
            column: 47,
            span: 8389..8393,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 259,
            column: 51,
            span: 8394..8397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 259,
            column: 53,
            span: 8398..8399,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 259,
            column: 56,
            span: 8400..8402,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 259,
            column: 58,
            span: 8403..8404,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 259,
            column: 60,
            span: 8403..8406,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 259,
            column: 64,
            span: 8407..8410,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 259,
            column: 66,
            span: 8411..8412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 259,
            column: 69,
            span: 8412..8415,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 259,
            column: 71,
            span: 8416..8417,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 259,
            column: 73,
            span: 8417..8419,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 74,
            span: 8419..8420,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 259,
            column: 77,
            span: 8421..8423,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 259,
            column: 79,
            span: 8424..8425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 259,
            column: 80,
            span: 8425..8426,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 259,
            column: 81,
            span: 8426..8427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 261,
            column: 4,
            span: 8431..8432,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 261,
            column: 6,
            span: 8433..8434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 261,
            column: 11,
            span: 8435..8439,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 12,
            span: 8439..8440,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">!4 c3 c4 c2 z i4 c5 c2 Xi4\"",
        ),
        position: Position {
            line: 261,
            column: 41,
            span: 8440..8469,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 261,
            column: 42,
            span: 8469..8470,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 262,
            column: 24,
            span: 8489..8494,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 25,
            span: 8494..8495,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcd\"",
        ),
        position: Position {
            line: 262,
            column: 32,
            span: 8496..8502,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 33,
            span: 8502..8503,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xz\"",
        ),
        position: Position {
            line: 262,
            column: 38,
            span: 8504..8508,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 39,
            span: 8508..8509,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hello\"",
        ),
        position: Position {
            line: 262,
            column: 47,
            span: 8510..8517,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 48,
            span: 8517..8518,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 262,
            column: 50,
            span: 8518..8520,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 51,
            span: 8520..8521,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"world\"",
        ),
        position: Position {
            line: 262,
            column: 59,
            span: 8522..8529,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 60,
            span: 8529..8530,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xy\"",
        ),
        position: Position {
            line: 262,
            column: 65,
            span: 8531..8535,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 262,
            column: 66,
            span: 8535..8536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 263,
            column: 9,
            span: 8539..8545,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 263,
            column: 10,
            span: 8545..8546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 263,
            column: 11,
            span: 8546..8547,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 263,
            column: 14,
            span: 8548..8550,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcabcdxzhello\\0\\0\\0\\0\\0\\5worldxy\\0\"",
        ),
        position: Position {
            line: 263,
            column: 52,
            span: 8551..8588,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 263,
            column: 53,
            span: 8588..8589,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 264,
            column: 8,
            span: 8592..8597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 264,
            column: 10,
            span: 8598..8599,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 11,
            span: 8599..8600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 264,
            column: 13,
            span: 8601..8602,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 14,
            span: 8602..8603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 264,
            column: 16,
            span: 8604..8605,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 17,
            span: 8605..8606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 264,
            column: 19,
            span: 8607..8608,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 20,
            span: 8608..8609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 264,
            column: 22,
            span: 8610..8611,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 23,
            span: 8611..8612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 264,
            column: 25,
            span: 8613..8614,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 26,
            span: 8614..8615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 264,
            column: 28,
            span: 8616..8617,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 29,
            span: 8617..8618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 264,
            column: 33,
            span: 8619..8622,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 264,
            column: 35,
            span: 8623..8624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 264,
            column: 42,
            span: 8625..8631,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 43,
            span: 8631..8632,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">!4 c3 c4 c2 z i4 c5 c2 Xh Xi4\"",
        ),
        position: Position {
            line: 264,
            column: 75,
            span: 8632..8664,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 76,
            span: 8664..8665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 264,
            column: 78,
            span: 8666..8667,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 79,
            span: 8667..8668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 265,
            column: 9,
            span: 8671..8677,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 265,
            column: 10,
            span: 8677..8678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 265,
            column: 11,
            span: 8678..8679,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 265,
            column: 14,
            span: 8680..8682,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 265,
            column: 20,
            span: 8683..8688,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 265,
            column: 24,
            span: 8689..8692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 265,
            column: 26,
            span: 8693..8694,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 265,
            column: 29,
            span: 8695..8697,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcd\"",
        ),
        position: Position {
            line: 265,
            column: 36,
            span: 8698..8704,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 265,
            column: 40,
            span: 8705..8708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 265,
            column: 42,
            span: 8709..8710,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 265,
            column: 45,
            span: 8711..8713,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xz\"",
        ),
        position: Position {
            line: 265,
            column: 50,
            span: 8714..8718,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 265,
            column: 54,
            span: 8719..8722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 265,
            column: 56,
            span: 8723..8724,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 265,
            column: 59,
            span: 8725..8727,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hello\"",
        ),
        position: Position {
            line: 265,
            column: 67,
            span: 8728..8735,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 265,
            column: 0,
            span: 8736..8739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 266,
            column: 11,
            span: 8749..8750,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 266,
            column: 14,
            span: 8751..8753,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 266,
            column: 16,
            span: 8753..8755,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 266,
            column: 20,
            span: 8756..8759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 266,
            column: 22,
            span: 8760..8761,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 266,
            column: 25,
            span: 8762..8764,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"world\"",
        ),
        position: Position {
            line: 266,
            column: 33,
            span: 8765..8772,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 266,
            column: 37,
            span: 8773..8776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 266,
            column: 39,
            span: 8777..8778,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 266,
            column: 42,
            span: 8779..8781,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xy\"",
        ),
        position: Position {
            line: 266,
            column: 47,
            span: 8782..8786,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 266,
            column: 51,
            span: 8787..8790,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 266,
            column: 53,
            span: 8791..8792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 266,
            column: 56,
            span: 8792..8795,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 266,
            column: 58,
            span: 8796..8797,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 266,
            column: 60,
            span: 8797..8799,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 266,
            column: 61,
            span: 8799..8800,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 266,
            column: 63,
            span: 8801..8802,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 266,
            column: 65,
            span: 8802..8804,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 266,
            column: 68,
            span: 8805..8807,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 266,
            column: 70,
            span: 8807..8809,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 266,
            column: 71,
            span: 8809..8810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 268,
            column: 4,
            span: 8814..8815,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 268,
            column: 6,
            span: 8816..8817,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 268,
            column: 11,
            span: 8818..8822,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 12,
            span: 8822..8823,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" b b Xd b Xb x\"",
        ),
        position: Position {
            line: 268,
            column: 28,
            span: 8823..8839,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 268,
            column: 29,
            span: 8839..8840,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 268,
            column: 31,
            span: 8840..8842,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 268,
            column: 32,
            span: 8842..8843,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 268,
            column: 34,
            span: 8843..8845,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 268,
            column: 35,
            span: 8845..8846,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 268,
            column: 37,
            span: 8846..8848,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 38,
            span: 8848..8849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 269,
            column: 9,
            span: 8852..8858,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 269,
            column: 10,
            span: 8858..8859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 269,
            column: 18,
            span: 8859..8867,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 269,
            column: 19,
            span: 8867..8868,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" b b Xd b Xb x\"",
        ),
        position: Position {
            line: 269,
            column: 35,
            span: 8868..8884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 269,
            column: 36,
            span: 8884..8885,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 269,
            column: 39,
            span: 8886..8888,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 269,
            column: 41,
            span: 8888..8890,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 269,
            column: 42,
            span: 8890..8891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 270,
            column: 9,
            span: 8894..8900,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 10,
            span: 8900..8901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 270,
            column: 11,
            span: 8901..8902,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 270,
            column: 14,
            span: 8903..8905,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\1\\2\\3\\0\"",
        ),
        position: Position {
            line: 270,
            column: 25,
            span: 8906..8916,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 26,
            span: 8916..8917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 271,
            column: 4,
            span: 8920..8921,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 271,
            column: 5,
            span: 8921..8922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 271,
            column: 7,
            span: 8923..8924,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 271,
            column: 8,
            span: 8924..8925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 271,
            column: 10,
            span: 8926..8927,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 271,
            column: 11,
            span: 8927..8928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 271,
            column: 15,
            span: 8929..8932,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 271,
            column: 17,
            span: 8933..8934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 271,
            column: 24,
            span: 8935..8941,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 25,
            span: 8941..8942,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bbXdb\"",
        ),
        position: Position {
            line: 271,
            column: 32,
            span: 8942..8949,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 271,
            column: 33,
            span: 8949..8950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 271,
            column: 35,
            span: 8951..8952,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 36,
            span: 8952..8953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 272,
            column: 9,
            span: 8956..8962,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 272,
            column: 10,
            span: 8962..8963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 272,
            column: 11,
            span: 8963..8964,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 272,
            column: 14,
            span: 8965..8967,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 272,
            column: 16,
            span: 8967..8969,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 272,
            column: 20,
            span: 8970..8973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 272,
            column: 22,
            span: 8974..8975,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 272,
            column: 25,
            span: 8976..8978,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 272,
            column: 27,
            span: 8978..8980,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 272,
            column: 31,
            span: 8981..8984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 272,
            column: 33,
            span: 8985..8986,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 272,
            column: 36,
            span: 8987..8989,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 272,
            column: 38,
            span: 8989..8991,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 272,
            column: 42,
            span: 8992..8995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 272,
            column: 46,
            span: 8996..8999,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 272,
            column: 49,
            span: 9000..9002,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 272,
            column: 51,
            span: 9003..9004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 272,
            column: 52,
            span: 9004..9005,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 272,
            column: 53,
            span: 9005..9006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 275,
            column: 9,
            span: 9030..9036,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 275,
            column: 10,
            span: 9036..9037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 275,
            column: 18,
            span: 9037..9045,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 275,
            column: 19,
            span: 9045..9046,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!8 xXi8\"",
        ),
        position: Position {
            line: 275,
            column: 28,
            span: 9046..9055,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 275,
            column: 29,
            span: 9055..9056,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 275,
            column: 32,
            span: 9057..9059,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 275,
            column: 34,
            span: 9059..9061,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 275,
            column: 35,
            span: 9061..9062,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 276,
            column: 8,
            span: 9065..9070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 276,
            column: 12,
            span: 9071..9074,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 276,
            column: 14,
            span: 9075..9076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 276,
            column: 21,
            span: 9077..9083,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 22,
            span: 9083..9084,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!8 xXi8\"",
        ),
        position: Position {
            line: 276,
            column: 31,
            span: 9084..9093,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 276,
            column: 32,
            span: 9093..9094,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456701234567\"",
        ),
        position: Position {
            line: 276,
            column: 51,
            span: 9095..9113,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 276,
            column: 52,
            span: 9113..9114,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 276,
            column: 53,
            span: 9114..9115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 276,
            column: 60,
            span: 9116..9122,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 61,
            span: 9122..9123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 276,
            column: 64,
            span: 9123..9126,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 276,
            column: 67,
            span: 9127..9129,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 276,
            column: 69,
            span: 9129..9131,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 276,
            column: 70,
            span: 9131..9132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 277,
            column: 9,
            span: 9135..9141,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 277,
            column: 10,
            span: 9141..9142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 277,
            column: 18,
            span: 9142..9150,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 277,
            column: 19,
            span: 9150..9151,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!8 xXi2\"",
        ),
        position: Position {
            line: 277,
            column: 28,
            span: 9151..9160,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 277,
            column: 29,
            span: 9160..9161,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 277,
            column: 32,
            span: 9162..9164,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 277,
            column: 34,
            span: 9164..9166,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 277,
            column: 35,
            span: 9166..9167,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 278,
            column: 8,
            span: 9170..9175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 278,
            column: 12,
            span: 9176..9179,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 278,
            column: 14,
            span: 9180..9181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 278,
            column: 21,
            span: 9182..9188,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 278,
            column: 22,
            span: 9188..9189,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!8 xXi2\"",
        ),
        position: Position {
            line: 278,
            column: 31,
            span: 9189..9198,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 278,
            column: 32,
            span: 9198..9199,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456701234567\"",
        ),
        position: Position {
            line: 278,
            column: 51,
            span: 9200..9218,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 278,
            column: 52,
            span: 9218..9219,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 278,
            column: 53,
            span: 9219..9220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 278,
            column: 60,
            span: 9221..9227,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 278,
            column: 61,
            span: 9227..9228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 278,
            column: 64,
            span: 9228..9231,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 278,
            column: 67,
            span: 9232..9234,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 278,
            column: 69,
            span: 9234..9236,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 278,
            column: 70,
            span: 9236..9237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 279,
            column: 9,
            span: 9240..9246,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 10,
            span: 9246..9247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 279,
            column: 18,
            span: 9247..9255,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 19,
            span: 9255..9256,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!2 xXi2\"",
        ),
        position: Position {
            line: 279,
            column: 28,
            span: 9256..9265,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 29,
            span: 9265..9266,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 279,
            column: 32,
            span: 9267..9269,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 279,
            column: 34,
            span: 9269..9271,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 35,
            span: 9271..9272,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 280,
            column: 8,
            span: 9275..9280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 280,
            column: 12,
            span: 9281..9284,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 280,
            column: 14,
            span: 9285..9286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 280,
            column: 21,
            span: 9287..9293,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 280,
            column: 22,
            span: 9293..9294,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!2 xXi2\"",
        ),
        position: Position {
            line: 280,
            column: 31,
            span: 9294..9303,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 280,
            column: 32,
            span: 9303..9304,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456701234567\"",
        ),
        position: Position {
            line: 280,
            column: 51,
            span: 9305..9323,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 280,
            column: 52,
            span: 9323..9324,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 280,
            column: 53,
            span: 9324..9325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 280,
            column: 60,
            span: 9326..9332,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 280,
            column: 61,
            span: 9332..9333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 280,
            column: 64,
            span: 9333..9336,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 280,
            column: 67,
            span: 9337..9339,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 280,
            column: 69,
            span: 9339..9341,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 280,
            column: 70,
            span: 9341..9342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 281,
            column: 9,
            span: 9345..9351,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 10,
            span: 9351..9352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 281,
            column: 18,
            span: 9352..9360,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 19,
            span: 9360..9361,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!2 xXi8\"",
        ),
        position: Position {
            line: 281,
            column: 28,
            span: 9361..9370,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 29,
            span: 9370..9371,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 32,
            span: 9372..9374,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 281,
            column: 34,
            span: 9374..9376,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 35,
            span: 9376..9377,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 282,
            column: 8,
            span: 9380..9385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 282,
            column: 12,
            span: 9386..9389,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 282,
            column: 14,
            span: 9390..9391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 282,
            column: 21,
            span: 9392..9398,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 22,
            span: 9398..9399,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!2 xXi8\"",
        ),
        position: Position {
            line: 282,
            column: 31,
            span: 9399..9408,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 282,
            column: 32,
            span: 9408..9409,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456701234567\"",
        ),
        position: Position {
            line: 282,
            column: 51,
            span: 9410..9428,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 52,
            span: 9428..9429,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 282,
            column: 53,
            span: 9429..9430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 282,
            column: 60,
            span: 9431..9437,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 61,
            span: 9437..9438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 282,
            column: 64,
            span: 9438..9441,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 282,
            column: 67,
            span: 9442..9444,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 282,
            column: 69,
            span: 9444..9446,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 70,
            span: 9446..9447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 283,
            column: 9,
            span: 9450..9456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 283,
            column: 10,
            span: 9456..9457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 283,
            column: 18,
            span: 9457..9465,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 283,
            column: 19,
            span: 9465..9466,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!16 xXi16\"",
        ),
        position: Position {
            line: 283,
            column: 30,
            span: 9466..9477,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 283,
            column: 31,
            span: 9477..9478,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 283,
            column: 34,
            span: 9479..9481,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 283,
            column: 37,
            span: 9481..9484,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 283,
            column: 38,
            span: 9484..9485,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 284,
            column: 8,
            span: 9488..9493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 284,
            column: 12,
            span: 9494..9497,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 284,
            column: 14,
            span: 9498..9499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 284,
            column: 21,
            span: 9500..9506,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 284,
            column: 22,
            span: 9506..9507,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!16 xXi16\"",
        ),
        position: Position {
            line: 284,
            column: 33,
            span: 9507..9518,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 284,
            column: 34,
            span: 9518..9519,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456701234567\"",
        ),
        position: Position {
            line: 284,
            column: 53,
            span: 9520..9538,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 284,
            column: 54,
            span: 9538..9539,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 284,
            column: 55,
            span: 9539..9540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 284,
            column: 62,
            span: 9541..9547,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 284,
            column: 63,
            span: 9547..9548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 284,
            column: 66,
            span: 9548..9551,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 284,
            column: 69,
            span: 9552..9554,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "17",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 284,
            column: 72,
            span: 9554..9557,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 284,
            column: 73,
            span: 9557..9558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 286,
            column: 13,
            span: 9562..9572,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 286,
            column: 14,
            span: 9572..9573,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid next option\"",
        ),
        position: Position {
            line: 286,
            column: 35,
            span: 9573..9594,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 286,
            column: 36,
            span: 9594..9595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 286,
            column: 41,
            span: 9596..9600,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 286,
            column: 42,
            span: 9600..9601,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        position: Position {
            line: 286,
            column: 46,
            span: 9602..9605,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 286,
            column: 47,
            span: 9605..9606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 287,
            column: 13,
            span: 9609..9619,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 14,
            span: 9619..9620,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid next option\"",
        ),
        position: Position {
            line: 287,
            column: 35,
            span: 9620..9641,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 287,
            column: 36,
            span: 9641..9642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 287,
            column: 43,
            span: 9643..9649,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 287,
            column: 44,
            span: 9649..9650,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXi\"",
        ),
        position: Position {
            line: 287,
            column: 50,
            span: 9651..9656,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 287,
            column: 51,
            span: 9656..9657,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 287,
            column: 54,
            span: 9658..9660,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 55,
            span: 9660..9661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 288,
            column: 13,
            span: 9664..9674,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 288,
            column: 14,
            span: 9674..9675,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid next option\"",
        ),
        position: Position {
            line: 288,
            column: 35,
            span: 9675..9696,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 288,
            column: 36,
            span: 9696..9697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 288,
            column: 43,
            span: 9698..9704,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 288,
            column: 44,
            span: 9704..9705,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X i\"",
        ),
        position: Position {
            line: 288,
            column: 50,
            span: 9706..9711,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 288,
            column: 51,
            span: 9711..9712,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 288,
            column: 54,
            span: 9713..9715,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 288,
            column: 55,
            span: 9715..9716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 289,
            column: 13,
            span: 9719..9729,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 14,
            span: 9729..9730,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid next option\"",
        ),
        position: Position {
            line: 289,
            column: 35,
            span: 9730..9751,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 289,
            column: 36,
            span: 9751..9752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 289,
            column: 41,
            span: 9753..9757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 289,
            column: 42,
            span: 9757..9758,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Xc1\"",
        ),
        position: Position {
            line: 289,
            column: 48,
            span: 9759..9764,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 49,
            span: 9764..9765,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 290,
            column: 0,
            span: 9766..9769,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 292,
            column: 3,
            span: 9771..9773,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 293,
            column: 8,
            span: 9807..9812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 293,
            column: 10,
            span: 9813..9814,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 293,
            column: 12,
            span: 9815..9816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 293,
            column: 17,
            span: 9817..9821,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 293,
            column: 18,
            span: 9821..9822,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i4i4i4i4\"",
        ),
        position: Position {
            line: 293,
            column: 28,
            span: 9822..9832,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 293,
            column: 29,
            span: 9832..9833,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 293,
            column: 31,
            span: 9833..9835,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 293,
            column: 32,
            span: 9835..9836,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 293,
            column: 34,
            span: 9836..9838,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 293,
            column: 35,
            span: 9838..9839,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 293,
            column: 37,
            span: 9839..9841,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 293,
            column: 38,
            span: 9841..9842,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 293,
            column: 40,
            span: 9842..9844,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 293,
            column: 41,
            span: 9844..9845,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 294,
            column: 6,
            span: 9848..9851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 294,
            column: 10,
            span: 9852..9855,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 294,
            column: 12,
            span: 9856..9857,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 294,
            column: 14,
            span: 9857..9859,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 294,
            column: 15,
            span: 9859..9860,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 294,
            column: 18,
            span: 9860..9863,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 294,
            column: 19,
            span: 9863..9864,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 294,
            column: 21,
            span: 9864..9866,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 294,
            column: 0,
            span: 9867..9869,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 295,
            column: 10,
            span: 9874..9879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 295,
            column: 12,
            span: 9880..9881,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 295,
            column: 13,
            span: 9881..9882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 295,
            column: 15,
            span: 9883..9884,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 295,
            column: 17,
            span: 9885..9886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 295,
            column: 24,
            span: 9887..9893,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 295,
            column: 25,
            span: 9893..9894,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i4\"",
        ),
        position: Position {
            line: 295,
            column: 29,
            span: 9894..9898,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 295,
            column: 30,
            span: 9898..9899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 295,
            column: 32,
            span: 9900..9901,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 295,
            column: 33,
            span: 9901..9902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 295,
            column: 37,
            span: 9903..9906,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 295,
            column: 38,
            span: 9906..9907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 296,
            column: 11,
            span: 9912..9918,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 12,
            span: 9918..9919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 296,
            column: 13,
            span: 9919..9920,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 296,
            column: 16,
            span: 9921..9923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 296,
            column: 20,
            span: 9924..9927,
        },
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        position: Position {
            line: 296,
            column: 22,
            span: 9927..9929,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 23,
            span: 9928..9930,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 296,
            column: 25,
            span: 9931..9932,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 27,
            span: 9932..9934,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 296,
            column: 31,
            span: 9935..9938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 296,
            column: 33,
            span: 9939..9940,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 296,
            column: 36,
            span: 9941..9943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 296,
            column: 40,
            span: 9944..9947,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 296,
            column: 42,
            span: 9948..9949,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 44,
            span: 9949..9951,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 45,
            span: 9951..9952,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 297,
            column: 0,
            span: 9955..9958,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 300,
            column: 6,
            span: 9982..9985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 300,
            column: 10,
            span: 9986..9989,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 300,
            column: 12,
            span: 9990..9991,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 300,
            column: 14,
            span: 9991..9993,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 300,
            column: 15,
            span: 9993..9994,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 300,
            column: 18,
            span: 9994..9997,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 300,
            column: 21,
            span: 9998..10000,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 301,
            column: 10,
            span: 10052..10057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 301,
            column: 12,
            span: 10058..10059,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 301,
            column: 13,
            span: 10059..10060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 301,
            column: 15,
            span: 10061..10062,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 301,
            column: 17,
            span: 10063..10064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 301,
            column: 24,
            span: 10065..10071,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 301,
            column: 25,
            span: 10071..10072,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!4 i4\"",
        ),
        position: Position {
            line: 301,
            column: 32,
            span: 10072..10079,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 301,
            column: 33,
            span: 10079..10080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 301,
            column: 35,
            span: 10081..10082,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 301,
            column: 36,
            span: 10082..10083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 301,
            column: 40,
            span: 10084..10087,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 301,
            column: 42,
            span: 10088..10089,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 301,
            column: 44,
            span: 10089..10091,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 301,
            column: 45,
            span: 10091..10092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 302,
            column: 11,
            span: 10097..10103,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 302,
            column: 12,
            span: 10103..10104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 302,
            column: 13,
            span: 10104..10105,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 302,
            column: 16,
            span: 10106..10108,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 302,
            column: 18,
            span: 10109..10110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pos",
        ),
        position: Position {
            line: 302,
            column: 21,
            span: 10110..10113,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 302,
            column: 23,
            span: 10114..10115,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 25,
            span: 10115..10117,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 26,
            span: 10117..10118,
        },
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        position: Position {
            line: 302,
            column: 28,
            span: 10118..10120,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 29,
            span: 10119..10121,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 302,
            column: 31,
            span: 10122..10123,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 33,
            span: 10123..10125,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 302,
            column: 37,
            span: 10126..10129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 302,
            column: 39,
            span: 10130..10131,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 302,
            column: 42,
            span: 10132..10134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 302,
            column: 44,
            span: 10135..10136,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 302,
            column: 45,
            span: 10136..10137,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 46,
            span: 10136..10138,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 302,
            column: 48,
            span: 10139..10140,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 50,
            span: 10140..10142,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 51,
            span: 10142..10143,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 303,
            column: 0,
            span: 10146..10149,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 306,
            column: 8,
            span: 10175..10180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 306,
            column: 10,
            span: 10181..10182,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 306,
            column: 11,
            span: 10182..10183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 306,
            column: 13,
            span: 10184..10185,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 306,
            column: 15,
            span: 10186..10187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 306,
            column: 22,
            span: 10188..10194,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 306,
            column: 23,
            span: 10194..10195,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!4 i4\"",
        ),
        position: Position {
            line: 306,
            column: 30,
            span: 10195..10202,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 306,
            column: 31,
            span: 10202..10203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 306,
            column: 33,
            span: 10204..10205,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 306,
            column: 34,
            span: 10205..10206,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 306,
            column: 36,
            span: 10207..10208,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 306,
            column: 37,
            span: 10207..10209,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 306,
            column: 38,
            span: 10209..10210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 307,
            column: 9,
            span: 10213..10219,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 307,
            column: 10,
            span: 10219..10220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 307,
            column: 11,
            span: 10220..10221,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 307,
            column: 14,
            span: 10222..10224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 307,
            column: 16,
            span: 10224..10226,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 307,
            column: 20,
            span: 10227..10230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 307,
            column: 22,
            span: 10231..10232,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 307,
            column: 25,
            span: 10233..10235,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "17",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 307,
            column: 28,
            span: 10235..10238,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 307,
            column: 29,
            span: 10238..10239,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 308,
            column: 8,
            span: 10242..10247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 308,
            column: 10,
            span: 10248..10249,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 308,
            column: 11,
            span: 10249..10250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 308,
            column: 13,
            span: 10251..10252,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 308,
            column: 15,
            span: 10253..10254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 308,
            column: 22,
            span: 10255..10261,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 23,
            span: 10261..10262,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!4 i4\"",
        ),
        position: Position {
            line: 308,
            column: 30,
            span: 10262..10269,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 308,
            column: 31,
            span: 10269..10270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 308,
            column: 33,
            span: 10271..10272,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 308,
            column: 34,
            span: 10272..10273,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 308,
            column: 36,
            span: 10274..10275,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 308,
            column: 37,
            span: 10274..10276,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 38,
            span: 10276..10277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 309,
            column: 9,
            span: 10280..10286,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 10,
            span: 10286..10287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 309,
            column: 11,
            span: 10287..10288,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 309,
            column: 14,
            span: 10289..10291,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 309,
            column: 16,
            span: 10291..10293,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 309,
            column: 20,
            span: 10294..10297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 309,
            column: 22,
            span: 10298..10299,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 309,
            column: 25,
            span: 10300..10302,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "17",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 309,
            column: 28,
            span: 10302..10305,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 29,
            span: 10305..10306,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 310,
            column: 8,
            span: 10309..10314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 310,
            column: 10,
            span: 10315..10316,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 310,
            column: 11,
            span: 10316..10317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 310,
            column: 13,
            span: 10318..10319,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 310,
            column: 15,
            span: 10320..10321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 310,
            column: 22,
            span: 10322..10328,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 310,
            column: 23,
            span: 10328..10329,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!4 i4\"",
        ),
        position: Position {
            line: 310,
            column: 30,
            span: 10329..10336,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 310,
            column: 31,
            span: 10336..10337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 310,
            column: 33,
            span: 10338..10339,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 310,
            column: 34,
            span: 10339..10340,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 310,
            column: 36,
            span: 10341..10342,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 310,
            column: 37,
            span: 10342..10343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 310,
            column: 38,
            span: 10343..10344,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 310,
            column: 39,
            span: 10344..10345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 311,
            column: 9,
            span: 10348..10354,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 311,
            column: 10,
            span: 10354..10355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 311,
            column: 11,
            span: 10355..10356,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 311,
            column: 14,
            span: 10357..10359,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 311,
            column: 16,
            span: 10359..10361,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 311,
            column: 20,
            span: 10362..10365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 311,
            column: 22,
            span: 10366..10367,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 311,
            column: 25,
            span: 10368..10370,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 311,
            column: 27,
            span: 10370..10372,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 311,
            column: 28,
            span: 10372..10373,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 314,
            column: 6,
            span: 10389..10392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 314,
            column: 8,
            span: 10393..10394,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 314,
            column: 10,
            span: 10395..10396,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 314,
            column: 12,
            span: 10396..10398,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 314,
            column: 13,
            span: 10398..10399,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 314,
            column: 15,
            span: 10400..10401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 314,
            column: 16,
            span: 10401..10402,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 314,
            column: 18,
            span: 10403..10404,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 314,
            column: 20,
            span: 10404..10406,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 314,
            column: 0,
            span: 10407..10409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 315,
            column: 11,
            span: 10414..10420,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 12,
            span: 10420..10421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 315,
            column: 18,
            span: 10421..10427,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 19,
            span: 10427..10428,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c0\"",
        ),
        position: Position {
            line: 315,
            column: 23,
            span: 10428..10432,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 315,
            column: 24,
            span: 10432..10433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 315,
            column: 26,
            span: 10434..10435,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 315,
            column: 27,
            span: 10435..10436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 315,
            column: 29,
            span: 10437..10438,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 30,
            span: 10438..10439,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 315,
            column: 33,
            span: 10440..10442,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 315,
            column: 36,
            span: 10443..10445,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 37,
            span: 10445..10446,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 316,
            column: 0,
            span: 10449..10452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerror",
        ),
        position: Position {
            line: 317,
            column: 13,
            span: 10455..10465,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 14,
            span: 10465..10466,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"out of string\"",
        ),
        position: Position {
            line: 317,
            column: 29,
            span: 10466..10481,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 317,
            column: 30,
            span: 10481..10482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 317,
            column: 37,
            span: 10483..10489,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 317,
            column: 38,
            span: 10489..10490,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c0\"",
        ),
        position: Position {
            line: 317,
            column: 43,
            span: 10491..10495,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 317,
            column: 44,
            span: 10495..10496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 317,
            column: 46,
            span: 10497..10498,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 317,
            column: 47,
            span: 10498..10499,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 317,
            column: 49,
            span: 10500..10501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 317,
            column: 50,
            span: 10501..10502,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 317,
            column: 52,
            span: 10503..10504,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 54,
            span: 10504..10506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 55,
            span: 10506..10507,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 319,
            column: 0,
            span: 10510..10513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 321,
            column: 6,
            span: 10515..10520,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        position: Position {
            line: 321,
            column: 11,
            span: 10521..10525,
        },
    },
]
