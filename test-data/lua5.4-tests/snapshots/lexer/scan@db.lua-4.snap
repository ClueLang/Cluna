---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/db.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 91..96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 6,
        column: 12,
        span: 97..102,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 14,
        span: 103..104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 6,
        column: 22,
        span: 105..112,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 6,
        column: 30,
        span: 113..120,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 8,
        column: 6,
        span: 122..127,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 8,
        column: 15,
        span: 128..136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 8,
        column: 24,
        span: 137..145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 25,
        span: 145..146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 8,
        column: 26,
        span: 146..147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 27,
        span: 147..148,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 8,
        column: 34,
        span: 149..155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 41,
        span: 156..162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 42,
        span: 162..163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 8,
        column: 46,
        span: 163..167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 47,
        span: 167..168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 8,
        column: 48,
        span: 168..169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 49,
        span: 169..170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 50,
        span: 170..171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 51,
        span: 171..172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 52,
        span: 172..173,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 8,
        column: 0,
        span: 174..177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 10,
        column: 6,
        span: 179..184,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing debug library and debug information\"",
        ),
        line: 10,
        column: 51,
        span: 184..229,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 12,
        column: 0,
        span: 231..233,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 13,
        column: 6,
        span: 234..239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 13,
        column: 8,
        span: 240..241,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 13,
        column: 9,
        span: 241..242,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 13,
        column: 0,
        span: 241..243,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 14,
        column: 0,
        span: 244..247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
        column: 7,
        span: 249..255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 8,
        span: 255..256,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 16,
        column: 11,
        span: 256..259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 16,
        column: 17,
        span: 260..265,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 16,
        column: 18,
        span: 265..266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 16,
        column: 25,
        span: 266..273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 26,
        span: 273..274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 27,
        span: 274..275,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 28,
        span: 275..276,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 18,
        column: 6,
        span: 278..283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testline",
        ),
        line: 18,
        column: 15,
        span: 284..292,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 17,
        span: 293..294,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 18,
        column: 20,
        span: 294..297,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 19,
        column: 9,
        span: 338..346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 19,
        column: 14,
        span: 347..351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 16,
        span: 352..353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 19,
        column: 17,
        span: 353..354,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
        column: 18,
        span: 354..355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 19,
        column: 20,
        span: 356..357,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
        column: 21,
        span: 357..358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 19,
        column: 23,
        span: 359..360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 24,
        span: 360..361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 20,
        column: 17,
        span: 392..406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 18,
        span: 406..407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 19,
        span: 407..408,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 21,
        column: 8,
        span: 438..443,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 21,
        column: 17,
        span: 444..452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 21,
        column: 19,
        span: 453..454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 21,
        span: 455..456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        line: 21,
        column: 26,
        span: 456..461,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 27,
        span: 461..462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 21,
        column: 32,
        span: 463..467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 33,
        span: 467..468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 22,
        column: 11,
        span: 473..479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 12,
        span: 479..480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        line: 22,
        column: 17,
        span: 480..485,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 22,
        column: 20,
        span: 486..488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'line'",
        ),
        line: 22,
        column: 27,
        span: 489..495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 28,
        span: 495..496,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 23,
        column: 10,
        span: 501..506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 23,
        column: 12,
        span: 507..508,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 23,
        column: 14,
        span: 509..510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 23,
        column: 20,
        span: 511..516,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 23,
        column: 21,
        span: 516..517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 23,
        column: 27,
        span: 517..523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 28,
        span: 523..524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 23,
        column: 29,
        span: 524..525,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
        column: 30,
        span: 525..526,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
        column: 32,
        span: 526..528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 33,
        span: 528..529,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 24,
        column: 7,
        span: 534..536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 24,
        column: 9,
        span: 537..538,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 24,
        column: 14,
        span: 539..543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 24,
        column: 20,
        span: 544..549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 21,
        span: 549..550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 24,
        column: 22,
        span: 550..551,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
        column: 23,
        span: 551..552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 24,
        column: 28,
        span: 553..557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 29,
        span: 557..558,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 24,
        column: 0,
        span: 559..562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 11,
        span: 567..573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 12,
        span: 573..574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 25,
        column: 13,
        span: 574..575,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 16,
        span: 576..578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 25,
        column: 21,
        span: 579..583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 22,
        span: 583..584,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wrong trace!!\"",
        ),
        line: 25,
        column: 38,
        span: 585..600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 39,
        span: 600..601,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 26,
        column: 0,
        span: 604..607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 27,
        column: 8,
        span: 610..615,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
        column: 9,
        span: 615..616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 27,
        column: 16,
        span: 616..623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 17,
        span: 623..624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 27,
        column: 18,
        span: 624..625,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
        column: 19,
        span: 625..626,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 27,
        column: 22,
        span: 626..629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 23,
        span: 629..630,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 27,
        column: 24,
        span: 630..631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 27,
        column: 29,
        span: 632..636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 30,
        span: 636..637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 27,
        column: 31,
        span: 637..638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 32,
        span: 638..639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 33,
        span: 639..640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 34,
        span: 640..641,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 27,
        column: 35,
        span: 641..642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 27,
        column: 41,
        span: 643..648,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
        column: 42,
        span: 648..649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 27,
        column: 49,
        span: 649..656,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 50,
        span: 656..657,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 51,
        span: 657..658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
        column: 9,
        span: 661..667,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 10,
        span: 667..668,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 28,
        column: 11,
        span: 668..669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 28,
        column: 12,
        span: 669..670,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 28,
        column: 15,
        span: 671..673,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 17,
        span: 673..675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 18,
        span: 675..676,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 29,
        column: 0,
        span: 677..680,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 32,
        column: 0,
        span: 683..685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
        column: 9,
        span: 688..694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 10,
        span: 694..695,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 33,
        column: 13,
        span: 695..698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 33,
        column: 19,
        span: 699..704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 20,
        span: 704..705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 33,
        column: 25,
        span: 705..710,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 33,
        column: 26,
        span: 710..711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 33,
        column: 33,
        span: 711..718,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 34,
        span: 718..719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 33,
        column: 40,
        span: 720..725,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 41,
        span: 725..726,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 33,
        column: 45,
        span: 727..730,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 46,
        span: 730..731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 47,
        span: 731..732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
        column: 9,
        span: 755..761,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 10,
        span: 761..762,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 34,
        column: 13,
        span: 762..765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 34,
        column: 19,
        span: 766..771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 20,
        span: 771..772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 34,
        column: 25,
        span: 772..777,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 34,
        column: 26,
        span: 777..778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 34,
        column: 33,
        span: 778..785,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 34,
        span: 785..786,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 36,
        span: 786..788,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 37,
        span: 788..789,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">\"",
        ),
        line: 34,
        column: 41,
        span: 790..793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 42,
        span: 793..794,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 43,
        span: 794..795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 9,
        span: 818..824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 10,
        span: 824..825,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 35,
        column: 13,
        span: 825..828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 35,
        column: 19,
        span: 829..834,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 35,
        column: 20,
        span: 834..835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 35,
        column: 27,
        span: 835..842,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 28,
        span: 842..843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 32,
        span: 842..847,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 33,
        span: 847..848,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 34,
        span: 848..849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
        column: 9,
        span: 876..882,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 10,
        span: 882..883,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 36,
        column: 13,
        span: 883..886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 36,
        column: 19,
        span: 887..892,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 36,
        column: 20,
        span: 892..893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 36,
        column: 27,
        span: 893..900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 28,
        span: 900..901,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 36,
        column: 29,
        span: 901..902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 30,
        span: 901..903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 31,
        span: 903..904,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 32,
        span: 904..905,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
        column: 8,
        span: 934..939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 37,
        column: 10,
        span: 940..941,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
        column: 12,
        span: 942..943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 37,
        column: 18,
        span: 944..949,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
        column: 19,
        span: 949..950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 37,
        column: 26,
        span: 950..957,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 27,
        span: 957..958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 37,
        column: 32,
        span: 958..963,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 33,
        span: 963..964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
        column: 9,
        span: 967..973,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 10,
        span: 973..974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 11,
        span: 974..975,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 12,
        span: 975..976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 38,
        column: 16,
        span: 976..980,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 19,
        span: 981..983,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 38,
        column: 23,
        span: 984..987,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 38,
        column: 27,
        span: 988..991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 29,
        span: 992..993,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 30,
        span: 993..994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 38,
        column: 39,
        span: 994..1003,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 42,
        span: 1004..1006,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[C]\"",
        ),
        line: 38,
        column: 48,
        span: 1007..1012,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 49,
        span: 1012..1013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 39,
        column: 4,
        span: 1016..1017,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 39,
        column: 6,
        span: 1018..1019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 39,
        column: 12,
        span: 1020..1025,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 13,
        span: 1025..1026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 39,
        column: 20,
        span: 1026..1033,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 21,
        span: 1033..1034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 39,
        column: 26,
        span: 1034..1039,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 27,
        span: 1039..1040,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 39,
        column: 31,
        span: 1041..1044,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 32,
        span: 1044..1045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
        column: 9,
        span: 1048..1054,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 10,
        span: 1054..1055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 40,
        column: 11,
        span: 1055..1056,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
        column: 12,
        span: 1056..1057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 40,
        column: 23,
        span: 1057..1068,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 26,
        span: 1069..1071,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 40,
        column: 30,
        span: 1072..1075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 31,
        span: 1075..1076,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 41,
        column: 8,
        span: 1079..1084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 41,
        column: 10,
        span: 1085..1086,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 41,
        column: 12,
        span: 1087..1088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 41,
        column: 18,
        span: 1089..1094,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 19,
        span: 1094..1095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 41,
        column: 26,
        span: 1095..1102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 27,
        span: 1102..1103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 41,
        column: 31,
        span: 1103..1107,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 32,
        span: 1107..1108,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"SfL\"",
        ),
        line: 41,
        column: 38,
        span: 1109..1114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 39,
        span: 1114..1115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
        column: 9,
        span: 1118..1124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 10,
        span: 1124..1125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 42,
        column: 11,
        span: 1125..1126,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
        column: 12,
        span: 1126..1127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 42,
        column: 16,
        span: 1127..1131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
        column: 19,
        span: 1132..1134,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 42,
        column: 23,
        span: 1135..1138,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 42,
        column: 27,
        span: 1139..1142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 42,
        column: 29,
        span: 1143..1144,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
        column: 30,
        span: 1144..1145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 42,
        column: 34,
        span: 1145..1149,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
        column: 37,
        span: 1150..1152,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        line: 42,
        column: 43,
        span: 1153..1158,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 42,
        column: 47,
        span: 1159..1162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 42,
        column: 49,
        span: 1163..1164,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
        column: 50,
        span: 1164..1165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 42,
        column: 61,
        span: 1165..1176,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
        column: 64,
        span: 1177..1179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testline",
        ),
        line: 42,
        column: 73,
        span: 1180..1188,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 42,
        column: 0,
        span: 1189..1192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 43,
        column: 11,
        span: 1202..1203,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 12,
        span: 1203..1204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        line: 43,
        column: 27,
        span: 1204..1219,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
        column: 30,
        span: 1220..1222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 43,
        column: 32,
        span: 1223..1224,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 33,
        span: 1224..1225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 43,
        column: 44,
        span: 1225..1236,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 43,
        column: 46,
        span: 1237..1238,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 49,
        span: 1238..1241,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 43,
        column: 0,
        span: 1242..1245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 44,
        column: 11,
        span: 1255..1256,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 12,
        span: 1256..1257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 44,
        column: 16,
        span: 1257..1261,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 44,
        column: 19,
        span: 1262..1264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 44,
        column: 24,
        span: 1265..1269,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 44,
        column: 28,
        span: 1270..1273,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 44,
        column: 32,
        span: 1274..1277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 44,
        column: 39,
        span: 1278..1284,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 40,
        span: 1284..1285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 44,
        column: 44,
        span: 1285..1289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 45,
        span: 1289..1290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 44,
        column: 46,
        span: 1290..1291,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 47,
        span: 1291..1292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 44,
        column: 56,
        span: 1292..1301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 57,
        span: 1301..1302,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%[\"",
        ),
        line: 44,
        column: 62,
        span: 1303..1307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 63,
        span: 1307..1308,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 64,
        span: 1308..1309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
        column: 9,
        span: 1312..1318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 10,
        span: 1318..1319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 45,
        column: 11,
        span: 1319..1320,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 12,
        span: 1320..1321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 45,
        column: 23,
        span: 1321..1332,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 45,
        column: 24,
        span: 1332..1333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 45,
        column: 25,
        span: 1333..1334,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 26,
        span: 1334..1335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 45,
        column: 37,
        span: 1335..1346,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 45,
        column: 39,
        span: 1347..1348,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
        column: 41,
        span: 1348..1350,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 45,
        column: 42,
        span: 1350..1351,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 45,
        column: 0,
        span: 1352..1355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 46,
        column: 11,
        span: 1365..1366,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
        column: 12,
        span: 1366..1367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 46,
        column: 23,
        span: 1367..1378,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 46,
        column: 24,
        span: 1378..1379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 46,
        column: 25,
        span: 1379..1380,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
        column: 26,
        span: 1380..1381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        line: 46,
        column: 41,
        span: 1381..1396,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 46,
        column: 42,
        span: 1396..1397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 43,
        span: 1397..1398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 9,
        span: 1401..1407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 10,
        span: 1407..1408,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 47,
        column: 13,
        span: 1408..1411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 47,
        column: 15,
        span: 1412..1413,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 16,
        span: 1413..1414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 47,
        column: 27,
        span: 1414..1425,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 47,
        column: 28,
        span: 1425..1426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 47,
        column: 29,
        span: 1426..1427,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 30,
        span: 1427..1428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 47,
        column: 41,
        span: 1428..1439,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 47,
        column: 42,
        span: 1439..1440,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 47,
        column: 0,
        span: 1441..1444,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 48,
        column: 13,
        span: 1454..1457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 48,
        column: 15,
        span: 1458..1459,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 48,
        column: 16,
        span: 1459..1460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 48,
        column: 27,
        span: 1460..1471,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 48,
        column: 28,
        span: 1471..1472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 48,
        column: 29,
        span: 1472..1473,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 48,
        column: 30,
        span: 1473..1474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        line: 48,
        column: 45,
        span: 1474..1489,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 48,
        column: 47,
        span: 1490..1491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
        column: 49,
        span: 1491..1493,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 48,
        column: 50,
        span: 1493..1494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 51,
        span: 1494..1495,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 49,
        column: 0,
        span: 1496..1499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
        column: 2,
        span: 1543..1544,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 53,
        column: 4,
        span: 1545..1546,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function f () end\"",
        ),
        line: 53,
        column: 24,
        span: 1547..1566,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 54,
        column: 6,
        span: 1567..1572,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 54,
        column: 15,
        span: 1573..1581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 54,
        column: 24,
        span: 1582..1590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 26,
        span: 1591..1592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 54,
        column: 27,
        span: 1592..1593,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 28,
        span: 1593..1594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 54,
        column: 30,
        span: 1595..1596,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 31,
        span: 1596..1597,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 54,
        column: 38,
        span: 1598..1604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 54,
        column: 43,
        span: 1605..1609,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 44,
        span: 1609..1610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 54,
        column: 45,
        span: 1610..1611,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 46,
        span: 1611..1612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 54,
        column: 48,
        span: 1613..1614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 49,
        span: 1614..1615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 50,
        span: 1615..1616,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 51,
        span: 1616..1617,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 54,
        column: 0,
        span: 1618..1621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 55,
        column: 9,
        span: 1622..1630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 10,
        span: 1630..1631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 55,
        column: 11,
        span: 1631..1632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 12,
        span: 1632..1633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 56,
        column: 7,
        span: 1634..1640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 8,
        span: 1640..1641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 56,
        column: 13,
        span: 1641..1646,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
        column: 14,
        span: 1646..1647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 56,
        column: 21,
        span: 1647..1654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 22,
        span: 1654..1655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 56,
        column: 23,
        span: 1655..1656,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 24,
        span: 1656..1657,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
        column: 25,
        span: 1657..1658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 56,
        column: 34,
        span: 1658..1667,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 56,
        column: 37,
        span: 1668..1670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 56,
        column: 44,
        span: 1671..1677,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
        column: 45,
        span: 1677..1678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 56,
        column: 51,
        span: 1678..1684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 52,
        span: 1684..1685,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[string \"%s\"]'",
        ),
        line: 56,
        column: 67,
        span: 1685..1700,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 68,
        span: 1700..1701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 56,
        column: 70,
        span: 1702..1703,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 71,
        span: 1703..1704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 72,
        span: 1704..1705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 57,
        column: 9,
        span: 1706..1714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 10,
        span: 1714..1715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 57,
        column: 11,
        span: 1715..1716,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 57,
        column: 13,
        span: 1716..1718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 57,
        column: 19,
        span: 1718..1724,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 57,
        column: 20,
        span: 1724..1725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 57,
        column: 26,
        span: 1725..1731,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 27,
        span: 1731..1732,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; %s\\n=1\"",
        ),
        line: 57,
        column: 37,
        span: 1732..1742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
        column: 38,
        span: 1742..1743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 57,
        column: 45,
        span: 1744..1750,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 57,
        column: 46,
        span: 1750..1751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 57,
        column: 49,
        span: 1751..1754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 50,
        span: 1754..1755,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p'",
        ),
        line: 57,
        column: 53,
        span: 1755..1758,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
        column: 54,
        span: 1758..1759,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "400",
                    after_decimal: "",
                },
            ),
        ),
        line: 57,
        column: 58,
        span: 1759..1763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 59,
        span: 1763..1764,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 60,
        span: 1764..1765,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 61,
        span: 1765..1766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 58,
        column: 7,
        span: 1767..1773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 8,
        span: 1773..1774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 58,
        column: 14,
        span: 1774..1780,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
        column: 15,
        span: 1780..1781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 58,
        column: 19,
        span: 1781..1785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 20,
        span: 1785..1786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 58,
        column: 25,
        span: 1786..1791,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
        column: 26,
        span: 1791..1792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 58,
        column: 33,
        span: 1792..1799,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 34,
        span: 1799..1800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 58,
        column: 35,
        span: 1800..1801,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 36,
        span: 1801..1802,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
        column: 37,
        span: 1802..1803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 58,
        column: 46,
        span: 1803..1812,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 47,
        span: 1812..1813,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^%[string [^\\n]*%.%.%.\"%]$'",
        ),
        line: 58,
        column: 76,
        span: 1814..1842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 77,
        span: 1842..1843,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 78,
        span: 1843..1844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 59,
        column: 9,
        span: 1845..1853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 10,
        span: 1853..1854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 59,
        column: 11,
        span: 1854..1855,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 59,
        column: 13,
        span: 1855..1857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 59,
        column: 19,
        span: 1857..1863,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 20,
        span: 1863..1864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 59,
        column: 26,
        span: 1864..1870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 27,
        span: 1870..1871,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; %s=1\"",
        ),
        line: 59,
        column: 35,
        span: 1871..1879,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 36,
        span: 1879..1880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 59,
        column: 43,
        span: 1881..1887,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 44,
        span: 1887..1888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 59,
        column: 47,
        span: 1888..1891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 48,
        span: 1891..1892,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p'",
        ),
        line: 59,
        column: 51,
        span: 1892..1895,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 52,
        span: 1895..1896,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "400",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 56,
        span: 1896..1900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 57,
        span: 1900..1901,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 58,
        span: 1901..1902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 59,
        span: 1902..1903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
        column: 7,
        span: 1904..1910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 8,
        span: 1910..1911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 60,
        column: 14,
        span: 1911..1917,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
        column: 15,
        span: 1917..1918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 60,
        column: 19,
        span: 1918..1922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 20,
        span: 1922..1923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 60,
        column: 25,
        span: 1923..1928,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
        column: 26,
        span: 1928..1929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 60,
        column: 33,
        span: 1929..1936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 34,
        span: 1936..1937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 60,
        column: 35,
        span: 1937..1938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 36,
        span: 1938..1939,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
        column: 37,
        span: 1939..1940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 60,
        column: 46,
        span: 1940..1949,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 47,
        span: 1949..1950,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^%[string [^\\n]*%.%.%.\"%]$'",
        ),
        line: 60,
        column: 76,
        span: 1951..1979,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 77,
        span: 1979..1980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 78,
        span: 1980..1981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 61,
        column: 9,
        span: 1982..1990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 10,
        span: 1990..1991,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 61,
        column: 14,
        span: 1991..1995,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 61,
        column: 16,
        span: 1995..1997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 61,
        column: 17,
        span: 1997..1998,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 18,
        span: 1998..1999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
        column: 7,
        span: 2000..2006,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 8,
        span: 2006..2007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 62,
        column: 13,
        span: 2007..2012,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 62,
        column: 14,
        span: 2012..2013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 62,
        column: 21,
        span: 2013..2020,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 22,
        span: 2020..2021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 62,
        column: 23,
        span: 2021..2022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 24,
        span: 2022..2023,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 62,
        column: 25,
        span: 2023..2024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 62,
        column: 34,
        span: 2024..2033,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 37,
        span: 2034..2036,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[string \"...\"]'",
        ),
        line: 62,
        column: 54,
        span: 2037..2053,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 55,
        span: 2053..2054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 63,
        column: 9,
        span: 2055..2063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 10,
        span: 2063..2064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 63,
        column: 11,
        span: 2064..2065,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 12,
        span: 2065..2066,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 63,
        column: 15,
        span: 2067..2069,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 16,
        span: 2069..2070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 64,
        column: 7,
        span: 2071..2077,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 8,
        span: 2077..2078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 64,
        column: 13,
        span: 2078..2083,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 64,
        column: 14,
        span: 2083..2084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 64,
        column: 21,
        span: 2084..2091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 22,
        span: 2091..2092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 64,
        column: 23,
        span: 2092..2093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 24,
        span: 2093..2094,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 64,
        column: 25,
        span: 2094..2095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 64,
        column: 34,
        span: 2095..2104,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 64,
        column: 37,
        span: 2105..2107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[string \"\"]'",
        ),
        line: 64,
        column: 51,
        span: 2108..2121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 52,
        span: 2121..2122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 65,
        column: 9,
        span: 2123..2131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 10,
        span: 2131..2132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 65,
        column: 11,
        span: 2132..2133,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 12,
        span: 2133..2134,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@xuxu\"",
        ),
        line: 65,
        column: 20,
        span: 2135..2142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 21,
        span: 2142..2143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 66,
        column: 7,
        span: 2144..2150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 8,
        span: 2150..2151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 66,
        column: 13,
        span: 2151..2156,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 66,
        column: 14,
        span: 2156..2157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 66,
        column: 21,
        span: 2157..2164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 22,
        span: 2164..2165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 66,
        column: 23,
        span: 2165..2166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 24,
        span: 2166..2167,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 66,
        column: 25,
        span: 2167..2168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 66,
        column: 34,
        span: 2168..2177,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 66,
        column: 37,
        span: 2178..2180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 66,
        column: 44,
        span: 2181..2187,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 45,
        span: 2187..2188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 67,
        column: 9,
        span: 2189..2197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 10,
        span: 2197..2198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 67,
        column: 11,
        span: 2198..2199,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 12,
        span: 2199..2200,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@\"",
        ),
        line: 67,
        column: 16,
        span: 2201..2204,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 67,
        column: 18,
        span: 2204..2206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 67,
        column: 24,
        span: 2206..2212,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 25,
        span: 2212..2213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 67,
        column: 28,
        span: 2213..2216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 29,
        span: 2216..2217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p'",
        ),
        line: 67,
        column: 32,
        span: 2217..2220,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 33,
        span: 2220..2221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
        column: 38,
        span: 2221..2226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 39,
        span: 2226..2227,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 67,
        column: 41,
        span: 2227..2229,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'t'",
        ),
        line: 67,
        column: 44,
        span: 2229..2232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 45,
        span: 2232..2233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 68,
        column: 7,
        span: 2234..2240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 8,
        span: 2240..2241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 68,
        column: 14,
        span: 2241..2247,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 68,
        column: 15,
        span: 2247..2248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 68,
        column: 19,
        span: 2248..2252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 20,
        span: 2252..2253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 68,
        column: 25,
        span: 2253..2258,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 68,
        column: 26,
        span: 2258..2259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 68,
        column: 33,
        span: 2259..2266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 34,
        span: 2266..2267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 68,
        column: 35,
        span: 2267..2268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 36,
        span: 2268..2269,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 68,
        column: 37,
        span: 2269..2270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 68,
        column: 46,
        span: 2270..2279,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 47,
        span: 2279..2280,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%.%.%.p*t$\"",
        ),
        line: 68,
        column: 61,
        span: 2281..2294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 62,
        span: 2294..2295,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 63,
        span: 2295..2296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 69,
        column: 9,
        span: 2297..2305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 10,
        span: 2305..2306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 69,
        column: 11,
        span: 2306..2307,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 12,
        span: 2307..2308,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=xuxu\"",
        ),
        line: 69,
        column: 20,
        span: 2309..2316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 21,
        span: 2316..2317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 70,
        column: 7,
        span: 2318..2324,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 8,
        span: 2324..2325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 70,
        column: 13,
        span: 2325..2330,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
        column: 14,
        span: 2330..2331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 70,
        column: 21,
        span: 2331..2338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 22,
        span: 2338..2339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 70,
        column: 23,
        span: 2339..2340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 24,
        span: 2340..2341,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
        column: 25,
        span: 2341..2342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 70,
        column: 34,
        span: 2342..2351,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
        column: 37,
        span: 2352..2354,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 70,
        column: 44,
        span: 2355..2361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 45,
        span: 2361..2362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 71,
        column: 9,
        span: 2363..2371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 10,
        span: 2371..2372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 71,
        column: 11,
        span: 2372..2373,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 12,
        span: 2373..2374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 71,
        column: 19,
        span: 2375..2381,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 20,
        span: 2381..2382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 71,
        column: 26,
        span: 2382..2388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 27,
        span: 2388..2389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=%s\"",
        ),
        line: 71,
        column: 32,
        span: 2389..2394,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 33,
        span: 2394..2395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 71,
        column: 40,
        span: 2396..2402,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 41,
        span: 2402..2403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 71,
        column: 44,
        span: 2403..2406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 45,
        span: 2406..2407,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 71,
        column: 48,
        span: 2407..2410,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 49,
        span: 2410..2411,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 53,
        span: 2411..2415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 54,
        span: 2415..2416,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 55,
        span: 2416..2417,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 56,
        span: 2417..2418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 72,
        column: 7,
        span: 2419..2425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 8,
        span: 2425..2426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 72,
        column: 14,
        span: 2426..2432,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 72,
        column: 15,
        span: 2432..2433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 72,
        column: 19,
        span: 2433..2437,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 20,
        span: 2437..2438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 72,
        column: 25,
        span: 2438..2443,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 72,
        column: 26,
        span: 2443..2444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 72,
        column: 33,
        span: 2444..2451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 34,
        span: 2451..2452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 72,
        column: 35,
        span: 2452..2453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 36,
        span: 2453..2454,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 72,
        column: 37,
        span: 2454..2455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 72,
        column: 46,
        span: 2455..2464,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 47,
        span: 2464..2465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^x*$\"",
        ),
        line: 72,
        column: 54,
        span: 2466..2472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 55,
        span: 2472..2473,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 56,
        span: 2473..2474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 73,
        column: 9,
        span: 2475..2483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 10,
        span: 2483..2484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 73,
        column: 11,
        span: 2484..2485,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 12,
        span: 2485..2486,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        line: 73,
        column: 16,
        span: 2487..2490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 17,
        span: 2490..2491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 74,
        column: 7,
        span: 2492..2498,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 8,
        span: 2498..2499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 74,
        column: 13,
        span: 2499..2504,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 74,
        column: 14,
        span: 2504..2505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 74,
        column: 21,
        span: 2505..2512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 22,
        span: 2512..2513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 74,
        column: 23,
        span: 2513..2514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 24,
        span: 2514..2515,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 74,
        column: 25,
        span: 2515..2516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 74,
        column: 34,
        span: 2516..2525,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 74,
        column: 37,
        span: 2526..2528,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 74,
        column: 40,
        span: 2529..2531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 41,
        span: 2531..2532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 75,
        column: 2,
        span: 2533..2534,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 75,
        column: 4,
        span: 2535..2536,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 75,
        column: 8,
        span: 2537..2540,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 75,
        column: 9,
        span: 2540..2541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 75,
        column: 11,
        span: 2542..2543,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 75,
        column: 13,
        span: 2544..2545,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 75,
        column: 17,
        span: 2546..2549,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 75,
        column: 18,
        span: 2549..2550,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 78,
        column: 0,
        span: 2553..2559,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 79,
        column: 8,
        span: 2562..2567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 79,
        column: 10,
        span: 2568..2569,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 12,
        span: 2570..2571,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 79,
        column: 14,
        span: 2572..2573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 79,
        column: 15,
        span: 2573..2574,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 17,
        span: 2575..2576,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 79,
        column: 26,
        span: 2577..2585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 28,
        span: 2586..2587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 29,
        span: 2587..2588,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 80,
        column: 10,
        span: 2593..2598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 80,
        column: 12,
        span: 2599..2600,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 80,
        column: 14,
        span: 2601..2602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 80,
        column: 20,
        span: 2603..2608,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 80,
        column: 21,
        span: 2608..2609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 80,
        column: 28,
        span: 2609..2616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 29,
        span: 2616..2617,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 30,
        span: 2616..2618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 31,
        span: 2618..2619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 81,
        column: 11,
        span: 2624..2630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 12,
        span: 2630..2631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 81,
        column: 13,
        span: 2631..2632,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 81,
        column: 14,
        span: 2632..2633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 81,
        column: 18,
        span: 2633..2637,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 81,
        column: 21,
        span: 2638..2640,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'f'",
        ),
        line: 81,
        column: 25,
        span: 2641..2644,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 81,
        column: 29,
        span: 2645..2648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 81,
        column: 31,
        span: 2649..2650,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 81,
        column: 32,
        span: 2650..2651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 81,
        column: 40,
        span: 2651..2659,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 81,
        column: 43,
        span: 2660..2662,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'local'",
        ),
        line: 81,
        column: 51,
        span: 2663..2670,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 52,
        span: 2670..2671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 82,
        column: 6,
        span: 2676..2677,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 82,
        column: 8,
        span: 2678..2679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 82,
        column: 14,
        span: 2680..2685,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 82,
        column: 15,
        span: 2685..2686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 82,
        column: 22,
        span: 2686..2693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 23,
        span: 2693..2694,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 82,
        column: 24,
        span: 2693..2695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 25,
        span: 2695..2696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 83,
        column: 11,
        span: 2701..2707,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 12,
        span: 2707..2708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
        column: 13,
        span: 2708..2709,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 83,
        column: 14,
        span: 2709..2710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 83,
        column: 18,
        span: 2710..2714,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 83,
        column: 21,
        span: 2715..2717,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 83,
        column: 25,
        span: 2718..2721,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 83,
        column: 29,
        span: 2722..2725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
        column: 31,
        span: 2726..2727,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 83,
        column: 32,
        span: 2727..2728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 83,
        column: 40,
        span: 2728..2736,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 83,
        column: 43,
        span: 2737..2739,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'field'",
        ),
        line: 83,
        column: 51,
        span: 2740..2747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 52,
        span: 2747..2748,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 84,
        column: 11,
        span: 2753..2759,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xixi'",
        ),
        line: 84,
        column: 18,
        span: 2760..2766,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 85,
        column: 6,
        span: 2769..2772,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 85,
        column: 7,
        span: 2772..2773,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 86,
        column: 8,
        span: 2776..2781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 86,
        column: 10,
        span: 2782..2783,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
        column: 12,
        span: 2784..2785,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 86,
        column: 21,
        span: 2786..2794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 23,
        span: 2795..2796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 24,
        span: 2796..2797,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 86,
        column: 31,
        span: 2798..2804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 33,
        span: 2804..2806,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 86,
        column: 34,
        span: 2806..2807,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 35,
        span: 2806..2808,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 86,
        column: 39,
        span: 2809..2812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 41,
        span: 2813..2814,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 86,
        column: 44,
        span: 2814..2817,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 46,
        span: 2817..2819,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 86,
        column: 49,
        span: 2820..2822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 86,
        column: 51,
        span: 2823..2824,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 86,
        column: 52,
        span: 2824..2825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 86,
        column: 53,
        span: 2825..2826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 54,
        span: 2826..2827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 55,
        span: 2827..2828,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 56,
        span: 2828..2829,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 86,
        column: 0,
        span: 2830..2833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 87,
        column: 9,
        span: 2836..2842,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 10,
        span: 2842..2843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 87,
        column: 11,
        span: 2843..2844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 12,
        span: 2844..2845,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 13,
        span: 2845..2846,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
        column: 16,
        span: 2847..2849,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xixi'",
        ),
        line: 87,
        column: 23,
        span: 2850..2856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 24,
        span: 2856..2857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 88,
        column: 4,
        span: 2860..2861,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 88,
        column: 6,
        span: 2862..2863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 88,
        column: 12,
        span: 2864..2869,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 13,
        span: 2869..2870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 88,
        column: 20,
        span: 2870..2877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 21,
        span: 2877..2878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 88,
        column: 22,
        span: 2878..2879,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 23,
        span: 2879..2880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 89,
        column: 9,
        span: 2883..2889,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 10,
        span: 2889..2890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 89,
        column: 11,
        span: 2890..2891,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 89,
        column: 12,
        span: 2891..2892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 89,
        column: 16,
        span: 2892..2896,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 89,
        column: 19,
        span: 2897..2899,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        line: 89,
        column: 25,
        span: 2900..2905,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 89,
        column: 29,
        span: 2906..2909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 89,
        column: 31,
        span: 2910..2911,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 89,
        column: 32,
        span: 2911..2912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 89,
        column: 36,
        span: 2912..2916,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 89,
        column: 39,
        span: 2917..2919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 89,
        column: 41,
        span: 2920..2921,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 89,
        column: 45,
        span: 2922..2925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 89,
        column: 47,
        span: 2926..2927,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 89,
        column: 48,
        span: 2927..2928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 89,
        column: 56,
        span: 2928..2936,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 89,
        column: 59,
        span: 2937..2939,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 89,
        column: 62,
        span: 2940..2942,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 89,
        column: 66,
        span: 2943..2946,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 89,
        column: 70,
        span: 2947..2950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 89,
        column: 72,
        span: 2951..2952,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 89,
        column: 73,
        span: 2952..2953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 89,
        column: 77,
        span: 2953..2957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 78,
        span: 2957..2958,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 91,
        column: 11,
        span: 2962..2970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 91,
        column: 13,
        span: 2971..2972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 15,
        span: 2973..2974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 91,
        column: 16,
        span: 2974..2975,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 17,
        span: 2975..2976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 91,
        column: 22,
        span: 2977..2981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 23,
        span: 2981..2982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 92,
        column: 9,
        span: 2999..3003,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 92,
        column: 11,
        span: 3004..3005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 92,
        column: 16,
        span: 3006..3010,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 92,
        column: 19,
        span: 3011..3013,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'f'",
        ),
        line: 92,
        column: 23,
        span: 3014..3017,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 93,
        column: 10,
        span: 3022..3027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 93,
        column: 12,
        span: 3028..3029,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 93,
        column: 14,
        span: 3030..3031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 93,
        column: 20,
        span: 3032..3037,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
        column: 21,
        span: 3037..3038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 93,
        column: 28,
        span: 3038..3045,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 29,
        span: 3045..3046,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 93,
        column: 30,
        span: 3045..3047,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 31,
        span: 3047..3048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 94,
        column: 11,
        span: 3053..3059,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 12,
        span: 3059..3060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 94,
        column: 13,
        span: 3060..3061,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 94,
        column: 14,
        span: 3061..3062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 94,
        column: 18,
        span: 3062..3066,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 94,
        column: 21,
        span: 3067..3069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 94,
        column: 26,
        span: 3070..3074,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 94,
        column: 30,
        span: 3075..3078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 94,
        column: 32,
        span: 3079..3080,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 94,
        column: 33,
        span: 3080..3081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 94,
        column: 41,
        span: 3081..3089,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 94,
        column: 44,
        span: 3090..3092,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'local'",
        ),
        line: 94,
        column: 52,
        span: 3093..3100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 53,
        span: 3100..3101,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 95,
        column: 11,
        span: 3106..3112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 95,
        column: 0,
        span: 3113..3114,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 96,
        column: 0,
        span: 3117..3120,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 99,
        column: 5,
        span: 3160..3162,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
        column: 7,
        span: 3162..3164,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 99,
        column: 8,
        span: 3164..3165,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
        column: 9,
        span: 3164..3166,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 99,
        column: 14,
        span: 3167..3171,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 99,
        column: 20,
        span: 3172..3177,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 99,
        column: 24,
        span: 3178..3181,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 99,
        column: 25,
        span: 3181..3182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 99,
        column: 27,
        span: 3183..3184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 28,
        span: 3184..3185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 29,
        span: 3185..3186,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 100,
        column: 5,
        span: 3189..3191,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 7,
        span: 3191..3193,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 100,
        column: 8,
        span: 3193..3194,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 9,
        span: 3193..3195,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 100,
        column: 14,
        span: 3196..3200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 100,
        column: 16,
        span: 3201..3202,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 100,
        column: 17,
        span: 3202..3203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 18,
        span: 3202..3204,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 100,
        column: 23,
        span: 3205..3209,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 100,
        column: 29,
        span: 3210..3215,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 100,
        column: 33,
        span: 3216..3219,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 100,
        column: 34,
        span: 3219..3220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 100,
        column: 36,
        span: 3221..3222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 37,
        span: 3222..3223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 38,
        span: 3223..3224,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 101,
        column: 8,
        span: 3227..3232,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 10,
        span: 3232..3234,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 101,
        column: 13,
        span: 3235..3237,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 101,
        column: 19,
        span: 3238..3243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 101,
        column: 21,
        span: 3244..3245,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 101,
        column: 22,
        span: 3245..3246,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 24,
        span: 3245..3248,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 101,
        column: 25,
        span: 3248..3249,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 101,
        column: 31,
        span: 3250..3255,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 101,
        column: 35,
        span: 3256..3259,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 101,
        column: 36,
        span: 3259..3260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 101,
        column: 38,
        span: 3261..3262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 39,
        span: 3262..3263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 40,
        span: 3263..3264,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 102,
        column: 8,
        span: 3267..3272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 102,
        column: 10,
        span: 3273..3274,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 102,
        column: 12,
        span: 3275..3276,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 0,
        span: 3276..3278,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 103,
        column: 5,
        span: 3281..3283,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 7,
        span: 3283..3285,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 103,
        column: 8,
        span: 3285..3286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 9,
        span: 3285..3287,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 103,
        column: 14,
        span: 3288..3292,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 103,
        column: 21,
        span: 3293..3299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 103,
        column: 26,
        span: 3300..3304,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 103,
        column: 27,
        span: 3304..3305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 103,
        column: 30,
        span: 3305..3308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 31,
        span: 3308..3309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 32,
        span: 3308..3310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 33,
        span: 3310..3311,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 103,
        column: 37,
        span: 3312..3315,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 103,
        column: 38,
        span: 3315..3316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 103,
        column: 40,
        span: 3317..3318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 41,
        span: 3318..3319,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 42,
        span: 3319..3320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 104,
        column: 4,
        span: 3323..3324,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 104,
        column: 6,
        span: 3325..3326,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 8,
        span: 3326..3328,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 104,
        column: 9,
        span: 3328..3329,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 10,
        span: 3328..3330,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 104,
        column: 11,
        span: 3330..3331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 104,
        column: 13,
        span: 3332..3333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 14,
        span: 3333..3334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 15,
        span: 3334..3335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
        column: 4,
        span: 3338..3339,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 6,
        span: 3340..3341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 8,
        span: 3341..3343,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 105,
        column: 9,
        span: 3343..3344,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 10,
        span: 3343..3345,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 105,
        column: 13,
        span: 3346..3348,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 15,
        span: 3348..3350,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 105,
        column: 16,
        span: 3350..3351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 105,
        column: 18,
        span: 3352..3353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 19,
        span: 3353..3354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 20,
        span: 3354..3355,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 106,
        column: 9,
        span: 3358..3364,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 106,
        column: 15,
        span: 3365..3370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 106,
        column: 17,
        span: 3371..3372,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 106,
        column: 18,
        span: 3372..3373,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 20,
        span: 3372..3375,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 106,
        column: 21,
        span: 3375..3376,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 106,
        column: 24,
        span: 3377..3379,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 26,
        span: 3379..3381,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 106,
        column: 27,
        span: 3381..3382,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 28,
        span: 3381..3383,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 106,
        column: 33,
        span: 3384..3388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 106,
        column: 35,
        span: 3389..3390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 36,
        span: 3390..3391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 37,
        span: 3391..3392,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 106,
        column: 42,
        span: 3393..3397,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 106,
        column: 48,
        span: 3398..3403,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 106,
        column: 52,
        span: 3404..3407,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 106,
        column: 53,
        span: 3407..3408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 106,
        column: 55,
        span: 3409..3410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 56,
        span: 3410..3411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 57,
        span: 3411..3412,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 106,
        column: 63,
        span: 3413..3418,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 0,
        span: 3418..3420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 107,
        column: 4,
        span: 3423..3424,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
        column: 6,
        span: 3425..3426,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 107,
        column: 8,
        span: 3427..3428,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 107,
        column: 9,
        span: 3428..3429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 108,
        column: 4,
        span: 3432..3433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 5,
        span: 3433..3434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 108,
        column: 6,
        span: 3434..3435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 7,
        span: 3435..3436,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 108,
        column: 8,
        span: 3436..3437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 108,
        column: 9,
        span: 3437..3438,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
        column: 11,
        span: 3439..3440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 108,
        column: 13,
        span: 3441..3442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 14,
        span: 3442..3443,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 15,
        span: 3442..3444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 16,
        span: 3444..3445,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 108,
        column: 20,
        span: 3446..3449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 108,
        column: 22,
        span: 3450..3451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 23,
        span: 3451..3452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 25,
        span: 3451..3454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 26,
        span: 3454..3455,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 108,
        column: 27,
        span: 3455..3456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 108,
        column: 28,
        span: 3456..3457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 29,
        span: 3457..3458,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 30,
        span: 3457..3459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 31,
        span: 3459..3460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 109,
        column: 9,
        span: 3463..3469,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 10,
        span: 3469..3470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 109,
        column: 11,
        span: 3470..3471,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 109,
        column: 12,
        span: 3471..3472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 109,
        column: 13,
        span: 3472..3473,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 109,
        column: 16,
        span: 3474..3476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 109,
        column: 18,
        span: 3477..3478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 19,
        span: 3478..3479,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 21,
        span: 3478..3481,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 22,
        span: 3481..3482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 23,
        span: 3482..3483,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 110,
        column: 11,
        span: 3486..3494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 110,
        column: 13,
        span: 3495..3496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 14,
        span: 3496..3497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 110,
        column: 15,
        span: 3497..3498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 16,
        span: 3498..3499,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 110,
        column: 19,
        span: 3500..3502,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 110,
        column: 23,
        span: 3503..3506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 110,
        column: 25,
        span: 3507..3508,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 110,
        column: 30,
        span: 3509..3513,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 110,
        column: 37,
        span: 3514..3520,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 39,
        span: 3520..3522,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 110,
        column: 43,
        span: 3523..3526,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 110,
        column: 50,
        span: 3527..3533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 52,
        span: 3534..3535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 110,
        column: 53,
        span: 3535..3536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 54,
        span: 3536..3537,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 110,
        column: 57,
        span: 3537..3540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 58,
        span: 3540..3541,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 110,
        column: 62,
        span: 3542..3545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 63,
        span: 3545..3546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 64,
        span: 3546..3547,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 110,
        column: 0,
        span: 3548..3551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
        column: 9,
        span: 3554..3560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 10,
        span: 3560..3561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 111,
        column: 11,
        span: 3561..3562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 12,
        span: 3562..3563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 111,
        column: 13,
        span: 3563..3564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 14,
        span: 3564..3565,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 111,
        column: 17,
        span: 3566..3568,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 111,
        column: 21,
        span: 3569..3572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 22,
        span: 3572..3573,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 112,
        column: 6,
        span: 3574..3579,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
        column: 0,
        span: 3579..3581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 114,
        column: 5,
        span: 3583..3587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 6,
        span: 3587..3588,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[if\nmath.sin(1)\nthen\n  a=1\nelse\n  a=2\nend\n]]",
        ),
        line: 121,
        column: 3,
        span: 3588..3633,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 4,
        span: 3633..3634,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 121,
        column: 6,
        span: 3635..3636,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 7,
        span: 3635..3637,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 8,
        span: 3637..3638,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 9,
        span: 3637..3639,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 10,
        span: 3639..3640,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 11,
        span: 3639..3641,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 12,
        span: 3641..3642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 13,
        span: 3641..3643,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 121,
        column: 14,
        span: 3643..3644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 15,
        span: 3644..3645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 123,
        column: 5,
        span: 3647..3651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 6,
        span: 3651..3652,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal function foo()\nend\nfoo()\nA = 1\nA = 2\nA = 3\n]]",
        ),
        line: 130,
        column: 3,
        span: 3652..3706,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 4,
        span: 3706..3707,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 130,
        column: 6,
        span: 3708..3709,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 7,
        span: 3708..3710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 8,
        span: 3710..3711,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 10,
        span: 3711..3713,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 11,
        span: 3713..3714,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 13,
        span: 3714..3716,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 14,
        span: 3716..3717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 16,
        span: 3717..3719,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 17,
        span: 3719..3720,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 19,
        span: 3720..3722,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 20,
        span: 3722..3723,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 22,
        span: 3723..3725,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 130,
        column: 23,
        span: 3725..3726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 24,
        span: 3726..3727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 133,
        column: 5,
        span: 3730..3734,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 6,
        span: 3734..3735,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[--\nif nil then\n  a=1\nelse\n  a=2\nend\n]]",
        ),
        line: 139,
        column: 3,
        span: 3735..3775,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 4,
        span: 3775..3776,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 139,
        column: 6,
        span: 3777..3778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 7,
        span: 3777..3779,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 8,
        span: 3779..3780,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 9,
        span: 3779..3781,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 10,
        span: 3781..3782,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 11,
        span: 3781..3783,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 139,
        column: 12,
        span: 3783..3784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 13,
        span: 3784..3785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 141,
        column: 5,
        span: 3787..3791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 6,
        span: 3791..3792,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[a=1\nrepeat\n  a=a+1\nuntil a==3\n]]",
        ),
        line: 145,
        column: 3,
        span: 3792..3826,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 4,
        span: 3826..3827,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 145,
        column: 6,
        span: 3828..3829,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 7,
        span: 3828..3830,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 8,
        span: 3830..3831,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 9,
        span: 3830..3832,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 10,
        span: 3832..3833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 11,
        span: 3832..3834,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 12,
        span: 3834..3835,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 13,
        span: 3834..3836,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 14,
        span: 3836..3837,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 15,
        span: 3836..3838,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 145,
        column: 16,
        span: 3838..3839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 17,
        span: 3839..3840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 147,
        column: 5,
        span: 3842..3846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 6,
        span: 3846..3847,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ do\n  return\nend\n]]",
        ),
        line: 150,
        column: 3,
        span: 3847..3868,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 4,
        span: 3868..3869,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 150,
        column: 6,
        span: 3870..3871,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 7,
        span: 3870..3872,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 150,
        column: 8,
        span: 3872..3873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 9,
        span: 3873..3874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 152,
        column: 5,
        span: 3876..3880,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 6,
        span: 3880..3881,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[local a\na=1\nwhile a<=3 do\n  a=a+1\nend\n]]",
        ),
        line: 157,
        column: 3,
        span: 3881..3923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 4,
        span: 3923..3924,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 157,
        column: 6,
        span: 3925..3926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 7,
        span: 3925..3927,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 8,
        span: 3927..3928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 9,
        span: 3927..3929,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 10,
        span: 3929..3930,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 11,
        span: 3929..3931,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 12,
        span: 3931..3932,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 13,
        span: 3931..3933,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 14,
        span: 3933..3934,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 15,
        span: 3933..3935,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 16,
        span: 3935..3936,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 17,
        span: 3935..3937,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 18,
        span: 3937..3938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 19,
        span: 3937..3939,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 20,
        span: 3939..3940,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 21,
        span: 3939..3941,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 22,
        span: 3941..3942,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 23,
        span: 3941..3943,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 24,
        span: 3943..3944,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 25,
        span: 3943..3945,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 157,
        column: 26,
        span: 3945..3946,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 27,
        span: 3946..3947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 159,
        column: 5,
        span: 3949..3953,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 6,
        span: 3953..3954,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[while math.sin(1) do\n  if math.sin(1)\n  then break\n  end\nend\na=1]]",
        ),
        line: 164,
        column: 6,
        span: 3954..4022,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
        column: 7,
        span: 4022..4023,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 164,
        column: 9,
        span: 4024..4025,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 10,
        span: 4024..4026,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
        column: 11,
        span: 4026..4027,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 12,
        span: 4026..4028,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
        column: 13,
        span: 4028..4029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 14,
        span: 4028..4030,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
        column: 15,
        span: 4030..4031,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 16,
        span: 4030..4032,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 164,
        column: 17,
        span: 4032..4033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 18,
        span: 4033..4034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 166,
        column: 5,
        span: 4036..4040,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 6,
        span: 4040..4041,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[for i=1,3 do\n  a=i\nend\n]]",
        ),
        line: 169,
        column: 3,
        span: 4041..4068,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 4,
        span: 4068..4069,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 169,
        column: 6,
        span: 4070..4071,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 7,
        span: 4070..4072,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 8,
        span: 4072..4073,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 9,
        span: 4072..4074,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 10,
        span: 4074..4075,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 11,
        span: 4074..4076,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 12,
        span: 4076..4077,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 13,
        span: 4076..4078,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 14,
        span: 4078..4079,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 15,
        span: 4078..4080,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 16,
        span: 4080..4081,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 17,
        span: 4080..4082,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 18,
        span: 4082..4083,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 19,
        span: 4082..4084,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 20,
        span: 4084..4085,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 21,
        span: 4084..4086,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 169,
        column: 22,
        span: 4086..4087,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 23,
        span: 4087..4088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 171,
        column: 5,
        span: 4090..4094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 6,
        span: 4094..4095,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[for i,v in pairs{'a','b'} do\n  a=tostring(i) .. v\nend\n]]",
        ),
        line: 174,
        column: 3,
        span: 4095..4153,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 4,
        span: 4153..4154,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 174,
        column: 6,
        span: 4155..4156,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 7,
        span: 4155..4157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 8,
        span: 4157..4158,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 9,
        span: 4157..4159,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 10,
        span: 4159..4160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 11,
        span: 4159..4161,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 12,
        span: 4161..4162,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 13,
        span: 4161..4163,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 14,
        span: 4163..4164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 15,
        span: 4163..4165,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 16,
        span: 4165..4166,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 17,
        span: 4165..4167,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 174,
        column: 18,
        span: 4167..4168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 19,
        span: 4168..4169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 176,
        column: 5,
        span: 4171..4175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 6,
        span: 4175..4176,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[for i=1,4 do a=1 end]]",
        ),
        line: 176,
        column: 30,
        span: 4176..4200,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 31,
        span: 4200..4201,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 176,
        column: 33,
        span: 4202..4203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 34,
        span: 4202..4204,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 35,
        span: 4204..4205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 36,
        span: 4204..4206,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 37,
        span: 4206..4207,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 38,
        span: 4206..4208,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 39,
        span: 4208..4209,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 40,
        span: 4208..4210,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 176,
        column: 41,
        span: 4210..4211,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 42,
        span: 4211..4212,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 179,
        column: 3,
        span: 4215..4217,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 181,
        column: 8,
        span: 4276..4281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 181,
        column: 10,
        span: 4282..4283,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 181,
        column: 12,
        span: 4284..4285,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 181,
        column: 14,
        span: 4286..4287,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 15,
        span: 4286..4288,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 16,
        span: 4288..4289,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 18,
        span: 4289..4291,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 19,
        span: 4291..4292,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 21,
        span: 4292..4294,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 22,
        span: 4294..4295,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 25,
        span: 4295..4298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 26,
        span: 4298..4299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "124",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 30,
        span: 4299..4303,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 31,
        span: 4303..4304,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "125",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 35,
        span: 4304..4308,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 36,
        span: 4308..4309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "126",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 40,
        span: 4309..4313,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 41,
        span: 4313..4314,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 45,
        span: 4314..4318,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 46,
        span: 4318..4319,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "128",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 50,
        span: 4319..4323,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 51,
        span: 4323..4324,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "129",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 55,
        span: 4324..4328,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 56,
        span: 4328..4329,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "130",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 60,
        span: 4329..4333,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 61,
        span: 4333..4334,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
        column: 17,
        span: 4347..4351,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 18,
        span: 4351..4352,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "256",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
        column: 22,
        span: 4352..4356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 23,
        span: 4356..4357,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "257",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
        column: 27,
        span: 4357..4361,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 28,
        span: 4361..4362,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
        column: 32,
        span: 4362..4366,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 33,
        span: 4366..4367,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
        column: 38,
        span: 4367..4372,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 182,
        column: 39,
        span: 4372..4373,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 183,
        column: 8,
        span: 4376..4381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 183,
        column: 10,
        span: 4382..4383,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 183,
        column: 12,
        span: 4384..4385,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n     local b = {10}\n     a = b[1] X + Y b[1]\n     b = 4\n  ]]",
        ),
        line: 187,
        column: 5,
        span: 4386..4449,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 188,
        column: 6,
        span: 4452..4455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 188,
        column: 8,
        span: 4456..4457,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 188,
        column: 9,
        span: 4457..4458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 188,
        column: 11,
        span: 4459..4460,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 188,
        column: 14,
        span: 4461..4463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 188,
        column: 21,
        span: 4464..4470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 22,
        span: 4470..4471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 188,
        column: 23,
        span: 4471..4472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 24,
        span: 4472..4473,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 188,
        column: 0,
        span: 4474..4476,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 189,
        column: 10,
        span: 4481..4486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "subs",
        ),
        line: 189,
        column: 15,
        span: 4487..4491,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 189,
        column: 17,
        span: 4492..4493,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 189,
        column: 19,
        span: 4494..4495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 189,
        column: 20,
        span: 4495..4496,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 189,
        column: 22,
        span: 4497..4498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 189,
        column: 29,
        span: 4499..4505,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 189,
        column: 30,
        span: 4505..4506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 189,
        column: 33,
        span: 4506..4509,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 34,
        span: 4509..4510,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 189,
        column: 38,
        span: 4510..4514,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 39,
        span: 4514..4515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 189,
        column: 41,
        span: 4516..4517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 42,
        span: 4517..4518,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 189,
        column: 43,
        span: 4518..4519,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 190,
        column: 8,
        span: 4524..4527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 190,
        column: 10,
        span: 4528..4529,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 11,
        span: 4529..4530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 190,
        column: 13,
        span: 4531..4532,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 190,
        column: 16,
        span: 4533..4535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 190,
        column: 23,
        span: 4536..4542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 24,
        span: 4542..4543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 190,
        column: 25,
        span: 4543..4544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 26,
        span: 4544..4545,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 190,
        column: 0,
        span: 4546..4548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "subs",
        ),
        line: 191,
        column: 11,
        span: 4555..4559,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 191,
        column: 12,
        span: 4559..4560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 191,
        column: 13,
        span: 4560..4561,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 191,
        column: 15,
        span: 4562..4563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 191,
        column: 22,
        span: 4564..4570,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 191,
        column: 23,
        span: 4570..4571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 191,
        column: 26,
        span: 4571..4574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 27,
        span: 4574..4575,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 191,
        column: 31,
        span: 4575..4579,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 32,
        span: 4579..4580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 191,
        column: 34,
        span: 4581..4582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 35,
        span: 4582..4583,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 192,
        column: 12,
        span: 4590..4595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 192,
        column: 14,
        span: 4596..4597,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 192,
        column: 16,
        span: 4598..4599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 192,
        column: 23,
        span: 4600..4606,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 192,
        column: 24,
        span: 4606..4607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 192,
        column: 28,
        span: 4607..4611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 29,
        span: 4611..4612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 192,
        column: 30,
        span: 4612..4613,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 31,
        span: 4613..4614,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[XY]\"",
        ),
        line: 192,
        column: 38,
        span: 4615..4621,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 39,
        span: 4621..4622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "subs",
        ),
        line: 192,
        column: 44,
        span: 4623..4627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 45,
        span: 4627..4628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 193,
        column: 11,
        span: 4635..4639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 12,
        span: 4639..4640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 193,
        column: 13,
        span: 4640..4641,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 14,
        span: 4641..4642,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 193,
        column: 16,
        span: 4643..4644,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 17,
        span: 4643..4645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 18,
        span: 4645..4646,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 20,
        span: 4646..4648,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
        column: 22,
        span: 4649..4650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 193,
        column: 24,
        span: 4651..4652,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 25,
        span: 4652..4653,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 27,
        span: 4653..4655,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
        column: 29,
        span: 4656..4657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 193,
        column: 31,
        span: 4658..4659,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
        column: 33,
        span: 4660..4661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 193,
        column: 35,
        span: 4662..4663,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 36,
        span: 4663..4664,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 38,
        span: 4664..4666,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
        column: 40,
        span: 4667..4668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 193,
        column: 42,
        span: 4669..4670,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 43,
        span: 4670..4671,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 45,
        span: 4671..4673,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
        column: 47,
        span: 4674..4675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 193,
        column: 49,
        span: 4676..4677,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
        column: 51,
        span: 4678..4679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 193,
        column: 53,
        span: 4680..4681,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 54,
        span: 4681..4682,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 56,
        span: 4682..4684,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
        column: 58,
        span: 4685..4686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 193,
        column: 60,
        span: 4687..4688,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
        column: 62,
        span: 4689..4690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 193,
        column: 64,
        span: 4691..4692,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 193,
        column: 65,
        span: 4692..4693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 66,
        span: 4693..4694,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 194,
        column: 0,
        span: 4699..4702,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 195,
        column: 0,
        span: 4705..4708,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 196,
        column: 0,
        span: 4709..4712,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 199,
        column: 3,
        span: 4715..4717,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 200,
        column: 8,
        span: 4746..4751,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 200,
        column: 17,
        span: 4752..4760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkactivelines",
        ),
        line: 200,
        column: 34,
        span: 4761..4777,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 36,
        span: 4778..4779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 200,
        column: 37,
        span: 4779..4780,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 38,
        span: 4780..4781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 200,
        column: 44,
        span: 4782..4787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 45,
        span: 4787..4788,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 201,
        column: 10,
        span: 4793..4798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 201,
        column: 12,
        span: 4799..4800,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 201,
        column: 14,
        span: 4801..4802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 201,
        column: 20,
        span: 4803..4808,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 201,
        column: 21,
        span: 4808..4809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 201,
        column: 28,
        span: 4809..4816,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 29,
        span: 4816..4817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 201,
        column: 30,
        span: 4817..4818,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 31,
        span: 4818..4819,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"SL\"",
        ),
        line: 201,
        column: 36,
        span: 4820..4824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 37,
        span: 4824..4825,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 202,
        column: 8,
        span: 4830..4833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 202,
        column: 10,
        span: 4834..4835,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
        column: 11,
        span: 4835..4836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 202,
        column: 13,
        span: 4837..4838,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 202,
        column: 16,
        span: 4839..4841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 202,
        column: 22,
        span: 4842..4847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 23,
        span: 4847..4848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 202,
        column: 28,
        span: 4848..4853,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 29,
        span: 4853..4854,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 202,
        column: 0,
        span: 4855..4857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 203,
        column: 8,
        span: 4864..4865,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 203,
        column: 10,
        span: 4866..4867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 203,
        column: 12,
        span: 4868..4869,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 203,
        column: 14,
        span: 4870..4871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 203,
        column: 16,
        span: 4872..4873,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 203,
        column: 17,
        span: 4873..4874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 203,
        column: 0,
        span: 4874..4885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
        column: 13,
        span: 4892..4898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 14,
        span: 4898..4899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 204,
        column: 15,
        span: 4899..4900,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 204,
        column: 16,
        span: 4900..4901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 204,
        column: 27,
        span: 4901..4912,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 204,
        column: 28,
        span: 4912..4913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 204,
        column: 29,
        span: 4913..4914,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 204,
        column: 30,
        span: 4914..4915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 31,
        span: 4915..4916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 205,
        column: 8,
        span: 4923..4924,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 205,
        column: 9,
        span: 4924..4925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 205,
        column: 20,
        span: 4925..4936,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 205,
        column: 21,
        span: 4936..4937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 205,
        column: 22,
        span: 4937..4938,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 205,
        column: 23,
        span: 4938..4939,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 205,
        column: 25,
        span: 4940..4941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 205,
        column: 0,
        span: 4942..4947,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 206,
        column: 0,
        span: 4952..4955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 207,
        column: 11,
        span: 4960..4966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 12,
        span: 4966..4967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 207,
        column: 16,
        span: 4967..4971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 17,
        span: 4971..4972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 207,
        column: 18,
        span: 4972..4973,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 207,
        column: 19,
        span: 4973..4974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 207,
        column: 30,
        span: 4974..4985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 31,
        span: 4985..4986,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 207,
        column: 34,
        span: 4987..4989,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 207,
        column: 38,
        span: 4990..4993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 39,
        span: 4993..4994,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 208,
        column: 0,
        span: 5017..5020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkactivelines",
        ),
        line: 210,
        column: 19,
        span: 5024..5040,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 20,
        span: 5040..5041,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 210,
        column: 28,
        span: 5041..5049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 30,
        span: 5050..5051,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 210,
        column: 33,
        span: 5051..5054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 34,
        span: 5054..5055,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 214,
        column: 10,
        span: 5156..5161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 214,
        column: 12,
        span: 5162..5163,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 214,
        column: 14,
        span: 5164..5165,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 0,
        span: 5165..5168,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 216,
        column: 10,
        span: 5198..5203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 216,
        column: 12,
        span: 5204..5205,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 216,
        column: 14,
        span: 5206..5207,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 0,
        span: 5207..5210,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 218,
        column: 6,
        span: 5238..5241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
        column: 7,
        span: 5241..5242,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 218,
        column: 9,
        span: 5243..5244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
        column: 10,
        span: 5243..5245,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
        column: 11,
        span: 5245..5246,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
        column: 13,
        span: 5246..5248,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
        column: 14,
        span: 5248..5249,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
        column: 16,
        span: 5249..5251,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 218,
        column: 17,
        span: 5251..5252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 18,
        span: 5252..5253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkactivelines",
        ),
        line: 220,
        column: 19,
        span: 5257..5273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 20,
        span: 5273..5274,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 220,
        column: 28,
        span: 5274..5282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 30,
        span: 5283..5284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 220,
        column: 31,
        span: 5284..5285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 32,
        span: 5285..5286,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 223,
        column: 10,
        span: 5341..5346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 223,
        column: 12,
        span: 5347..5348,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
        column: 14,
        span: 5349..5350,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 0,
        span: 5350..5353,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 224,
        column: 10,
        span: 5358..5363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 224,
        column: 12,
        span: 5364..5365,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 224,
        column: 14,
        span: 5366..5367,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 224,
        column: 0,
        span: 5367..5370,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 226,
        column: 6,
        span: 5398..5401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 7,
        span: 5401..5402,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 226,
        column: 9,
        span: 5403..5404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 10,
        span: 5403..5405,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 11,
        span: 5405..5406,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 13,
        span: 5406..5408,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 14,
        span: 5408..5409,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 16,
        span: 5409..5411,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 226,
        column: 17,
        span: 5411..5412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 18,
        span: 5412..5413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkactivelines",
        ),
        line: 228,
        column: 19,
        span: 5417..5433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 20,
        span: 5433..5434,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 228,
        column: 28,
        span: 5434..5442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 30,
        span: 5443..5444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 228,
        column: 31,
        span: 5444..5445,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
        column: 32,
        span: 5445..5446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 228,
        column: 34,
        span: 5447..5448,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
        column: 35,
        span: 5448..5449,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 228,
        column: 39,
        span: 5450..5453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 40,
        span: 5453..5454,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 228,
        column: 44,
        span: 5455..5458,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
        column: 45,
        span: 5458..5459,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 228,
        column: 47,
        span: 5460..5461,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
        column: 48,
        span: 5460..5462,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 228,
        column: 49,
        span: 5462..5463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 50,
        span: 5463..5464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkactivelines",
        ),
        line: 230,
        column: 19,
        span: 5468..5484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 20,
        span: 5484..5485,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 230,
        column: 28,
        span: 5485..5493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 30,
        span: 5494..5495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 230,
        column: 31,
        span: 5495..5496,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 32,
        span: 5496..5497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 230,
        column: 34,
        span: 5498..5499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 35,
        span: 5499..5500,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 231,
        column: 6,
        span: 5503..5506,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 231,
        column: 7,
        span: 5506..5507,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 231,
        column: 9,
        span: 5508..5509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 10,
        span: 5508..5510,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 231,
        column: 11,
        span: 5510..5511,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 12,
        span: 5511..5512,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 233,
        column: 6,
        span: 5516..5519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 233,
        column: 8,
        span: 5520..5521,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 9,
        span: 5521..5522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 233,
        column: 11,
        span: 5523..5524,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 233,
        column: 14,
        span: 5525..5527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 233,
        column: 20,
        span: 5528..5533,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 233,
        column: 21,
        span: 5533..5534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 22,
        span: 5533..5535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 23,
        span: 5535..5536,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 25,
        span: 5536..5538,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 26,
        span: 5538..5539,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 28,
        span: 5539..5541,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 29,
        span: 5541..5542,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 32,
        span: 5542..5545,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 33,
        span: 5545..5546,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 36,
        span: 5546..5549,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 37,
        span: 5549..5550,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 41,
        span: 5550..5554,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 42,
        span: 5554..5555,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 47,
        span: 5555..5560,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 48,
        span: 5560..5561,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 54,
        span: 5561..5567,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 233,
        column: 55,
        span: 5567..5568,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 233,
        column: 0,
        span: 5569..5571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkactivelines",
        ),
        line: 234,
        column: 21,
        span: 5576..5592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 22,
        span: 5592..5593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 235,
        column: 11,
        span: 5600..5604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 12,
        span: 5604..5605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 235,
        column: 18,
        span: 5605..5611,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 235,
        column: 19,
        span: 5611..5612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 235,
        column: 25,
        span: 5612..5618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 26,
        span: 5618..5619,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s return 1\"",
        ),
        line: 235,
        column: 39,
        span: 5619..5632,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 40,
        span: 5632..5633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 235,
        column: 47,
        span: 5634..5640,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 235,
        column: 48,
        span: 5640..5641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 235,
        column: 51,
        span: 5641..5644,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 52,
        span: 5644..5645,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 235,
        column: 56,
        span: 5645..5649,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 57,
        span: 5649..5650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 235,
        column: 59,
        span: 5651..5652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 60,
        span: 5652..5653,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 61,
        span: 5653..5654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 62,
        span: 5654..5655,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 63,
        span: 5655..5656,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 236,
        column: 8,
        span: 5663..5664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 236,
        column: 9,
        span: 5664..5665,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 236,
        column: 11,
        span: 5666..5667,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 236,
        column: 13,
        span: 5667..5669,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 236,
        column: 14,
        span: 5669..5670,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 15,
        span: 5670..5671,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 237,
        column: 0,
        span: 5674..5677,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 239,
        column: 0,
        span: 5679..5682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 241,
        column: 6,
        span: 5684..5689,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 241,
        column: 9,
        span: 5689..5692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 244,
        column: 7,
        span: 5727..5733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 8,
        span: 5733..5734,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 244,
        column: 11,
        span: 5734..5737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 244,
        column: 17,
        span: 5738..5743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 18,
        span: 5743..5744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 244,
        column: 23,
        span: 5744..5749,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 244,
        column: 24,
        span: 5749..5750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 244,
        column: 32,
        span: 5750..5758,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
        column: 33,
        span: 5758..5759,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 36,
        span: 5759..5762,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
        column: 37,
        span: 5762..5763,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 39,
        span: 5763..5765,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 40,
        span: 5765..5766,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 41,
        span: 5766..5767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 245,
        column: 7,
        span: 5768..5774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 8,
        span: 5774..5775,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 245,
        column: 11,
        span: 5775..5778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 245,
        column: 17,
        span: 5779..5784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 18,
        span: 5784..5785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 245,
        column: 23,
        span: 5785..5790,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 245,
        column: 24,
        span: 5790..5791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 245,
        column: 32,
        span: 5791..5799,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 33,
        span: 5799..5800,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 245,
        column: 35,
        span: 5801..5802,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
        column: 36,
        span: 5801..5803,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 37,
        span: 5803..5804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
        column: 39,
        span: 5804..5806,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 40,
        span: 5806..5807,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
        column: 43,
        span: 5807..5810,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 44,
        span: 5810..5811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 45,
        span: 5811..5812,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 249,
        column: 6,
        span: 5834..5839,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 249,
        column: 15,
        span: 5840..5848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 249,
        column: 19,
        span: 5849..5852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 21,
        span: 5853..5854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 249,
        column: 22,
        span: 5854..5855,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 23,
        span: 5855..5856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 249,
        column: 24,
        span: 5856..5857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 25,
        span: 5857..5858,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 249,
        column: 28,
        span: 5858..5861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 29,
        span: 5861..5862,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 249,
        column: 35,
        span: 5863..5868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 249,
        column: 37,
        span: 5869..5870,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 38,
        span: 5870..5871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 249,
        column: 40,
        span: 5872..5873,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 249,
        column: 0,
        span: 5874..5877,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 250,
        column: 6,
        span: 5878..5883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 250,
        column: 9,
        span: 5884..5886,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 250,
        column: 11,
        span: 5887..5888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 250,
        column: 21,
        span: 5889..5898,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 250,
        column: 22,
        span: 5898..5899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 250,
        column: 28,
        span: 5899..5905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 29,
        span: 5905..5906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 250,
        column: 32,
        span: 5906..5909,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 33,
        span: 5909..5910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 252,
        column: 7,
        span: 5912..5918,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 8,
        span: 5918..5919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 252,
        column: 13,
        span: 5919..5924,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 252,
        column: 14,
        span: 5924..5925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 252,
        column: 22,
        span: 5925..5933,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 23,
        span: 5933..5934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 252,
        column: 26,
        span: 5934..5937,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
        column: 27,
        span: 5937..5938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 29,
        span: 5938..5940,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 30,
        span: 5940..5941,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 252,
        column: 33,
        span: 5942..5944,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 252,
        column: 37,
        span: 5945..5948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 38,
        span: 5948..5949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
        column: 7,
        span: 5950..5956,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 8,
        span: 5956..5957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 253,
        column: 13,
        span: 5957..5962,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
        column: 14,
        span: 5962..5963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 253,
        column: 22,
        span: 5963..5971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 23,
        span: 5971..5972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 253,
        column: 26,
        span: 5972..5975,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 27,
        span: 5975..5976,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 29,
        span: 5976..5978,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 30,
        span: 5978..5979,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 253,
        column: 33,
        span: 5980..5982,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 253,
        column: 37,
        span: 5983..5986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 38,
        span: 5986..5987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
        column: 7,
        span: 5988..5994,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 8,
        span: 5994..5995,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 254,
        column: 11,
        span: 5995..5998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 254,
        column: 17,
        span: 5999..6004,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 254,
        column: 18,
        span: 6004..6005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 254,
        column: 26,
        span: 6005..6013,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 27,
        span: 6013..6014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 254,
        column: 30,
        span: 6014..6017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 31,
        span: 6017..6018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 33,
        span: 6018..6020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 34,
        span: 6020..6021,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 35,
        span: 6021..6022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 255,
        column: 7,
        span: 6023..6029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 8,
        span: 6029..6030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 255,
        column: 13,
        span: 6030..6035,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 255,
        column: 14,
        span: 6035..6036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 255,
        column: 22,
        span: 6036..6044,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 23,
        span: 6044..6045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 255,
        column: 25,
        span: 6045..6047,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 26,
        span: 6047..6048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 255,
        column: 30,
        span: 6049..6052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 31,
        span: 6052..6053,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 33,
        span: 6053..6055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 34,
        span: 6055..6056,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 255,
        column: 37,
        span: 6057..6059,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 255,
        column: 41,
        span: 6060..6063,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 42,
        span: 6063..6064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 256,
        column: 7,
        span: 6065..6071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 8,
        span: 6071..6072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 256,
        column: 13,
        span: 6072..6077,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 256,
        column: 14,
        span: 6077..6078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 256,
        column: 22,
        span: 6078..6086,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 23,
        span: 6086..6087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 256,
        column: 25,
        span: 6087..6089,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 26,
        span: 6089..6090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 256,
        column: 30,
        span: 6091..6094,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 31,
        span: 6094..6095,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 33,
        span: 6095..6097,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 34,
        span: 6097..6098,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 256,
        column: 37,
        span: 6099..6101,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 256,
        column: 41,
        span: 6102..6105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 42,
        span: 6105..6106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 257,
        column: 7,
        span: 6107..6113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 8,
        span: 6113..6114,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 257,
        column: 11,
        span: 6114..6117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 257,
        column: 17,
        span: 6118..6123,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 257,
        column: 18,
        span: 6123..6124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 257,
        column: 26,
        span: 6124..6132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 27,
        span: 6132..6133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 257,
        column: 29,
        span: 6133..6135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 30,
        span: 6135..6136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 257,
        column: 34,
        span: 6137..6140,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 35,
        span: 6140..6141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 37,
        span: 6141..6143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 38,
        span: 6143..6144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 39,
        span: 6144..6145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 259,
        column: 7,
        span: 6147..6153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 8,
        span: 6153..6154,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 259,
        column: 11,
        span: 6154..6157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 259,
        column: 17,
        span: 6158..6163,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 259,
        column: 18,
        span: 6163..6164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 259,
        column: 26,
        span: 6164..6172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 27,
        span: 6172..6173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 259,
        column: 32,
        span: 6173..6178,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 33,
        span: 6178..6179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 35,
        span: 6179..6181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 36,
        span: 6181..6182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 37,
        span: 6182..6183,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 262,
        column: 6,
        span: 6186..6191,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 262,
        column: 15,
        span: 6192..6200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 262,
        column: 19,
        span: 6201..6204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 21,
        span: 6205..6206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 22,
        span: 6206..6207,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 262,
        column: 29,
        span: 6208..6214,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 31,
        span: 6215..6216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 262,
        column: 36,
        span: 6216..6221,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 262,
        column: 37,
        span: 6221..6222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 262,
        column: 45,
        span: 6222..6230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 46,
        span: 6230..6231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 47,
        span: 6230..6232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 48,
        span: 6232..6233,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 262,
        column: 50,
        span: 6234..6235,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 51,
        span: 6234..6236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 52,
        span: 6236..6237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 53,
        span: 6237..6238,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 262,
        column: 0,
        span: 6239..6242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 263,
        column: 7,
        span: 6243..6249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 8,
        span: 6249..6250,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 263,
        column: 11,
        span: 6250..6253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 263,
        column: 15,
        span: 6254..6257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 16,
        span: 6257..6258,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 18,
        span: 6257..6260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 19,
        span: 6260..6261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 20,
        span: 6261..6262,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 267,
        column: 6,
        span: 6276..6281,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 267,
        column: 15,
        span: 6282..6290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 267,
        column: 19,
        span: 6291..6294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 21,
        span: 6295..6296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 267,
        column: 22,
        span: 6296..6297,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
        column: 23,
        span: 6297..6298,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 267,
        column: 27,
        span: 6299..6302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 28,
        span: 6302..6303,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 268,
        column: 8,
        span: 6306..6311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 268,
        column: 10,
        span: 6312..6313,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 268,
        column: 12,
        span: 6314..6315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 268,
        column: 18,
        span: 6316..6321,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 268,
        column: 19,
        span: 6321..6322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 268,
        column: 23,
        span: 6322..6326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 24,
        span: 6326..6327,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 268,
        column: 27,
        span: 6327..6330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 28,
        span: 6330..6331,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 269,
        column: 6,
        span: 6334..6337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 269,
        column: 8,
        span: 6338..6339,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 269,
        column: 10,
        span: 6340..6341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 12,
        span: 6341..6343,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 13,
        span: 6343..6344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 269,
        column: 15,
        span: 6345..6346,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
        column: 16,
        span: 6346..6347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 269,
        column: 17,
        span: 6347..6348,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 269,
        column: 0,
        span: 6349..6351,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 270,
        column: 10,
        span: 6356..6361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 270,
        column: 12,
        span: 6362..6363,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 13,
        span: 6363..6364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 270,
        column: 15,
        span: 6365..6366,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 270,
        column: 17,
        span: 6367..6368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 270,
        column: 23,
        span: 6369..6374,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 270,
        column: 24,
        span: 6374..6375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 270,
        column: 32,
        span: 6375..6383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 33,
        span: 6383..6384,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 34,
        span: 6383..6385,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 35,
        span: 6385..6386,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 270,
        column: 37,
        span: 6387..6388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 270,
        column: 38,
        span: 6388..6389,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 39,
        span: 6389..6390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 271,
        column: 11,
        span: 6395..6401,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 12,
        span: 6401..6402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 271,
        column: 13,
        span: 6402..6403,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 271,
        column: 16,
        span: 6404..6406,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(vararg)\"",
        ),
        line: 271,
        column: 27,
        span: 6407..6417,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 271,
        column: 31,
        span: 6418..6421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 271,
        column: 33,
        span: 6422..6423,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 271,
        column: 36,
        span: 6424..6426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 271,
        column: 38,
        span: 6427..6428,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 271,
        column: 39,
        span: 6428..6429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 271,
        column: 40,
        span: 6429..6430,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 271,
        column: 41,
        span: 6430..6431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 42,
        span: 6431..6432,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 272,
        column: 0,
        span: 6435..6438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 273,
        column: 9,
        span: 6441..6447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 10,
        span: 6447..6448,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 273,
        column: 13,
        span: 6448..6451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 273,
        column: 19,
        span: 6452..6457,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 273,
        column: 20,
        span: 6457..6458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 273,
        column: 28,
        span: 6458..6466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 29,
        span: 6466..6467,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 30,
        span: 6466..6468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 273,
        column: 31,
        span: 6468..6469,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 273,
        column: 33,
        span: 6470..6471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 34,
        span: 6471..6472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 273,
        column: 35,
        span: 6472..6473,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 273,
        column: 36,
        span: 6473..6474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 273,
        column: 37,
        span: 6474..6475,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 273,
        column: 39,
        span: 6476..6477,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 41,
        span: 6477..6479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 42,
        span: 6479..6480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 43,
        span: 6480..6481,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 44,
        span: 6481..6482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 274,
        column: 9,
        span: 6485..6491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 10,
        span: 6491..6492,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 274,
        column: 13,
        span: 6492..6495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 274,
        column: 19,
        span: 6496..6501,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 274,
        column: 20,
        span: 6501..6502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 274,
        column: 28,
        span: 6502..6510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 29,
        span: 6510..6511,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 30,
        span: 6510..6512,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 31,
        span: 6512..6513,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 274,
        column: 33,
        span: 6514..6515,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 34,
        span: 6515..6516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 274,
        column: 35,
        span: 6516..6517,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 274,
        column: 36,
        span: 6517..6518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 274,
        column: 37,
        span: 6518..6519,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 274,
        column: 39,
        span: 6520..6521,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 41,
        span: 6521..6523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 42,
        span: 6523..6524,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 43,
        span: 6524..6525,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 46,
        span: 6525..6528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 47,
        span: 6528..6529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 48,
        span: 6529..6530,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 275,
        column: 5,
        span: 6533..6535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 275,
        column: 7,
        span: 6536..6537,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 275,
        column: 8,
        span: 6537..6538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 275,
        column: 9,
        span: 6538..6539,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 275,
        column: 11,
        span: 6540..6541,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 13,
        span: 6541..6543,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 275,
        column: 0,
        span: 6544..6548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 6,
        span: 6553..6554,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 276,
        column: 14,
        span: 6554..6562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 16,
        span: 6563..6564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 276,
        column: 17,
        span: 6564..6565,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 18,
        span: 6565..6566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 277,
        column: 13,
        span: 6573..6579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 14,
        span: 6579..6580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 277,
        column: 19,
        span: 6580..6585,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
        column: 20,
        span: 6585..6586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 277,
        column: 28,
        span: 6586..6594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 29,
        span: 6594..6595,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 30,
        span: 6594..6596,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 31,
        span: 6596..6597,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 277,
        column: 33,
        span: 6598..6599,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 34,
        span: 6598..6600,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 35,
        span: 6600..6601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 277,
        column: 37,
        span: 6602..6603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 38,
        span: 6603..6604,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 277,
        column: 41,
        span: 6605..6607,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(vararg)\"",
        ),
        line: 277,
        column: 52,
        span: 6608..6618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 53,
        span: 6618..6619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 278,
        column: 13,
        span: 6626..6632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 14,
        span: 6632..6633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 278,
        column: 19,
        span: 6633..6638,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 278,
        column: 20,
        span: 6638..6639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 278,
        column: 28,
        span: 6639..6647,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 29,
        span: 6647..6648,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
        column: 30,
        span: 6647..6649,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 31,
        span: 6649..6650,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 278,
        column: 33,
        span: 6651..6652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 278,
        column: 34,
        span: 6652..6653,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 278,
        column: 35,
        span: 6653..6654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 278,
        column: 36,
        span: 6654..6655,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 37,
        span: 6655..6656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 278,
        column: 39,
        span: 6657..6658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 40,
        span: 6658..6659,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
        column: 43,
        span: 6660..6662,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(vararg)\"",
        ),
        line: 278,
        column: 54,
        span: 6663..6673,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 55,
        span: 6673..6674,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 279,
        column: 9,
        span: 6680..6683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 10,
        span: 6683..6684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 11,
        span: 6684..6685,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "430",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 14,
        span: 6684..6688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 15,
        span: 6688..6689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 280,
        column: 12,
        span: 6695..6701,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 13,
        span: 6701..6702,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 280,
        column: 16,
        span: 6702..6705,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 280,
        column: 19,
        span: 6706..6708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "430",
                    after_decimal: "",
                },
            ),
        ),
        line: 280,
        column: 23,
        span: 6708..6712,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 24,
        span: 6712..6713,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 281,
        column: 0,
        span: 6716..6719,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 282,
        column: 0,
        span: 6720..6723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 284,
        column: 4,
        span: 6725..6728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 5,
        span: 6728..6729,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 6,
        span: 6729..6730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 285,
        column: 4,
        span: 6731..6734,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 5,
        span: 6734..6735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 285,
        column: 10,
        span: 6735..6740,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 11,
        span: 6740..6741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 286,
        column: 4,
        span: 6742..6745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 5,
        span: 6745..6746,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 8,
        span: 6745..6749,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 9,
        span: 6749..6750,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 11,
        span: 6750..6752,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 12,
        span: 6752..6753,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 14,
        span: 6753..6755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 15,
        span: 6755..6756,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 287,
        column: 6,
        span: 6757..6762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 287,
        column: 8,
        span: 6763..6764,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 287,
        column: 10,
        span: 6765..6766,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 287,
        column: 12,
        span: 6767..6768,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 287,
        column: 13,
        span: 6768..6769,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 288,
        column: 4,
        span: 6770..6773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 288,
        column: 6,
        span: 6774..6775,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 288,
        column: 8,
        span: 6776..6777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
        column: 10,
        span: 6777..6779,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 11,
        span: 6779..6780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 13,
        span: 6781..6782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 288,
        column: 18,
        span: 6782..6787,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 288,
        column: 22,
        span: 6788..6791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
        column: 26,
        span: 6791..6795,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 288,
        column: 29,
        span: 6796..6798,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
        column: 34,
        span: 6798..6803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 35,
        span: 6803..6804,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 288,
        column: 38,
        span: 6805..6807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 288,
        column: 40,
        span: 6808..6809,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 288,
        column: 41,
        span: 6809..6810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 288,
        column: 42,
        span: 6810..6811,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 288,
        column: 43,
        span: 6811..6812,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 288,
        column: 45,
        span: 6813..6814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 288,
        column: 47,
        span: 6815..6816,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 288,
        column: 0,
        span: 6817..6820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 289,
        column: 4,
        span: 6821..6824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 5,
        span: 6824..6825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 289,
        column: 10,
        span: 6825..6830,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 289,
        column: 11,
        span: 6830..6831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 289,
        column: 17,
        span: 6831..6837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 18,
        span: 6837..6838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 289,
        column: 19,
        span: 6838..6839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 20,
        span: 6839..6840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 21,
        span: 6840..6841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 290,
        column: 2,
        span: 6842..6843,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 290,
        column: 4,
        span: 6844..6845,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 290,
        column: 0,
        span: 6846..6849,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 294,
        column: 3,
        span: 6853..6855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 295,
        column: 9,
        span: 6896..6902,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 10,
        span: 6902..6903,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 295,
        column: 13,
        span: 6903..6906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 295,
        column: 19,
        span: 6907..6912,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 295,
        column: 20,
        span: 6912..6913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 295,
        column: 27,
        span: 6913..6920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 28,
        span: 6920..6921,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 29,
        span: 6921..6922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 30,
        span: 6922..6923,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 296,
        column: 8,
        span: 6926..6931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 296,
        column: 14,
        span: 6932..6937,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 296,
        column: 16,
        span: 6938..6939,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 296,
        column: 0,
        span: 6939..6941,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 297,
        column: 8,
        span: 6944..6949,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 297,
        column: 17,
        span: 6950..6958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 297,
        column: 19,
        span: 6959..6960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 21,
        span: 6961..6962,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 22,
        span: 6962..6963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 298,
        column: 11,
        span: 6968..6974,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 12,
        span: 6974..6975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 298,
        column: 17,
        span: 6975..6980,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
        column: 18,
        span: 6980..6981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 298,
        column: 25,
        span: 6981..6988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 26,
        span: 6988..6989,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 27,
        span: 6988..6990,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 28,
        span: 6990..6991,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
        column: 29,
        span: 6991..6992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 298,
        column: 37,
        span: 6992..7000,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 298,
        column: 40,
        span: 7001..7003,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hook\"",
        ),
        line: 298,
        column: 47,
        span: 7004..7010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 48,
        span: 7010..7011,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 299,
        column: 10,
        span: 7016..7021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sndline",
        ),
        line: 299,
        column: 18,
        span: 7022..7029,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 299,
        column: 20,
        span: 7030..7031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 299,
        column: 27,
        span: 7032..7038,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 299,
        column: 28,
        span: 7038..7039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 299,
        column: 33,
        span: 7039..7044,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 34,
        span: 7044..7045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 299,
        column: 39,
        span: 7045..7050,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 299,
        column: 40,
        span: 7050..7051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 299,
        column: 49,
        span: 7051..7060,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 50,
        span: 7060..7061,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 51,
        span: 7061..7062,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 299,
        column: 52,
        span: 7062..7063,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n(.-)\\n\"",
        ),
        line: 299,
        column: 63,
        span: 7064..7074,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 64,
        span: 7074..7075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 300,
        column: 11,
        span: 7080..7086,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
        column: 12,
        span: 7086..7087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 300,
        column: 18,
        span: 7087..7093,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 300,
        column: 19,
        span: 7093..7094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 300,
        column: 23,
        span: 7094..7098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
        column: 24,
        span: 7098..7099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sndline",
        ),
        line: 300,
        column: 31,
        span: 7099..7106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 300,
        column: 32,
        span: 7106..7107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hook\"",
        ),
        line: 300,
        column: 39,
        span: 7108..7114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 40,
        span: 7114..7115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 41,
        span: 7115..7116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 301,
        column: 10,
        span: 7121..7126,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 301,
        column: 12,
        span: 7127..7128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 301,
        column: 18,
        span: 7129..7134,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 301,
        column: 20,
        span: 7135..7136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 301,
        column: 0,
        span: 7136..7138,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 302,
        column: 0,
        span: 7141..7144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 303,
        column: 8,
        span: 7147..7152,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 303,
        column: 9,
        span: 7152..7153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 303,
        column: 16,
        span: 7153..7160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 17,
        span: 7160..7161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 303,
        column: 18,
        span: 7161..7162,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 303,
        column: 19,
        span: 7162..7163,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 303,
        column: 23,
        span: 7164..7167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 24,
        span: 7167..7168,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 304,
        column: 8,
        span: 7171..7176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 304,
        column: 10,
        span: 7177..7178,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 304,
        column: 12,
        span: 7179..7180,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 304,
        column: 0,
        span: 7180..7182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 305,
        column: 7,
        span: 7185..7189,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 305,
        column: 8,
        span: 7189..7190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 305,
        column: 9,
        span: 7190..7191,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 305,
        column: 11,
        span: 7192..7193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 305,
        column: 0,
        span: 7194..7195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 306,
        column: 4,
        span: 7198..7199,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 306,
        column: 6,
        span: 7200..7201,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 306,
        column: 0,
        span: 7201..7203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 307,
        column: 8,
        span: 7206..7211,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 307,
        column: 9,
        span: 7211..7212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 307,
        column: 16,
        span: 7212..7219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 17,
        span: 7219..7220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 18,
        span: 7220..7221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 308,
        column: 9,
        span: 7224..7230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 10,
        span: 7230..7231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 308,
        column: 15,
        span: 7231..7236,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 308,
        column: 18,
        span: 7237..7239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 20,
        span: 7239..7241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 21,
        span: 7241..7242,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 309,
        column: 0,
        span: 7243..7246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 313,
        column: 7,
        span: 7277..7283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 8,
        span: 7283..7284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 313,
        column: 20,
        span: 7284..7296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 21,
        span: 7296..7297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 313,
        column: 26,
        span: 7297..7302,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 313,
        column: 27,
        span: 7302..7303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getregistry",
        ),
        line: 313,
        column: 38,
        span: 7303..7314,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 39,
        span: 7314..7315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 40,
        span: 7315..7316,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 313,
        column: 41,
        span: 7316..7317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_HOOKKEY",
        ),
        line: 313,
        column: 49,
        span: 7317..7325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 50,
        span: 7325..7326,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 313,
        column: 51,
        span: 7326..7327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 313,
        column: 57,
        span: 7327..7333,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 313,
        column: 60,
        span: 7334..7336,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'k'",
        ),
        line: 313,
        column: 64,
        span: 7337..7340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 65,
        span: 7340..7341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 316,
        column: 2,
        span: 7344..7345,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 316,
        column: 4,
        span: 7346..7347,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 316,
        column: 6,
        span: 7348..7349,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 316,
        column: 7,
        span: 7349..7350,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 316,
        column: 8,
        span: 7350..7351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 316,
        column: 10,
        span: 7352..7353,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 316,
        column: 12,
        span: 7354..7355,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 316,
        column: 0,
        span: 7356..7359,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 317,
        column: 6,
        span: 7360..7365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 317,
        column: 11,
        span: 7366..7370,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 317,
        column: 13,
        span: 7371..7372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 0,
        span: 7372..7374,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 318,
        column: 6,
        span: 7375..7380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldglob",
        ),
        line: 318,
        column: 14,
        span: 7381..7388,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 318,
        column: 16,
        span: 7389..7390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 318,
        column: 0,
        span: 7391..7395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 319,
        column: 6,
        span: 7396..7401,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 319,
        column: 7,
        span: 7401..7402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 319,
        column: 14,
        span: 7402..7409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 15,
        span: 7409..7410,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 319,
        column: 23,
        span: 7410..7418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 25,
        span: 7419..7420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 319,
        column: 26,
        span: 7420..7421,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
        column: 27,
        span: 7421..7422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 319,
        column: 28,
        span: 7422..7423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 29,
        span: 7423..7424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 320,
        column: 17,
        span: 7427..7441,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 18,
        span: 7441..7442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 19,
        span: 7442..7443,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 321,
        column: 8,
        span: 7474..7479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 321,
        column: 10,
        span: 7480..7481,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 321,
        column: 11,
        span: 7481..7482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 321,
        column: 13,
        span: 7483..7484,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 321,
        column: 14,
        span: 7484..7485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 321,
        column: 16,
        span: 7486..7487,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 321,
        column: 18,
        span: 7488..7489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 321,
        column: 24,
        span: 7490..7495,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 321,
        column: 25,
        span: 7495..7496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 321,
        column: 32,
        span: 7496..7503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 33,
        span: 7503..7504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 34,
        span: 7504..7505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 322,
        column: 9,
        span: 7508..7514,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 10,
        span: 7514..7515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 322,
        column: 11,
        span: 7515..7516,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 322,
        column: 14,
        span: 7517..7519,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'crl'",
        ),
        line: 322,
        column: 20,
        span: 7520..7525,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 322,
        column: 24,
        span: 7526..7529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 322,
        column: 26,
        span: 7530..7531,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 322,
        column: 29,
        span: 7532..7534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 322,
        column: 31,
        span: 7534..7536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 32,
        span: 7536..7537,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 323,
        column: 5,
        span: 7540..7542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 323,
        column: 7,
        span: 7543..7544,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 323,
        column: 10,
        span: 7545..7547,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        line: 323,
        column: 17,
        span: 7548..7554,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 323,
        column: 0,
        span: 7555..7559,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 324,
        column: 7,
        span: 7564..7566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 324,
        column: 12,
        span: 7567..7571,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 324,
        column: 15,
        span: 7572..7574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldglob",
        ),
        line: 324,
        column: 23,
        span: 7575..7582,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 324,
        column: 0,
        span: 7583..7587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 325,
        column: 8,
        span: 7594..7595,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
        column: 10,
        span: 7596..7597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 325,
        column: 12,
        span: 7598..7599,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 325,
        column: 13,
        span: 7599..7600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 325,
        column: 14,
        span: 7599..7601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldglob",
        ),
        line: 326,
        column: 14,
        span: 7657..7664,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 326,
        column: 16,
        span: 7665..7666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 326,
        column: 0,
        span: 7667..7671,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 327,
        column: 0,
        span: 7676..7679,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 328,
        column: 9,
        span: 7682..7688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 328,
        column: 11,
        span: 7689..7690,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 328,
        column: 14,
        span: 7691..7693,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        line: 328,
        column: 21,
        span: 7694..7700,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 328,
        column: 0,
        span: 7701..7705,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 329,
        column: 12,
        span: 7712..7717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 329,
        column: 14,
        span: 7718..7719,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 329,
        column: 16,
        span: 7720..7721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 329,
        column: 22,
        span: 7722..7727,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 329,
        column: 23,
        span: 7727..7728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 329,
        column: 30,
        span: 7728..7735,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 31,
        span: 7735..7736,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
        column: 32,
        span: 7735..7737,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 329,
        column: 33,
        span: 7737..7738,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 329,
        column: 37,
        span: 7739..7742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 38,
        span: 7742..7743,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 329,
        column: 39,
        span: 7743..7744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 329,
        column: 0,
        span: 7744..7748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 330,
        column: 8,
        span: 7755..7756,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 330,
        column: 9,
        span: 7756..7757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 330,
        column: 10,
        span: 7757..7758,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 330,
        column: 11,
        span: 7758..7759,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 330,
        column: 13,
        span: 7760..7761,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 0,
        span: 7761..7763,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 331,
        column: 7,
        span: 7766..7770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 331,
        column: 14,
        span: 7771..7777,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 15,
        span: 7777..7778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 331,
        column: 16,
        span: 7778..7779,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 331,
        column: 19,
        span: 7780..7782,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 331,
        column: 28,
        span: 7783..7791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 29,
        span: 7791..7792,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 332,
        column: 0,
        span: 7795..7798,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 333,
        column: 4,
        span: 7799..7802,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 333,
        column: 5,
        span: 7802..7803,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"crl\"",
        ),
        line: 333,
        column: 11,
        span: 7804..7809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 12,
        span: 7809..7810,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 336,
        column: 9,
        span: 7813..7821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 336,
        column: 11,
        span: 7822..7823,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 12,
        span: 7823..7824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 336,
        column: 13,
        span: 7824..7825,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
        column: 14,
        span: 7825..7826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 336,
        column: 15,
        span: 7826..7827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 16,
        span: 7827..7828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 337,
        column: 17,
        span: 7831..7845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
        column: 18,
        span: 7845..7846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
        column: 19,
        span: 7846..7847,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 338,
        column: 8,
        span: 7850..7855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 338,
        column: 10,
        span: 7856..7857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 338,
        column: 11,
        span: 7857..7858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 338,
        column: 13,
        span: 7859..7860,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 338,
        column: 15,
        span: 7861..7862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 338,
        column: 21,
        span: 7863..7868,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 338,
        column: 22,
        span: 7868..7869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 338,
        column: 30,
        span: 7869..7877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
        column: 31,
        span: 7877..7878,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 338,
        column: 32,
        span: 7877..7879,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 338,
        column: 33,
        span: 7879..7880,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 338,
        column: 35,
        span: 7880..7882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
        column: 36,
        span: 7882..7883,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 339,
        column: 8,
        span: 7886..7891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 339,
        column: 10,
        span: 7892..7893,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 339,
        column: 11,
        span: 7893..7894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 339,
        column: 13,
        span: 7895..7896,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 339,
        column: 15,
        span: 7897..7898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 339,
        column: 21,
        span: 7899..7904,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 339,
        column: 22,
        span: 7904..7905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 339,
        column: 30,
        span: 7905..7913,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
        column: 31,
        span: 7913..7914,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 339,
        column: 32,
        span: 7913..7915,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 339,
        column: 33,
        span: 7915..7916,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 339,
        column: 35,
        span: 7916..7918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
        column: 36,
        span: 7918..7919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 340,
        column: 9,
        span: 7922..7928,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 10,
        span: 7928..7929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 340,
        column: 11,
        span: 7929..7930,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 340,
        column: 14,
        span: 7931..7933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 340,
        column: 16,
        span: 7934..7935,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 340,
        column: 20,
        span: 7936..7939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 340,
        column: 22,
        span: 7940..7941,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 340,
        column: 25,
        span: 7942..7944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 340,
        column: 27,
        span: 7945..7946,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 28,
        span: 7946..7947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 341,
        column: 9,
        span: 7950..7956,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 10,
        span: 7956..7957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 341,
        column: 15,
        span: 7957..7962,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 341,
        column: 16,
        span: 7962..7963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 341,
        column: 24,
        span: 7963..7971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 25,
        span: 7971..7972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
        column: 26,
        span: 7971..7973,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 341,
        column: 27,
        span: 7973..7974,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
        column: 29,
        span: 7974..7976,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 341,
        column: 30,
        span: 7976..7977,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pera\"",
        ),
        line: 341,
        column: 37,
        span: 7978..7984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 38,
        span: 7984..7985,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 341,
        column: 41,
        span: 7986..7988,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        line: 341,
        column: 46,
        span: 7989..7993,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 341,
        column: 48,
        span: 7993..7995,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        line: 341,
        column: 52,
        span: 7995..7999,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 53,
        span: 7999..8000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 342,
        column: 9,
        span: 8003..8009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 10,
        span: 8009..8010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 342,
        column: 15,
        span: 8010..8015,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 342,
        column: 16,
        span: 8015..8016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 342,
        column: 24,
        span: 8016..8024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 25,
        span: 8024..8025,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
        column: 26,
        span: 8024..8026,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 27,
        span: 8026..8027,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
        column: 29,
        span: 8027..8029,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 30,
        span: 8029..8030,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"maçã\"",
        ),
        line: 342,
        column: 37,
        span: 8031..8037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 38,
        span: 8037..8038,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 342,
        column: 41,
        span: 8039..8041,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        line: 342,
        column: 45,
        span: 8042..8045,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 46,
        span: 8045..8046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 343,
        column: 4,
        span: 8049..8050,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 343,
        column: 6,
        span: 8051..8052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 343,
        column: 12,
        span: 8053..8058,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 343,
        column: 13,
        span: 8058..8059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 343,
        column: 20,
        span: 8059..8066,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 21,
        span: 8066..8067,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 343,
        column: 22,
        span: 8066..8068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 23,
        span: 8068..8069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 344,
        column: 9,
        span: 8072..8078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
        column: 10,
        span: 8078..8079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 344,
        column: 11,
        span: 8079..8080,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 344,
        column: 12,
        span: 8080..8081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 344,
        column: 16,
        span: 8081..8085,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 344,
        column: 19,
        span: 8086..8088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 344,
        column: 21,
        span: 8089..8090,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 344,
        column: 25,
        span: 8091..8094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 344,
        column: 27,
        span: 8095..8096,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 344,
        column: 28,
        span: 8096..8097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 344,
        column: 32,
        span: 8097..8101,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 344,
        column: 35,
        span: 8102..8104,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        line: 344,
        column: 41,
        span: 8105..8110,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 344,
        column: 45,
        span: 8111..8114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 344,
        column: 47,
        span: 8115..8116,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 344,
        column: 48,
        span: 8116..8117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 344,
        column: 52,
        span: 8117..8121,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 344,
        column: 55,
        span: 8122..8124,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'g'",
        ),
        line: 344,
        column: 59,
        span: 8125..8128,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 344,
        column: 0,
        span: 8129..8132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 345,
        column: 11,
        span: 8142..8143,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 345,
        column: 12,
        span: 8143..8144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 345,
        column: 16,
        span: 8144..8148,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 345,
        column: 19,
        span: 8149..8151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 345,
        column: 21,
        span: 8151..8153,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 345,
        column: 25,
        span: 8154..8157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 345,
        column: 32,
        span: 8158..8164,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 345,
        column: 33,
        span: 8164..8165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 345,
        column: 37,
        span: 8165..8169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 38,
        span: 8169..8170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 345,
        column: 39,
        span: 8170..8171,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 345,
        column: 40,
        span: 8171..8172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 345,
        column: 46,
        span: 8172..8178,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 345,
        column: 47,
        span: 8178..8179,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^@.*db%.lua$\"",
        ),
        line: 345,
        column: 62,
        span: 8180..8194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 63,
        span: 8194..8195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 64,
        span: 8195..8196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 346,
        column: 7,
        span: 8199..8203,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 346,
        column: 9,
        span: 8204..8205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 346,
        column: 14,
        span: 8206..8210,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 346,
        column: 15,
        span: 8210..8211,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 0,
        span: 8210..8212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 347,
        column: 9,
        span: 8215..8221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 10,
        span: 8221..8222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 347,
        column: 15,
        span: 8222..8227,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 347,
        column: 16,
        span: 8227..8228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 347,
        column: 23,
        span: 8228..8235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 24,
        span: 8235..8236,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
        column: 25,
        span: 8235..8237,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 26,
        span: 8237..8238,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 347,
        column: 30,
        span: 8239..8242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 31,
        span: 8242..8243,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 347,
        column: 32,
        span: 8243..8244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 347,
        column: 43,
        span: 8244..8255,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 347,
        column: 46,
        span: 8256..8258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 347,
        column: 48,
        span: 8259..8260,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 347,
        column: 49,
        span: 8260..8261,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
        column: 50,
        span: 8260..8262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 51,
        span: 8262..8263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 348,
        column: 9,
        span: 8266..8272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 10,
        span: 8272..8273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 348,
        column: 15,
        span: 8273..8278,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 348,
        column: 16,
        span: 8278..8279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 348,
        column: 23,
        span: 8279..8286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 24,
        span: 8286..8287,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 348,
        column: 25,
        span: 8286..8288,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 348,
        column: 26,
        span: 8288..8289,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 348,
        column: 30,
        span: 8290..8293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 31,
        span: 8293..8294,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 348,
        column: 32,
        span: 8294..8295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 348,
        column: 43,
        span: 8295..8306,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 348,
        column: 46,
        span: 8307..8309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 348,
        column: 48,
        span: 8310..8311,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 348,
        column: 49,
        span: 8311..8312,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 348,
        column: 50,
        span: 8311..8313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 51,
        span: 8313..8314,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 349,
        column: 0,
        span: 8315..8318,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 351,
        column: 9,
        span: 8320..8328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 351,
        column: 13,
        span: 8329..8332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 14,
        span: 8332..8333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 15,
        span: 8333..8334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 352,
        column: 7,
        span: 8337..8341,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 352,
        column: 9,
        span: 8342..8343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 352,
        column: 14,
        span: 8344..8348,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 352,
        column: 15,
        span: 8348..8349,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 352,
        column: 0,
        span: 8348..8350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 353,
        column: 9,
        span: 8353..8359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 10,
        span: 8359..8360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 353,
        column: 15,
        span: 8360..8365,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 353,
        column: 16,
        span: 8365..8366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 353,
        column: 23,
        span: 8366..8373,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 24,
        span: 8373..8374,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 353,
        column: 25,
        span: 8373..8375,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 353,
        column: 26,
        span: 8375..8376,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 353,
        column: 30,
        span: 8377..8380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 31,
        span: 8380..8381,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 353,
        column: 32,
        span: 8381..8382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 353,
        column: 43,
        span: 8382..8393,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 353,
        column: 46,
        span: 8394..8396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 353,
        column: 48,
        span: 8397..8398,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 353,
        column: 49,
        span: 8398..8399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 353,
        column: 50,
        span: 8398..8400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 51,
        span: 8400..8401,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 354,
        column: 4,
        span: 8402..8405,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 354,
        column: 5,
        span: 8405..8406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 354,
        column: 9,
        span: 8407..8410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 10,
        span: 8410..8411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 11,
        span: 8411..8412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 357,
        column: 2,
        span: 8478..8479,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 357,
        column: 4,
        span: 8480..8481,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\\nalo'",
        ),
        line: 358,
        column: 5,
        span: 8482..8492,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 358,
        column: 8,
        span: 8493..8495,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n]]",
        ),
        line: 360,
        column: 3,
        span: 8496..8502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 363,
        column: 7,
        span: 8511..8517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 8,
        span: 8517..8518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 363,
        column: 13,
        span: 8518..8523,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 363,
        column: 14,
        span: 8523..8524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 363,
        column: 21,
        span: 8524..8531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 22,
        span: 8531..8532,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
        column: 23,
        span: 8531..8533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
        column: 24,
        span: 8533..8534,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 363,
        column: 28,
        span: 8535..8538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 29,
        span: 8538..8539,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 363,
        column: 30,
        span: 8539..8540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 363,
        column: 41,
        span: 8540..8551,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 363,
        column: 44,
        span: 8552..8554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 363,
        column: 46,
        span: 8555..8556,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 363,
        column: 47,
        span: 8556..8557,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
        column: 49,
        span: 8556..8559,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 50,
        span: 8559..8560,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 366,
        column: 9,
        span: 8588..8596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 366,
        column: 11,
        span: 8597..8598,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 13,
        span: 8599..8600,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 366,
        column: 16,
        span: 8600..8603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 17,
        span: 8603..8604,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 367,
        column: 8,
        span: 8607..8612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 367,
        column: 12,
        span: 8613..8616,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 367,
        column: 14,
        span: 8617..8618,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 367,
        column: 16,
        span: 8619..8620,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 367,
        column: 19,
        span: 8620..8623,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 367,
        column: 20,
        span: 8623..8624,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 368,
        column: 5,
        span: 8627..8629,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 368,
        column: 11,
        span: 8630..8635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 13,
        span: 8636..8637,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 14,
        span: 8637..8638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 368,
        column: 15,
        span: 8638..8639,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 16,
        span: 8639..8640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 368,
        column: 17,
        span: 8640..8641,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 368,
        column: 18,
        span: 8641..8642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 20,
        span: 8643..8644,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 368,
        column: 21,
        span: 8644..8645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 368,
        column: 25,
        span: 8645..8649,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 368,
        column: 26,
        span: 8649..8650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 368,
        column: 29,
        span: 8650..8653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
        column: 30,
        span: 8653..8654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 32,
        span: 8653..8656,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
        column: 33,
        span: 8656..8657,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 368,
        column: 34,
        span: 8657..8658,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 368,
        column: 0,
        span: 8659..8662,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 369,
        column: 8,
        span: 8665..8670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "feijao",
        ),
        line: 369,
        column: 0,
        span: 8671..8677,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 370,
        column: 8,
        span: 8680..8685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAAA",
        ),
        line: 370,
        column: 13,
        span: 8686..8690,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
        column: 14,
        span: 8690..8691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 370,
        column: 15,
        span: 8691..8692,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 370,
        column: 17,
        span: 8693..8694,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 370,
        column: 24,
        span: 8695..8701,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
        column: 25,
        span: 8701..8702,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mamão\"",
        ),
        line: 370,
        column: 33,
        span: 8703..8710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 371,
        column: 4,
        span: 8713..8714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 5,
        span: 8714..8715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAAA",
        ),
        line: 371,
        column: 9,
        span: 8715..8719,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 371,
        column: 10,
        span: 8719..8720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 371,
        column: 11,
        span: 8720..8721,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 12,
        span: 8721..8722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 372,
        column: 9,
        span: 8725..8731,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 10,
        span: 8731..8732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAAA",
        ),
        line: 372,
        column: 14,
        span: 8732..8736,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 372,
        column: 17,
        span: 8737..8739,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pera\"",
        ),
        line: 372,
        column: 24,
        span: 8740..8746,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 372,
        column: 28,
        span: 8747..8750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 372,
        column: 30,
        span: 8751..8752,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 372,
        column: 33,
        span: 8753..8755,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"maçã\"",
        ),
        line: 372,
        column: 40,
        span: 8756..8762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 41,
        span: 8762..8763,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 373,
        column: 0,
        span: 8766..8768,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 374,
        column: 11,
        span: 8774..8779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 374,
        column: 13,
        span: 8780..8781,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 374,
        column: 15,
        span: 8782..8783,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 0,
        span: 8783..8786,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 375,
        column: 11,
        span: 8792..8797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 375,
        column: 13,
        span: 8798..8799,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 375,
        column: 14,
        span: 8799..8800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 375,
        column: 15,
        span: 8800..8801,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 375,
        column: 17,
        span: 8802..8803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 375,
        column: 23,
        span: 8804..8809,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 375,
        column: 24,
        span: 8809..8810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 375,
        column: 32,
        span: 8810..8818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 33,
        span: 8818..8819,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 34,
        span: 8818..8820,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 375,
        column: 35,
        span: 8820..8821,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 36,
        span: 8820..8822,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 37,
        span: 8822..8823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 376,
        column: 12,
        span: 8829..8835,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 13,
        span: 8835..8836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 376,
        column: 14,
        span: 8836..8837,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 376,
        column: 17,
        span: 8838..8840,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B'",
        ),
        line: 376,
        column: 21,
        span: 8841..8844,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 376,
        column: 25,
        span: 8845..8848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 376,
        column: 27,
        span: 8849..8850,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 376,
        column: 30,
        span: 8851..8853,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 33,
        span: 8853..8856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 34,
        span: 8856..8857,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 377,
        column: 0,
        span: 8860..8863,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 378,
        column: 0,
        span: 8864..8867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 380,
        column: 2,
        span: 8869..8870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 3,
        span: 8870..8871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
        column: 4,
        span: 8871..8872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 383,
        column: 7,
        span: 8875..8881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 8,
        span: 8881..8882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
        column: 9,
        span: 8882..8883,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 383,
        column: 10,
        span: 8883..8884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 383,
        column: 11,
        span: 8884..8885,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 383,
        column: 12,
        span: 8885..8886,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 383,
        column: 16,
        span: 8887..8890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
        column: 18,
        span: 8891..8892,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 383,
        column: 19,
        span: 8892..8893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 383,
        column: 20,
        span: 8893..8894,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 383,
        column: 21,
        span: 8894..8895,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 383,
        column: 25,
        span: 8896..8899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
        column: 27,
        span: 8900..8901,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 383,
        column: 28,
        span: 8901..8902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 383,
        column: 34,
        span: 8902..8908,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 383,
        column: 35,
        span: 8908..8909,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 383,
        column: 39,
        span: 8910..8913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
        column: 41,
        span: 8914..8915,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 383,
        column: 42,
        span: 8915..8916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 383,
        column: 47,
        span: 8916..8921,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 383,
        column: 48,
        span: 8921..8922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 383,
        column: 56,
        span: 8922..8930,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 383,
        column: 57,
        span: 8930..8931,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 383,
        column: 61,
        span: 8932..8935,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 383,
        column: 65,
        span: 8936..8939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
        column: 67,
        span: 8940..8941,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 383,
        column: 68,
        span: 8941..8942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 383,
        column: 73,
        span: 8942..8947,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 383,
        column: 74,
        span: 8947..8948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 75,
        span: 8948..8949,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 388,
        column: 6,
        span: 9025..9030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 388,
        column: 8,
        span: 9031..9032,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 388,
        column: 9,
        span: 9032..9033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 388,
        column: 11,
        span: 9034..9035,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 388,
        column: 13,
        span: 9036..9037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 388,
        column: 19,
        span: 9038..9043,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 388,
        column: 20,
        span: 9043..9044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 388,
        column: 28,
        span: 9044..9052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
        column: 29,
        span: 9052..9053,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 388,
        column: 30,
        span: 9052..9054,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 388,
        column: 31,
        span: 9054..9055,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 388,
        column: 33,
        span: 9055..9057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
        column: 34,
        span: 9057..9058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 389,
        column: 7,
        span: 9059..9065,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
        column: 8,
        span: 9065..9066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 389,
        column: 9,
        span: 9066..9067,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 389,
        column: 12,
        span: 9068..9070,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
        column: 14,
        span: 9070..9072,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 389,
        column: 18,
        span: 9073..9076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 389,
        column: 20,
        span: 9077..9078,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 389,
        column: 23,
        span: 9079..9081,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(C temporary)\"",
        ),
        line: 389,
        column: 39,
        span: 9082..9097,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
        column: 40,
        span: 9097..9098,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 390,
        column: 6,
        span: 9099..9104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 390,
        column: 8,
        span: 9105..9106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 9,
        span: 9106..9107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 390,
        column: 11,
        span: 9108..9109,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 390,
        column: 13,
        span: 9110..9111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 390,
        column: 19,
        span: 9112..9117,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 390,
        column: 20,
        span: 9117..9118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 390,
        column: 28,
        span: 9118..9126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 29,
        span: 9126..9127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 30,
        span: 9126..9128,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 31,
        span: 9128..9129,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 33,
        span: 9129..9131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 34,
        span: 9131..9132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 391,
        column: 7,
        span: 9133..9139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
        column: 8,
        span: 9139..9140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 391,
        column: 9,
        span: 9140..9141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 391,
        column: 12,
        span: 9142..9144,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 391,
        column: 14,
        span: 9144..9146,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 391,
        column: 18,
        span: 9147..9150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 391,
        column: 20,
        span: 9151..9152,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 391,
        column: 23,
        span: 9153..9155,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(C temporary)\"",
        ),
        line: 391,
        column: 39,
        span: 9156..9171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
        column: 40,
        span: 9171..9172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 392,
        column: 7,
        span: 9173..9179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 8,
        span: 9179..9180,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 392,
        column: 11,
        span: 9180..9183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 392,
        column: 17,
        span: 9184..9189,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 392,
        column: 18,
        span: 9189..9190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 392,
        column: 26,
        span: 9190..9198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 27,
        span: 9198..9199,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 392,
        column: 28,
        span: 9198..9200,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
        column: 29,
        span: 9200..9201,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 392,
        column: 31,
        span: 9201..9203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
        column: 32,
        span: 9203..9204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
        column: 33,
        span: 9204..9205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 393,
        column: 7,
        span: 9206..9212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 8,
        span: 9212..9213,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 393,
        column: 11,
        span: 9213..9216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 393,
        column: 17,
        span: 9217..9222,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 393,
        column: 18,
        span: 9222..9223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 393,
        column: 26,
        span: 9223..9231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 27,
        span: 9231..9232,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
        column: 28,
        span: 9231..9233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 393,
        column: 29,
        span: 9233..9234,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
        column: 31,
        span: 9234..9236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 32,
        span: 9236..9237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 33,
        span: 9237..9238,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 395,
        column: 9,
        span: 9240..9248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 395,
        column: 11,
        span: 9249..9250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 12,
        span: 9250..9251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 13,
        span: 9251..9252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 396,
        column: 9,
        span: 9255..9261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 10,
        span: 9261..9262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 396,
        column: 16,
        span: 9262..9268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 17,
        span: 9268..9269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 18,
        span: 9268..9270,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 396,
        column: 19,
        span: 9270..9271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 396,
        column: 25,
        span: 9272..9277,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 396,
        column: 26,
        span: 9277..9278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 396,
        column: 34,
        span: 9278..9286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 35,
        span: 9286..9287,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 36,
        span: 9286..9288,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 396,
        column: 37,
        span: 9288..9289,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 38,
        span: 9288..9290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 39,
        span: 9290..9291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 40,
        span: 9291..9292,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 396,
        column: 43,
        span: 9293..9295,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 45,
        span: 9295..9297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 46,
        span: 9297..9298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 397,
        column: 9,
        span: 9301..9307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 10,
        span: 9307..9308,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 397,
        column: 13,
        span: 9308..9311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 397,
        column: 19,
        span: 9312..9317,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 397,
        column: 20,
        span: 9317..9318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 397,
        column: 28,
        span: 9318..9326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 29,
        span: 9326..9327,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 30,
        span: 9326..9328,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 31,
        span: 9328..9329,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 32,
        span: 9328..9330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 33,
        span: 9330..9331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 34,
        span: 9331..9332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 398,
        column: 8,
        span: 9335..9340,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 398,
        column: 9,
        span: 9340..9341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 398,
        column: 17,
        span: 9341..9349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 18,
        span: 9349..9350,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 19,
        span: 9349..9351,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
        column: 20,
        span: 9351..9352,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 22,
        span: 9352..9354,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
        column: 23,
        span: 9354..9355,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 26,
        span: 9355..9358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 27,
        span: 9358..9359,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 399,
        column: 9,
        span: 9362..9368,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
        column: 0,
        span: 9368..9371,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 400,
        column: 0,
        span: 9372..9375,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 402,
        column: 9,
        span: 9377..9385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 402,
        column: 11,
        span: 9386..9387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 402,
        column: 12,
        span: 9387..9388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 402,
        column: 13,
        span: 9388..9389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 402,
        column: 14,
        span: 9389..9390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 402,
        column: 15,
        span: 9390..9391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 402,
        column: 16,
        span: 9391..9392,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 402,
        column: 23,
        span: 9393..9399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 402,
        column: 25,
        span: 9400..9401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 402,
        column: 26,
        span: 9401..9402,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 402,
        column: 27,
        span: 9402..9403,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 402,
        column: 28,
        span: 9402..9404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 402,
        column: 29,
        span: 9404..9405,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 402,
        column: 31,
        span: 9406..9407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 402,
        column: 33,
        span: 9408..9409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 402,
        column: 34,
        span: 9409..9410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 402,
        column: 35,
        span: 9410..9411,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 402,
        column: 0,
        span: 9412..9415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 404,
        column: 7,
        span: 9417..9423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 404,
        column: 8,
        span: 9423..9424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 404,
        column: 9,
        span: 9424..9425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 404,
        column: 10,
        span: 9425..9426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 404,
        column: 11,
        span: 9425..9427,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 404,
        column: 12,
        span: 9427..9428,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 404,
        column: 13,
        span: 9427..9429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 404,
        column: 14,
        span: 9429..9430,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 404,
        column: 17,
        span: 9431..9433,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 404,
        column: 20,
        span: 9433..9436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 404,
        column: 21,
        span: 9436..9437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 407,
        column: 6,
        span: 9441..9446,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 407,
        column: 7,
        span: 9446..9447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 407,
        column: 14,
        span: 9447..9454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 15,
        span: 9454..9455,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 407,
        column: 18,
        span: 9455..9458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 19,
        span: 9458..9459,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 407,
        column: 20,
        span: 9459..9460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 408,
        column: 7,
        span: 9461..9467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 8,
        span: 9467..9468,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 408,
        column: 11,
        span: 9468..9471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 408,
        column: 17,
        span: 9472..9477,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 408,
        column: 18,
        span: 9477..9478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 408,
        column: 25,
        span: 9478..9485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 26,
        span: 9485..9486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 27,
        span: 9486..9487,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 28,
        span: 9487..9488,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 412,
        column: 0,
        span: 9538..9540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 413,
        column: 9,
        span: 9543..9549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
        column: 10,
        span: 9549..9550,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 413,
        column: 13,
        span: 9550..9553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 413,
        column: 19,
        span: 9554..9559,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 413,
        column: 20,
        span: 9559..9560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        line: 413,
        column: 32,
        span: 9560..9572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
        column: 33,
        span: 9572..9573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 413,
        column: 35,
        span: 9573..9575,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 413,
        column: 36,
        span: 9575..9576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 413,
        column: 41,
        span: 9576..9581,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 413,
        column: 42,
        span: 9581..9582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
        column: 45,
        span: 9582..9585,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 46,
        span: 9585..9586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 47,
        span: 9586..9587,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 414,
        column: 8,
        span: 9590..9595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 414,
        column: 10,
        span: 9596..9597,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 414,
        column: 11,
        span: 9597..9598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 414,
        column: 13,
        span: 9599..9600,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 414,
        column: 15,
        span: 9601..9602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 414,
        column: 21,
        span: 9603..9608,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 414,
        column: 22,
        span: 9608..9609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        line: 414,
        column: 34,
        span: 9609..9621,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 35,
        span: 9621..9622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 414,
        column: 37,
        span: 9622..9624,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 414,
        column: 38,
        span: 9624..9625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 414,
        column: 43,
        span: 9625..9630,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 414,
        column: 44,
        span: 9630..9631,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 414,
        column: 47,
        span: 9631..9634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 48,
        span: 9634..9635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 415,
        column: 9,
        span: 9638..9644,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 10,
        span: 9644..9645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 415,
        column: 11,
        span: 9645..9646,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 415,
        column: 14,
        span: 9647..9649,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 415,
        column: 18,
        span: 9650..9653,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 415,
        column: 22,
        span: 9654..9657,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 415,
        column: 26,
        span: 9658..9661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 415,
        column: 28,
        span: 9662..9663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 29,
        span: 9663..9664,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 416,
        column: 0,
        span: 9665..9668,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 419,
        column: 0,
        span: 9724..9726,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 420,
        column: 8,
        span: 9729..9734,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 420,
        column: 17,
        span: 9735..9743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 420,
        column: 19,
        span: 9744..9745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 420,
        column: 20,
        span: 9745..9746,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 420,
        column: 23,
        span: 9746..9749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 420,
        column: 24,
        span: 9749..9750,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 420,
        column: 31,
        span: 9751..9757,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 420,
        column: 33,
        span: 9757..9759,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 420,
        column: 34,
        span: 9759..9760,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 420,
        column: 38,
        span: 9761..9764,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 420,
        column: 0,
        span: 9765..9768,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 421,
        column: 8,
        span: 9771..9776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 421,
        column: 14,
        span: 9777..9782,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 421,
        column: 16,
        span: 9783..9784,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 421,
        column: 0,
        span: 9784..9786,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 422,
        column: 8,
        span: 9789..9794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 422,
        column: 10,
        span: 9795..9796,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 422,
        column: 12,
        span: 9797..9798,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 422,
        column: 14,
        span: 9799..9800,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 422,
        column: 15,
        span: 9800..9801,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 423,
        column: 6,
        span: 9804..9807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 423,
        column: 8,
        span: 9808..9809,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 423,
        column: 10,
        span: 9810..9811,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
        column: 12,
        span: 9811..9813,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 423,
        column: 13,
        span: 9813..9814,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
        column: 17,
        span: 9814..9818,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 423,
        column: 20,
        span: 9819..9821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 423,
        column: 22,
        span: 9822..9823,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 423,
        column: 23,
        span: 9823..9824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 423,
        column: 24,
        span: 9824..9825,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 423,
        column: 25,
        span: 9825..9826,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 423,
        column: 27,
        span: 9827..9828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 423,
        column: 29,
        span: 9829..9830,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 423,
        column: 0,
        span: 9831..9834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 424,
        column: 8,
        span: 9837..9842,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 424,
        column: 9,
        span: 9842..9843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 424,
        column: 16,
        span: 9843..9850,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 17,
        span: 9850..9851,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 424,
        column: 25,
        span: 9851..9859,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 27,
        span: 9860..9861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
        column: 28,
        span: 9861..9862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 424,
        column: 34,
        span: 9863..9868,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 424,
        column: 36,
        span: 9869..9870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 424,
        column: 42,
        span: 9871..9876,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 424,
        column: 44,
        span: 9877..9878,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
        column: 46,
        span: 9878..9880,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 424,
        column: 50,
        span: 9881..9884,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 424,
        column: 51,
        span: 9884..9885,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 424,
        column: 54,
        span: 9886..9888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 424,
        column: 55,
        span: 9888..9889,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
        column: 57,
        span: 9889..9891,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
        column: 58,
        span: 9891..9892,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 425,
        column: 8,
        span: 9895..9900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 425,
        column: 10,
        span: 9901..9902,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 425,
        column: 12,
        span: 9903..9904,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 425,
        column: 14,
        span: 9905..9906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 425,
        column: 19,
        span: 9906..9911,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 425,
        column: 20,
        span: 9911..9912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 425,
        column: 26,
        span: 9912..9918,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
        column: 27,
        span: 9918..9919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 425,
        column: 28,
        span: 9919..9920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
        column: 29,
        span: 9920..9921,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 425,
        column: 30,
        span: 9921..9922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 426,
        column: 9,
        span: 9925..9931,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 10,
        span: 9931..9932,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 426,
        column: 11,
        span: 9932..9933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 426,
        column: 12,
        span: 9933..9934,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 426,
        column: 15,
        span: 9935..9937,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
        column: 19,
        span: 9937..9941,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
        column: 20,
        span: 9941..9942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 427,
        column: 4,
        span: 9945..9946,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 427,
        column: 6,
        span: 9947..9948,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 427,
        column: 8,
        span: 9949..9950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 427,
        column: 13,
        span: 9950..9955,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 427,
        column: 14,
        span: 9955..9956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 427,
        column: 20,
        span: 9956..9962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 21,
        span: 9962..9963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 427,
        column: 22,
        span: 9963..9964,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 427,
        column: 23,
        span: 9964..9965,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 427,
        column: 25,
        span: 9965..9967,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 427,
        column: 26,
        span: 9967..9968,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 427,
        column: 28,
        span: 9968..9970,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 29,
        span: 9970..9971,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 427,
        column: 30,
        span: 9971..9972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 428,
        column: 9,
        span: 9975..9981,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 10,
        span: 9981..9982,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 428,
        column: 11,
        span: 9982..9983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 428,
        column: 12,
        span: 9983..9984,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 428,
        column: 15,
        span: 9985..9987,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 428,
        column: 17,
        span: 9987..9989,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 18,
        span: 9989..9990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 429,
        column: 4,
        span: 9993..9994,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 429,
        column: 6,
        span: 9995..9996,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 429,
        column: 8,
        span: 9997..9998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 429,
        column: 9,
        span: 9998..9999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
        column: 10,
        span: 9999..10000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 429,
        column: 15,
        span: 10000..10005,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 429,
        column: 16,
        span: 10005..10006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 429,
        column: 22,
        span: 10006..10012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
        column: 23,
        span: 10012..10013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 429,
        column: 24,
        span: 10013..10014,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 429,
        column: 25,
        span: 10014..10015,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
        column: 27,
        span: 10015..10017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 429,
        column: 28,
        span: 10017..10018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
        column: 31,
        span: 10018..10021,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
        column: 32,
        span: 10021..10022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
        column: 33,
        span: 10022..10023,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 429,
        column: 34,
        span: 10023..10024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 430,
        column: 9,
        span: 10027..10033,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
        column: 10,
        span: 10033..10034,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 430,
        column: 11,
        span: 10034..10035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 430,
        column: 12,
        span: 10035..10036,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 430,
        column: 15,
        span: 10037..10039,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 430,
        column: 18,
        span: 10039..10042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
        column: 19,
        span: 10042..10043,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 431,
        column: 0,
        span: 10044..10047,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 436,
        column: 6,
        span: 10091..10096,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 436,
        column: 15,
        span: 10097..10105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectlocals",
        ),
        line: 436,
        column: 29,
        span: 10106..10119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
        column: 31,
        span: 10120..10121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "level",
        ),
        line: 436,
        column: 36,
        span: 10121..10126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 37,
        span: 10126..10127,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 437,
        column: 8,
        span: 10130..10135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 437,
        column: 12,
        span: 10136..10139,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 437,
        column: 14,
        span: 10140..10141,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 437,
        column: 16,
        span: 10142..10143,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 437,
        column: 17,
        span: 10143..10144,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 438,
        column: 6,
        span: 10147..10150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 438,
        column: 8,
        span: 10151..10152,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 438,
        column: 10,
        span: 10153..10154,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 438,
        column: 12,
        span: 10154..10156,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 438,
        column: 13,
        span: 10156..10157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 438,
        column: 18,
        span: 10158..10162,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 438,
        column: 19,
        span: 10162..10163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 438,
        column: 23,
        span: 10163..10167,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 438,
        column: 0,
        span: 10168..10170,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 439,
        column: 10,
        span: 10175..10180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 439,
        column: 12,
        span: 10181..10182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 439,
        column: 13,
        span: 10182..10183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 439,
        column: 15,
        span: 10184..10185,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 439,
        column: 17,
        span: 10186..10187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 439,
        column: 23,
        span: 10188..10193,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 439,
        column: 24,
        span: 10193..10194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 439,
        column: 32,
        span: 10194..10202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 439,
        column: 33,
        span: 10202..10203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "level",
        ),
        line: 439,
        column: 38,
        span: 10203..10208,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 439,
        column: 40,
        span: 10209..10210,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 439,
        column: 42,
        span: 10210..10212,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 439,
        column: 43,
        span: 10212..10213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 439,
        column: 45,
        span: 10214..10215,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 439,
        column: 46,
        span: 10215..10216,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 440,
        column: 7,
        span: 10221..10223,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 440,
        column: 11,
        span: 10224..10227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 13,
        span: 10228..10229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 440,
        column: 14,
        span: 10229..10230,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 440,
        column: 18,
        span: 10231..10234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 440,
        column: 25,
        span: 10235..10241,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 440,
        column: 26,
        span: 10241..10242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 440,
        column: 30,
        span: 10242..10246,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
        column: 31,
        span: 10246..10247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 440,
        column: 32,
        span: 10247..10248,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 440,
        column: 33,
        span: 10248..10249,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^[a-zA-Z0-9_]+$\"",
        ),
        line: 440,
        column: 51,
        span: 10250..10267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 52,
        span: 10267..10268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
        column: 53,
        span: 10268..10269,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 440,
        column: 0,
        span: 10270..10274,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 441,
        column: 13,
        span: 10282..10287,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 442,
        column: 0,
        span: 10326..10329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 443,
        column: 8,
        span: 10334..10337,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 443,
        column: 9,
        span: 10337..10338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 443,
        column: 10,
        span: 10338..10339,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 443,
        column: 11,
        span: 10339..10340,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 443,
        column: 13,
        span: 10341..10342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 443,
        column: 0,
        span: 10343..10344,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 444,
        column: 0,
        span: 10347..10350,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 445,
        column: 9,
        span: 10353..10359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 445,
        column: 0,
        span: 10360..10363,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 446,
        column: 0,
        span: 10364..10367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 449,
        column: 2,
        span: 10370..10371,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 449,
        column: 4,
        span: 10372..10373,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 449,
        column: 0,
        span: 10374..10377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 450,
        column: 2,
        span: 10378..10379,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 450,
        column: 4,
        span: 10380..10381,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 450,
        column: 6,
        span: 10382..10383,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 450,
        column: 7,
        span: 10383..10384,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 451,
        column: 9,
        span: 10385..10393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 451,
        column: 11,
        span: 10394..10395,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 451,
        column: 12,
        span: 10395..10396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 451,
        column: 13,
        span: 10396..10397,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 15,
        span: 10398..10399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 451,
        column: 16,
        span: 10399..10400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
        column: 17,
        span: 10400..10401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 451,
        column: 19,
        span: 10402..10403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
        column: 20,
        span: 10403..10404,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 451,
        column: 24,
        span: 10405..10408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 25,
        span: 10408..10409,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 451,
        column: 31,
        span: 10410..10415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 451,
        column: 35,
        span: 10416..10419,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 451,
        column: 37,
        span: 10420..10421,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 451,
        column: 39,
        span: 10422..10423,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 451,
        column: 42,
        span: 10423..10426,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 451,
        column: 43,
        span: 10426..10427,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 451,
        column: 44,
        span: 10427..10428,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 451,
        column: 50,
        span: 10429..10434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 451,
        column: 52,
        span: 10435..10436,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 451,
        column: 54,
        span: 10437..10438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 451,
        column: 57,
        span: 10438..10441,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 451,
        column: 0,
        span: 10442..10445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 452,
        column: 6,
        span: 10446..10451,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 452,
        column: 7,
        span: 10451..10452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 452,
        column: 14,
        span: 10452..10459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
        column: 15,
        span: 10459..10460,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 452,
        column: 23,
        span: 10460..10468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
        column: 25,
        span: 10469..10470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 452,
        column: 26,
        span: 10470..10471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
        column: 27,
        span: 10471..10472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 453,
        column: 9,
        span: 10475..10481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
        column: 10,
        span: 10481..10482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 453,
        column: 11,
        span: 10482..10483,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 453,
        column: 14,
        span: 10484..10486,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        line: 453,
        column: 21,
        span: 10487..10493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
        column: 22,
        span: 10493..10494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 454,
        column: 11,
        span: 10497..10505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
        column: 12,
        span: 10505..10506,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XX = 12\"",
        ),
        line: 454,
        column: 21,
        span: 10506..10515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
        column: 22,
        span: 10515..10516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 456,
        column: 9,
        span: 10583..10589,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 10,
        span: 10589..10590,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 456,
        column: 13,
        span: 10590..10593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 456,
        column: 19,
        span: 10594..10599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 20,
        span: 10599..10600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 456,
        column: 24,
        span: 10600..10604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
        column: 25,
        span: 10604..10605,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a='joao'+1\"",
        ),
        line: 456,
        column: 37,
        span: 10605..10617,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 38,
        span: 10617..10618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 39,
        span: 10618..10619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
        column: 40,
        span: 10619..10620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 457,
        column: 8,
        span: 10623..10628,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 457,
        column: 9,
        span: 10628..10629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 457,
        column: 16,
        span: 10629..10636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 17,
        span: 10636..10637,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 457,
        column: 25,
        span: 10637..10645,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 27,
        span: 10646..10647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 457,
        column: 28,
        span: 10647..10648,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 457,
        column: 29,
        span: 10648..10649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 457,
        column: 31,
        span: 10650..10651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
        column: 32,
        span: 10651..10652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 458,
        column: 11,
        span: 10658..10664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
        column: 12,
        span: 10664..10665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 458,
        column: 17,
        span: 10665..10670,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 458,
        column: 18,
        span: 10670..10671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 458,
        column: 25,
        span: 10671..10678,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
        column: 26,
        span: 10678..10679,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 458,
        column: 27,
        span: 10678..10680,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 458,
        column: 28,
        span: 10680..10681,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 458,
        column: 32,
        span: 10682..10685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
        column: 33,
        span: 10685..10686,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 458,
        column: 34,
        span: 10686..10687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 458,
        column: 45,
        span: 10687..10698,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 458,
        column: 48,
        span: 10699..10701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 458,
        column: 50,
        span: 10702..10703,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
        column: 51,
        span: 10703..10704,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 459,
        column: 10,
        span: 10709..10714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 459,
        column: 12,
        span: 10715..10716,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 459,
        column: 13,
        span: 10716..10717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 459,
        column: 14,
        span: 10717..10718,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 459,
        column: 15,
        span: 10718..10719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 459,
        column: 16,
        span: 10719..10720,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 459,
        column: 18,
        span: 10721..10722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 459,
        column: 24,
        span: 10723..10728,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 459,
        column: 25,
        span: 10728..10729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 459,
        column: 32,
        span: 10729..10736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
        column: 33,
        span: 10736..10737,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
        column: 34,
        span: 10737..10738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 460,
        column: 11,
        span: 10743..10749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 460,
        column: 12,
        span: 10749..10750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 460,
        column: 13,
        span: 10750..10751,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 460,
        column: 16,
        span: 10752..10754,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        line: 460,
        column: 23,
        span: 10755..10761,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 460,
        column: 24,
        span: 10761..10762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 461,
        column: 11,
        span: 10767..10773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
        column: 12,
        span: 10773..10774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 461,
        column: 13,
        span: 10774..10775,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 461,
        column: 16,
        span: 10776..10778,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        line: 461,
        column: 20,
        span: 10779..10782,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 461,
        column: 24,
        span: 10783..10786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 461,
        column: 26,
        span: 10787..10788,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 461,
        column: 29,
        span: 10789..10791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 461,
        column: 31,
        span: 10791..10793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
        column: 32,
        span: 10793..10794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 462,
        column: 10,
        span: 10799..10804,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 462,
        column: 11,
        span: 10804..10805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 462,
        column: 18,
        span: 10805..10812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
        column: 19,
        span: 10812..10813,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 462,
        column: 22,
        span: 10813..10816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
        column: 23,
        span: 10816..10817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 463,
        column: 11,
        span: 10851..10857,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
        column: 12,
        span: 10857..10858,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 463,
        column: 15,
        span: 10858..10861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 463,
        column: 17,
        span: 10862..10863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
        column: 18,
        span: 10863..10864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 464,
        column: 6,
        span: 10889..10890,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 464,
        column: 8,
        span: 10891..10892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectlocals",
        ),
        line: 464,
        column: 22,
        span: 10893..10906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
        column: 23,
        span: 10906..10907,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 464,
        column: 24,
        span: 10906..10908,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 25,
        span: 10908..10909,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 465,
        column: 6,
        span: 10912..10915,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 465,
        column: 7,
        span: 10915..10916,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 465,
        column: 11,
        span: 10917..10920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
        column: 12,
        span: 10920..10921,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 466,
        column: 4,
        span: 10922..10925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 466,
        column: 5,
        span: 10925..10926,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 466,
        column: 9,
        span: 10927..10930,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 10,
        span: 10930..10931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 468,
        column: 2,
        span: 10933..10934,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 468,
        column: 3,
        span: 10934..10935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 468,
        column: 4,
        span: 10935..10936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 468,
        column: 5,
        span: 10936..10937,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
        column: 6,
        span: 10936..10938,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 468,
        column: 7,
        span: 10938..10939,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
        column: 8,
        span: 10938..10940,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 468,
        column: 9,
        span: 10940..10941,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
        column: 10,
        span: 10940..10942,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 468,
        column: 11,
        span: 10942..10943,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
        column: 12,
        span: 10942..10944,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 468,
        column: 13,
        span: 10944..10945,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
        column: 14,
        span: 10944..10946,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 468,
        column: 15,
        span: 10946..10947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 469,
        column: 7,
        span: 10948..10954,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
        column: 8,
        span: 10954..10955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 469,
        column: 9,
        span: 10955..10956,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 469,
        column: 10,
        span: 10956..10957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 469,
        column: 14,
        span: 10957..10961,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 469,
        column: 17,
        span: 10962..10964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 469,
        column: 19,
        span: 10965..10966,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 469,
        column: 23,
        span: 10967..10970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 469,
        column: 25,
        span: 10971..10972,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 469,
        column: 26,
        span: 10972..10973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 469,
        column: 27,
        span: 10973..10974,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 469,
        column: 30,
        span: 10975..10977,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 469,
        column: 32,
        span: 10977..10979,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 469,
        column: 38,
        span: 10982..10985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 469,
        column: 40,
        span: 10986..10987,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 469,
        column: 41,
        span: 10987..10988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 469,
        column: 42,
        span: 10988..10989,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 469,
        column: 45,
        span: 10990..10992,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 469,
        column: 47,
        span: 10992..10994,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 469,
        column: 51,
        span: 10995..10998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 469,
        column: 53,
        span: 10999..11000,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 469,
        column: 54,
        span: 11000..11001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 469,
        column: 55,
        span: 11001..11002,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 469,
        column: 58,
        span: 11003..11005,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 469,
        column: 62,
        span: 11006..11009,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
        column: 63,
        span: 11009..11010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 470,
        column: 7,
        span: 11011..11017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
        column: 8,
        span: 11017..11018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 470,
        column: 10,
        span: 11018..11020,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 470,
        column: 13,
        span: 11021..11023,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 470,
        column: 16,
        span: 11023..11026,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
        column: 17,
        span: 11026..11027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 471,
        column: 7,
        span: 11028..11034,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 471,
        column: 8,
        span: 11034..11035,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 471,
        column: 11,
        span: 11035..11038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 471,
        column: 17,
        span: 11039..11044,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 471,
        column: 18,
        span: 11044..11045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 471,
        column: 25,
        span: 11045..11052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 471,
        column: 26,
        span: 11052..11053,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 471,
        column: 27,
        span: 11053..11054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 471,
        column: 28,
        span: 11054..11055,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 475,
        column: 0,
        span: 11123..11125,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 476,
        column: 8,
        span: 11128..11133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 476,
        column: 10,
        span: 11134..11135,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 476,
        column: 12,
        span: 11136..11137,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 476,
        column: 0,
        span: 11138..11143,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 478,
        column: 8,
        span: 11147..11152,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 478,
        column: 17,
        span: 11153..11161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 478,
        column: 21,
        span: 11162..11165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
        column: 23,
        span: 11166..11167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 478,
        column: 24,
        span: 11167..11168,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 478,
        column: 25,
        span: 11168..11169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 478,
        column: 27,
        span: 11170..11171,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 478,
        column: 28,
        span: 11171..11172,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 478,
        column: 32,
        span: 11173..11176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
        column: 33,
        span: 11176..11177,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 479,
        column: 7,
        span: 11182..11184,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 479,
        column: 13,
        span: 11185..11190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 479,
        column: 15,
        span: 11191..11192,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 479,
        column: 16,
        span: 11192..11193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 479,
        column: 17,
        span: 11193..11194,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 479,
        column: 18,
        span: 11194..11195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 479,
        column: 19,
        span: 11195..11196,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 479,
        column: 0,
        span: 11197..11200,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 480,
        column: 10,
        span: 11205..11210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 480,
        column: 12,
        span: 11211..11212,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 480,
        column: 13,
        span: 11212..11213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 480,
        column: 15,
        span: 11214..11215,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 480,
        column: 17,
        span: 11216..11217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 480,
        column: 20,
        span: 11217..11220,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 480,
        column: 21,
        span: 11220..11221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 480,
        column: 0,
        span: 11221..11224,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 481,
        column: 0,
        span: 11229..11235,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 482,
        column: 0,
        span: 11238..11241,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 484,
        column: 8,
        span: 11245..11250,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 484,
        column: 17,
        span: 11251..11259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 484,
        column: 21,
        span: 11260..11263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 484,
        column: 23,
        span: 11264..11265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 484,
        column: 24,
        span: 11265..11266,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 485,
        column: 7,
        span: 11271..11273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 485,
        column: 13,
        span: 11274..11279,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 485,
        column: 14,
        span: 11279..11280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 485,
        column: 21,
        span: 11280..11287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 485,
        column: 22,
        span: 11287..11288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 485,
        column: 23,
        span: 11287..11289,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 485,
        column: 24,
        span: 11289..11290,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 485,
        column: 25,
        span: 11290..11291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 485,
        column: 29,
        span: 11291..11295,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 485,
        column: 32,
        span: 11296..11298,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"foo\"",
        ),
        line: 485,
        column: 38,
        span: 11299..11304,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 485,
        column: 0,
        span: 11305..11309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 486,
        column: 8,
        span: 11316..11317,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 486,
        column: 10,
        span: 11318..11319,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 486,
        column: 15,
        span: 11320..11324,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 487,
        column: 12,
        span: 11366..11371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 487,
        column: 16,
        span: 11372..11375,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
        column: 18,
        span: 11376..11377,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 487,
        column: 20,
        span: 11378..11379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 487,
        column: 21,
        span: 11379..11380,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
        column: 23,
        span: 11381..11382,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 487,
        column: 27,
        span: 11382..11386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
        column: 28,
        span: 11386..11387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 487,
        column: 30,
        span: 11388..11389,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
        column: 32,
        span: 11390..11391,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 487,
        column: 36,
        span: 11391..11395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
        column: 37,
        span: 11395..11396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 487,
        column: 39,
        span: 11397..11398,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
        column: 41,
        span: 11399..11400,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 487,
        column: 44,
        span: 11400..11403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
        column: 45,
        span: 11403..11404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 487,
        column: 47,
        span: 11405..11406,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
        column: 49,
        span: 11407..11408,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 487,
        column: 52,
        span: 11408..11411,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 487,
        column: 53,
        span: 11411..11412,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 488,
        column: 10,
        span: 11419..11422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 488,
        column: 12,
        span: 11423..11424,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 488,
        column: 13,
        span: 11424..11425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 488,
        column: 15,
        span: 11426..11427,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 488,
        column: 18,
        span: 11428..11430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 488,
        column: 24,
        span: 11431..11436,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 488,
        column: 25,
        span: 11436..11437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectlocals",
        ),
        line: 488,
        column: 38,
        span: 11437..11450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 488,
        column: 39,
        span: 11450..11451,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 488,
        column: 40,
        span: 11450..11452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 488,
        column: 41,
        span: 11452..11453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 488,
        column: 42,
        span: 11453..11454,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 488,
        column: 0,
        span: 11455..11457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 489,
        column: 15,
        span: 11466..11472,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 489,
        column: 16,
        span: 11472..11473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 489,
        column: 19,
        span: 11473..11476,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 489,
        column: 20,
        span: 11476..11477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 489,
        column: 21,
        span: 11477..11478,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 489,
        column: 22,
        span: 11478..11479,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 489,
        column: 25,
        span: 11480..11482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 489,
        column: 27,
        span: 11483..11484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 489,
        column: 28,
        span: 11484..11485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 490,
        column: 12,
        span: 11494..11497,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 490,
        column: 13,
        span: 11497..11498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 490,
        column: 14,
        span: 11498..11499,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 490,
        column: 15,
        span: 11499..11500,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 490,
        column: 17,
        span: 11501..11502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 490,
        column: 0,
        span: 11503..11508,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 491,
        column: 0,
        span: 11515..11518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 492,
        column: 13,
        span: 11525..11531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
        column: 14,
        span: 11531..11532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 492,
        column: 18,
        span: 11532..11536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
        column: 19,
        span: 11536..11537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 492,
        column: 22,
        span: 11537..11540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
        column: 23,
        span: 11540..11541,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 492,
        column: 26,
        span: 11542..11544,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 492,
        column: 30,
        span: 11545..11548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
        column: 31,
        span: 11548..11549,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 493,
        column: 0,
        span: 11580..11583,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 494,
        column: 0,
        span: 11586..11589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 496,
        column: 8,
        span: 11593..11598,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 496,
        column: 9,
        span: 11598..11599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 496,
        column: 16,
        span: 11599..11606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
        column: 17,
        span: 11606..11607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 496,
        column: 20,
        span: 11607..11610,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 496,
        column: 21,
        span: 11610..11611,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        line: 496,
        column: 25,
        span: 11612..11615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
        column: 26,
        span: 11615..11616,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 496,
        column: 27,
        span: 11616..11617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 496,
        column: 31,
        span: 11618..11621,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
        column: 32,
        span: 11621..11622,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
        column: 35,
        span: 11621..11625,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 496,
        column: 36,
        span: 11625..11626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
        column: 40,
        span: 11626..11630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
        column: 41,
        span: 11630..11631,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 496,
        column: 42,
        span: 11631..11632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 496,
        column: 48,
        span: 11633..11638,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 496,
        column: 49,
        span: 11638..11639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 496,
        column: 56,
        span: 11639..11646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
        column: 57,
        span: 11646..11647,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
        column: 58,
        span: 11647..11648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 497,
        column: 9,
        span: 11651..11657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 497,
        column: 10,
        span: 11657..11658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 497,
        column: 11,
        span: 11658..11659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 497,
        column: 12,
        span: 11659..11660,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 499,
        column: 0,
        span: 11662..11665,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 502,
        column: 6,
        span: 11668..11673,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 502,
        column: 15,
        span: 11674..11682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqseq",
        ),
        line: 502,
        column: 21,
        span: 11683..11688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 502,
        column: 23,
        span: 11689..11690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 502,
        column: 25,
        span: 11690..11692,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 502,
        column: 26,
        span: 11692..11693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 502,
        column: 29,
        span: 11694..11696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 502,
        column: 30,
        span: 11696..11697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 503,
        column: 9,
        span: 11700..11706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 503,
        column: 10,
        span: 11706..11707,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 503,
        column: 11,
        span: 11707..11708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 503,
        column: 13,
        span: 11708..11710,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 503,
        column: 16,
        span: 11711..11713,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 503,
        column: 18,
        span: 11714..11715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 503,
        column: 20,
        span: 11715..11717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 503,
        column: 21,
        span: 11717..11718,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 504,
        column: 6,
        span: 11721..11724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 504,
        column: 8,
        span: 11725..11726,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 504,
        column: 10,
        span: 11727..11728,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 504,
        column: 12,
        span: 11728..11730,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 504,
        column: 13,
        span: 11730..11731,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 504,
        column: 15,
        span: 11732..11733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 504,
        column: 17,
        span: 11733..11735,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 504,
        column: 0,
        span: 11736..11738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 505,
        column: 11,
        span: 11743..11749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 505,
        column: 12,
        span: 11749..11750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 505,
        column: 14,
        span: 11750..11752,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 505,
        column: 15,
        span: 11752..11753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 505,
        column: 16,
        span: 11753..11754,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 505,
        column: 17,
        span: 11754..11755,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 505,
        column: 20,
        span: 11756..11758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 505,
        column: 23,
        span: 11759..11761,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 505,
        column: 24,
        span: 11761..11762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 505,
        column: 25,
        span: 11762..11763,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 505,
        column: 26,
        span: 11763..11764,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 505,
        column: 27,
        span: 11764..11765,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 506,
        column: 0,
        span: 11768..11771,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 507,
        column: 0,
        span: 11772..11775,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 510,
        column: 3,
        span: 11778..11780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 510,
        column: 10,
        span: 11782..11787,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 510,
        column: 11,
        span: 11787..11788,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing inspection of parameters/returned values\"",
        ),
        line: 510,
        column: 61,
        span: 11788..11838,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 510,
        column: 62,
        span: 11838..11839,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 511,
        column: 8,
        span: 11842..11847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 511,
        column: 11,
        span: 11848..11850,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 511,
        column: 13,
        span: 11851..11852,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 511,
        column: 0,
        span: 11853..11858,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 512,
        column: 8,
        span: 11861..11866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inp",
        ),
        line: 512,
        column: 12,
        span: 11867..11870,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 512,
        column: 13,
        span: 11870..11871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 512,
        column: 0,
        span: 11872..11875,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 514,
        column: 8,
        span: 11879..11884,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 514,
        column: 17,
        span: 11885..11893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hook",
        ),
        line: 514,
        column: 22,
        span: 11894..11898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 514,
        column: 24,
        span: 11899..11900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        line: 514,
        column: 29,
        span: 11900..11905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 514,
        column: 30,
        span: 11905..11906,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 515,
        column: 7,
        span: 11911..11913,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 515,
        column: 11,
        span: 11914..11917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 515,
        column: 14,
        span: 11918..11920,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 515,
        column: 19,
        span: 11921..11925,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 515,
        column: 26,
        span: 11926..11932,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 515,
        column: 0,
        span: 11933..11936,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 516,
        column: 10,
        span: 11941..11946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ar",
        ),
        line: 516,
        column: 13,
        span: 11947..11949,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 516,
        column: 15,
        span: 11950..11951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 516,
        column: 21,
        span: 11952..11957,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 516,
        column: 22,
        span: 11957..11958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 516,
        column: 29,
        span: 11958..11965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 516,
        column: 30,
        span: 11965..11966,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
        column: 31,
        span: 11965..11967,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 516,
        column: 32,
        span: 11967..11968,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ruS\"",
        ),
        line: 516,
        column: 38,
        span: 11969..11974,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 516,
        column: 39,
        span: 11974..11975,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 517,
        column: 10,
        span: 11980..11985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 517,
        column: 12,
        span: 11986..11987,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 517,
        column: 14,
        span: 11988..11989,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 517,
        column: 16,
        span: 11990..11991,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 517,
        column: 17,
        span: 11991..11992,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 518,
        column: 8,
        span: 11997..12000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 518,
        column: 10,
        span: 12001..12002,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 518,
        column: 12,
        span: 12003..12004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ar",
        ),
        line: 518,
        column: 15,
        span: 12005..12007,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 518,
        column: 16,
        span: 12007..12008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ftransfer",
        ),
        line: 518,
        column: 25,
        span: 12008..12017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 518,
        column: 26,
        span: 12017..12018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ar",
        ),
        line: 518,
        column: 29,
        span: 12019..12021,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 518,
        column: 30,
        span: 12021..12022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ftransfer",
        ),
        line: 518,
        column: 39,
        span: 12022..12031,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 518,
        column: 41,
        span: 12032..12033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ar",
        ),
        line: 518,
        column: 44,
        span: 12034..12036,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 518,
        column: 45,
        span: 12036..12037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ntransfer",
        ),
        line: 518,
        column: 54,
        span: 12037..12046,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 518,
        column: 56,
        span: 12047..12048,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 518,
        column: 58,
        span: 12048..12050,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 518,
        column: 0,
        span: 12051..12053,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 519,
        column: 12,
        span: 12060..12065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 519,
        column: 14,
        span: 12066..12067,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 519,
        column: 15,
        span: 12067..12068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 519,
        column: 17,
        span: 12069..12070,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 519,
        column: 19,
        span: 12071..12072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 519,
        column: 25,
        span: 12073..12078,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 519,
        column: 26,
        span: 12078..12079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 519,
        column: 34,
        span: 12079..12087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 519,
        column: 35,
        span: 12087..12088,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 519,
        column: 36,
        span: 12087..12089,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 519,
        column: 37,
        span: 12089..12090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 519,
        column: 39,
        span: 12091..12092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 519,
        column: 40,
        span: 12092..12093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 520,
        column: 8,
        span: 12100..12101,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 520,
        column: 9,
        span: 12101..12102,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 520,
        column: 10,
        span: 12102..12103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 520,
        column: 11,
        span: 12103..12104,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 520,
        column: 13,
        span: 12105..12106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 520,
        column: 15,
        span: 12106..12108,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 520,
        column: 16,
        span: 12108..12109,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 520,
        column: 18,
        span: 12110..12111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 520,
        column: 20,
        span: 12112..12113,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 521,
        column: 0,
        span: 12119..12122,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 522,
        column: 7,
        span: 12127..12129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        line: 522,
        column: 13,
        span: 12130..12135,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 522,
        column: 16,
        span: 12136..12138,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 522,
        column: 25,
        span: 12139..12147,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 522,
        column: 0,
        span: 12148..12152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 523,
        column: 10,
        span: 12159..12162,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 523,
        column: 12,
        span: 12163..12164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 523,
        column: 0,
        span: 12165..12166,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 524,
        column: 0,
        span: 12171..12175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inp",
        ),
        line: 525,
        column: 10,
        span: 12182..12185,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 525,
        column: 12,
        span: 12186..12187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 525,
        column: 0,
        span: 12188..12189,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 526,
        column: 0,
        span: 12194..12197,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 527,
        column: 0,
        span: 12200..12203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 529,
        column: 8,
        span: 12207..12212,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 529,
        column: 9,
        span: 12212..12213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 529,
        column: 16,
        span: 12213..12220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
        column: 17,
        span: 12220..12221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hook",
        ),
        line: 529,
        column: 21,
        span: 12221..12225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 529,
        column: 22,
        span: 12225..12226,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cr\"",
        ),
        line: 529,
        column: 27,
        span: 12227..12231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
        column: 28,
        span: 12231..12232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 531,
        column: 5,
        span: 12236..12238,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 531,
        column: 7,
        span: 12239..12240,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 531,
        column: 12,
        span: 12241..12245,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 531,
        column: 13,
        span: 12245..12246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 531,
        column: 18,
        span: 12247..12251,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 531,
        column: 19,
        span: 12251..12252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 531,
        column: 22,
        span: 12252..12255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 531,
        column: 23,
        span: 12255..12256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
        column: 24,
        span: 12255..12257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 531,
        column: 25,
        span: 12257..12258,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 531,
        column: 26,
        span: 12258..12259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 531,
        column: 29,
        span: 12260..12262,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 531,
        column: 31,
        span: 12263..12264,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 531,
        column: 0,
        span: 12265..12270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqseq",
        ),
        line: 532,
        column: 8,
        span: 12273..12278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 9,
        span: 12278..12279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inp",
        ),
        line: 532,
        column: 12,
        span: 12279..12282,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 532,
        column: 13,
        span: 12282..12283,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 532,
        column: 15,
        span: 12284..12285,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 532,
        column: 16,
        span: 12284..12286,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 532,
        column: 17,
        span: 12286..12287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 18,
        span: 12287..12288,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 532,
        column: 19,
        span: 12288..12289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqseq",
        ),
        line: 532,
        column: 25,
        span: 12290..12295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 26,
        span: 12295..12296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 532,
        column: 29,
        span: 12296..12299,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 532,
        column: 30,
        span: 12299..12300,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 532,
        column: 32,
        span: 12301..12302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 532,
        column: 36,
        span: 12302..12306,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 532,
        column: 37,
        span: 12306..12307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 532,
        column: 40,
        span: 12307..12310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 41,
        span: 12310..12311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 532,
        column: 42,
        span: 12310..12312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 43,
        span: 12312..12313,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 532,
        column: 44,
        span: 12313..12314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 45,
        span: 12314..12315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 534,
        column: 5,
        span: 12319..12321,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 534,
        column: 7,
        span: 12322..12323,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 534,
        column: 12,
        span: 12324..12328,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 534,
        column: 13,
        span: 12328..12329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 534,
        column: 20,
        span: 12330..12336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
        column: 21,
        span: 12336..12337,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 534,
        column: 22,
        span: 12336..12338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 534,
        column: 23,
        span: 12338..12339,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 534,
        column: 26,
        span: 12339..12342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 534,
        column: 27,
        span: 12342..12343,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 534,
        column: 30,
        span: 12343..12346,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 534,
        column: 31,
        span: 12346..12347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 534,
        column: 34,
        span: 12347..12350,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 534,
        column: 35,
        span: 12350..12351,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 534,
        column: 38,
        span: 12351..12354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
        column: 39,
        span: 12354..12355,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 534,
        column: 40,
        span: 12355..12356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 534,
        column: 43,
        span: 12357..12359,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 534,
        column: 45,
        span: 12360..12361,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 534,
        column: 0,
        span: 12362..12367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqseq",
        ),
        line: 535,
        column: 8,
        span: 12370..12375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
        column: 9,
        span: 12375..12376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inp",
        ),
        line: 535,
        column: 12,
        span: 12376..12379,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
        column: 13,
        span: 12379..12380,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 535,
        column: 15,
        span: 12381..12382,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
        column: 16,
        span: 12381..12383,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
        column: 17,
        span: 12383..12384,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
        column: 20,
        span: 12384..12387,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
        column: 21,
        span: 12387..12388,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
        column: 24,
        span: 12388..12391,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
        column: 25,
        span: 12391..12392,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
        column: 28,
        span: 12392..12395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
        column: 29,
        span: 12395..12396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
        column: 32,
        span: 12396..12399,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 535,
        column: 33,
        span: 12399..12400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
        column: 34,
        span: 12400..12401,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 535,
        column: 35,
        span: 12401..12402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqseq",
        ),
        line: 535,
        column: 41,
        span: 12403..12408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
        column: 42,
        span: 12408..12409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 535,
        column: 45,
        span: 12409..12412,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
        column: 46,
        span: 12412..12413,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 535,
        column: 48,
        span: 12414..12415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
        column: 50,
        span: 12414..12417,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
        column: 51,
        span: 12417..12418,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
        column: 54,
        span: 12418..12421,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
        column: 55,
        span: 12421..12422,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
        column: 58,
        span: 12422..12425,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 535,
        column: 59,
        span: 12425..12426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
        column: 60,
        span: 12426..12427,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 537,
        column: 8,
        span: 12431..12436,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 537,
        column: 17,
        span: 12437..12445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 537,
        column: 21,
        span: 12446..12449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 537,
        column: 23,
        span: 12450..12451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 537,
        column: 24,
        span: 12451..12452,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 537,
        column: 25,
        span: 12452..12453,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 537,
        column: 29,
        span: 12454..12457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 537,
        column: 30,
        span: 12457..12458,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 537,
        column: 37,
        span: 12459..12465,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 537,
        column: 41,
        span: 12466..12469,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 537,
        column: 0,
        span: 12470..12473,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 538,
        column: 8,
        span: 12476..12481,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 538,
        column: 17,
        span: 12482..12490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 538,
        column: 22,
        span: 12491..12495,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 538,
        column: 24,
        span: 12496..12497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 538,
        column: 25,
        span: 12497..12498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 538,
        column: 28,
        span: 12499..12501,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 538,
        column: 30,
        span: 12502..12503,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 538,
        column: 34,
        span: 12504..12507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 538,
        column: 37,
        span: 12508..12510,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 538,
        column: 38,
        span: 12510..12511,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 538,
        column: 45,
        span: 12512..12518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 538,
        column: 49,
        span: 12519..12522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 538,
        column: 50,
        span: 12522..12523,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 538,
        column: 52,
        span: 12522..12525,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 538,
        column: 53,
        span: 12525..12526,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 538,
        column: 56,
        span: 12526..12529,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 538,
        column: 57,
        span: 12529..12530,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 538,
        column: 59,
        span: 12530..12532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 538,
        column: 60,
        span: 12532..12533,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 538,
        column: 0,
        span: 12534..12537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 539,
        column: 7,
        span: 12540..12544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 539,
        column: 8,
        span: 12544..12545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 539,
        column: 9,
        span: 12545..12546,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 539,
        column: 10,
        span: 12546..12547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 539,
        column: 13,
        span: 12548..12550,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 539,
        column: 15,
        span: 12551..12552,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 539,
        column: 0,
        span: 12553..12558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqseq",
        ),
        line: 540,
        column: 8,
        span: 12561..12566,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 540,
        column: 9,
        span: 12566..12567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inp",
        ),
        line: 540,
        column: 12,
        span: 12567..12570,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 540,
        column: 13,
        span: 12570..12571,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 540,
        column: 15,
        span: 12572..12573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 540,
        column: 17,
        span: 12572..12575,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 540,
        column: 18,
        span: 12575..12576,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 540,
        column: 19,
        span: 12576..12577,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 540,
        column: 20,
        span: 12577..12578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqseq",
        ),
        line: 540,
        column: 26,
        span: 12579..12584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 540,
        column: 27,
        span: 12584..12585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 540,
        column: 30,
        span: 12585..12588,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 540,
        column: 31,
        span: 12588..12589,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 540,
        column: 33,
        span: 12590..12591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 540,
        column: 35,
        span: 12590..12593,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 540,
        column: 36,
        span: 12593..12594,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 540,
        column: 38,
        span: 12594..12596,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 540,
        column: 39,
        span: 12596..12597,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 540,
        column: 40,
        span: 12597..12598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 542,
        column: 8,
        span: 12602..12607,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 542,
        column: 9,
        span: 12607..12608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 542,
        column: 16,
        span: 12608..12615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 542,
        column: 17,
        span: 12615..12616,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 542,
        column: 18,
        span: 12616..12617,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 543,
        column: 0,
        span: 12618..12621,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 548,
        column: 6,
        span: 12651..12656,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 548,
        column: 15,
        span: 12657..12665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalues",
        ),
        line: 548,
        column: 27,
        span: 12666..12677,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 548,
        column: 29,
        span: 12678..12679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 548,
        column: 30,
        span: 12679..12680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 548,
        column: 31,
        span: 12680..12681,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 549,
        column: 8,
        span: 12684..12689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 549,
        column: 10,
        span: 12690..12691,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 549,
        column: 12,
        span: 12692..12693,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 549,
        column: 14,
        span: 12694..12695,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 549,
        column: 15,
        span: 12695..12696,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 550,
        column: 8,
        span: 12699..12704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 550,
        column: 10,
        span: 12705..12706,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 550,
        column: 12,
        span: 12707..12708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 550,
        column: 0,
        span: 12708..12710,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 551,
        column: 8,
        span: 12713..12718,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 551,
        column: 13,
        span: 12719..12723,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 551,
        column: 0,
        span: 12724..12726,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 552,
        column: 10,
        span: 12731..12736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 552,
        column: 15,
        span: 12737..12741,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 552,
        column: 16,
        span: 12741..12742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "value",
        ),
        line: 552,
        column: 22,
        span: 12743..12748,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 552,
        column: 24,
        span: 12749..12750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 552,
        column: 30,
        span: 12751..12756,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 552,
        column: 31,
        span: 12756..12757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 552,
        column: 41,
        span: 12757..12767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 552,
        column: 42,
        span: 12767..12768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 552,
        column: 43,
        span: 12768..12769,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 552,
        column: 44,
        span: 12769..12770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 552,
        column: 46,
        span: 12771..12772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 552,
        column: 47,
        span: 12772..12773,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 553,
        column: 7,
        span: 12778..12780,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 553,
        column: 11,
        span: 12781..12784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 553,
        column: 16,
        span: 12785..12789,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 553,
        column: 21,
        span: 12790..12794,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 553,
        column: 27,
        span: 12795..12800,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 553,
        column: 0,
        span: 12801..12804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 554,
        column: 11,
        span: 12809..12815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 554,
        column: 12,
        span: 12815..12816,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 554,
        column: 15,
        span: 12816..12819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 554,
        column: 17,
        span: 12820..12821,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 554,
        column: 18,
        span: 12821..12822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 554,
        column: 22,
        span: 12822..12826,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 554,
        column: 23,
        span: 12826..12827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 554,
        column: 24,
        span: 12827..12828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 555,
        column: 6,
        span: 12833..12834,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 555,
        column: 7,
        span: 12834..12835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 555,
        column: 11,
        span: 12835..12839,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 555,
        column: 12,
        span: 12839..12840,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 555,
        column: 14,
        span: 12841..12842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "value",
        ),
        line: 555,
        column: 0,
        span: 12843..12848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 556,
        column: 6,
        span: 12853..12854,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 556,
        column: 8,
        span: 12855..12856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 556,
        column: 10,
        span: 12857..12858,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 556,
        column: 12,
        span: 12859..12860,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 556,
        column: 0,
        span: 12860..12862,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 557,
        column: 0,
        span: 12865..12868,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 558,
        column: 9,
        span: 12871..12877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 558,
        column: 0,
        span: 12878..12879,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 559,
        column: 0,
        span: 12880..12883,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 561,
        column: 6,
        span: 12885..12890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 561,
        column: 8,
        span: 12891..12892,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 561,
        column: 9,
        span: 12892..12893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 561,
        column: 10,
        span: 12893..12894,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 561,
        column: 11,
        span: 12894..12895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 561,
        column: 12,
        span: 12895..12896,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 561,
        column: 14,
        span: 12897..12898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 561,
        column: 16,
        span: 12898..12900,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 561,
        column: 17,
        span: 12900..12901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 561,
        column: 18,
        span: 12900..12902,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 561,
        column: 19,
        span: 12902..12903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 561,
        column: 0,
        span: 12902..12904,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 562,
        column: 6,
        span: 12905..12910,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 562,
        column: 15,
        span: 12911..12919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 562,
        column: 20,
        span: 12920..12924,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 562,
        column: 22,
        span: 12925..12926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 562,
        column: 23,
        span: 12926..12927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 562,
        column: 24,
        span: 12927..12928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 562,
        column: 26,
        span: 12929..12930,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 562,
        column: 28,
        span: 12931..12932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 562,
        column: 30,
        span: 12933..12934,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 562,
        column: 31,
        span: 12934..12935,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 562,
        column: 38,
        span: 12936..12942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 562,
        column: 40,
        span: 12943..12944,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 562,
        column: 0,
        span: 12945..12948,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 563,
        column: 6,
        span: 12949..12954,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 563,
        column: 15,
        span: 12955..12963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 563,
        column: 20,
        span: 12964..12968,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 563,
        column: 22,
        span: 12969..12970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 563,
        column: 23,
        span: 12970..12971,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 563,
        column: 24,
        span: 12971..12972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 563,
        column: 26,
        span: 12973..12974,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 563,
        column: 28,
        span: 12975..12976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 563,
        column: 30,
        span: 12977..12978,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 563,
        column: 31,
        span: 12978..12979,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 563,
        column: 38,
        span: 12980..12986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 563,
        column: 40,
        span: 12987..12988,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 563,
        column: 41,
        span: 12988..12989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 563,
        column: 42,
        span: 12989..12990,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 563,
        column: 0,
        span: 12991..12994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 564,
        column: 7,
        span: 12995..13001,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 564,
        column: 8,
        span: 13001..13002,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 564,
        column: 11,
        span: 13002..13005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 564,
        column: 17,
        span: 13006..13011,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 564,
        column: 18,
        span: 13011..13012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 564,
        column: 28,
        span: 13012..13022,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 564,
        column: 29,
        span: 13022..13023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 564,
        column: 33,
        span: 13023..13027,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 564,
        column: 34,
        span: 13027..13028,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 564,
        column: 36,
        span: 13028..13030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 564,
        column: 37,
        span: 13030..13031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 564,
        column: 38,
        span: 13031..13032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 565,
        column: 7,
        span: 13033..13039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
        column: 8,
        span: 13039..13040,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 565,
        column: 11,
        span: 13040..13043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 565,
        column: 17,
        span: 13044..13049,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 565,
        column: 18,
        span: 13049..13050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 565,
        column: 28,
        span: 13050..13060,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
        column: 29,
        span: 13060..13061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 565,
        column: 33,
        span: 13061..13065,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 565,
        column: 34,
        span: 13065..13066,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 565,
        column: 36,
        span: 13066..13068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
        column: 37,
        span: 13068..13069,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
        column: 38,
        span: 13069..13070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 566,
        column: 7,
        span: 13071..13077,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
        column: 8,
        span: 13077..13078,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 566,
        column: 11,
        span: 13078..13081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 566,
        column: 17,
        span: 13082..13087,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 566,
        column: 18,
        span: 13087..13088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 566,
        column: 28,
        span: 13088..13098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
        column: 29,
        span: 13098..13099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 566,
        column: 33,
        span: 13099..13103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 566,
        column: 34,
        span: 13103..13104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 566,
        column: 36,
        span: 13104..13106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 566,
        column: 37,
        span: 13106..13107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 566,
        column: 44,
        span: 13108..13114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
        column: 45,
        span: 13114..13115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
        column: 46,
        span: 13115..13116,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 567,
        column: 6,
        span: 13117..13122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 567,
        column: 8,
        span: 13123..13124,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 567,
        column: 10,
        span: 13125..13126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalues",
        ),
        line: 567,
        column: 22,
        span: 13127..13138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 567,
        column: 23,
        span: 13138..13139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 567,
        column: 27,
        span: 13139..13143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 567,
        column: 28,
        span: 13143..13144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 568,
        column: 7,
        span: 13145..13151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 568,
        column: 8,
        span: 13151..13152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 568,
        column: 9,
        span: 13152..13153,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 568,
        column: 10,
        span: 13153..13154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 568,
        column: 11,
        span: 13154..13155,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 568,
        column: 14,
        span: 13156..13158,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 568,
        column: 18,
        span: 13159..13162,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 568,
        column: 22,
        span: 13163..13166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 568,
        column: 24,
        span: 13167..13168,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 568,
        column: 25,
        span: 13168..13169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 568,
        column: 26,
        span: 13169..13170,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 568,
        column: 29,
        span: 13171..13173,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 568,
        column: 31,
        span: 13173..13175,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 568,
        column: 35,
        span: 13176..13179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 568,
        column: 37,
        span: 13180..13181,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 568,
        column: 38,
        span: 13181..13182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 568,
        column: 39,
        span: 13182..13183,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 568,
        column: 42,
        span: 13184..13186,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 568,
        column: 44,
        span: 13186..13188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 568,
        column: 45,
        span: 13188..13189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 569,
        column: 2,
        span: 13190..13191,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 569,
        column: 4,
        span: 13192..13193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalues",
        ),
        line: 569,
        column: 16,
        span: 13194..13205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 569,
        column: 17,
        span: 13205..13206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 569,
        column: 21,
        span: 13206..13210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 569,
        column: 22,
        span: 13210..13211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 570,
        column: 7,
        span: 13212..13218,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 570,
        column: 8,
        span: 13218..13219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 570,
        column: 9,
        span: 13219..13220,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 570,
        column: 10,
        span: 13220..13221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 570,
        column: 11,
        span: 13221..13222,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 570,
        column: 14,
        span: 13223..13225,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 570,
        column: 16,
        span: 13225..13227,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 570,
        column: 20,
        span: 13228..13231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 570,
        column: 22,
        span: 13232..13233,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 570,
        column: 23,
        span: 13233..13234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 570,
        column: 24,
        span: 13234..13235,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 570,
        column: 27,
        span: 13236..13238,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 570,
        column: 29,
        span: 13238..13240,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 570,
        column: 33,
        span: 13241..13244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 570,
        column: 35,
        span: 13245..13246,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 570,
        column: 36,
        span: 13246..13247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 570,
        column: 37,
        span: 13247..13248,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 570,
        column: 40,
        span: 13249..13251,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 570,
        column: 42,
        span: 13251..13253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 570,
        column: 43,
        span: 13253..13254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 571,
        column: 7,
        span: 13255..13261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 571,
        column: 8,
        span: 13261..13262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 571,
        column: 13,
        span: 13262..13267,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 571,
        column: 14,
        span: 13267..13268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 571,
        column: 24,
        span: 13268..13278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 571,
        column: 25,
        span: 13278..13279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 571,
        column: 29,
        span: 13279..13283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 571,
        column: 30,
        span: 13283..13284,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 571,
        column: 32,
        span: 13284..13286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 571,
        column: 33,
        span: 13286..13287,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 571,
        column: 40,
        span: 13288..13294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 571,
        column: 41,
        span: 13294..13295,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 571,
        column: 44,
        span: 13296..13298,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 571,
        column: 48,
        span: 13299..13302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 571,
        column: 49,
        span: 13302..13303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 572,
        column: 7,
        span: 13304..13310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
        column: 8,
        span: 13310..13311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
        column: 9,
        span: 13311..13312,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 572,
        column: 10,
        span: 13312..13313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 572,
        column: 15,
        span: 13313..13318,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 572,
        column: 16,
        span: 13318..13319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 572,
        column: 26,
        span: 13319..13329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
        column: 27,
        span: 13329..13330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 572,
        column: 31,
        span: 13330..13334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 572,
        column: 32,
        span: 13334..13335,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 572,
        column: 34,
        span: 13335..13337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 572,
        column: 35,
        span: 13337..13338,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 572,
        column: 36,
        span: 13338..13339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 572,
        column: 37,
        span: 13339..13340,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 572,
        column: 38,
        span: 13340..13341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 572,
        column: 39,
        span: 13340..13342,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 572,
        column: 40,
        span: 13342..13343,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 572,
        column: 43,
        span: 13344..13346,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 572,
        column: 50,
        span: 13347..13353,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 572,
        column: 51,
        span: 13353..13354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 574,
        column: 7,
        span: 13425..13431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 8,
        span: 13431..13432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 574,
        column: 13,
        span: 13432..13437,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 574,
        column: 14,
        span: 13437..13438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 574,
        column: 24,
        span: 13438..13448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 25,
        span: 13448..13449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 574,
        column: 31,
        span: 13449..13455,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 574,
        column: 32,
        span: 13455..13456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 574,
        column: 38,
        span: 13456..13462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
        column: 39,
        span: 13462..13463,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 574,
        column: 42,
        span: 13463..13466,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 574,
        column: 43,
        span: 13466..13467,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 574,
        column: 47,
        span: 13468..13471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 48,
        span: 13471..13472,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 574,
        column: 49,
        span: 13472..13473,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 574,
        column: 51,
        span: 13473..13475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 52,
        span: 13475..13476,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 574,
        column: 55,
        span: 13477..13479,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 574,
        column: 58,
        span: 13480..13482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
        column: 59,
        span: 13482..13483,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 578,
        column: 6,
        span: 13511..13516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 578,
        column: 8,
        span: 13517..13518,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 578,
        column: 9,
        span: 13518..13519,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 578,
        column: 0,
        span: 13518..13520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 579,
        column: 6,
        span: 13521..13526,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 579,
        column: 7,
        span: 13526..13527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 579,
        column: 14,
        span: 13527..13534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 579,
        column: 15,
        span: 13534..13535,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 579,
        column: 23,
        span: 13535..13543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 579,
        column: 25,
        span: 13544..13545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 579,
        column: 26,
        span: 13545..13546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 579,
        column: 27,
        span: 13546..13547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 579,
        column: 29,
        span: 13548..13549,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 579,
        column: 30,
        span: 13549..13550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 579,
        column: 31,
        span: 13550..13551,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 579,
        column: 32,
        span: 13551..13552,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 579,
        column: 33,
        span: 13551..13553,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 579,
        column: 37,
        span: 13554..13557,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 579,
        column: 38,
        span: 13557..13558,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 579,
        column: 41,
        span: 13559..13561,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 579,
        column: 42,
        span: 13561..13562,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 579,
        column: 44,
        span: 13562..13564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 579,
        column: 45,
        span: 13564..13565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 580,
        column: 2,
        span: 13566..13567,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 580,
        column: 3,
        span: 13567..13568,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 580,
        column: 4,
        span: 13567..13569,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 580,
        column: 5,
        span: 13569..13570,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 580,
        column: 9,
        span: 13571..13574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 580,
        column: 11,
        span: 13575..13576,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 580,
        column: 12,
        span: 13576..13577,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 580,
        column: 13,
        span: 13576..13578,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 580,
        column: 14,
        span: 13578..13579,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 580,
        column: 18,
        span: 13578..13583,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 580,
        column: 21,
        span: 13584..13586,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 580,
        column: 25,
        span: 13587..13590,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 580,
        column: 26,
        span: 13590..13591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 580,
        column: 33,
        span: 13592..13598,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 580,
        column: 34,
        span: 13598..13599,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 580,
        column: 38,
        span: 13598..13603,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 580,
        column: 40,
        span: 13604..13605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 580,
        column: 42,
        span: 13606..13607,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 580,
        column: 46,
        span: 13608..13611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 580,
        column: 48,
        span: 13612..13613,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 580,
        column: 50,
        span: 13614..13615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1012",
                    after_decimal: "",
                },
            ),
        ),
        line: 580,
        column: 55,
        span: 13615..13620,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 580,
        column: 56,
        span: 13620..13621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 581,
        column: 6,
        span: 13622..13627,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 581,
        column: 7,
        span: 13627..13628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 581,
        column: 14,
        span: 13628..13635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 581,
        column: 15,
        span: 13635..13636,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 581,
        column: 23,
        span: 13636..13644,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 581,
        column: 25,
        span: 13645..13646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 581,
        column: 26,
        span: 13646..13647,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 581,
        column: 27,
        span: 13647..13648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 581,
        column: 29,
        span: 13649..13650,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 581,
        column: 30,
        span: 13650..13651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 581,
        column: 31,
        span: 13651..13652,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 581,
        column: 32,
        span: 13652..13653,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 581,
        column: 33,
        span: 13652..13654,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 581,
        column: 37,
        span: 13655..13658,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
        column: 38,
        span: 13658..13659,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 581,
        column: 41,
        span: 13660..13662,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
        column: 42,
        span: 13662..13663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 581,
        column: 44,
        span: 13663..13665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 581,
        column: 45,
        span: 13665..13666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 582,
        column: 2,
        span: 13667..13668,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 582,
        column: 3,
        span: 13668..13669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
        column: 4,
        span: 13668..13670,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 582,
        column: 5,
        span: 13670..13671,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 582,
        column: 9,
        span: 13672..13675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 582,
        column: 11,
        span: 13676..13677,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 582,
        column: 12,
        span: 13677..13678,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
        column: 13,
        span: 13677..13679,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 582,
        column: 14,
        span: 13679..13680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
        column: 18,
        span: 13679..13684,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 582,
        column: 21,
        span: 13685..13687,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 582,
        column: 25,
        span: 13688..13691,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 582,
        column: 26,
        span: 13691..13692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 582,
        column: 33,
        span: 13693..13699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 582,
        column: 34,
        span: 13699..13700,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "250",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
        column: 37,
        span: 13699..13703,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 582,
        column: 39,
        span: 13704..13705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 582,
        column: 41,
        span: 13706..13707,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 582,
        column: 45,
        span: 13708..13711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 582,
        column: 47,
        span: 13712..13713,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 582,
        column: 49,
        span: 13714..13715,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
        column: 53,
        span: 13715..13719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 582,
        column: 54,
        span: 13719..13720,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 583,
        column: 6,
        span: 13721..13726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 583,
        column: 8,
        span: 13727..13728,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 583,
        column: 9,
        span: 13728..13729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 583,
        column: 10,
        span: 13729..13730,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 583,
        column: 11,
        span: 13730..13731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 583,
        column: 12,
        span: 13731..13732,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 583,
        column: 14,
        span: 13733..13734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 583,
        column: 20,
        span: 13735..13740,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 583,
        column: 21,
        span: 13740..13741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 583,
        column: 28,
        span: 13741..13748,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 583,
        column: 29,
        span: 13748..13749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 583,
        column: 30,
        span: 13749..13750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 584,
        column: 7,
        span: 13751..13757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 584,
        column: 8,
        span: 13757..13758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 584,
        column: 9,
        span: 13758..13759,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 584,
        column: 12,
        span: 13760..13762,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 584,
        column: 15,
        span: 13763..13765,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 584,
        column: 19,
        span: 13766..13769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 584,
        column: 21,
        span: 13770..13771,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 584,
        column: 24,
        span: 13772..13774,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 584,
        column: 26,
        span: 13774..13776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 584,
        column: 27,
        span: 13776..13777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 585,
        column: 6,
        span: 13778..13783,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 585,
        column: 7,
        span: 13783..13784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 585,
        column: 14,
        span: 13784..13791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 585,
        column: 15,
        span: 13791..13792,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 585,
        column: 23,
        span: 13792..13800,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 585,
        column: 25,
        span: 13801..13802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 585,
        column: 26,
        span: 13802..13803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 585,
        column: 27,
        span: 13803..13804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 585,
        column: 29,
        span: 13805..13806,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 585,
        column: 30,
        span: 13806..13807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 585,
        column: 31,
        span: 13807..13808,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 585,
        column: 32,
        span: 13808..13809,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 585,
        column: 33,
        span: 13808..13810,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 585,
        column: 37,
        span: 13811..13814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 585,
        column: 38,
        span: 13814..13815,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 585,
        column: 41,
        span: 13816..13818,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 585,
        column: 42,
        span: 13818..13819,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4000",
                    after_decimal: "",
                },
            ),
        ),
        line: 585,
        column: 47,
        span: 13819..13824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 585,
        column: 48,
        span: 13824..13825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 586,
        column: 2,
        span: 13826..13827,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 586,
        column: 3,
        span: 13827..13828,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 586,
        column: 4,
        span: 13827..13829,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 586,
        column: 5,
        span: 13829..13830,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 586,
        column: 9,
        span: 13831..13834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 586,
        column: 11,
        span: 13835..13836,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 586,
        column: 12,
        span: 13836..13837,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 586,
        column: 13,
        span: 13836..13838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 586,
        column: 14,
        span: 13838..13839,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 586,
        column: 18,
        span: 13838..13843,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 586,
        column: 21,
        span: 13844..13846,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 586,
        column: 25,
        span: 13847..13850,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 586,
        column: 26,
        span: 13850..13851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 586,
        column: 33,
        span: 13852..13858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 586,
        column: 34,
        span: 13858..13859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 586,
        column: 35,
        span: 13859..13860,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 586,
        column: 38,
        span: 13861..13863,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 586,
        column: 40,
        span: 13863..13865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 586,
        column: 41,
        span: 13865..13866,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 588,
        column: 0,
        span: 13868..13870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 589,
        column: 8,
        span: 13873..13878,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 589,
        column: 9,
        span: 13878..13879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 589,
        column: 16,
        span: 13879..13886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
        column: 17,
        span: 13886..13887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 589,
        column: 22,
        span: 13887..13892,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 589,
        column: 23,
        span: 13892..13893,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 589,
        column: 26,
        span: 13894..13896,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 589,
        column: 27,
        span: 13896..13897,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
        column: 29,
        span: 13897..13899,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 589,
        column: 30,
        span: 13899..13900,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
        column: 32,
        span: 13899..13902,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 589,
        column: 34,
        span: 13903..13904,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
        column: 36,
        span: 13904..13906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
        column: 37,
        span: 13906..13907,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 590,
        column: 8,
        span: 13932..13937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 590,
        column: 10,
        span: 13938..13939,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 590,
        column: 11,
        span: 13939..13940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 590,
        column: 12,
        span: 13940..13941,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 590,
        column: 13,
        span: 13941..13942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 590,
        column: 14,
        span: 13942..13943,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 590,
        column: 16,
        span: 13944..13945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 590,
        column: 22,
        span: 13946..13951,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 590,
        column: 23,
        span: 13951..13952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 590,
        column: 30,
        span: 13952..13959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 590,
        column: 31,
        span: 13959..13960,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 590,
        column: 32,
        span: 13960..13961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 591,
        column: 9,
        span: 13964..13970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 591,
        column: 10,
        span: 13970..13971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 591,
        column: 11,
        span: 13971..13972,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 591,
        column: 12,
        span: 13972..13973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 591,
        column: 17,
        span: 13973..13978,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 591,
        column: 18,
        span: 13978..13979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 591,
        column: 25,
        span: 13979..13986,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 591,
        column: 26,
        span: 13986..13987,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 591,
        column: 27,
        span: 13987..13988,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 591,
        column: 28,
        span: 13988..13989,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 591,
        column: 29,
        span: 13989..13990,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 591,
        column: 30,
        span: 13990..13991,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 591,
        column: 31,
        span: 13990..13992,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 591,
        column: 32,
        span: 13992..13993,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 591,
        column: 35,
        span: 13994..13996,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 591,
        column: 37,
        span: 13996..13998,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 591,
        column: 38,
        span: 13998..13999,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 591,
        column: 40,
        span: 13998..14001,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 591,
        column: 42,
        span: 14002..14003,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 591,
        column: 44,
        span: 14003..14005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 591,
        column: 45,
        span: 14005..14006,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 592,
        column: 0,
        span: 14007..14010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 594,
        column: 6,
        span: 14012..14017,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 594,
        column: 7,
        span: 14017..14018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 594,
        column: 14,
        span: 14018..14025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 594,
        column: 15,
        span: 14025..14026,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 594,
        column: 16,
        span: 14026..14027,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 598,
        column: 6,
        span: 14054..14059,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 598,
        column: 15,
        span: 14060..14068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 598,
        column: 17,
        span: 14069..14070,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 598,
        column: 19,
        span: 14071..14072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 598,
        column: 20,
        span: 14072..14073,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 598,
        column: 21,
        span: 14073..14074,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 599,
        column: 5,
        span: 14077..14079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 599,
        column: 7,
        span: 14080..14081,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 599,
        column: 0,
        span: 14082..14086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 600,
        column: 11,
        span: 14091..14097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 600,
        column: 12,
        span: 14097..14098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 600,
        column: 17,
        span: 14098..14103,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 600,
        column: 18,
        span: 14103..14104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 600,
        column: 25,
        span: 14104..14111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 600,
        column: 26,
        span: 14111..14112,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
        column: 27,
        span: 14111..14113,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 600,
        column: 28,
        span: 14113..14114,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"S\"",
        ),
        line: 600,
        column: 32,
        span: 14115..14118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 600,
        column: 33,
        span: 14118..14119,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 600,
        column: 34,
        span: 14119..14120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 600,
        column: 38,
        span: 14120..14124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 600,
        column: 41,
        span: 14125..14127,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        line: 600,
        column: 47,
        span: 14128..14133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 600,
        column: 48,
        span: 14133..14134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 601,
        column: 11,
        span: 14139..14145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 601,
        column: 12,
        span: 14145..14146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 601,
        column: 17,
        span: 14146..14151,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 601,
        column: 18,
        span: 14151..14152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 601,
        column: 25,
        span: 14152..14159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 601,
        column: 26,
        span: 14159..14160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 601,
        column: 27,
        span: 14159..14161,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 601,
        column: 28,
        span: 14161..14162,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 601,
        column: 32,
        span: 14163..14166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 601,
        column: 33,
        span: 14166..14167,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 601,
        column: 34,
        span: 14167..14168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        line: 601,
        column: 44,
        span: 14168..14178,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 601,
        column: 47,
        span: 14179..14181,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 601,
        column: 52,
        span: 14182..14186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 601,
        column: 53,
        span: 14186..14187,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 602,
        column: 10,
        span: 14192..14197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        line: 602,
        column: 15,
        span: 14198..14202,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 602,
        column: 17,
        span: 14203..14204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 602,
        column: 23,
        span: 14205..14210,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 602,
        column: 24,
        span: 14210..14211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 602,
        column: 31,
        span: 14211..14218,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 602,
        column: 32,
        span: 14218..14219,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 602,
        column: 33,
        span: 14218..14220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 602,
        column: 34,
        span: 14220..14221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 603,
        column: 11,
        span: 14226..14232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 603,
        column: 12,
        span: 14232..14233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        line: 603,
        column: 16,
        span: 14233..14237,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 603,
        column: 17,
        span: 14237..14238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 603,
        column: 21,
        span: 14238..14242,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 603,
        column: 24,
        span: 14243..14245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g1",
        ),
        line: 603,
        column: 27,
        span: 14246..14248,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 603,
        column: 31,
        span: 14249..14252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        line: 603,
        column: 36,
        span: 14253..14257,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 603,
        column: 37,
        span: 14257..14258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        line: 603,
        column: 47,
        span: 14258..14268,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 603,
        column: 50,
        span: 14269..14271,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 603,
        column: 55,
        span: 14272..14276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 603,
        column: 56,
        span: 14276..14277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 604,
        column: 11,
        span: 14282..14288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 604,
        column: 12,
        span: 14288..14289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 604,
        column: 17,
        span: 14289..14294,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 604,
        column: 18,
        span: 14294..14295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 604,
        column: 25,
        span: 14295..14302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 604,
        column: 26,
        span: 14302..14303,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 604,
        column: 27,
        span: 14302..14304,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 604,
        column: 28,
        span: 14304..14305,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"S\"",
        ),
        line: 604,
        column: 32,
        span: 14306..14309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 604,
        column: 33,
        span: 14309..14310,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 604,
        column: 34,
        span: 14310..14311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 604,
        column: 38,
        span: 14311..14315,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 604,
        column: 41,
        span: 14316..14318,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"main\"",
        ),
        line: 604,
        column: 48,
        span: 14319..14325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 604,
        column: 49,
        span: 14325..14326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 605,
        column: 10,
        span: 14331..14336,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 605,
        column: 13,
        span: 14336..14339,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 606,
        column: 0,
        span: 14344..14347,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 607,
        column: 0,
        span: 14348..14351,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 609,
        column: 9,
        span: 14353..14361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 609,
        column: 11,
        span: 14362..14363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 609,
        column: 12,
        span: 14363..14364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 609,
        column: 13,
        span: 14364..14365,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 609,
        column: 14,
        span: 14365..14366,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 609,
        column: 21,
        span: 14367..14373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 609,
        column: 23,
        span: 14374..14375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 609,
        column: 24,
        span: 14375..14376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 609,
        column: 25,
        span: 14376..14377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 609,
        column: 26,
        span: 14377..14378,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 609,
        column: 0,
        span: 14379..14382,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 611,
        column: 9,
        span: 14384..14392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g1",
        ),
        line: 611,
        column: 12,
        span: 14393..14395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 611,
        column: 13,
        span: 14395..14396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 611,
        column: 14,
        span: 14396..14397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 611,
        column: 15,
        span: 14397..14398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 611,
        column: 17,
        span: 14399..14400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 611,
        column: 18,
        span: 14400..14401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 611,
        column: 19,
        span: 14401..14402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 611,
        column: 20,
        span: 14402..14403,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 611,
        column: 0,
        span: 14404..14407,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 613,
        column: 6,
        span: 14409..14414,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 613,
        column: 15,
        span: 14415..14423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 613,
        column: 17,
        span: 14424..14425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
        column: 19,
        span: 14426..14427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 613,
        column: 20,
        span: 14427..14428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
        column: 21,
        span: 14428..14429,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 613,
        column: 27,
        span: 14430..14435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 613,
        column: 29,
        span: 14436..14437,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 613,
        column: 30,
        span: 14437..14438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g1",
        ),
        line: 613,
        column: 32,
        span: 14438..14440,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 613,
        column: 33,
        span: 14440..14441,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 613,
        column: 40,
        span: 14442..14448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 613,
        column: 42,
        span: 14449..14450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
        column: 43,
        span: 14450..14451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 613,
        column: 44,
        span: 14451..14452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
        column: 45,
        span: 14452..14453,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 613,
        column: 0,
        span: 14454..14457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 615,
        column: 2,
        span: 14459..14460,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 615,
        column: 3,
        span: 14460..14461,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 615,
        column: 7,
        span: 14461..14465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 615,
        column: 8,
        span: 14465..14466,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 617,
        column: 6,
        span: 14468..14473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 617,
        column: 8,
        span: 14474..14475,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 617,
        column: 10,
        span: 14476..14477,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 617,
        column: 12,
        span: 14478..14479,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 617,
        column: 13,
        span: 14479..14480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 618,
        column: 6,
        span: 14481..14486,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 618,
        column: 7,
        span: 14486..14487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 618,
        column: 14,
        span: 14487..14494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
        column: 15,
        span: 14494..14495,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 618,
        column: 23,
        span: 14495..14503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
        column: 25,
        span: 14504..14505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 618,
        column: 26,
        span: 14505..14506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 618,
        column: 27,
        span: 14506..14507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 618,
        column: 33,
        span: 14508..14513,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 618,
        column: 34,
        span: 14513..14514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 618,
        column: 40,
        span: 14514..14520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
        column: 41,
        span: 14520..14521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 618,
        column: 42,
        span: 14521..14522,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 618,
        column: 43,
        span: 14522..14523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 618,
        column: 45,
        span: 14524..14525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 618,
        column: 46,
        span: 14525..14526,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 618,
        column: 50,
        span: 14527..14530,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 618,
        column: 51,
        span: 14530..14531,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cr\"",
        ),
        line: 618,
        column: 56,
        span: 14532..14536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 618,
        column: 57,
        span: 14536..14537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 619,
        column: 2,
        span: 14538..14539,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 619,
        column: 3,
        span: 14539..14540,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 619,
        column: 8,
        span: 14540..14545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 619,
        column: 9,
        span: 14545..14546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 620,
        column: 6,
        span: 14547..14552,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 620,
        column: 7,
        span: 14552..14553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 620,
        column: 14,
        span: 14553..14560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 620,
        column: 15,
        span: 14560..14561,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 620,
        column: 16,
        span: 14561..14562,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 621,
        column: 6,
        span: 14563..14568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 621,
        column: 10,
        span: 14569..14572,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 621,
        column: 12,
        span: 14573..14574,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 621,
        column: 14,
        span: 14575..14576,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 621,
        column: 22,
        span: 14576..14584,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 621,
        column: 23,
        span: 14584..14585,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        line: 622,
        column: 9,
        span: 14621..14627,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 622,
        column: 10,
        span: 14627..14628,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail call\"",
        ),
        line: 622,
        column: 22,
        span: 14629..14640,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 622,
        column: 23,
        span: 14640..14641,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        line: 622,
        column: 30,
        span: 14642..14648,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 622,
        column: 31,
        span: 14648..14649,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail call\"",
        ),
        line: 622,
        column: 43,
        span: 14650..14661,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 622,
        column: 44,
        span: 14661..14662,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 623,
        column: 11,
        span: 14665..14673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 623,
        column: 12,
        span: 14673..14674,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 623,
        column: 21,
        span: 14675..14683,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 623,
        column: 22,
        span: 14683..14684,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        line: 624,
        column: 9,
        span: 14687..14693,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 624,
        column: 10,
        span: 14693..14694,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 625,
        column: 2,
        span: 14724..14725,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 626,
        column: 4,
        span: 14726..14729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 626,
        column: 6,
        span: 14730..14731,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 626,
        column: 8,
        span: 14732..14733,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 626,
        column: 10,
        span: 14733..14735,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 626,
        column: 11,
        span: 14735..14736,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 626,
        column: 13,
        span: 14737..14738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 626,
        column: 16,
        span: 14738..14741,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 626,
        column: 19,
        span: 14742..14744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 626,
        column: 26,
        span: 14745..14751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 626,
        column: 27,
        span: 14751..14752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 626,
        column: 30,
        span: 14752..14755,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 626,
        column: 31,
        span: 14755..14756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 626,
        column: 32,
        span: 14756..14757,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 626,
        column: 33,
        span: 14757..14758,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 626,
        column: 36,
        span: 14759..14761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 626,
        column: 42,
        span: 14762..14767,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 626,
        column: 43,
        span: 14767..14768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 626,
        column: 49,
        span: 14768..14774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 626,
        column: 50,
        span: 14774..14775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 626,
        column: 51,
        span: 14775..14776,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 626,
        column: 52,
        span: 14776..14777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 626,
        column: 54,
        span: 14777..14779,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 626,
        column: 55,
        span: 14779..14780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 626,
        column: 56,
        span: 14780..14781,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 626,
        column: 0,
        span: 14782..14785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 628,
        column: 2,
        span: 14787..14788,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 628,
        column: 4,
        span: 14789..14790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 628,
        column: 0,
        span: 14790..14792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 629,
        column: 6,
        span: 14793..14798,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 629,
        column: 7,
        span: 14798..14799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 629,
        column: 14,
        span: 14799..14806,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 629,
        column: 15,
        span: 14806..14807,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 629,
        column: 23,
        span: 14807..14815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 629,
        column: 25,
        span: 14816..14817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 629,
        column: 26,
        span: 14817..14818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 629,
        column: 27,
        span: 14818..14819,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 630,
        column: 19,
        span: 14836..14838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 630,
        column: 21,
        span: 14839..14840,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 630,
        column: 24,
        span: 14841..14843,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail call\"",
        ),
        line: 630,
        column: 36,
        span: 14844..14855,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 630,
        column: 0,
        span: 14856..14860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 631,
        column: 20,
        span: 14879..14880,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 631,
        column: 22,
        span: 14881..14882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 631,
        column: 24,
        span: 14883..14884,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 631,
        column: 26,
        span: 14885..14886,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 631,
        column: 0,
        span: 14886..14888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 632,
        column: 25,
        span: 14907..14913,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 632,
        column: 26,
        span: 14913..14914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 632,
        column: 31,
        span: 14914..14919,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 632,
        column: 32,
        span: 14919..14920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 632,
        column: 39,
        span: 14920..14927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 632,
        column: 40,
        span: 14927..14928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 632,
        column: 41,
        span: 14927..14929,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 632,
        column: 42,
        span: 14929..14930,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 632,
        column: 46,
        span: 14931..14934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 632,
        column: 47,
        span: 14934..14935,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 632,
        column: 48,
        span: 14935..14936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        line: 632,
        column: 58,
        span: 14936..14946,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 632,
        column: 61,
        span: 14947..14949,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 632,
        column: 66,
        span: 14950..14954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 632,
        column: 67,
        span: 14954..14955,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 633,
        column: 0,
        span: 14972..14976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 634,
        column: 25,
        span: 14995..15001,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 634,
        column: 26,
        span: 15001..15002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 634,
        column: 31,
        span: 15002..15007,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 634,
        column: 32,
        span: 15007..15008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 634,
        column: 39,
        span: 15008..15015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 634,
        column: 40,
        span: 15015..15016,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 634,
        column: 41,
        span: 15015..15017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 634,
        column: 42,
        span: 15017..15018,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 634,
        column: 46,
        span: 15019..15022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 634,
        column: 47,
        span: 15022..15023,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 634,
        column: 48,
        span: 15023..15024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        line: 634,
        column: 58,
        span: 15024..15034,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 634,
        column: 61,
        span: 15035..15037,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 634,
        column: 67,
        span: 15038..15043,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 634,
        column: 68,
        span: 15043..15044,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 635,
        column: 0,
        span: 15061..15064,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 636,
        column: 18,
        span: 15079..15082,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 636,
        column: 19,
        span: 15082..15083,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 636,
        column: 23,
        span: 15084..15087,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 636,
        column: 24,
        span: 15087..15088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 637,
        column: 2,
        span: 15089..15090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 637,
        column: 3,
        span: 15090..15091,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 637,
        column: 8,
        span: 15091..15096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 637,
        column: 9,
        span: 15096..15097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 638,
        column: 6,
        span: 15098..15103,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 638,
        column: 7,
        span: 15103..15104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 638,
        column: 14,
        span: 15104..15111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 638,
        column: 15,
        span: 15111..15112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 638,
        column: 16,
        span: 15112..15113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 639,
        column: 7,
        span: 15114..15120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 639,
        column: 8,
        span: 15120..15121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 639,
        column: 9,
        span: 15121..15122,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 639,
        column: 12,
        span: 15123..15125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 639,
        column: 14,
        span: 15125..15127,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 639,
        column: 15,
        span: 15127..15128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 641,
        column: 4,
        span: 15150..15153,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 641,
        column: 6,
        span: 15154..15155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 641,
        column: 12,
        span: 15156..15161,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 641,
        column: 16,
        span: 15162..15165,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 641,
        column: 21,
        span: 15165..15170,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 641,
        column: 24,
        span: 15171..15173,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        line: 641,
        column: 0,
        span: 15173..15179,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 642,
        column: 6,
        span: 15180..15185,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 642,
        column: 15,
        span: 15186..15194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 642,
        column: 19,
        span: 15195..15198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 642,
        column: 21,
        span: 15199..15200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 642,
        column: 22,
        span: 15200..15201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 642,
        column: 23,
        span: 15201..15202,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 643,
        column: 5,
        span: 15205..15207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 643,
        column: 7,
        span: 15208..15209,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 643,
        column: 9,
        span: 15209..15211,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 643,
        column: 10,
        span: 15210..15212,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 643,
        column: 0,
        span: 15213..15217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 644,
        column: 11,
        span: 15222..15228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 644,
        column: 12,
        span: 15228..15229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 644,
        column: 17,
        span: 15229..15234,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 644,
        column: 18,
        span: 15234..15235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 644,
        column: 25,
        span: 15235..15242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 644,
        column: 26,
        span: 15242..15243,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 644,
        column: 27,
        span: 15242..15244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 644,
        column: 28,
        span: 15244..15245,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 644,
        column: 29,
        span: 15245..15246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 644,
        column: 33,
        span: 15246..15250,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 644,
        column: 36,
        span: 15251..15253,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"main\"",
        ),
        line: 644,
        column: 43,
        span: 15254..15260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 644,
        column: 44,
        span: 15260..15261,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 645,
        column: 10,
        span: 15266..15271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 645,
        column: 15,
        span: 15272..15276,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 645,
        column: 17,
        span: 15277..15278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 645,
        column: 23,
        span: 15279..15284,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 645,
        column: 24,
        span: 15284..15285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 645,
        column: 31,
        span: 15285..15292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 645,
        column: 32,
        span: 15292..15293,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 645,
        column: 33,
        span: 15292..15294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 645,
        column: 34,
        span: 15294..15295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 646,
        column: 11,
        span: 15300..15306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 646,
        column: 12,
        span: 15306..15307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 646,
        column: 16,
        span: 15307..15311,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 646,
        column: 17,
        span: 15311..15312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        line: 646,
        column: 27,
        span: 15312..15322,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 646,
        column: 30,
        span: 15323..15325,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 646,
        column: 35,
        span: 15326..15330,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 646,
        column: 39,
        span: 15331..15334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 646,
        column: 44,
        span: 15335..15339,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 646,
        column: 45,
        span: 15339..15340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 646,
        column: 49,
        span: 15340..15344,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 646,
        column: 52,
        span: 15345..15347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 646,
        column: 56,
        span: 15348..15351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 646,
        column: 57,
        span: 15351..15352,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 647,
        column: 7,
        span: 15355..15359,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 647,
        column: 14,
        span: 15360..15366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 647,
        column: 18,
        span: 15367..15370,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 647,
        column: 19,
        span: 15370..15371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 647,
        column: 20,
        span: 15371..15372,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 647,
        column: 21,
        span: 15372..15373,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 647,
        column: 22,
        span: 15372..15374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 647,
        column: 23,
        span: 15374..15375,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 648,
        column: 0,
        span: 15378..15381,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 649,
        column: 0,
        span: 15382..15385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 651,
        column: 4,
        span: 15387..15390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 651,
        column: 5,
        span: 15390..15391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 651,
        column: 8,
        span: 15391..15394,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 651,
        column: 9,
        span: 15394..15395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 654,
        column: 6,
        span: 15398..15403,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 654,
        column: 9,
        span: 15403..15406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 658,
        column: 3,
        span: 15447..15449,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 658,
        column: 5,
        span: 15450..15451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 658,
        column: 10,
        span: 15452..15456,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local A = function ()\n    return x\n  end\n  return\n]]",
        ),
        line: 663,
        column: 3,
        span: 15456..15513,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 665,
        column: 6,
        span: 15515..15520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 665,
        column: 8,
        span: 15521..15522,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 665,
        column: 10,
        span: 15523..15524,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 665,
        column: 0,
        span: 15524..15526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 667,
        column: 6,
        span: 15599..15604,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 667,
        column: 7,
        span: 15604..15605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 667,
        column: 14,
        span: 15605..15612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 667,
        column: 15,
        span: 15612..15613,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 667,
        column: 23,
        span: 15613..15621,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 667,
        column: 25,
        span: 15622..15623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 667,
        column: 26,
        span: 15623..15624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 667,
        column: 27,
        span: 15624..15625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 667,
        column: 29,
        span: 15626..15627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 667,
        column: 30,
        span: 15627..15628,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 668,
        column: 5,
        span: 15631..15633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 668,
        column: 7,
        span: 15634..15635,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 668,
        column: 10,
        span: 15636..15638,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 668,
        column: 12,
        span: 15638..15640,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 668,
        column: 17,
        span: 15641..15645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 668,
        column: 19,
        span: 15646..15647,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 668,
        column: 21,
        span: 15648..15649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 668,
        column: 23,
        span: 15650..15651,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 668,
        column: 25,
        span: 15652..15653,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 668,
        column: 27,
        span: 15653..15655,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 668,
        column: 28,
        span: 15655..15656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 668,
        column: 35,
        span: 15657..15663,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 668,
        column: 36,
        span: 15663..15664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 668,
        column: 41,
        span: 15664..15669,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 668,
        column: 42,
        span: 15669..15670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 668,
        column: 50,
        span: 15670..15678,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 668,
        column: 51,
        span: 15678..15679,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 668,
        column: 52,
        span: 15678..15680,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 668,
        column: 53,
        span: 15680..15681,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 668,
        column: 55,
        span: 15681..15683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 668,
        column: 56,
        span: 15683..15684,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 668,
        column: 59,
        span: 15685..15687,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(temporary)\"",
        ),
        line: 668,
        column: 73,
        span: 15688..15701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 668,
        column: 74,
        span: 15701..15702,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 669,
        column: 9,
        span: 15705..15711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 669,
        column: 11,
        span: 15712..15713,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 669,
        column: 14,
        span: 15714..15716,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 669,
        column: 16,
        span: 15716..15718,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 669,
        column: 21,
        span: 15719..15723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 669,
        column: 23,
        span: 15724..15725,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 669,
        column: 25,
        span: 15726..15727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 669,
        column: 27,
        span: 15728..15729,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 669,
        column: 29,
        span: 15730..15731,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 669,
        column: 31,
        span: 15731..15733,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 669,
        column: 32,
        span: 15733..15734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 669,
        column: 39,
        span: 15735..15741,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 669,
        column: 40,
        span: 15741..15742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 669,
        column: 45,
        span: 15742..15747,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 669,
        column: 46,
        span: 15747..15748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 669,
        column: 54,
        span: 15748..15756,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 669,
        column: 55,
        span: 15756..15757,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 669,
        column: 56,
        span: 15756..15758,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 669,
        column: 57,
        span: 15758..15759,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 669,
        column: 59,
        span: 15759..15761,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 669,
        column: 60,
        span: 15761..15762,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 669,
        column: 63,
        span: 15763..15765,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        line: 669,
        column: 67,
        span: 15766..15769,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 669,
        column: 68,
        span: 15769..15770,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 670,
        column: 0,
        span: 15773..15776,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 671,
        column: 4,
        span: 15777..15780,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 671,
        column: 5,
        span: 15780..15781,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 671,
        column: 9,
        span: 15782..15785,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 671,
        column: 10,
        span: 15785..15786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 672,
        column: 3,
        span: 15787..15789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 672,
        column: 4,
        span: 15789..15790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 672,
        column: 5,
        span: 15790..15791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 673,
        column: 6,
        span: 15826..15831,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 673,
        column: 7,
        span: 15831..15832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 673,
        column: 14,
        span: 15832..15839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 673,
        column: 15,
        span: 15839..15840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 673,
        column: 16,
        span: 15840..15841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 674,
        column: 7,
        span: 15860..15866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 674,
        column: 8,
        span: 15866..15867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 674,
        column: 9,
        span: 15867..15868,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 674,
        column: 12,
        span: 15869..15871,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 674,
        column: 14,
        span: 15871..15873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 674,
        column: 15,
        span: 15873..15874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 678,
        column: 7,
        span: 15937..15943,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 678,
        column: 8,
        span: 15943..15944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 678,
        column: 13,
        span: 15944..15949,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 678,
        column: 14,
        span: 15949..15950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 678,
        column: 23,
        span: 15950..15959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 678,
        column: 24,
        span: 15959..15960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 678,
        column: 29,
        span: 15960..15965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 678,
        column: 30,
        span: 15965..15966,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 678,
        column: 33,
        span: 15967..15969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 678,
        column: 39,
        span: 15970..15975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 678,
        column: 40,
        span: 15975..15976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 679,
        column: 7,
        span: 15977..15983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 679,
        column: 8,
        span: 15983..15984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 679,
        column: 13,
        span: 15984..15989,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 679,
        column: 14,
        span: 15989..15990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 679,
        column: 23,
        span: 15990..15999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 679,
        column: 24,
        span: 15999..16000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 679,
        column: 29,
        span: 16000..16005,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 679,
        column: 30,
        span: 16005..16006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 679,
        column: 32,
        span: 16006..16008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 679,
        column: 33,
        span: 16008..16009,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 679,
        column: 36,
        span: 16010..16012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 679,
        column: 42,
        span: 16013..16018,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 679,
        column: 43,
        span: 16018..16019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 680,
        column: 7,
        span: 16020..16026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 680,
        column: 8,
        span: 16026..16027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 680,
        column: 14,
        span: 16027..16033,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 680,
        column: 15,
        span: 16033..16034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 680,
        column: 19,
        span: 16034..16038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 680,
        column: 20,
        span: 16038..16039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 680,
        column: 25,
        span: 16039..16044,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 680,
        column: 26,
        span: 16044..16045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 680,
        column: 35,
        span: 16045..16054,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 680,
        column: 36,
        span: 16054..16055,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 680,
        column: 40,
        span: 16055..16059,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 680,
        column: 41,
        span: 16059..16060,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 680,
        column: 43,
        span: 16060..16062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 680,
        column: 44,
        span: 16062..16063,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 680,
        column: 45,
        span: 16063..16064,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^hi\\n\"",
        ),
        line: 680,
        column: 53,
        span: 16065..16072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 680,
        column: 54,
        span: 16072..16073,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 680,
        column: 55,
        span: 16073..16074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 681,
        column: 7,
        span: 16075..16081,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
        column: 8,
        span: 16081..16082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 681,
        column: 14,
        span: 16082..16088,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 681,
        column: 15,
        span: 16088..16089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 681,
        column: 19,
        span: 16089..16093,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
        column: 20,
        span: 16093..16094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 681,
        column: 25,
        span: 16094..16099,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 681,
        column: 26,
        span: 16099..16100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 681,
        column: 35,
        span: 16100..16109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
        column: 36,
        span: 16109..16110,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 681,
        column: 40,
        span: 16110..16114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
        column: 41,
        span: 16114..16115,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 681,
        column: 42,
        span: 16115..16116,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^hi\\n\"",
        ),
        line: 681,
        column: 50,
        span: 16117..16124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
        column: 51,
        span: 16124..16125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
        column: 52,
        span: 16125..16126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 682,
        column: 7,
        span: 16127..16133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
        column: 8,
        span: 16133..16134,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 682,
        column: 11,
        span: 16134..16137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 682,
        column: 18,
        span: 16138..16144,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 682,
        column: 19,
        span: 16144..16145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 682,
        column: 23,
        span: 16145..16149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
        column: 24,
        span: 16149..16150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 682,
        column: 29,
        span: 16150..16155,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 682,
        column: 30,
        span: 16155..16156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 682,
        column: 39,
        span: 16156..16165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
        column: 40,
        span: 16165..16166,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 682,
        column: 44,
        span: 16166..16170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
        column: 45,
        span: 16170..16171,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 682,
        column: 46,
        span: 16171..16172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'debug.traceback'\"",
        ),
        line: 682,
        column: 66,
        span: 16173..16192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
        column: 67,
        span: 16192..16193,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
        column: 68,
        span: 16193..16194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 683,
        column: 7,
        span: 16195..16201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 683,
        column: 8,
        span: 16201..16202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 683,
        column: 14,
        span: 16202..16208,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 683,
        column: 15,
        span: 16208..16209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 683,
        column: 19,
        span: 16209..16213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 683,
        column: 20,
        span: 16213..16214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 683,
        column: 25,
        span: 16214..16219,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 683,
        column: 26,
        span: 16219..16220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 683,
        column: 35,
        span: 16220..16229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 683,
        column: 36,
        span: 16229..16230,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 683,
        column: 40,
        span: 16230..16234,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 683,
        column: 41,
        span: 16234..16235,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 683,
        column: 43,
        span: 16235..16237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 683,
        column: 44,
        span: 16237..16238,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 683,
        column: 45,
        span: 16238..16239,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'debug.traceback'\"",
        ),
        line: 683,
        column: 65,
        span: 16240..16259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 683,
        column: 66,
        span: 16259..16260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 683,
        column: 67,
        span: 16260..16261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 684,
        column: 7,
        span: 16262..16268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 684,
        column: 8,
        span: 16268..16269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 684,
        column: 14,
        span: 16269..16275,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 684,
        column: 15,
        span: 16275..16276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 684,
        column: 19,
        span: 16276..16280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 684,
        column: 20,
        span: 16280..16281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 684,
        column: 25,
        span: 16281..16286,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 684,
        column: 26,
        span: 16286..16287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 684,
        column: 35,
        span: 16287..16296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 684,
        column: 36,
        span: 16296..16297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 684,
        column: 37,
        span: 16297..16298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 684,
        column: 38,
        span: 16298..16299,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^stack traceback:\\n\"",
        ),
        line: 684,
        column: 60,
        span: 16300..16321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 684,
        column: 61,
        span: 16321..16322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 684,
        column: 62,
        span: 16322..16323,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 686,
        column: 3,
        span: 16325..16327,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 687,
        column: 8,
        span: 16364..16369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 687,
        column: 11,
        span: 16370..16372,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 687,
        column: 12,
        span: 16372..16373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 687,
        column: 16,
        span: 16374..16377,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 687,
        column: 18,
        span: 16378..16379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
        column: 20,
        span: 16380..16381,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 687,
        column: 28,
        span: 16381..16389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
        column: 30,
        span: 16390..16391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
        column: 31,
        span: 16391..16392,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 687,
        column: 38,
        span: 16393..16399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 687,
        column: 44,
        span: 16400..16405,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 687,
        column: 48,
        span: 16406..16409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
        column: 49,
        span: 16409..16410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
        column: 50,
        span: 16410..16411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
        column: 51,
        span: 16411..16412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
        column: 52,
        span: 16412..16413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 687,
        column: 57,
        span: 16413..16418,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 687,
        column: 58,
        span: 16418..16419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 687,
        column: 67,
        span: 16419..16428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
        column: 68,
        span: 16428..16429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 688,
        column: 9,
        span: 16432..16438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 688,
        column: 10,
        span: 16438..16439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 688,
        column: 12,
        span: 16439..16441,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 688,
        column: 15,
        span: 16442..16444,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 688,
        column: 20,
        span: 16445..16449,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 688,
        column: 24,
        span: 16450..16453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 688,
        column: 31,
        span: 16454..16460,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 688,
        column: 32,
        span: 16460..16461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 688,
        column: 36,
        span: 16461..16465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 688,
        column: 37,
        span: 16465..16466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 688,
        column: 40,
        span: 16466..16469,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 688,
        column: 41,
        span: 16469..16470,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pcall\"",
        ),
        line: 688,
        column: 49,
        span: 16471..16478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 688,
        column: 50,
        span: 16478..16479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 688,
        column: 51,
        span: 16479..16480,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 689,
        column: 0,
        span: 16481..16484,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 693,
        column: 6,
        span: 16523..16528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 693,
        column: 8,
        span: 16529..16530,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 693,
        column: 10,
        span: 16531..16532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 693,
        column: 16,
        span: 16533..16538,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 693,
        column: 17,
        span: 16538..16539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 693,
        column: 24,
        span: 16539..16546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 693,
        column: 25,
        span: 16546..16547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 693,
        column: 30,
        span: 16547..16552,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 693,
        column: 31,
        span: 16552..16553,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"u\"",
        ),
        line: 693,
        column: 35,
        span: 16554..16557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 693,
        column: 36,
        span: 16557..16558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 694,
        column: 7,
        span: 16559..16565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 694,
        column: 8,
        span: 16565..16566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 694,
        column: 9,
        span: 16566..16567,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 694,
        column: 10,
        span: 16567..16568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 694,
        column: 18,
        span: 16568..16576,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 694,
        column: 21,
        span: 16577..16579,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 694,
        column: 26,
        span: 16580..16584,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 694,
        column: 30,
        span: 16585..16588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 694,
        column: 32,
        span: 16589..16590,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 694,
        column: 33,
        span: 16590..16591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 694,
        column: 40,
        span: 16591..16598,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 694,
        column: 43,
        span: 16599..16601,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 694,
        column: 45,
        span: 16601..16603,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 694,
        column: 49,
        span: 16604..16607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 694,
        column: 51,
        span: 16608..16609,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 694,
        column: 52,
        span: 16609..16610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 694,
        column: 56,
        span: 16610..16614,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 694,
        column: 59,
        span: 16615..16617,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 694,
        column: 61,
        span: 16617..16619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 694,
        column: 62,
        span: 16619..16620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 696,
        column: 2,
        span: 16622..16623,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 696,
        column: 4,
        span: 16624..16625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 696,
        column: 10,
        span: 16626..16631,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 696,
        column: 11,
        span: 16631..16632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 696,
        column: 18,
        span: 16632..16639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 696,
        column: 19,
        span: 16639..16640,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 696,
        column: 27,
        span: 16640..16648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 696,
        column: 29,
        span: 16649..16650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 696,
        column: 30,
        span: 16650..16651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 696,
        column: 31,
        span: 16651..16652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 696,
        column: 32,
        span: 16652..16653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 696,
        column: 33,
        span: 16653..16654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 696,
        column: 34,
        span: 16654..16655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 696,
        column: 35,
        span: 16655..16656,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 696,
        column: 39,
        span: 16657..16660,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 696,
        column: 40,
        span: 16660..16661,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"u\"",
        ),
        line: 696,
        column: 44,
        span: 16662..16665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 696,
        column: 45,
        span: 16665..16666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 697,
        column: 7,
        span: 16667..16673,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 697,
        column: 8,
        span: 16673..16674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 697,
        column: 9,
        span: 16674..16675,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 697,
        column: 10,
        span: 16675..16676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 697,
        column: 18,
        span: 16676..16684,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 697,
        column: 21,
        span: 16685..16687,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 697,
        column: 27,
        span: 16688..16693,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 697,
        column: 31,
        span: 16694..16697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 697,
        column: 33,
        span: 16698..16699,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 697,
        column: 34,
        span: 16699..16700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 697,
        column: 41,
        span: 16700..16707,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 697,
        column: 44,
        span: 16708..16710,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 697,
        column: 46,
        span: 16710..16712,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 697,
        column: 50,
        span: 16713..16716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 697,
        column: 52,
        span: 16717..16718,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 697,
        column: 53,
        span: 16718..16719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 697,
        column: 57,
        span: 16719..16723,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 697,
        column: 60,
        span: 16724..16726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 697,
        column: 62,
        span: 16726..16728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 697,
        column: 63,
        span: 16728..16729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 699,
        column: 2,
        span: 16731..16732,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 699,
        column: 4,
        span: 16733..16734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 699,
        column: 10,
        span: 16735..16740,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 699,
        column: 11,
        span: 16740..16741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 699,
        column: 18,
        span: 16741..16748,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 699,
        column: 19,
        span: 16748..16749,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 699,
        column: 27,
        span: 16749..16757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 699,
        column: 29,
        span: 16758..16759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 699,
        column: 30,
        span: 16759..16760,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 699,
        column: 31,
        span: 16760..16761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 699,
        column: 32,
        span: 16761..16762,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 699,
        column: 33,
        span: 16762..16763,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 699,
        column: 36,
        span: 16763..16766,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 699,
        column: 37,
        span: 16766..16767,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 699,
        column: 44,
        span: 16768..16774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 699,
        column: 46,
        span: 16775..16776,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 699,
        column: 47,
        span: 16776..16777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 699,
        column: 48,
        span: 16777..16778,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 699,
        column: 49,
        span: 16778..16779,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 699,
        column: 53,
        span: 16780..16783,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 699,
        column: 54,
        span: 16783..16784,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"u\"",
        ),
        line: 699,
        column: 58,
        span: 16785..16788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 699,
        column: 59,
        span: 16788..16789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 700,
        column: 7,
        span: 16790..16796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 700,
        column: 8,
        span: 16796..16797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 700,
        column: 9,
        span: 16797..16798,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 700,
        column: 10,
        span: 16798..16799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 700,
        column: 18,
        span: 16799..16807,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 700,
        column: 21,
        span: 16808..16810,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 700,
        column: 26,
        span: 16811..16815,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 700,
        column: 30,
        span: 16816..16819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 700,
        column: 32,
        span: 16820..16821,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 700,
        column: 33,
        span: 16821..16822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 700,
        column: 40,
        span: 16822..16829,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 700,
        column: 43,
        span: 16830..16832,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 700,
        column: 45,
        span: 16832..16834,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 700,
        column: 49,
        span: 16835..16838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 700,
        column: 51,
        span: 16839..16840,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 700,
        column: 52,
        span: 16840..16841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 700,
        column: 56,
        span: 16841..16845,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 700,
        column: 59,
        span: 16846..16848,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 700,
        column: 61,
        span: 16848..16850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 700,
        column: 62,
        span: 16850..16851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 702,
        column: 2,
        span: 16853..16854,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 702,
        column: 4,
        span: 16855..16856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 702,
        column: 10,
        span: 16857..16862,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 702,
        column: 11,
        span: 16862..16863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 702,
        column: 18,
        span: 16863..16870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 702,
        column: 19,
        span: 16870..16871,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 702,
        column: 20,
        span: 16870..16872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 702,
        column: 21,
        span: 16872..16873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 703,
        column: 7,
        span: 16884..16890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 703,
        column: 8,
        span: 16890..16891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 703,
        column: 9,
        span: 16891..16892,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 703,
        column: 10,
        span: 16892..16893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 703,
        column: 18,
        span: 16893..16901,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 703,
        column: 21,
        span: 16902..16904,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 703,
        column: 26,
        span: 16905..16909,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 703,
        column: 30,
        span: 16910..16913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 703,
        column: 32,
        span: 16914..16915,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 703,
        column: 33,
        span: 16915..16916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 703,
        column: 40,
        span: 16916..16923,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 703,
        column: 43,
        span: 16924..16926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 703,
        column: 45,
        span: 16926..16928,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 703,
        column: 49,
        span: 16929..16932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 703,
        column: 51,
        span: 16933..16934,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 703,
        column: 52,
        span: 16934..16935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 703,
        column: 56,
        span: 16935..16939,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 703,
        column: 59,
        span: 16940..16942,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 703,
        column: 61,
        span: 16942..16944,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 703,
        column: 0,
        span: 16945..16948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 704,
        column: 13,
        span: 16956..16961,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 704,
        column: 14,
        span: 16961..16962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 704,
        column: 24,
        span: 16962..16972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 704,
        column: 25,
        span: 16972..16973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 704,
        column: 26,
        span: 16973..16974,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 704,
        column: 27,
        span: 16974..16975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 704,
        column: 31,
        span: 16975..16979,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 704,
        column: 32,
        span: 16979..16980,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 704,
        column: 34,
        span: 16980..16982,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 704,
        column: 35,
        span: 16982..16983,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 704,
        column: 38,
        span: 16984..16986,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_ENV\"",
        ),
        line: 704,
        column: 45,
        span: 16987..16993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 704,
        column: 46,
        span: 16993..16994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 706,
        column: 2,
        span: 16996..16997,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 706,
        column: 4,
        span: 16998..16999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 706,
        column: 10,
        span: 17000..17005,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 706,
        column: 11,
        span: 17005..17006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 706,
        column: 18,
        span: 17006..17013,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 706,
        column: 19,
        span: 17013..17014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 706,
        column: 23,
        span: 17014..17018,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 706,
        column: 24,
        span: 17018..17019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 706,
        column: 27,
        span: 17019..17022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 706,
        column: 28,
        span: 17022..17023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 707,
        column: 7,
        span: 17040..17046,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 707,
        column: 8,
        span: 17046..17047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 707,
        column: 9,
        span: 17047..17048,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 707,
        column: 10,
        span: 17048..17049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 707,
        column: 18,
        span: 17049..17057,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 707,
        column: 21,
        span: 17058..17060,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 707,
        column: 26,
        span: 17061..17065,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 707,
        column: 30,
        span: 17066..17069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 707,
        column: 32,
        span: 17070..17071,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 707,
        column: 33,
        span: 17071..17072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 707,
        column: 40,
        span: 17072..17079,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 707,
        column: 43,
        span: 17080..17082,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 707,
        column: 45,
        span: 17082..17084,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 707,
        column: 49,
        span: 17085..17088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 707,
        column: 51,
        span: 17089..17090,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 707,
        column: 52,
        span: 17090..17091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 707,
        column: 56,
        span: 17091..17095,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 707,
        column: 59,
        span: 17096..17098,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 707,
        column: 61,
        span: 17098..17100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 707,
        column: 62,
        span: 17100..17101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 709,
        column: 2,
        span: 17103..17104,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 709,
        column: 4,
        span: 17105..17106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 709,
        column: 10,
        span: 17107..17112,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 709,
        column: 11,
        span: 17112..17113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 709,
        column: 18,
        span: 17113..17120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 709,
        column: 19,
        span: 17120..17121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 709,
        column: 25,
        span: 17121..17127,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 709,
        column: 26,
        span: 17127..17128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 709,
        column: 32,
        span: 17128..17134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 709,
        column: 33,
        span: 17134..17135,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        line: 709,
        column: 38,
        span: 17135..17140,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 709,
        column: 39,
        span: 17140..17141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 709,
        column: 43,
        span: 17142..17145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 709,
        column: 44,
        span: 17145..17146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 709,
        column: 45,
        span: 17146..17147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 710,
        column: 7,
        span: 17163..17169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 710,
        column: 8,
        span: 17169..17170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 710,
        column: 9,
        span: 17170..17171,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 710,
        column: 10,
        span: 17171..17172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 710,
        column: 18,
        span: 17172..17180,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 710,
        column: 21,
        span: 17181..17183,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 710,
        column: 26,
        span: 17184..17188,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 710,
        column: 30,
        span: 17189..17192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 710,
        column: 32,
        span: 17193..17194,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 710,
        column: 33,
        span: 17194..17195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 710,
        column: 40,
        span: 17195..17202,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 710,
        column: 43,
        span: 17203..17205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 710,
        column: 45,
        span: 17205..17207,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 710,
        column: 49,
        span: 17208..17211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 710,
        column: 51,
        span: 17212..17213,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 710,
        column: 52,
        span: 17213..17214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 710,
        column: 56,
        span: 17214..17218,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 710,
        column: 58,
        span: 17219..17220,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 710,
        column: 60,
        span: 17220..17222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 710,
        column: 61,
        span: 17222..17223,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 716,
        column: 6,
        span: 17263..17268,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 716,
        column: 15,
        span: 17269..17277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 716,
        column: 30,
        span: 17278..17292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 716,
        column: 32,
        span: 17293..17294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 716,
        column: 34,
        span: 17294..17296,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 716,
        column: 35,
        span: 17296..17297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 716,
        column: 37,
        span: 17298..17299,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 716,
        column: 38,
        span: 17299..17300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "level",
        ),
        line: 716,
        column: 44,
        span: 17301..17306,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 716,
        column: 45,
        span: 17306..17307,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 717,
        column: 8,
        span: 17310..17315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tb",
        ),
        line: 717,
        column: 11,
        span: 17316..17318,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 717,
        column: 13,
        span: 17319..17320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 717,
        column: 19,
        span: 17321..17326,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 717,
        column: 20,
        span: 17326..17327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 717,
        column: 29,
        span: 17327..17336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 717,
        column: 30,
        span: 17336..17337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 717,
        column: 32,
        span: 17337..17339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 717,
        column: 33,
        span: 17339..17340,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 717,
        column: 37,
        span: 17341..17344,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 717,
        column: 38,
        span: 17344..17345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "level",
        ),
        line: 717,
        column: 44,
        span: 17346..17351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 717,
        column: 45,
        span: 17351..17352,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 718,
        column: 8,
        span: 17355..17360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 718,
        column: 10,
        span: 17361..17362,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 718,
        column: 12,
        span: 17363..17364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 718,
        column: 0,
        span: 17364..17366,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 719,
        column: 6,
        span: 17369..17372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 719,
        column: 8,
        span: 17373..17374,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 719,
        column: 11,
        span: 17375..17377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 719,
        column: 18,
        span: 17378..17384,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 719,
        column: 19,
        span: 17384..17385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 719,
        column: 25,
        span: 17385..17391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 719,
        column: 26,
        span: 17391..17392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tb",
        ),
        line: 719,
        column: 28,
        span: 17392..17394,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 719,
        column: 29,
        span: 17394..17395,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^\\n]+\\n?\"",
        ),
        line: 719,
        column: 41,
        span: 17396..17407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 719,
        column: 42,
        span: 17407..17408,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 719,
        column: 0,
        span: 17409..17411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 720,
        column: 11,
        span: 17416..17422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 720,
        column: 12,
        span: 17422..17423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 720,
        column: 13,
        span: 17423..17424,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 720,
        column: 16,
        span: 17425..17427,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 720,
        column: 18,
        span: 17427..17429,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 720,
        column: 21,
        span: 17430..17432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 720,
        column: 28,
        span: 17433..17439,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 720,
        column: 29,
        span: 17439..17440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 720,
        column: 33,
        span: 17440..17444,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 720,
        column: 34,
        span: 17444..17445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 720,
        column: 35,
        span: 17445..17446,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 720,
        column: 36,
        span: 17446..17447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 720,
        column: 38,
        span: 17448..17449,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 720,
        column: 39,
        span: 17449..17450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 720,
        column: 40,
        span: 17450..17451,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 720,
        column: 41,
        span: 17451..17452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 720,
        column: 42,
        span: 17452..17453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 720,
        column: 43,
        span: 17453..17454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 721,
        column: 6,
        span: 17459..17460,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 721,
        column: 8,
        span: 17461..17462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 721,
        column: 10,
        span: 17463..17464,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 721,
        column: 11,
        span: 17464..17465,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 721,
        column: 0,
        span: 17464..17466,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 722,
        column: 0,
        span: 17469..17472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 723,
        column: 9,
        span: 17475..17481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 723,
        column: 10,
        span: 17481..17482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 723,
        column: 11,
        span: 17482..17483,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 723,
        column: 12,
        span: 17483..17484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 723,
        column: 13,
        span: 17484..17485,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 723,
        column: 14,
        span: 17485..17486,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 723,
        column: 17,
        span: 17487..17489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 723,
        column: 23,
        span: 17490..17495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 723,
        column: 24,
        span: 17495..17496,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 724,
        column: 0,
        span: 17497..17500,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 727,
        column: 6,
        span: 17503..17508,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 727,
        column: 15,
        span: 17509..17517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 727,
        column: 17,
        span: 17518..17519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 727,
        column: 19,
        span: 17520..17521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 727,
        column: 20,
        span: 17521..17522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 727,
        column: 21,
        span: 17522..17523,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 728,
        column: 5,
        span: 17526..17528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 728,
        column: 7,
        span: 17529..17530,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 728,
        column: 9,
        span: 17531..17532,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 728,
        column: 11,
        span: 17532..17534,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 728,
        column: 16,
        span: 17535..17539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 728,
        column: 18,
        span: 17540..17541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 728,
        column: 19,
        span: 17541..17542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 728,
        column: 20,
        span: 17542..17543,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 728,
        column: 21,
        span: 17543..17544,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 728,
        column: 22,
        span: 17543..17545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 728,
        column: 23,
        span: 17545..17546,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 729,
        column: 7,
        span: 17549..17553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 729,
        column: 17,
        span: 17554..17563,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 729,
        column: 18,
        span: 17563..17564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 729,
        column: 23,
        span: 17564..17569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 729,
        column: 24,
        span: 17569..17570,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 729,
        column: 25,
        span: 17570..17571,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 729,
        column: 0,
        span: 17572..17575,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 730,
        column: 0,
        span: 17576..17579,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 732,
        column: 6,
        span: 17581..17586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 732,
        column: 9,
        span: 17587..17589,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 732,
        column: 11,
        span: 17590..17591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 732,
        column: 21,
        span: 17592..17601,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 732,
        column: 22,
        span: 17601..17602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 732,
        column: 28,
        span: 17602..17608,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 732,
        column: 29,
        span: 17608..17609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 732,
        column: 30,
        span: 17609..17610,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 732,
        column: 31,
        span: 17610..17611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 733,
        column: 10,
        span: 17612..17621,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 733,
        column: 11,
        span: 17621..17622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 733,
        column: 17,
        span: 17622..17628,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 733,
        column: 18,
        span: 17628..17629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 733,
        column: 20,
        span: 17629..17631,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 733,
        column: 21,
        span: 17631..17632,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 733,
        column: 23,
        span: 17632..17634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 733,
        column: 24,
        span: 17634..17635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 734,
        column: 15,
        span: 17636..17650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 734,
        column: 16,
        span: 17650..17651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 734,
        column: 18,
        span: 17651..17653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 734,
        column: 19,
        span: 17653..17654,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 734,
        column: 21,
        span: 17655..17656,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield\"",
        ),
        line: 734,
        column: 28,
        span: 17656..17663,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 734,
        column: 29,
        span: 17663..17664,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 734,
        column: 38,
        span: 17665..17673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 734,
        column: 39,
        span: 17673..17674,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 734,
        column: 48,
        span: 17675..17683,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 734,
        column: 49,
        span: 17683..17684,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 734,
        column: 58,
        span: 17685..17693,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 734,
        column: 59,
        span: 17693..17694,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 734,
        column: 68,
        span: 17695..17703,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 734,
        column: 69,
        span: 17703..17704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 734,
        column: 70,
        span: 17704..17705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 735,
        column: 15,
        span: 17706..17720,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 735,
        column: 16,
        span: 17720..17721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 735,
        column: 18,
        span: 17721..17723,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 735,
        column: 19,
        span: 17723..17724,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 735,
        column: 21,
        span: 17725..17726,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 735,
        column: 29,
        span: 17726..17734,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 735,
        column: 30,
        span: 17734..17735,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 735,
        column: 39,
        span: 17736..17744,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 735,
        column: 40,
        span: 17744..17745,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 735,
        column: 49,
        span: 17746..17754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 735,
        column: 50,
        span: 17754..17755,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 735,
        column: 59,
        span: 17756..17764,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 735,
        column: 60,
        span: 17764..17765,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 735,
        column: 61,
        span: 17765..17766,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 735,
        column: 63,
        span: 17766..17768,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 735,
        column: 64,
        span: 17768..17769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 736,
        column: 15,
        span: 17770..17784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 736,
        column: 16,
        span: 17784..17785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 736,
        column: 18,
        span: 17785..17787,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 736,
        column: 19,
        span: 17787..17788,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 736,
        column: 21,
        span: 17789..17790,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 736,
        column: 29,
        span: 17790..17798,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 736,
        column: 30,
        span: 17798..17799,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 736,
        column: 39,
        span: 17800..17808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 736,
        column: 40,
        span: 17808..17809,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 736,
        column: 49,
        span: 17810..17818,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 736,
        column: 50,
        span: 17818..17819,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 736,
        column: 51,
        span: 17819..17820,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 736,
        column: 53,
        span: 17820..17822,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 736,
        column: 54,
        span: 17822..17823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 737,
        column: 15,
        span: 17824..17838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 737,
        column: 16,
        span: 17838..17839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 737,
        column: 18,
        span: 17839..17841,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 737,
        column: 19,
        span: 17841..17842,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 737,
        column: 21,
        span: 17843..17844,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 737,
        column: 29,
        span: 17844..17852,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 737,
        column: 30,
        span: 17852..17853,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 737,
        column: 31,
        span: 17853..17854,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 737,
        column: 33,
        span: 17854..17856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 737,
        column: 34,
        span: 17856..17857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 738,
        column: 15,
        span: 17858..17872,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 738,
        column: 16,
        span: 17872..17873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 738,
        column: 18,
        span: 17873..17875,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 738,
        column: 19,
        span: 17875..17876,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 738,
        column: 21,
        span: 17877..17878,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 738,
        column: 22,
        span: 17878..17879,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 738,
        column: 23,
        span: 17879..17880,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 738,
        column: 26,
        span: 17880..17883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 738,
        column: 27,
        span: 17883..17884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 741,
        column: 3,
        span: 17887..17889,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 741,
        column: 5,
        span: 17890..17891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 741,
        column: 15,
        span: 17892..17901,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 741,
        column: 16,
        span: 17901..17902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 741,
        column: 22,
        span: 17902..17908,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 741,
        column: 23,
        span: 17908..17909,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 741,
        column: 31,
        span: 17909..17917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 741,
        column: 33,
        span: 17918..17919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 741,
        column: 34,
        span: 17919..17920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 741,
        column: 35,
        span: 17920..17921,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 742,
        column: 13,
        span: 17929..17934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 742,
        column: 15,
        span: 17935..17936,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 742,
        column: 17,
        span: 17937..17938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 742,
        column: 0,
        span: 17938..17940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 743,
        column: 17,
        span: 17948..17957,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 743,
        column: 18,
        span: 17957..17958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 743,
        column: 23,
        span: 17958..17963,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 743,
        column: 24,
        span: 17963..17964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 743,
        column: 29,
        span: 17964..17969,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 743,
        column: 30,
        span: 17969..17970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 743,
        column: 37,
        span: 17970..17977,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 743,
        column: 38,
        span: 17977..17978,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 743,
        column: 39,
        span: 17977..17979,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 743,
        column: 40,
        span: 17979..17980,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 743,
        column: 44,
        span: 17981..17984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 743,
        column: 45,
        span: 17984..17985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 743,
        column: 46,
        span: 17985..17986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 744,
        column: 17,
        span: 17994..18003,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 744,
        column: 18,
        span: 18003..18004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 744,
        column: 23,
        span: 18004..18009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 744,
        column: 24,
        span: 18009..18010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 744,
        column: 29,
        span: 18010..18015,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 744,
        column: 30,
        span: 18015..18016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 744,
        column: 37,
        span: 18016..18023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 744,
        column: 38,
        span: 18023..18024,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 744,
        column: 39,
        span: 18023..18025,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 744,
        column: 40,
        span: 18025..18026,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 744,
        column: 44,
        span: 18027..18030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 744,
        column: 45,
        span: 18030..18031,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 744,
        column: 46,
        span: 18031..18032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 744,
        column: 57,
        span: 18032..18043,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 744,
        column: 58,
        span: 18043..18044,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 745,
        column: 14,
        span: 18052..18058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 745,
        column: 0,
        span: 18059..18060,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 746,
        column: 9,
        span: 18066..18069,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 746,
        column: 10,
        span: 18069..18070,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 748,
        column: 6,
        span: 18072..18077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 748,
        column: 9,
        span: 18078..18080,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 748,
        column: 11,
        span: 18081..18082,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 748,
        column: 13,
        span: 18083..18084,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 748,
        column: 14,
        span: 18084..18085,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 749,
        column: 6,
        span: 18086..18091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 749,
        column: 10,
        span: 18092..18095,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 749,
        column: 12,
        span: 18096..18097,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 749,
        column: 21,
        span: 18098..18106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 749,
        column: 23,
        span: 18107..18108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 749,
        column: 24,
        span: 18108..18109,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 749,
        column: 25,
        span: 18109..18110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 749,
        column: 27,
        span: 18111..18112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 749,
        column: 28,
        span: 18112..18113,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 749,
        column: 31,
        span: 18114..18116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 749,
        column: 33,
        span: 18117..18118,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 749,
        column: 38,
        span: 18119..18123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 749,
        column: 44,
        span: 18124..18129,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 749,
        column: 45,
        span: 18129..18130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 749,
        column: 51,
        span: 18130..18136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 749,
        column: 52,
        span: 18136..18137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 749,
        column: 54,
        span: 18137..18139,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 749,
        column: 55,
        span: 18139..18140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 749,
        column: 57,
        span: 18141..18142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 749,
        column: 58,
        span: 18142..18143,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 749,
        column: 62,
        span: 18144..18147,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 749,
        column: 0,
        span: 18148..18151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 750,
        column: 6,
        span: 18152..18157,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 750,
        column: 7,
        span: 18157..18158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 750,
        column: 14,
        span: 18158..18165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 750,
        column: 15,
        span: 18165..18166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 750,
        column: 17,
        span: 18166..18168,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
        column: 18,
        span: 18168..18169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 750,
        column: 22,
        span: 18170..18173,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
        column: 23,
        span: 18173..18174,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lcr\"",
        ),
        line: 750,
        column: 29,
        span: 18175..18180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 750,
        column: 30,
        span: 18180..18181,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 752,
        column: 6,
        span: 18183..18188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 752,
        column: 8,
        span: 18189..18190,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 752,
        column: 9,
        span: 18190..18191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 752,
        column: 11,
        span: 18192..18193,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 752,
        column: 13,
        span: 18194..18195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 752,
        column: 23,
        span: 18196..18205,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 752,
        column: 24,
        span: 18205..18206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 752,
        column: 30,
        span: 18206..18212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 752,
        column: 31,
        span: 18212..18213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 752,
        column: 33,
        span: 18213..18215,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 752,
        column: 34,
        span: 18215..18216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 752,
        column: 37,
        span: 18216..18219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 752,
        column: 38,
        span: 18219..18220,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 753,
        column: 6,
        span: 18221..18226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 753,
        column: 8,
        span: 18227..18228,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 753,
        column: 10,
        span: 18229..18230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 753,
        column: 16,
        span: 18231..18236,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 753,
        column: 17,
        span: 18236..18237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 753,
        column: 24,
        span: 18237..18244,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 753,
        column: 25,
        span: 18244..18245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 753,
        column: 27,
        span: 18245..18247,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 753,
        column: 28,
        span: 18247..18248,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 753,
        column: 30,
        span: 18248..18250,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 753,
        column: 31,
        span: 18250..18251,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lfLS\"",
        ),
        line: 753,
        column: 38,
        span: 18252..18258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 753,
        column: 39,
        span: 18258..18259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 754,
        column: 7,
        span: 18260..18266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 754,
        column: 8,
        span: 18266..18267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 754,
        column: 9,
        span: 18267..18268,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 754,
        column: 10,
        span: 18268..18269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 754,
        column: 21,
        span: 18269..18280,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 754,
        column: 24,
        span: 18281..18283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 754,
        column: 26,
        span: 18284..18285,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 754,
        column: 27,
        span: 18285..18286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 754,
        column: 38,
        span: 18286..18297,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 754,
        column: 42,
        span: 18298..18301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 754,
        column: 44,
        span: 18302..18303,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 754,
        column: 45,
        span: 18303..18304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 754,
        column: 56,
        span: 18304..18315,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 754,
        column: 57,
        span: 18315..18316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 754,
        column: 58,
        span: 18316..18317,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 754,
        column: 59,
        span: 18317..18318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 754,
        column: 70,
        span: 18318..18329,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 754,
        column: 71,
        span: 18329..18330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 754,
        column: 72,
        span: 18330..18331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 755,
        column: 7,
        span: 18332..18338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 755,
        column: 8,
        span: 18338..18339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 755,
        column: 12,
        span: 18339..18343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 755,
        column: 13,
        span: 18343..18344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 755,
        column: 14,
        span: 18344..18345,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 755,
        column: 15,
        span: 18345..18346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 755,
        column: 19,
        span: 18346..18350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 755,
        column: 20,
        span: 18350..18351,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 755,
        column: 23,
        span: 18352..18354,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 755,
        column: 34,
        span: 18355..18365,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 755,
        column: 35,
        span: 18365..18366,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 756,
        column: 4,
        span: 18367..18370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 756,
        column: 6,
        span: 18371..18372,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 756,
        column: 7,
        span: 18372..18373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 756,
        column: 8,
        span: 18373..18374,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 756,
        column: 9,
        span: 18374..18375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 756,
        column: 20,
        span: 18375..18386,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 756,
        column: 22,
        span: 18387..18388,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 756,
        column: 24,
        span: 18388..18390,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 756,
        column: 25,
        span: 18390..18391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 756,
        column: 27,
        span: 18392..18393,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 756,
        column: 28,
        span: 18393..18394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        line: 756,
        column: 43,
        span: 18394..18409,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 756,
        column: 0,
        span: 18410..18412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 757,
        column: 9,
        span: 18415..18421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 757,
        column: 10,
        span: 18421..18422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 757,
        column: 11,
        span: 18422..18423,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 757,
        column: 12,
        span: 18423..18424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 757,
        column: 23,
        span: 18424..18435,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 757,
        column: 24,
        span: 18435..18436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 757,
        column: 25,
        span: 18436..18437,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 757,
        column: 26,
        span: 18437..18438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 757,
        column: 27,
        span: 18438..18439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 758,
        column: 4,
        span: 18442..18443,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 758,
        column: 5,
        span: 18443..18444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 758,
        column: 16,
        span: 18444..18455,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 758,
        column: 17,
        span: 18455..18456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 758,
        column: 18,
        span: 18456..18457,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 758,
        column: 19,
        span: 18457..18458,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 758,
        column: 21,
        span: 18459..18460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 758,
        column: 0,
        span: 18461..18466,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 759,
        column: 0,
        span: 18467..18470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 760,
        column: 7,
        span: 18471..18477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 760,
        column: 8,
        span: 18477..18478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 760,
        column: 12,
        span: 18478..18482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 760,
        column: 13,
        span: 18482..18483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 760,
        column: 14,
        span: 18483..18484,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 760,
        column: 15,
        span: 18484..18485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 760,
        column: 26,
        span: 18485..18496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 760,
        column: 27,
        span: 18496..18497,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 760,
        column: 30,
        span: 18498..18500,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 760,
        column: 34,
        span: 18501..18504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 760,
        column: 35,
        span: 18504..18505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 761,
        column: 7,
        span: 18531..18537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 761,
        column: 8,
        span: 18537..18538,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 761,
        column: 11,
        span: 18538..18541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 761,
        column: 17,
        span: 18542..18547,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 761,
        column: 18,
        span: 18547..18548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 761,
        column: 25,
        span: 18548..18555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 761,
        column: 26,
        span: 18555..18556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 761,
        column: 28,
        span: 18556..18558,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 761,
        column: 29,
        span: 18558..18559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 761,
        column: 31,
        span: 18559..18561,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 761,
        column: 32,
        span: 18561..18562,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 761,
        column: 33,
        span: 18562..18563,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 762,
        column: 6,
        span: 18564..18569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 762,
        column: 8,
        span: 18570..18571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 762,
        column: 9,
        span: 18571..18572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 762,
        column: 10,
        span: 18572..18573,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 762,
        column: 12,
        span: 18574..18575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 762,
        column: 18,
        span: 18576..18581,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 762,
        column: 19,
        span: 18581..18582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 762,
        column: 27,
        span: 18582..18590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 762,
        column: 28,
        span: 18590..18591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 762,
        column: 30,
        span: 18591..18593,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 762,
        column: 31,
        span: 18593..18594,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 762,
        column: 33,
        span: 18594..18596,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 762,
        column: 34,
        span: 18596..18597,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 762,
        column: 36,
        span: 18597..18599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 762,
        column: 37,
        span: 18599..18600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 763,
        column: 7,
        span: 18601..18607,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 763,
        column: 8,
        span: 18607..18608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 763,
        column: 9,
        span: 18608..18609,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 763,
        column: 12,
        span: 18610..18612,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 763,
        column: 16,
        span: 18613..18616,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 763,
        column: 20,
        span: 18617..18620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 763,
        column: 22,
        span: 18621..18622,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 763,
        column: 25,
        span: 18623..18625,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 763,
        column: 28,
        span: 18625..18628,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 763,
        column: 29,
        span: 18628..18629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 764,
        column: 2,
        span: 18630..18631,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 764,
        column: 3,
        span: 18631..18632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 764,
        column: 4,
        span: 18632..18633,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 764,
        column: 6,
        span: 18634..18635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 764,
        column: 12,
        span: 18636..18641,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 764,
        column: 13,
        span: 18641..18642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 764,
        column: 21,
        span: 18642..18650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 764,
        column: 22,
        span: 18650..18651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 764,
        column: 24,
        span: 18651..18653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 764,
        column: 25,
        span: 18653..18654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 764,
        column: 27,
        span: 18654..18656,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 764,
        column: 28,
        span: 18656..18657,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 764,
        column: 30,
        span: 18657..18659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 764,
        column: 31,
        span: 18659..18660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 765,
        column: 7,
        span: 18661..18667,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 765,
        column: 8,
        span: 18667..18668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 765,
        column: 9,
        span: 18668..18669,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 765,
        column: 12,
        span: 18670..18672,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 765,
        column: 16,
        span: 18673..18676,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 765,
        column: 20,
        span: 18677..18680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 765,
        column: 22,
        span: 18681..18682,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 765,
        column: 25,
        span: 18683..18685,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 765,
        column: 27,
        span: 18685..18687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 765,
        column: 28,
        span: 18687..18688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 766,
        column: 6,
        span: 18689..18694,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 766,
        column: 7,
        span: 18694..18695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 766,
        column: 15,
        span: 18695..18703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 766,
        column: 16,
        span: 18703..18704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 766,
        column: 18,
        span: 18704..18706,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 766,
        column: 19,
        span: 18706..18707,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 766,
        column: 21,
        span: 18707..18709,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 766,
        column: 22,
        span: 18709..18710,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 766,
        column: 24,
        span: 18710..18712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 766,
        column: 25,
        span: 18712..18713,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 766,
        column: 30,
        span: 18714..18718,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 766,
        column: 31,
        span: 18718..18719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 767,
        column: 7,
        span: 18720..18726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 767,
        column: 8,
        span: 18726..18727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 767,
        column: 13,
        span: 18727..18732,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 767,
        column: 14,
        span: 18732..18733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 767,
        column: 21,
        span: 18733..18740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 767,
        column: 22,
        span: 18740..18741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 767,
        column: 24,
        span: 18741..18743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 767,
        column: 25,
        span: 18743..18744,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 767,
        column: 28,
        span: 18745..18747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 767,
        column: 32,
        span: 18748..18751,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 767,
        column: 33,
        span: 18751..18752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 768,
        column: 7,
        span: 18753..18759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 768,
        column: 8,
        span: 18759..18760,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 768,
        column: 9,
        span: 18760..18761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 768,
        column: 11,
        span: 18761..18763,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 768,
        column: 14,
        span: 18764..18766,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 768,
        column: 16,
        span: 18766..18768,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 768,
        column: 0,
        span: 18769..18772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 769,
        column: 10,
        span: 18780..18782,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 769,
        column: 11,
        span: 18782..18783,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 769,
        column: 12,
        span: 18782..18784,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 769,
        column: 13,
        span: 18784..18785,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 769,
        column: 16,
        span: 18786..18788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 769,
        column: 18,
        span: 18789..18790,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 769,
        column: 19,
        span: 18790..18791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 769,
        column: 30,
        span: 18791..18802,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 769,
        column: 31,
        span: 18802..18803,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 769,
        column: 32,
        span: 18802..18804,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 769,
        column: 36,
        span: 18805..18808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 769,
        column: 39,
        span: 18809..18811,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 769,
        column: 40,
        span: 18811..18812,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 769,
        column: 41,
        span: 18811..18813,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 769,
        column: 42,
        span: 18813..18814,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 769,
        column: 45,
        span: 18815..18817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 769,
        column: 47,
        span: 18818..18819,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 769,
        column: 48,
        span: 18819..18820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 769,
        column: 59,
        span: 18820..18831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 769,
        column: 60,
        span: 18831..18832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 771,
        column: 2,
        span: 18834..18835,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 771,
        column: 3,
        span: 18835..18836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 771,
        column: 4,
        span: 18836..18837,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 771,
        column: 5,
        span: 18837..18838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 771,
        column: 6,
        span: 18838..18839,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 771,
        column: 8,
        span: 18840..18841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 771,
        column: 14,
        span: 18842..18847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 771,
        column: 15,
        span: 18847..18848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 771,
        column: 24,
        span: 18848..18857,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 771,
        column: 25,
        span: 18857..18858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 771,
        column: 31,
        span: 18858..18864,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 771,
        column: 32,
        span: 18864..18865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 771,
        column: 35,
        span: 18866..18868,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 771,
        column: 36,
        span: 18868..18869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 772,
        column: 7,
        span: 18870..18876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 772,
        column: 8,
        span: 18876..18877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 772,
        column: 9,
        span: 18877..18878,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 772,
        column: 13,
        span: 18879..18882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 772,
        column: 15,
        span: 18883..18884,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 772,
        column: 19,
        span: 18885..18888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 772,
        column: 21,
        span: 18889..18890,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 772,
        column: 24,
        span: 18891..18893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 772,
        column: 26,
        span: 18894..18895,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 772,
        column: 27,
        span: 18895..18896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 772,
        column: 38,
        span: 18896..18907,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 772,
        column: 39,
        span: 18907..18908,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 772,
        column: 40,
        span: 18907..18909,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 772,
        column: 41,
        span: 18909..18910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 773,
        column: 15,
        span: 18911..18925,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 773,
        column: 16,
        span: 18925..18926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 773,
        column: 18,
        span: 18926..18928,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 773,
        column: 19,
        span: 18928..18929,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 773,
        column: 21,
        span: 18930..18931,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield\"",
        ),
        line: 773,
        column: 28,
        span: 18931..18938,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 773,
        column: 29,
        span: 18938..18939,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"in function <\"",
        ),
        line: 773,
        column: 45,
        span: 18940..18955,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 773,
        column: 46,
        span: 18955..18956,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 773,
        column: 47,
        span: 18956..18957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 775,
        column: 2,
        span: 18959..18960,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 775,
        column: 3,
        span: 18960..18961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 775,
        column: 4,
        span: 18961..18962,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 775,
        column: 6,
        span: 18963..18964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 775,
        column: 16,
        span: 18965..18974,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 775,
        column: 17,
        span: 18974..18975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 775,
        column: 23,
        span: 18975..18981,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 775,
        column: 24,
        span: 18981..18982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 775,
        column: 26,
        span: 18982..18984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 775,
        column: 27,
        span: 18984..18985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 776,
        column: 7,
        span: 18986..18992,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 776,
        column: 8,
        span: 18992..18993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 776,
        column: 9,
        span: 18993..18994,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 776,
        column: 13,
        span: 18995..18998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 776,
        column: 15,
        span: 18999..19000,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 776,
        column: 18,
        span: 19001..19003,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 776,
        column: 23,
        span: 19004..19008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 776,
        column: 24,
        span: 19008..19009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 777,
        column: 7,
        span: 19010..19016,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 777,
        column: 8,
        span: 19016..19017,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 777,
        column: 9,
        span: 19017..19018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 777,
        column: 11,
        span: 19018..19020,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 777,
        column: 14,
        span: 19021..19023,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 777,
        column: 16,
        span: 19023..19025,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 777,
        column: 20,
        span: 19026..19029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 777,
        column: 23,
        span: 19030..19032,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 777,
        column: 24,
        span: 19032..19033,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 777,
        column: 25,
        span: 19032..19034,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 777,
        column: 26,
        span: 19034..19035,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 777,
        column: 29,
        span: 19036..19038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 777,
        column: 31,
        span: 19039..19040,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 777,
        column: 32,
        span: 19040..19041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 777,
        column: 43,
        span: 19041..19052,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 777,
        column: 44,
        span: 19052..19053,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 777,
        column: 45,
        span: 19052..19054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 777,
        column: 46,
        span: 19054..19055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 778,
        column: 7,
        span: 19056..19062,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 778,
        column: 8,
        span: 19062..19063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 778,
        column: 13,
        span: 19063..19068,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 778,
        column: 14,
        span: 19068..19069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 778,
        column: 21,
        span: 19069..19076,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 778,
        column: 22,
        span: 19076..19077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 778,
        column: 24,
        span: 19077..19079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 778,
        column: 25,
        span: 19079..19080,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 778,
        column: 28,
        span: 19081..19083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 778,
        column: 32,
        span: 19084..19087,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 778,
        column: 33,
        span: 19087..19088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 779,
        column: 7,
        span: 19089..19095,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 779,
        column: 8,
        span: 19095..19096,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 779,
        column: 11,
        span: 19096..19099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 779,
        column: 17,
        span: 19100..19105,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 779,
        column: 18,
        span: 19105..19106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 779,
        column: 25,
        span: 19106..19113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 779,
        column: 26,
        span: 19113..19114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 779,
        column: 27,
        span: 19114..19115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 779,
        column: 28,
        span: 19115..19116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 780,
        column: 15,
        span: 19117..19131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 780,
        column: 16,
        span: 19131..19132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 780,
        column: 18,
        span: 19132..19134,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 780,
        column: 19,
        span: 19134..19135,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 780,
        column: 21,
        span: 19136..19137,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 780,
        column: 22,
        span: 19137..19138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 780,
        column: 23,
        span: 19138..19139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 784,
        column: 3,
        span: 19178..19180,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 784,
        column: 5,
        span: 19181..19182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 784,
        column: 15,
        span: 19183..19192,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 784,
        column: 16,
        span: 19192..19193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 784,
        column: 22,
        span: 19193..19199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 784,
        column: 23,
        span: 19199..19200,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 784,
        column: 31,
        span: 19200..19208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 784,
        column: 33,
        span: 19209..19210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 784,
        column: 34,
        span: 19210..19211,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 784,
        column: 35,
        span: 19211..19212,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 785,
        column: 8,
        span: 19215..19220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 785,
        column: 10,
        span: 19221..19222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 785,
        column: 11,
        span: 19222..19223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 785,
        column: 13,
        span: 19224..19225,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 785,
        column: 15,
        span: 19226..19227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 785,
        column: 25,
        span: 19228..19237,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 785,
        column: 26,
        span: 19237..19238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 785,
        column: 31,
        span: 19238..19243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 785,
        column: 32,
        span: 19243..19244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 785,
        column: 33,
        span: 19244..19245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 785,
        column: 34,
        span: 19245..19246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 786,
        column: 9,
        span: 19249..19255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 786,
        column: 10,
        span: 19255..19256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 786,
        column: 11,
        span: 19256..19257,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 786,
        column: 14,
        span: 19258..19260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 786,
        column: 18,
        span: 19260..19264,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 786,
        column: 22,
        span: 19265..19268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 786,
        column: 24,
        span: 19269..19270,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 786,
        column: 27,
        span: 19271..19273,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 786,
        column: 31,
        span: 19274..19277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 786,
        column: 32,
        span: 19277..19278,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 787,
        column: 9,
        span: 19281..19287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 787,
        column: 0,
        span: 19288..19289,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 788,
        column: 4,
        span: 19290..19293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 788,
        column: 5,
        span: 19293..19294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 789,
        column: 2,
        span: 19295..19296,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 789,
        column: 3,
        span: 19296..19297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 789,
        column: 5,
        span: 19298..19299,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 789,
        column: 7,
        span: 19300..19301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 789,
        column: 17,
        span: 19302..19311,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 789,
        column: 18,
        span: 19311..19312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 789,
        column: 24,
        span: 19312..19318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 789,
        column: 25,
        span: 19318..19319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 789,
        column: 27,
        span: 19319..19321,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 789,
        column: 28,
        span: 19321..19322,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 789,
        column: 31,
        span: 19322..19325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 789,
        column: 32,
        span: 19325..19326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 790,
        column: 7,
        span: 19327..19333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 790,
        column: 8,
        span: 19333..19334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 790,
        column: 9,
        span: 19334..19335,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 790,
        column: 13,
        span: 19336..19339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 790,
        column: 15,
        span: 19340..19341,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 790,
        column: 18,
        span: 19342..19344,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 790,
        column: 21,
        span: 19344..19347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 790,
        column: 22,
        span: 19347..19348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 791,
        column: 2,
        span: 19349..19350,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 791,
        column: 3,
        span: 19350..19351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 791,
        column: 5,
        span: 19352..19353,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 791,
        column: 7,
        span: 19354..19355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 791,
        column: 13,
        span: 19356..19361,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 791,
        column: 14,
        span: 19361..19362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 791,
        column: 22,
        span: 19362..19370,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 791,
        column: 23,
        span: 19370..19371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 791,
        column: 25,
        span: 19371..19373,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 791,
        column: 26,
        span: 19373..19374,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 791,
        column: 28,
        span: 19374..19376,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 791,
        column: 29,
        span: 19376..19377,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 791,
        column: 31,
        span: 19377..19379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 791,
        column: 32,
        span: 19379..19380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 792,
        column: 7,
        span: 19381..19387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 792,
        column: 8,
        span: 19387..19388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 792,
        column: 9,
        span: 19388..19389,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 792,
        column: 12,
        span: 19390..19392,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 792,
        column: 16,
        span: 19393..19396,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 792,
        column: 20,
        span: 19397..19400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 792,
        column: 22,
        span: 19401..19402,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 792,
        column: 25,
        span: 19403..19405,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 792,
        column: 28,
        span: 19405..19408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 792,
        column: 29,
        span: 19408..19409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 793,
        column: 7,
        span: 19410..19416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 793,
        column: 8,
        span: 19416..19417,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 793,
        column: 11,
        span: 19417..19420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 793,
        column: 17,
        span: 19421..19426,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 793,
        column: 18,
        span: 19426..19427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 793,
        column: 26,
        span: 19427..19435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 793,
        column: 27,
        span: 19435..19436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 793,
        column: 29,
        span: 19436..19438,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 793,
        column: 30,
        span: 19438..19439,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 793,
        column: 32,
        span: 19439..19441,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 793,
        column: 33,
        span: 19441..19442,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 793,
        column: 35,
        span: 19442..19444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 793,
        column: 36,
        span: 19444..19445,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 793,
        column: 37,
        span: 19445..19446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 794,
        column: 7,
        span: 19447..19453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 794,
        column: 8,
        span: 19453..19454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 794,
        column: 13,
        span: 19454..19459,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 794,
        column: 14,
        span: 19459..19460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 794,
        column: 22,
        span: 19460..19468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 794,
        column: 23,
        span: 19468..19469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 794,
        column: 25,
        span: 19469..19471,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 794,
        column: 26,
        span: 19471..19472,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 794,
        column: 28,
        span: 19472..19474,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 794,
        column: 29,
        span: 19474..19475,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 794,
        column: 31,
        span: 19475..19477,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 794,
        column: 32,
        span: 19477..19478,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 794,
        column: 35,
        span: 19478..19481,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 794,
        column: 36,
        span: 19481..19482,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 794,
        column: 39,
        span: 19483..19485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 794,
        column: 43,
        span: 19486..19489,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 794,
        column: 44,
        span: 19489..19490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 795,
        column: 7,
        span: 19491..19497,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 795,
        column: 8,
        span: 19497..19498,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 795,
        column: 11,
        span: 19498..19501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 795,
        column: 17,
        span: 19502..19507,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 795,
        column: 18,
        span: 19507..19508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 795,
        column: 26,
        span: 19508..19516,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 795,
        column: 27,
        span: 19516..19517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 795,
        column: 29,
        span: 19517..19519,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 795,
        column: 30,
        span: 19519..19520,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 795,
        column: 32,
        span: 19520..19522,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 795,
        column: 33,
        span: 19522..19523,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 795,
        column: 35,
        span: 19523..19525,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 795,
        column: 36,
        span: 19525..19526,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 795,
        column: 39,
        span: 19526..19529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 795,
        column: 40,
        span: 19529..19530,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 795,
        column: 41,
        span: 19530..19531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 796,
        column: 2,
        span: 19532..19533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 796,
        column: 3,
        span: 19533..19534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 796,
        column: 5,
        span: 19535..19536,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 796,
        column: 7,
        span: 19537..19538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 796,
        column: 17,
        span: 19539..19548,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 796,
        column: 18,
        span: 19548..19549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 796,
        column: 24,
        span: 19549..19555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 796,
        column: 25,
        span: 19555..19556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 796,
        column: 27,
        span: 19556..19558,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 796,
        column: 28,
        span: 19558..19559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 796,
        column: 32,
        span: 19559..19563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 796,
        column: 33,
        span: 19563..19564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 797,
        column: 7,
        span: 19565..19571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 797,
        column: 8,
        span: 19571..19572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 797,
        column: 9,
        span: 19572..19573,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 797,
        column: 13,
        span: 19574..19577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 797,
        column: 15,
        span: 19578..19579,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 797,
        column: 18,
        span: 19580..19582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 797,
        column: 21,
        span: 19582..19585,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 797,
        column: 22,
        span: 19585..19586,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 802,
        column: 9,
        span: 19654..19662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 802,
        column: 11,
        span: 19663..19664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 802,
        column: 12,
        span: 19664..19665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 802,
        column: 13,
        span: 19665..19666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 802,
        column: 14,
        span: 19666..19667,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 803,
        column: 5,
        span: 19670..19672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 803,
        column: 7,
        span: 19673..19674,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 803,
        column: 10,
        span: 19675..19677,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 803,
        column: 12,
        span: 19677..19679,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 803,
        column: 17,
        span: 19680..19684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 803,
        column: 23,
        span: 19685..19690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 803,
        column: 24,
        span: 19690..19691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 803,
        column: 25,
        span: 19691..19692,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 803,
        column: 26,
        span: 19692..19693,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 804,
        column: 7,
        span: 19696..19700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 804,
        column: 17,
        span: 19701..19710,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 804,
        column: 18,
        span: 19710..19711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 804,
        column: 23,
        span: 19711..19716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 804,
        column: 24,
        span: 19716..19717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 804,
        column: 25,
        span: 19717..19718,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 804,
        column: 26,
        span: 19718..19719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 804,
        column: 28,
        span: 19720..19721,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 804,
        column: 29,
        span: 19721..19722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 804,
        column: 30,
        span: 19722..19723,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 804,
        column: 31,
        span: 19723..19724,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 804,
        column: 32,
        span: 19723..19725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 804,
        column: 33,
        span: 19725..19726,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 805,
        column: 0,
        span: 19729..19732,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 806,
        column: 0,
        span: 19733..19736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 809,
        column: 3,
        span: 19739..19741,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 809,
        column: 5,
        span: 19742..19743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 809,
        column: 15,
        span: 19744..19753,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 809,
        column: 16,
        span: 19753..19754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 809,
        column: 22,
        span: 19754..19760,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 809,
        column: 23,
        span: 19760..19761,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 809,
        column: 31,
        span: 19761..19769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 809,
        column: 33,
        span: 19770..19771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 809,
        column: 34,
        span: 19771..19772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 809,
        column: 35,
        span: 19772..19773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 809,
        column: 37,
        span: 19774..19775,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 809,
        column: 38,
        span: 19775..19776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 809,
        column: 39,
        span: 19776..19777,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 809,
        column: 40,
        span: 19777..19778,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 809,
        column: 44,
        span: 19779..19782,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 809,
        column: 45,
        span: 19782..19783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 810,
        column: 2,
        span: 19784..19785,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 810,
        column: 3,
        span: 19785..19786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 810,
        column: 5,
        span: 19787..19788,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 810,
        column: 7,
        span: 19789..19790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 810,
        column: 17,
        span: 19791..19800,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 810,
        column: 18,
        span: 19800..19801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 810,
        column: 24,
        span: 19801..19807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 810,
        column: 25,
        span: 19807..19808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 810,
        column: 27,
        span: 19808..19810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 810,
        column: 28,
        span: 19810..19811,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 810,
        column: 30,
        span: 19811..19813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 810,
        column: 31,
        span: 19813..19814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 811,
        column: 2,
        span: 19815..19816,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 811,
        column: 4,
        span: 19817..19818,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 811,
        column: 6,
        span: 19819..19820,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'coroutine.yield'\"",
        ),
        line: 811,
        column: 25,
        span: 19820..19839,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 811,
        column: 26,
        span: 19839..19840,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'f'\"",
        ),
        line: 811,
        column: 32,
        span: 19841..19846,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 811,
        column: 33,
        span: 19846..19847,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"in function <\"",
        ),
        line: 811,
        column: 49,
        span: 19848..19863,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 811,
        column: 50,
        span: 19863..19864,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 812,
        column: 6,
        span: 19865..19870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 812,
        column: 16,
        span: 19871..19880,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 812,
        column: 17,
        span: 19880..19881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        line: 812,
        column: 23,
        span: 19881..19887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 812,
        column: 24,
        span: 19887..19888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 812,
        column: 26,
        span: 19888..19890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 812,
        column: 27,
        span: 19890..19891,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 812,
        column: 30,
        span: 19892..19894,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"suspended\"",
        ),
        line: 812,
        column: 42,
        span: 19895..19906,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 812,
        column: 0,
        span: 19907..19909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 813,
        column: 17,
        span: 19912..19926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 813,
        column: 18,
        span: 19926..19927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 813,
        column: 20,
        span: 19927..19929,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 813,
        column: 21,
        span: 19929..19930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 813,
        column: 23,
        span: 19931..19932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 813,
        column: 24,
        span: 19932..19933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 814,
        column: 4,
        span: 19936..19937,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 814,
        column: 5,
        span: 19937..19938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 814,
        column: 7,
        span: 19939..19940,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 814,
        column: 9,
        span: 19941..19942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 814,
        column: 19,
        span: 19943..19952,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 814,
        column: 20,
        span: 19952..19953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 814,
        column: 26,
        span: 19953..19959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 814,
        column: 27,
        span: 19959..19960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 814,
        column: 29,
        span: 19960..19962,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 814,
        column: 30,
        span: 19962..19963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 815,
        column: 8,
        span: 19966..19971,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 815,
        column: 9,
        span: 19971..19972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 815,
        column: 15,
        span: 19972..19978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 815,
        column: 16,
        span: 19978..19979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 815,
        column: 17,
        span: 19979..19980,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 815,
        column: 18,
        span: 19980..19981,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 815,
        column: 20,
        span: 19981..19983,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 815,
        column: 21,
        span: 19983..19984,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'f'\"",
        ),
        line: 815,
        column: 27,
        span: 19985..19990,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 815,
        column: 28,
        span: 19990..19991,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 816,
        column: 0,
        span: 20028..20031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 817,
        column: 2,
        span: 20032..20033,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 817,
        column: 3,
        span: 20033..20034,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 817,
        column: 4,
        span: 20033..20035,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 817,
        column: 5,
        span: 20035..20036,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 817,
        column: 7,
        span: 20037..20038,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'error'\"",
        ),
        line: 817,
        column: 17,
        span: 20039..20048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 818,
        column: 15,
        span: 20049..20063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 818,
        column: 16,
        span: 20063..20064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 818,
        column: 18,
        span: 20064..20066,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 818,
        column: 19,
        span: 20066..20067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 818,
        column: 21,
        span: 20068..20069,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 818,
        column: 22,
        span: 20069..20070,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 824,
        column: 6,
        span: 20189..20194,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 824,
        column: 15,
        span: 20195..20203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 824,
        column: 17,
        span: 20204..20205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 824,
        column: 18,
        span: 20205..20206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 824,
        column: 19,
        span: 20206..20207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 824,
        column: 20,
        span: 20207..20208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 825,
        column: 14,
        span: 20213..20222,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 825,
        column: 15,
        span: 20222..20223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 825,
        column: 20,
        span: 20223..20228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 825,
        column: 21,
        span: 20228..20229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 825,
        column: 22,
        span: 20229..20230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 825,
        column: 23,
        span: 20230..20231,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 826,
        column: 0,
        span: 20232..20235,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 828,
        column: 6,
        span: 20237..20242,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 828,
        column: 15,
        span: 20243..20251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 828,
        column: 17,
        span: 20252..20253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 828,
        column: 19,
        span: 20254..20255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 828,
        column: 20,
        span: 20255..20256,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 828,
        column: 21,
        span: 20256..20257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 829,
        column: 8,
        span: 20260..20265,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 829,
        column: 9,
        span: 20265..20266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 829,
        column: 16,
        span: 20266..20273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 829,
        column: 17,
        span: 20273..20274,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 829,
        column: 25,
        span: 20274..20282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 829,
        column: 27,
        span: 20283..20284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 829,
        column: 28,
        span: 20284..20285,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 829,
        column: 32,
        span: 20286..20289,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 829,
        column: 33,
        span: 20289..20290,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 829,
        column: 37,
        span: 20291..20294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 829,
        column: 38,
        span: 20294..20295,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 830,
        column: 6,
        span: 20298..20301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 830,
        column: 8,
        span: 20302..20303,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 830,
        column: 9,
        span: 20303..20304,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 830,
        column: 10,
        span: 20303..20305,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 830,
        column: 11,
        span: 20305..20306,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 830,
        column: 15,
        span: 20305..20310,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 830,
        column: 0,
        span: 20311..20313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 831,
        column: 6,
        span: 20318..20319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 831,
        column: 7,
        span: 20319..20320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 831,
        column: 8,
        span: 20320..20321,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 831,
        column: 9,
        span: 20321..20322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 831,
        column: 10,
        span: 20322..20323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 831,
        column: 11,
        span: 20323..20324,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 832,
        column: 0,
        span: 20327..20330,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 833,
        column: 0,
        span: 20331..20334,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 835,
        column: 6,
        span: 20336..20341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 835,
        column: 9,
        span: 20342..20344,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 835,
        column: 11,
        span: 20345..20346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 835,
        column: 21,
        span: 20347..20356,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 835,
        column: 22,
        span: 20356..20357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 835,
        column: 26,
        span: 20357..20361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 835,
        column: 27,
        span: 20361..20362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 835,
        column: 28,
        span: 20362..20363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 835,
        column: 29,
        span: 20363..20364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 836,
        column: 3,
        span: 20365..20367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 836,
        column: 4,
        span: 20367..20368,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
        column: 6,
        span: 20367..20370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 836,
        column: 7,
        span: 20370..20371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 837,
        column: 6,
        span: 20372..20377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 837,
        column: 7,
        span: 20377..20378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 837,
        column: 9,
        span: 20378..20380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 837,
        column: 10,
        span: 20380..20381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 838,
        column: 6,
        span: 20382..20387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 838,
        column: 7,
        span: 20387..20388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 838,
        column: 9,
        span: 20388..20390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 838,
        column: 10,
        span: 20390..20391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 841,
        column: 7,
        span: 20394..20400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 841,
        column: 8,
        span: 20400..20401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 841,
        column: 12,
        span: 20401..20405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 841,
        column: 13,
        span: 20405..20406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 841,
        column: 18,
        span: 20406..20411,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 841,
        column: 19,
        span: 20411..20412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getregistry",
        ),
        line: 841,
        column: 30,
        span: 20412..20423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 841,
        column: 31,
        span: 20423..20424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 841,
        column: 32,
        span: 20424..20425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 841,
        column: 33,
        span: 20425..20426,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 841,
        column: 36,
        span: 20427..20429,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 841,
        column: 44,
        span: 20430..20437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 841,
        column: 45,
        span: 20437..20438,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 845,
        column: 6,
        span: 20471..20476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 845,
        column: 8,
        span: 20477..20478,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 845,
        column: 10,
        span: 20479..20480,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 845,
        column: 12,
        span: 20481..20482,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 845,
        column: 13,
        span: 20482..20483,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 846,
        column: 6,
        span: 20484..20489,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 846,
        column: 15,
        span: 20490..20498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 846,
        column: 17,
        span: 20499..20500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 846,
        column: 19,
        span: 20501..20502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 846,
        column: 20,
        span: 20502..20503,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 846,
        column: 21,
        span: 20503..20504,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 847,
        column: 8,
        span: 20507..20512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 847,
        column: 13,
        span: 20513..20517,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 847,
        column: 15,
        span: 20518..20519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 847,
        column: 21,
        span: 20520..20525,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 847,
        column: 22,
        span: 20525..20526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 847,
        column: 29,
        span: 20526..20533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 847,
        column: 30,
        span: 20533..20534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 847,
        column: 31,
        span: 20533..20535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 847,
        column: 32,
        span: 20535..20536,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 847,
        column: 33,
        span: 20536..20537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 848,
        column: 9,
        span: 20540..20546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 848,
        column: 10,
        span: 20546..20547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 848,
        column: 14,
        span: 20547..20551,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 848,
        column: 15,
        span: 20551..20552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 848,
        column: 23,
        span: 20552..20560,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 848,
        column: 26,
        span: 20561..20563,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"metamethod\"",
        ),
        line: 848,
        column: 39,
        span: 20564..20576,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 848,
        column: 40,
        span: 20576..20577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 849,
        column: 4,
        span: 20580..20581,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 849,
        column: 5,
        span: 20581..20582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 849,
        column: 7,
        span: 20582..20584,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 849,
        column: 9,
        span: 20585..20586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 849,
        column: 14,
        span: 20587..20591,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 849,
        column: 15,
        span: 20591..20592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 849,
        column: 0,
        span: 20592..20596,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 850,
        column: 9,
        span: 20599..20605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 850,
        column: 14,
        span: 20606..20610,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 850,
        column: 15,
        span: 20610..20611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 850,
        column: 0,
        span: 20611..20615,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 851,
        column: 0,
        span: 20616..20619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 852,
        column: 13,
        span: 20620..20632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 852,
        column: 14,
        span: 20632..20633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 852,
        column: 15,
        span: 20633..20634,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 852,
        column: 16,
        span: 20634..20635,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 852,
        column: 18,
        span: 20636..20637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 853,
        column: 10,
        span: 20640..20647,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 853,
        column: 12,
        span: 20648..20649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 853,
        column: 14,
        span: 20650..20651,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 853,
        column: 15,
        span: 20651..20652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__add",
        ),
        line: 853,
        column: 21,
        span: 20653..20658,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 853,
        column: 23,
        span: 20659..20660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 853,
        column: 25,
        span: 20661..20662,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 853,
        column: 26,
        span: 20662..20663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__div",
        ),
        line: 853,
        column: 32,
        span: 20664..20669,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 853,
        column: 34,
        span: 20670..20671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 853,
        column: 36,
        span: 20672..20673,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 853,
        column: 37,
        span: 20673..20674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mod",
        ),
        line: 853,
        column: 43,
        span: 20675..20680,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 853,
        column: 45,
        span: 20681..20682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 853,
        column: 47,
        span: 20683..20684,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 853,
        column: 48,
        span: 20684..20685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__concat",
        ),
        line: 853,
        column: 57,
        span: 20686..20694,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 853,
        column: 59,
        span: 20695..20696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 853,
        column: 61,
        span: 20697..20698,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 853,
        column: 62,
        span: 20698..20699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__pow",
        ),
        line: 853,
        column: 68,
        span: 20700..20705,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 853,
        column: 70,
        span: 20706..20707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 853,
        column: 72,
        span: 20708..20709,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 853,
        column: 73,
        span: 20709..20710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mul",
        ),
        line: 854,
        column: 8,
        span: 20713..20718,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 854,
        column: 10,
        span: 20719..20720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 854,
        column: 12,
        span: 20721..20722,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 854,
        column: 13,
        span: 20722..20723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__idiv",
        ),
        line: 854,
        column: 20,
        span: 20724..20730,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 854,
        column: 22,
        span: 20731..20732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 854,
        column: 24,
        span: 20733..20734,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 854,
        column: 25,
        span: 20734..20735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__unm",
        ),
        line: 854,
        column: 31,
        span: 20736..20741,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 854,
        column: 33,
        span: 20742..20743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 854,
        column: 35,
        span: 20744..20745,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 854,
        column: 36,
        span: 20745..20746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 854,
        column: 42,
        span: 20747..20752,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 854,
        column: 44,
        span: 20753..20754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 854,
        column: 46,
        span: 20755..20756,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 854,
        column: 47,
        span: 20756..20757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__sub",
        ),
        line: 854,
        column: 53,
        span: 20758..20763,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 854,
        column: 55,
        span: 20764..20765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 854,
        column: 57,
        span: 20766..20767,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 854,
        column: 58,
        span: 20767..20768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__shl",
        ),
        line: 855,
        column: 8,
        span: 20771..20776,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 855,
        column: 10,
        span: 20777..20778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 855,
        column: 12,
        span: 20779..20780,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 855,
        column: 13,
        span: 20780..20781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__shr",
        ),
        line: 855,
        column: 19,
        span: 20782..20787,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 855,
        column: 21,
        span: 20788..20789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 855,
        column: 23,
        span: 20790..20791,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 855,
        column: 24,
        span: 20791..20792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__bor",
        ),
        line: 855,
        column: 30,
        span: 20793..20798,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 855,
        column: 32,
        span: 20799..20800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 855,
        column: 34,
        span: 20801..20802,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 855,
        column: 35,
        span: 20802..20803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__bxor",
        ),
        line: 855,
        column: 42,
        span: 20804..20810,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 855,
        column: 44,
        span: 20811..20812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 855,
        column: 46,
        span: 20813..20814,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 855,
        column: 47,
        span: 20814..20815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        line: 856,
        column: 7,
        span: 20818..20822,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 856,
        column: 9,
        span: 20823..20824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 856,
        column: 11,
        span: 20825..20826,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 856,
        column: 12,
        span: 20826..20827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__le",
        ),
        line: 856,
        column: 17,
        span: 20828..20832,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 856,
        column: 19,
        span: 20833..20834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 856,
        column: 21,
        span: 20835..20836,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 856,
        column: 22,
        span: 20836..20837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 856,
        column: 27,
        span: 20838..20842,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 856,
        column: 29,
        span: 20843..20844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 856,
        column: 31,
        span: 20845..20846,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 856,
        column: 32,
        span: 20846..20847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__unm",
        ),
        line: 856,
        column: 38,
        span: 20848..20853,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 856,
        column: 40,
        span: 20854..20855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 856,
        column: 42,
        span: 20856..20857,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 856,
        column: 43,
        span: 20857..20858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 856,
        column: 49,
        span: 20859..20864,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 856,
        column: 51,
        span: 20865..20866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 856,
        column: 53,
        span: 20867..20868,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 856,
        column: 54,
        span: 20868..20869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__band",
        ),
        line: 856,
        column: 61,
        span: 20870..20876,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 856,
        column: 63,
        span: 20877..20878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 856,
        column: 65,
        span: 20879..20880,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 856,
        column: 66,
        span: 20880..20881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__bnot",
        ),
        line: 857,
        column: 9,
        span: 20884..20890,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 857,
        column: 11,
        span: 20891..20892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 857,
        column: 13,
        span: 20893..20894,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 857,
        column: 14,
        span: 20894..20895,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 858,
        column: 2,
        span: 20896..20897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 858,
        column: 3,
        span: 20897..20898,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 860,
        column: 6,
        span: 20900..20905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 860,
        column: 8,
        span: 20906..20907,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 860,
        column: 10,
        span: 20908..20909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 860,
        column: 23,
        span: 20910..20922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 860,
        column: 24,
        span: 20922..20923,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 860,
        column: 25,
        span: 20923..20924,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 860,
        column: 26,
        span: 20924..20925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 860,
        column: 27,
        span: 20925..20926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 860,
        column: 40,
        span: 20927..20939,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 860,
        column: 41,
        span: 20939..20940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 860,
        column: 42,
        span: 20940..20941,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 860,
        column: 43,
        span: 20941..20942,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 860,
        column: 44,
        span: 20942..20943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 862,
        column: 7,
        span: 20945..20951,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 862,
        column: 8,
        span: 20951..20952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 862,
        column: 9,
        span: 20952..20953,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 862,
        column: 10,
        span: 20953..20954,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 862,
        column: 11,
        span: 20953..20955,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 862,
        column: 12,
        span: 20955..20956,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 862,
        column: 15,
        span: 20957..20959,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"index\"",
        ),
        line: 862,
        column: 23,
        span: 20960..20967,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 862,
        column: 27,
        span: 20968..20971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 862,
        column: 29,
        span: 20972..20973,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 862,
        column: 30,
        span: 20973..20974,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 862,
        column: 31,
        span: 20973..20975,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 862,
        column: 34,
        span: 20976..20978,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pow\"",
        ),
        line: 862,
        column: 40,
        span: 20979..20984,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 862,
        column: 44,
        span: 20985..20988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 862,
        column: 46,
        span: 20989..20990,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 862,
        column: 48,
        span: 20990..20992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 862,
        column: 49,
        span: 20992..20993,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 862,
        column: 52,
        span: 20994..20996,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat\"",
        ),
        line: 862,
        column: 61,
        span: 20997..21005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 862,
        column: 62,
        span: 21005..21006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 863,
        column: 7,
        span: 21007..21013,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 863,
        column: 8,
        span: 21013..21014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 863,
        column: 9,
        span: 21014..21015,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 863,
        column: 10,
        span: 21015..21016,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 863,
        column: 11,
        span: 21015..21017,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 863,
        column: 14,
        span: 21018..21020,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"div\"",
        ),
        line: 863,
        column: 20,
        span: 21021..21026,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 863,
        column: 24,
        span: 21027..21030,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 863,
        column: 26,
        span: 21030..21032,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 863,
        column: 27,
        span: 21032..21033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 863,
        column: 28,
        span: 21033..21034,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 863,
        column: 31,
        span: 21035..21037,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mod\"",
        ),
        line: 863,
        column: 37,
        span: 21038..21043,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 863,
        column: 38,
        span: 21043..21044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 864,
        column: 7,
        span: 21045..21051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 864,
        column: 8,
        span: 21051..21052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 864,
        column: 9,
        span: 21052..21053,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 864,
        column: 10,
        span: 21053..21054,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 864,
        column: 11,
        span: 21053..21055,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 864,
        column: 14,
        span: 21056..21058,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"add\"",
        ),
        line: 864,
        column: 20,
        span: 21059..21064,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 864,
        column: 24,
        span: 21065..21068,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 864,
        column: 26,
        span: 21068..21070,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 864,
        column: 27,
        span: 21070..21071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 864,
        column: 28,
        span: 21071..21072,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 864,
        column: 31,
        span: 21073..21075,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sub\"",
        ),
        line: 864,
        column: 37,
        span: 21076..21081,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 864,
        column: 41,
        span: 21082..21085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 864,
        column: 43,
        span: 21086..21087,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 864,
        column: 44,
        span: 21087..21088,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 864,
        column: 45,
        span: 21087..21089,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 864,
        column: 48,
        span: 21090..21092,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mul\"",
        ),
        line: 864,
        column: 54,
        span: 21093..21098,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 864,
        column: 0,
        span: 21099..21102,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 865,
        column: 9,
        span: 21110..21111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 865,
        column: 10,
        span: 21111..21112,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 865,
        column: 13,
        span: 21113..21115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unm\"",
        ),
        line: 865,
        column: 19,
        span: 21116..21121,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 865,
        column: 23,
        span: 21122..21125,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 865,
        column: 25,
        span: 21126..21127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 865,
        column: 26,
        span: 21127..21128,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 865,
        column: 29,
        span: 21129..21131,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"len\"",
        ),
        line: 865,
        column: 35,
        span: 21132..21137,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 865,
        column: 39,
        span: 21138..21141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 865,
        column: 41,
        span: 21142..21143,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 865,
        column: 42,
        span: 21143..21144,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 865,
        column: 43,
        span: 21143..21145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 865,
        column: 46,
        span: 21146..21148,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"band\"",
        ),
        line: 865,
        column: 53,
        span: 21149..21155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 865,
        column: 54,
        span: 21155..21156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 866,
        column: 7,
        span: 21157..21163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 866,
        column: 8,
        span: 21163..21164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 866,
        column: 9,
        span: 21164..21165,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 866,
        column: 11,
        span: 21166..21167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        line: 866,
        column: 17,
        span: 21167..21173,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 866,
        column: 20,
        span: 21174..21176,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"add\"",
        ),
        line: 866,
        column: 26,
        span: 21177..21182,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 866,
        column: 30,
        span: 21183..21186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 866,
        column: 32,
        span: 21187..21188,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 866,
        column: 34,
        span: 21189..21190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 866,
        column: 38,
        span: 21190..21194,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 866,
        column: 41,
        span: 21195..21197,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sub\"",
        ),
        line: 866,
        column: 47,
        span: 21198..21203,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 866,
        column: 51,
        span: 21204..21207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 866,
        column: 53,
        span: 21208..21209,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 866,
        column: 55,
        span: 21210..21211,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 866,
        column: 59,
        span: 21211..21215,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 866,
        column: 62,
        span: 21216..21218,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mul\"",
        ),
        line: 866,
        column: 68,
        span: 21219..21224,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 866,
        column: 0,
        span: 21225..21228,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 867,
        column: 9,
        span: 21236..21237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 867,
        column: 10,
        span: 21237..21238,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 867,
        column: 13,
        span: 21239..21241,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unm\"",
        ),
        line: 867,
        column: 19,
        span: 21242..21247,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 867,
        column: 23,
        span: 21248..21251,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 867,
        column: 25,
        span: 21252..21253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 867,
        column: 26,
        span: 21253..21254,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 867,
        column: 29,
        span: 21255..21257,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"len\"",
        ),
        line: 867,
        column: 35,
        span: 21258..21263,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 867,
        column: 39,
        span: 21264..21267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 867,
        column: 41,
        span: 21268..21269,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 867,
        column: 43,
        span: 21270..21271,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 867,
        column: 45,
        span: 21271..21273,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 867,
        column: 48,
        span: 21274..21276,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"band\"",
        ),
        line: 867,
        column: 55,
        span: 21277..21283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 867,
        column: 56,
        span: 21283..21284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 868,
        column: 7,
        span: 21285..21291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 868,
        column: 8,
        span: 21291..21292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 868,
        column: 9,
        span: 21292..21293,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 868,
        column: 10,
        span: 21293..21294,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 868,
        column: 11,
        span: 21293..21295,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 868,
        column: 14,
        span: 21296..21298,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bor\"",
        ),
        line: 868,
        column: 20,
        span: 21299..21304,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 868,
        column: 24,
        span: 21305..21308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 868,
        column: 26,
        span: 21308..21310,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 868,
        column: 27,
        span: 21310..21311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 868,
        column: 28,
        span: 21311..21312,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 868,
        column: 31,
        span: 21313..21315,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bxor\"",
        ),
        line: 868,
        column: 38,
        span: 21316..21322,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 868,
        column: 42,
        span: 21323..21326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 868,
        column: 44,
        span: 21327..21328,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 868,
        column: 46,
        span: 21328..21330,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 868,
        column: 47,
        span: 21329..21331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 868,
        column: 50,
        span: 21332..21334,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"shl\"",
        ),
        line: 868,
        column: 56,
        span: 21335..21340,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 868,
        column: 60,
        span: 21341..21344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 868,
        column: 62,
        span: 21345..21346,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 868,
        column: 64,
        span: 21346..21348,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 868,
        column: 65,
        span: 21347..21349,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 868,
        column: 68,
        span: 21350..21352,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"shr\"",
        ),
        line: 868,
        column: 74,
        span: 21353..21358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 868,
        column: 75,
        span: 21358..21359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 869,
        column: 7,
        span: 21360..21366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 869,
        column: 9,
        span: 21367..21368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 869,
        column: 10,
        span: 21368..21369,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 869,
        column: 12,
        span: 21369..21371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 869,
        column: 13,
        span: 21371..21372,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 869,
        column: 17,
        span: 21373..21376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 869,
        column: 19,
        span: 21377..21378,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 869,
        column: 20,
        span: 21378..21379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 869,
        column: 22,
        span: 21379..21381,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 869,
        column: 25,
        span: 21382..21384,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"eq\"",
        ),
        line: 869,
        column: 30,
        span: 21385..21389,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 869,
        column: 31,
        span: 21389..21390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 870,
        column: 7,
        span: 21391..21397,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 870,
        column: 9,
        span: 21398..21399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 870,
        column: 10,
        span: 21399..21400,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 870,
        column: 12,
        span: 21400..21402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 870,
        column: 13,
        span: 21402..21403,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 870,
        column: 17,
        span: 21404..21407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 870,
        column: 19,
        span: 21408..21409,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 870,
        column: 20,
        span: 21409..21410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 870,
        column: 22,
        span: 21410..21412,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 870,
        column: 25,
        span: 21413..21415,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"le\"",
        ),
        line: 870,
        column: 30,
        span: 21416..21420,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 870,
        column: 31,
        span: 21420..21421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 871,
        column: 7,
        span: 21422..21428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 871,
        column: 9,
        span: 21429..21430,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 871,
        column: 12,
        span: 21430..21433,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 871,
        column: 14,
        span: 21433..21435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 871,
        column: 15,
        span: 21435..21436,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 871,
        column: 19,
        span: 21437..21440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 871,
        column: 21,
        span: 21441..21442,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 871,
        column: 22,
        span: 21442..21443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 871,
        column: 24,
        span: 21443..21445,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 871,
        column: 27,
        span: 21446..21448,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"le\"",
        ),
        line: 871,
        column: 32,
        span: 21449..21453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 871,
        column: 33,
        span: 21453..21454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 872,
        column: 7,
        span: 21455..21461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 872,
        column: 9,
        span: 21462..21463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 872,
        column: 10,
        span: 21463..21464,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 872,
        column: 11,
        span: 21464..21465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 872,
        column: 12,
        span: 21465..21466,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 872,
        column: 16,
        span: 21467..21470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 872,
        column: 18,
        span: 21471..21472,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 872,
        column: 19,
        span: 21472..21473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 872,
        column: 21,
        span: 21473..21475,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 872,
        column: 24,
        span: 21476..21478,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lt\"",
        ),
        line: 872,
        column: 29,
        span: 21479..21483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 872,
        column: 30,
        span: 21483..21484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 873,
        column: 7,
        span: 21485..21491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 873,
        column: 9,
        span: 21492..21493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 873,
        column: 10,
        span: 21493..21494,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 873,
        column: 11,
        span: 21494..21495,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 873,
        column: 13,
        span: 21494..21497,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 873,
        column: 17,
        span: 21498..21501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 873,
        column: 19,
        span: 21502..21503,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 873,
        column: 20,
        span: 21503..21504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 873,
        column: 22,
        span: 21504..21506,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 873,
        column: 25,
        span: 21507..21509,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lt\"",
        ),
        line: 873,
        column: 30,
        span: 21510..21514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 873,
        column: 31,
        span: 21514..21515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 874,
        column: 7,
        span: 21516..21522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 874,
        column: 8,
        span: 21522..21523,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 874,
        column: 9,
        span: 21523..21524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 874,
        column: 10,
        span: 21524..21525,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 874,
        column: 13,
        span: 21526..21528,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bnot\"",
        ),
        line: 874,
        column: 20,
        span: 21529..21535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 874,
        column: 21,
        span: 21535..21536,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 876,
        column: 3,
        span: 21538..21540,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 877,
        column: 8,
        span: 21574..21579,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 877,
        column: 17,
        span: 21580..21588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 877,
        column: 19,
        span: 21589..21590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 877,
        column: 20,
        span: 21590..21591,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 877,
        column: 21,
        span: 21591..21592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 878,
        column: 11,
        span: 21597..21603,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 878,
        column: 12,
        span: 21603..21604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 878,
        column: 17,
        span: 21604..21609,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 878,
        column: 18,
        span: 21609..21610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 878,
        column: 25,
        span: 21610..21617,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 878,
        column: 26,
        span: 21617..21618,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 878,
        column: 27,
        span: 21617..21619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 878,
        column: 28,
        span: 21619..21620,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 878,
        column: 29,
        span: 21620..21621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 878,
        column: 33,
        span: 21621..21625,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 878,
        column: 36,
        span: 21626..21628,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for iterator\"",
        ),
        line: 878,
        column: 51,
        span: 21629..21643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 878,
        column: 52,
        span: 21643..21644,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 879,
        column: 0,
        span: 21647..21650,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 881,
        column: 6,
        span: 21654..21657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 881,
        column: 8,
        span: 21658..21659,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 881,
        column: 11,
        span: 21660..21662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 881,
        column: 13,
        span: 21663..21664,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 881,
        column: 16,
        span: 21665..21667,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 881,
        column: 0,
        span: 21668..21671,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 882,
        column: 0,
        span: 21672..21675,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 885,
        column: 3,
        span: 21678..21680,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 886,
        column: 8,
        span: 21722..21727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 886,
        column: 13,
        span: 21728..21732,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 886,
        column: 15,
        span: 21733..21734,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 886,
        column: 0,
        span: 21735..21738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 889,
        column: 15,
        span: 21790..21802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 889,
        column: 16,
        span: 21802..21803,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 889,
        column: 17,
        span: 21803..21804,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 889,
        column: 18,
        span: 21804..21805,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 889,
        column: 19,
        span: 21805..21806,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 889,
        column: 21,
        span: 21807..21808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 889,
        column: 25,
        span: 21808..21812,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 889,
        column: 27,
        span: 21813..21814,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 889,
        column: 36,
        span: 21815..21823,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 889,
        column: 38,
        span: 21824..21825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 889,
        column: 39,
        span: 21825..21826,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 890,
        column: 10,
        span: 21831..21836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 890,
        column: 12,
        span: 21837..21838,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 890,
        column: 14,
        span: 21839..21840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 890,
        column: 20,
        span: 21841..21846,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 890,
        column: 21,
        span: 21846..21847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 890,
        column: 28,
        span: 21847..21854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 890,
        column: 29,
        span: 21854..21855,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 890,
        column: 30,
        span: 21854..21856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 890,
        column: 31,
        span: 21856..21857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 891,
        column: 11,
        span: 21892..21898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 891,
        column: 12,
        span: 21898..21899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 891,
        column: 13,
        span: 21899..21900,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 891,
        column: 14,
        span: 21900..21901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 891,
        column: 22,
        span: 21901..21909,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 891,
        column: 25,
        span: 21910..21912,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"metamethod\"",
        ),
        line: 891,
        column: 38,
        span: 21913..21925,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 891,
        column: 39,
        span: 21925..21926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 892,
        column: 9,
        span: 21931..21935,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 892,
        column: 11,
        span: 21936..21937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 892,
        column: 13,
        span: 21938..21939,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 892,
        column: 14,
        span: 21939..21940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 892,
        column: 0,
        span: 21940..21944,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 893,
        column: 6,
        span: 21947..21950,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 893,
        column: 7,
        span: 21950..21951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 893,
        column: 8,
        span: 21951..21952,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 896,
        column: 9,
        span: 22015..22021,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 896,
        column: 15,
        span: 22022..22027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 896,
        column: 17,
        span: 22028..22029,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 896,
        column: 19,
        span: 22030..22031,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 896,
        column: 21,
        span: 22032..22033,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 896,
        column: 22,
        span: 22033..22034,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 896,
        column: 28,
        span: 22035..22040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 896,
        column: 0,
        span: 22041..22045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 897,
        column: 9,
        span: 22048..22054,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 897,
        column: 10,
        span: 22054..22055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 897,
        column: 14,
        span: 22055..22059,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 897,
        column: 17,
        span: 22060..22062,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__gc\"",
        ),
        line: 897,
        column: 24,
        span: 22063..22069,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 897,
        column: 25,
        span: 22069..22070,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 898,
        column: 0,
        span: 22071..22074,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 901,
        column: 0,
        span: 22077..22079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 902,
        column: 8,
        span: 22082..22087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 902,
        column: 9,
        span: 22087..22088,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing traceback sizes\"",
        ),
        line: 902,
        column: 34,
        span: 22088..22113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 902,
        column: 35,
        span: 22113..22114,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 904,
        column: 8,
        span: 22118..22123,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 904,
        column: 17,
        span: 22124..22132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "countlines",
        ),
        line: 904,
        column: 28,
        span: 22133..22143,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 904,
        column: 30,
        span: 22144..22145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 904,
        column: 31,
        span: 22145..22146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 904,
        column: 32,
        span: 22146..22147,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 905,
        column: 11,
        span: 22152..22158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 905,
        column: 18,
        span: 22159..22165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 905,
        column: 19,
        span: 22165..22166,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 905,
        column: 20,
        span: 22165..22167,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 905,
        column: 21,
        span: 22167..22168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 905,
        column: 28,
        span: 22169..22175,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 905,
        column: 29,
        span: 22175..22176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 905,
        column: 33,
        span: 22176..22180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 905,
        column: 34,
        span: 22180..22181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 905,
        column: 35,
        span: 22181..22182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 905,
        column: 36,
        span: 22182..22183,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 905,
        column: 41,
        span: 22184..22188,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 905,
        column: 42,
        span: 22188..22189,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 905,
        column: 45,
        span: 22190..22192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 905,
        column: 46,
        span: 22192..22193,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 905,
        column: 47,
        span: 22193..22194,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 906,
        column: 0,
        span: 22197..22200,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 908,
        column: 8,
        span: 22204..22209,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 908,
        column: 17,
        span: 22210..22218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 908,
        column: 22,
        span: 22219..22223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 908,
        column: 24,
        span: 22224..22225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lvl",
        ),
        line: 908,
        column: 27,
        span: 22225..22228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 908,
        column: 28,
        span: 22228..22229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 908,
        column: 30,
        span: 22230..22231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 908,
        column: 31,
        span: 22231..22232,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 909,
        column: 7,
        span: 22237..22239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lvl",
        ),
        line: 909,
        column: 11,
        span: 22240..22243,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 909,
        column: 14,
        span: 22244..22246,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 909,
        column: 16,
        span: 22246..22248,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 909,
        column: 0,
        span: 22249..22253,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 910,
        column: 13,
        span: 22260..22266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 910,
        column: 15,
        span: 22267..22268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 910,
        column: 20,
        span: 22268..22273,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 910,
        column: 21,
        span: 22273..22274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 910,
        column: 30,
        span: 22274..22283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 910,
        column: 31,
        span: 22283..22284,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"message\"",
        ),
        line: 910,
        column: 40,
        span: 22284..22293,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 910,
        column: 41,
        span: 22293..22294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 910,
        column: 43,
        span: 22295..22296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 910,
        column: 44,
        span: 22296..22297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 910,
        column: 45,
        span: 22297..22298,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 911,
        column: 0,
        span: 22303..22307,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 912,
        column: 13,
        span: 22314..22320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 912,
        column: 15,
        span: 22321..22322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 912,
        column: 19,
        span: 22322..22326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 912,
        column: 20,
        span: 22326..22327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lvl",
        ),
        line: 912,
        column: 23,
        span: 22327..22330,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 912,
        column: 24,
        span: 22330..22331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 912,
        column: 25,
        span: 22330..22332,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 912,
        column: 26,
        span: 22332..22333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 912,
        column: 28,
        span: 22334..22335,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 912,
        column: 29,
        span: 22335..22336,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 912,
        column: 30,
        span: 22336..22337,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 913,
        column: 0,
        span: 22342..22345,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 914,
        column: 0,
        span: 22348..22351,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 916,
        column: 8,
        span: 22355..22360,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 916,
        column: 17,
        span: 22361..22369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkdeep",
        ),
        line: 916,
        column: 27,
        span: 22370..22379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 916,
        column: 29,
        span: 22380..22381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        line: 916,
        column: 34,
        span: 22381..22386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 916,
        column: 35,
        span: 22386..22387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 916,
        column: 41,
        span: 22388..22393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 916,
        column: 42,
        span: 22393..22394,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 917,
        column: 10,
        span: 22399..22404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 917,
        column: 12,
        span: 22405..22406,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 917,
        column: 14,
        span: 22407..22408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 917,
        column: 19,
        span: 22409..22413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 917,
        column: 20,
        span: 22413..22414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        line: 917,
        column: 25,
        span: 22414..22419,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 917,
        column: 26,
        span: 22419..22420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 917,
        column: 32,
        span: 22421..22426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 917,
        column: 33,
        span: 22426..22427,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 918,
        column: 10,
        span: 22432..22437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 918,
        column: 15,
        span: 22438..22442,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 918,
        column: 17,
        span: 22443..22444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 918,
        column: 24,
        span: 22445..22451,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 918,
        column: 25,
        span: 22451..22452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 918,
        column: 30,
        span: 22452..22457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 918,
        column: 31,
        span: 22457..22458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 918,
        column: 32,
        span: 22458..22459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 918,
        column: 33,
        span: 22459..22460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^message\\nstack traceback:\\n(.*)$\"",
        ),
        line: 918,
        column: 69,
        span: 22461..22496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 918,
        column: 70,
        span: 22496..22497,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 919,
        column: 10,
        span: 22502..22507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 919,
        column: 13,
        span: 22508..22510,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 919,
        column: 15,
        span: 22511..22512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "countlines",
        ),
        line: 919,
        column: 26,
        span: 22513..22523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 919,
        column: 27,
        span: 22523..22524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 919,
        column: 31,
        span: 22524..22528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 919,
        column: 32,
        span: 22528..22529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 921,
        column: 11,
        span: 22598..22604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 921,
        column: 12,
        span: 22604..22605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 921,
        column: 14,
        span: 22605..22607,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 921,
        column: 17,
        span: 22608..22610,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
        column: 20,
        span: 22610..22613,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 921,
        column: 22,
        span: 22614..22615,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
        column: 25,
        span: 22615..22618,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 921,
        column: 27,
        span: 22619..22620,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
        column: 29,
        span: 22620..22622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 921,
        column: 30,
        span: 22622..22623,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 922,
        column: 10,
        span: 22628..22633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "brk",
        ),
        line: 922,
        column: 14,
        span: 22634..22637,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 922,
        column: 16,
        span: 22638..22639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 922,
        column: 23,
        span: 22640..22646,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 922,
        column: 24,
        span: 22646..22647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 922,
        column: 28,
        span: 22647..22651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 922,
        column: 29,
        span: 22651..22652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 922,
        column: 33,
        span: 22652..22656,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 922,
        column: 34,
        span: 22656..22657,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.%.%.\"",
        ),
        line: 922,
        column: 43,
        span: 22658..22666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 922,
        column: 44,
        span: 22666..22667,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 923,
        column: 7,
        span: 22672..22674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "brk",
        ),
        line: 923,
        column: 11,
        span: 22675..22678,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 923,
        column: 16,
        span: 22679..22683,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 924,
        column: 12,
        span: 22720..22725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest1",
        ),
        line: 924,
        column: 18,
        span: 22726..22731,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 924,
        column: 20,
        span: 22732..22733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 924,
        column: 27,
        span: 22734..22740,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 924,
        column: 28,
        span: 22740..22741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 924,
        column: 31,
        span: 22741..22744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 924,
        column: 32,
        span: 22744..22745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 924,
        column: 36,
        span: 22745..22749,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 924,
        column: 37,
        span: 22749..22750,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 924,
        column: 39,
        span: 22750..22752,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 924,
        column: 40,
        span: 22752..22753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "brk",
        ),
        line: 924,
        column: 44,
        span: 22754..22757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 924,
        column: 45,
        span: 22757..22758,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 925,
        column: 12,
        span: 22765..22770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest2",
        ),
        line: 925,
        column: 18,
        span: 22771..22776,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 925,
        column: 20,
        span: 22777..22778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 925,
        column: 27,
        span: 22779..22785,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 925,
        column: 28,
        span: 22785..22786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 925,
        column: 31,
        span: 22786..22789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 925,
        column: 32,
        span: 22789..22790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 925,
        column: 36,
        span: 22790..22794,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 925,
        column: 37,
        span: 22794..22795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "brk",
        ),
        line: 925,
        column: 41,
        span: 22796..22799,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 925,
        column: 42,
        span: 22799..22800,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 925,
        column: 44,
        span: 22801..22802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 925,
        column: 48,
        span: 22802..22806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 925,
        column: 49,
        span: 22806..22807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 926,
        column: 13,
        span: 22814..22820,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 926,
        column: 14,
        span: 22820..22821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "countlines",
        ),
        line: 926,
        column: 24,
        span: 22821..22831,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 926,
        column: 25,
        span: 22831..22832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest1",
        ),
        line: 926,
        column: 30,
        span: 22832..22837,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 926,
        column: 31,
        span: 22837..22838,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 926,
        column: 34,
        span: 22839..22841,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 926,
        column: 37,
        span: 22841..22844,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 926,
        column: 41,
        span: 22845..22848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "countlines",
        ),
        line: 926,
        column: 52,
        span: 22849..22859,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 926,
        column: 53,
        span: 22859..22860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest2",
        ),
        line: 926,
        column: 58,
        span: 22860..22865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 926,
        column: 59,
        span: 22865..22866,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 926,
        column: 62,
        span: 22867..22869,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 926,
        column: 65,
        span: 22869..22872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 926,
        column: 66,
        span: 22872..22873,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 927,
        column: 0,
        span: 22878..22882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 928,
        column: 13,
        span: 22889..22895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 928,
        column: 14,
        span: 22895..22896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 928,
        column: 16,
        span: 22896..22898,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 928,
        column: 19,
        span: 22899..22901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        line: 928,
        column: 25,
        span: 22902..22907,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 928,
        column: 27,
        span: 22908..22909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 928,
        column: 33,
        span: 22910..22915,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 928,
        column: 35,
        span: 22916..22917,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 928,
        column: 37,
        span: 22917..22919,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 928,
        column: 38,
        span: 22919..22920,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 929,
        column: 0,
        span: 22925..22928,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 930,
        column: 0,
        span: 22931..22934,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 932,
        column: 6,
        span: 22938..22941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 932,
        column: 8,
        span: 22942..22943,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 932,
        column: 10,
        span: 22944..22945,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 932,
        column: 12,
        span: 22945..22947,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 932,
        column: 13,
        span: 22947..22948,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "51",
                    after_decimal: "",
                },
            ),
        ),
        line: 932,
        column: 16,
        span: 22948..22951,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 932,
        column: 17,
        span: 22951..22952,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 932,
        column: 20,
        span: 22952..22955,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 932,
        column: 0,
        span: 22956..22958,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 933,
        column: 8,
        span: 22963..22966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 933,
        column: 10,
        span: 22967..22968,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 933,
        column: 12,
        span: 22969..22970,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 933,
        column: 14,
        span: 22970..22972,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 933,
        column: 15,
        span: 22972..22973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 933,
        column: 17,
        span: 22974..22975,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 933,
        column: 0,
        span: 22976..22978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 935,
        column: 16,
        span: 23049..23058,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 935,
        column: 17,
        span: 23058..23059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 935,
        column: 21,
        span: 23059..23063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 935,
        column: 22,
        span: 23063..23064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkdeep",
        ),
        line: 935,
        column: 31,
        span: 23064..23073,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 935,
        column: 32,
        span: 23073..23074,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 935,
        column: 33,
        span: 23074..23075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 935,
        column: 34,
        span: 23075..23076,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 935,
        column: 35,
        span: 23076..23077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 935,
        column: 37,
        span: 23078..23079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 935,
        column: 38,
        span: 23079..23080,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 936,
        column: 0,
        span: 23085..23088,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 937,
        column: 0,
        span: 23091..23094,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 939,
        column: 0,
        span: 23096..23099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 942,
        column: 6,
        span: 23102..23107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 942,
        column: 7,
        span: 23107..23108,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing debug functions on chunk without debug info\"",
        ),
        line: 942,
        column: 60,
        span: 23108..23161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 942,
        column: 61,
        span: 23161..23162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 943,
        column: 5,
        span: 23163..23167,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 943,
        column: 7,
        span: 23168..23169,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[-- program to be loaded without debug information (strip)\nlocal debug = require'debug'\nlocal a = 12  -- a local variable\n\nlocal n, v = debug.getlocal(1, 1)\nassert(n == \"(temporary)\" and v == debug)   -- unkown name but known value\nn, v = debug.getlocal(1, 2)\nassert(n == \"(temporary)\" and v == 12)   -- unkown name but known value\n\n-- a function with an upvalue\nlocal f = function () local x; return a end\nn, v = debug.getupvalue(f, 1)\nassert(n == \"(no name)\" and v == 12)\nassert(debug.setupvalue(f, 1, 13) == \"(no name)\")\nassert(a == 13)\n\nlocal t = debug.getinfo(f)\nassert(t.name == nil and t.linedefined > 0 and\n       t.lastlinedefined == t.linedefined and\n       t.short_src == \"?\")\nassert(debug.getinfo(1).currentline == -1)\n\nt = debug.getinfo(f, \"L\").activelines\nassert(next(t) == nil)    -- active lines are empty\n\n-- dump/load a function without debug info\nf = load(string.dump(f))\n\nt = debug.getinfo(f)\nassert(t.name == nil and t.linedefined > 0 and\n       t.lastlinedefined == t.linedefined and\n       t.short_src == \"?\")\nassert(debug.getinfo(1).currentline == -1)\n\nreturn a\n]]",
        ),
        line: 978,
        column: 3,
        span: 23170..24259,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 982,
        column: 6,
        span: 24296..24301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 982,
        column: 8,
        span: 24302..24303,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 982,
        column: 10,
        span: 24304..24305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 982,
        column: 17,
        span: 24306..24312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 982,
        column: 18,
        span: 24312..24313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 982,
        column: 22,
        span: 24313..24317,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 982,
        column: 23,
        span: 24317..24318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 982,
        column: 29,
        span: 24318..24324,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 982,
        column: 30,
        span: 24324..24325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 982,
        column: 34,
        span: 24325..24329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 982,
        column: 35,
        span: 24329..24330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 982,
        column: 39,
        span: 24330..24334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 982,
        column: 40,
        span: 24334..24335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 982,
        column: 44,
        span: 24335..24339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 982,
        column: 45,
        span: 24339..24340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 982,
        column: 46,
        span: 24340..24341,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 982,
        column: 51,
        span: 24342..24346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 982,
        column: 52,
        span: 24346..24347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 982,
        column: 53,
        span: 24347..24348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 982,
        column: 54,
        span: 24348..24349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 984,
        column: 7,
        span: 24351..24357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 984,
        column: 8,
        span: 24357..24358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 984,
        column: 9,
        span: 24358..24359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 984,
        column: 10,
        span: 24359..24360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 984,
        column: 11,
        span: 24360..24361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 984,
        column: 14,
        span: 24362..24364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 984,
        column: 17,
        span: 24364..24367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 984,
        column: 18,
        span: 24367..24368,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 986,
        column: 3,
        span: 24370..24372,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 987,
        column: 8,
        span: 24422..24427,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 987,
        column: 17,
        span: 24428..24436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 987,
        column: 21,
        span: 24437..24440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 987,
        column: 23,
        span: 24441..24442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 987,
        column: 24,
        span: 24442..24443,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 988,
        column: 10,
        span: 24448..24453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 988,
        column: 12,
        span: 24454..24455,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 988,
        column: 14,
        span: 24456..24457,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 988,
        column: 0,
        span: 24457..24459,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 989,
        column: 10,
        span: 24464..24469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 989,
        column: 12,
        span: 24470..24471,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 989,
        column: 14,
        span: 24472..24473,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 989,
        column: 0,
        span: 24473..24475,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 990,
        column: 11,
        span: 24480..24486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 990,
        column: 0,
        span: 24487..24488,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 991,
        column: 0,
        span: 24491..24494,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 993,
        column: 8,
        span: 24498..24503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 993,
        column: 10,
        span: 24504..24505,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 993,
        column: 12,
        span: 24506..24507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 993,
        column: 17,
        span: 24508..24512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 993,
        column: 18,
        span: 24512..24513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 993,
        column: 24,
        span: 24513..24519,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 993,
        column: 25,
        span: 24519..24520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 993,
        column: 29,
        span: 24520..24524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 993,
        column: 30,
        span: 24524..24525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 993,
        column: 33,
        span: 24525..24528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 993,
        column: 34,
        span: 24528..24529,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 993,
        column: 39,
        span: 24530..24534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 993,
        column: 40,
        span: 24534..24535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 993,
        column: 41,
        span: 24535..24536,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 994,
        column: 8,
        span: 24539..24544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 994,
        column: 13,
        span: 24545..24549,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 994,
        column: 15,
        span: 24550..24551,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 994,
        column: 0,
        span: 24552..24556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 995,
        column: 8,
        span: 24559..24564,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 995,
        column: 9,
        span: 24564..24565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 995,
        column: 16,
        span: 24565..24572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 995,
        column: 17,
        span: 24572..24573,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 995,
        column: 25,
        span: 24573..24581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 995,
        column: 27,
        span: 24582..24583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 995,
        column: 28,
        span: 24583..24584,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 995,
        column: 29,
        span: 24584..24585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 995,
        column: 31,
        span: 24586..24587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 995,
        column: 32,
        span: 24587..24588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 996,
        column: 11,
        span: 24593..24599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 996,
        column: 12,
        span: 24599..24600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 996,
        column: 13,
        span: 24600..24601,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 996,
        column: 16,
        span: 24602..24604,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        line: 996,
        column: 23,
        span: 24605..24611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 996,
        column: 24,
        span: 24611..24612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 997,
        column: 9,
        span: 24617..24621,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 997,
        column: 11,
        span: 24622..24623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 997,
        column: 0,
        span: 24624..24625,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 998,
        column: 6,
        span: 24628..24631,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 998,
        column: 7,
        span: 24631..24632,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 998,
        column: 11,
        span: 24633..24636,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 998,
        column: 12,
        span: 24636..24637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 999,
        column: 9,
        span: 24640..24646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 999,
        column: 10,
        span: 24646..24647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 999,
        column: 11,
        span: 24647..24648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 999,
        column: 12,
        span: 24648..24649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 999,
        column: 13,
        span: 24649..24650,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 999,
        column: 16,
        span: 24651..24653,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 999,
        column: 18,
        span: 24653..24655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 999,
        column: 19,
        span: 24655..24656,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 999,
        column: 20,
        span: 24656..24657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 999,
        column: 26,
        span: 24658..24663,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 999,
        column: 27,
        span: 24663..24664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 999,
        column: 34,
        span: 24664..24671,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 999,
        column: 35,
        span: 24671..24672,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 999,
        column: 38,
        span: 24672..24675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 999,
        column: 39,
        span: 24675..24676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1000,
        column: 9,
        span: 24679..24685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1000,
        column: 10,
        span: 24685..24686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 1000,
        column: 14,
        span: 24686..24690,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1000,
        column: 17,
        span: 24691..24693,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 1000,
        column: 21,
        span: 24694..24697,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1000,
        column: 22,
        span: 24697..24698,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 1001,
        column: 0,
        span: 24754..24757,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 1003,
        column: 3,
        span: 24759..24761,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1004,
        column: 8,
        span: 24804..24809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 1004,
        column: 13,
        span: 24810..24814,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1004,
        column: 15,
        span: 24815..24816,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    return function (x)\n      return function (y) \n        return x + y\n      end\n    end\n  ]]",
        ),
        line: 1010,
        column: 5,
        span: 24817..24914,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1011,
        column: 8,
        span: 24917..24922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 1011,
        column: 13,
        span: 24923..24927,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1011,
        column: 15,
        span: 24928..24929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 1011,
        column: 22,
        span: 24930..24936,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1011,
        column: 23,
        span: 24936..24937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 1011,
        column: 26,
        span: 24937..24940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1011,
        column: 27,
        span: 24940..24941,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 1011,
        column: 30,
        span: 24941..24944,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1011,
        column: 31,
        span: 24944..24945,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 1011,
        column: 36,
        span: 24945..24950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1011,
        column: 37,
        span: 24950..24951,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1012,
        column: 8,
        span: 24954..24959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 1012,
        column: 10,
        span: 24960..24961,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1012,
        column: 12,
        span: 24962..24963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1012,
        column: 19,
        span: 24964..24970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1012,
        column: 20,
        span: 24970..24971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 1012,
        column: 24,
        span: 24971..24975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1012,
        column: 25,
        span: 24975..24976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 1012,
        column: 29,
        span: 24976..24980,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1012,
        column: 30,
        span: 24980..24981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 1012,
        column: 35,
        span: 24982..24986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1012,
        column: 36,
        span: 24986..24987,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1012,
        column: 37,
        span: 24987..24988,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1014,
        column: 8,
        span: 25046..25051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 1014,
        column: 10,
        span: 25052..25053,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1014,
        column: 12,
        span: 25054..25055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 1014,
        column: 19,
        span: 25056..25062,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1014,
        column: 20,
        span: 25062..25063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 1014,
        column: 24,
        span: 25063..25067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1014,
        column: 25,
        span: 25067..25068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 1014,
        column: 26,
        span: 25068..25069,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1014,
        column: 27,
        span: 25069..25070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1015,
        column: 9,
        span: 25073..25079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1015,
        column: 10,
        span: 25079..25080,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 1015,
        column: 11,
        span: 25080..25081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 1015,
        column: 12,
        span: 25081..25082,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 1015,
        column: 14,
        span: 25083..25084,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 1015,
        column: 19,
        span: 25084..25089,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 1015,
        column: 23,
        span: 25090..25093,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 1015,
        column: 25,
        span: 25094..25095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 1015,
        column: 26,
        span: 25095..25096,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 1015,
        column: 28,
        span: 25097..25098,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 1015,
        column: 33,
        span: 25098..25103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1015,
        column: 34,
        span: 25103..25104,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1016,
        column: 8,
        span: 25146..25151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 1016,
        column: 10,
        span: 25152..25153,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1016,
        column: 12,
        span: 25154..25155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1016,
        column: 19,
        span: 25156..25162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1016,
        column: 20,
        span: 25162..25163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 1016,
        column: 24,
        span: 25163..25167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1016,
        column: 25,
        span: 25167..25168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 1016,
        column: 26,
        span: 25168..25169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1016,
        column: 27,
        span: 25169..25170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1016,
        column: 28,
        span: 25170..25171,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1017,
        column: 8,
        span: 25174..25179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 1017,
        column: 10,
        span: 25180..25181,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1017,
        column: 12,
        span: 25182..25183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 1017,
        column: 14,
        span: 25184..25185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1017,
        column: 15,
        span: 25185..25186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1017,
        column: 16,
        span: 25186..25187,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1018,
        column: 8,
        span: 25190..25195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 1018,
        column: 10,
        span: 25196..25197,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1018,
        column: 12,
        span: 25198..25199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 1018,
        column: 14,
        span: 25200..25201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1018,
        column: 15,
        span: 25201..25202,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 1018,
        column: 16,
        span: 25201..25203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1018,
        column: 17,
        span: 25203..25204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1019,
        column: 9,
        span: 25207..25213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1019,
        column: 10,
        span: 25213..25214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 1019,
        column: 11,
        span: 25214..25215,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1019,
        column: 12,
        span: 25215..25216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 1019,
        column: 13,
        span: 25215..25217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1019,
        column: 14,
        span: 25217..25218,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1019,
        column: 17,
        span: 25219..25221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 1019,
        column: 19,
        span: 25221..25223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1019,
        column: 20,
        span: 25223..25224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1020,
        column: 9,
        span: 25227..25233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1020,
        column: 10,
        span: 25233..25234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 1020,
        column: 15,
        span: 25234..25239,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1020,
        column: 16,
        span: 25239..25240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 1020,
        column: 23,
        span: 25240..25247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1020,
        column: 24,
        span: 25247..25248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 1020,
        column: 25,
        span: 25248..25249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1020,
        column: 26,
        span: 25249..25250,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1020,
        column: 27,
        span: 25250..25251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 1020,
        column: 33,
        span: 25251..25257,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1020,
        column: 36,
        span: 25258..25260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 1020,
        column: 41,
        span: 25261..25265,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 1020,
        column: 45,
        span: 25266..25269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 1021,
        column: 15,
        span: 25312..25317,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1021,
        column: 16,
        span: 25317..25318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 1021,
        column: 23,
        span: 25318..25325,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1021,
        column: 24,
        span: 25325..25326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 1021,
        column: 25,
        span: 25326..25327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1021,
        column: 26,
        span: 25327..25328,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1021,
        column: 27,
        span: 25328..25329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 1021,
        column: 33,
        span: 25329..25335,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1021,
        column: 36,
        span: 25336..25338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 1021,
        column: 41,
        span: 25339..25343,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 1021,
        column: 45,
        span: 25344..25347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 1022,
        column: 15,
        span: 25358..25363,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1022,
        column: 16,
        span: 25363..25364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 1022,
        column: 23,
        span: 25364..25371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1022,
        column: 24,
        span: 25371..25372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 1022,
        column: 25,
        span: 25372..25373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1022,
        column: 26,
        span: 25373..25374,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1022,
        column: 27,
        span: 25374..25375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 1022,
        column: 33,
        span: 25375..25381,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1022,
        column: 36,
        span: 25382..25384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 1022,
        column: 41,
        span: 25385..25389,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1022,
        column: 42,
        span: 25389..25390,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1024,
        column: 8,
        span: 25424..25429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 1024,
        column: 10,
        span: 25430..25431,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1024,
        column: 12,
        span: 25432..25433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 1024,
        column: 19,
        span: 25434..25440,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1024,
        column: 20,
        span: 25440..25441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 1024,
        column: 24,
        span: 25441..25445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1024,
        column: 25,
        span: 25445..25446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 1024,
        column: 26,
        span: 25446..25447,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1024,
        column: 27,
        span: 25447..25448,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 1024,
        column: 32,
        span: 25449..25453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1024,
        column: 33,
        span: 25453..25454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1025,
        column: 9,
        span: 25457..25463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1025,
        column: 10,
        span: 25463..25464,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 1025,
        column: 11,
        span: 25464..25465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 1025,
        column: 12,
        span: 25465..25466,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 1025,
        column: 14,
        span: 25467..25468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 1025,
        column: 18,
        span: 25468..25472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1025,
        column: 19,
        span: 25472..25473,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1026,
        column: 8,
        span: 25501..25506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 1026,
        column: 10,
        span: 25507..25508,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1026,
        column: 12,
        span: 25509..25510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1026,
        column: 19,
        span: 25511..25517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1026,
        column: 20,
        span: 25517..25518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 1026,
        column: 24,
        span: 25518..25522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1026,
        column: 25,
        span: 25522..25523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 1026,
        column: 26,
        span: 25523..25524,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1026,
        column: 27,
        span: 25524..25525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1026,
        column: 28,
        span: 25525..25526,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1027,
        column: 8,
        span: 25529..25534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 1027,
        column: 10,
        span: 25535..25536,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1027,
        column: 12,
        span: 25537..25538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 1027,
        column: 14,
        span: 25539..25540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1027,
        column: 15,
        span: 25540..25541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1027,
        column: 16,
        span: 25541..25542,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1028,
        column: 8,
        span: 25545..25550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 1028,
        column: 10,
        span: 25551..25552,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1028,
        column: 12,
        span: 25553..25554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 1028,
        column: 14,
        span: 25555..25556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1028,
        column: 15,
        span: 25556..25557,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 1028,
        column: 17,
        span: 25556..25559,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1028,
        column: 18,
        span: 25559..25560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1029,
        column: 9,
        span: 25563..25569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1029,
        column: 10,
        span: 25569..25570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 1029,
        column: 11,
        span: 25570..25571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1029,
        column: 12,
        span: 25571..25572,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 1029,
        column: 14,
        span: 25571..25574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1029,
        column: 15,
        span: 25574..25575,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1029,
        column: 18,
        span: 25576..25578,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 1029,
        column: 21,
        span: 25578..25581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1029,
        column: 22,
        span: 25581..25582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1030,
        column: 9,
        span: 25585..25591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1030,
        column: 10,
        span: 25591..25592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 1030,
        column: 15,
        span: 25592..25597,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1030,
        column: 16,
        span: 25597..25598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 1030,
        column: 23,
        span: 25598..25605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1030,
        column: 24,
        span: 25605..25606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 1030,
        column: 25,
        span: 25606..25607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1030,
        column: 26,
        span: 25607..25608,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1030,
        column: 27,
        span: 25608..25609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 1030,
        column: 33,
        span: 25609..25615,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1030,
        column: 36,
        span: 25616..25618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'=?'",
        ),
        line: 1030,
        column: 41,
        span: 25619..25623,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 1030,
        column: 45,
        span: 25624..25627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 1031,
        column: 15,
        span: 25667..25672,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1031,
        column: 16,
        span: 25672..25673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 1031,
        column: 23,
        span: 25673..25680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1031,
        column: 24,
        span: 25680..25681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 1031,
        column: 25,
        span: 25681..25682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1031,
        column: 26,
        span: 25682..25683,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1031,
        column: 27,
        span: 25683..25684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 1031,
        column: 33,
        span: 25684..25690,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1031,
        column: 36,
        span: 25691..25693,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'=?'",
        ),
        line: 1031,
        column: 41,
        span: 25694..25698,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 1031,
        column: 45,
        span: 25699..25702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 1032,
        column: 15,
        span: 25713..25718,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1032,
        column: 16,
        span: 25718..25719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 1032,
        column: 23,
        span: 25719..25726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1032,
        column: 24,
        span: 25726..25727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 1032,
        column: 25,
        span: 25727..25728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1032,
        column: 26,
        span: 25728..25729,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1032,
        column: 27,
        span: 25729..25730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 1032,
        column: 33,
        span: 25730..25736,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1032,
        column: 36,
        span: 25737..25739,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'=?'",
        ),
        line: 1032,
        column: 41,
        span: 25740..25744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1032,
        column: 42,
        span: 25744..25745,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 1033,
        column: 0,
        span: 25746..25749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1035,
        column: 6,
        span: 25751..25756,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        line: 1035,
        column: 10,
        span: 25756..25760,
    },
]
