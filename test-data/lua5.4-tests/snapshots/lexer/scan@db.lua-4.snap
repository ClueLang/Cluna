---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/db.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 6,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 8,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 8,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 8,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 8,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 8,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 10,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing debug library and debug information\"",
        ),
        line: 10,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 12,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 13,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 13,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 13,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 16,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testline",
        ),
        line: 18,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 18,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 21,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        line: 22,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 22,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'line'",
        ),
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 23,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 23,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 23,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 24,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 25,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wrong trace!!\"",
        ),
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 27,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 27,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 28,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 29,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 33,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 33,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 33,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 34,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 34,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">\"",
        ),
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 35,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 36,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 36,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 37,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 37,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 38,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 38,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 38,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[C]\"",
        ),
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 39,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 39,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 40,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 40,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 41,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 41,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"SfL\"",
        ),
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 42,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 42,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 42,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 42,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 42,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        line: 42,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 42,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 42,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testline",
        ),
        line: 42,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 43,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        line: 43,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 43,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 43,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 44,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 44,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 44,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 44,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 44,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 44,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%[\"",
        ),
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 45,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 45,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 45,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 45,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 45,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 46,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 46,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 46,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        line: 46,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 47,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 47,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 47,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 47,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 47,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 47,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 48,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 48,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 48,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        line: 48,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 48,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 53,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function f () end\"",
        ),
        line: 53,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 54,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 54,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 54,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 55,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 55,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 56,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 56,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 56,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[string \"%s\"]'",
        ),
        line: 56,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 57,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 57,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; %s\\n=1\"",
        ),
        line: 57,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 57,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p'",
        ),
        line: 57,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "400",
                    after_decimal: "",
                },
            ),
        ),
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 58,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 58,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^%[string [^\\n]*%.%.%.\"%]$'",
        ),
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 59,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 59,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; %s=1\"",
        ),
        line: 59,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 59,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p'",
        ),
        line: 59,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "400",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 60,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 60,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^%[string [^\\n]*%.%.%.\"%]$'",
        ),
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 61,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 62,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 62,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[string \"...\"]'",
        ),
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 63,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 64,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 64,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 64,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[string \"\"]'",
        ),
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 65,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@xuxu\"",
        ),
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 66,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 66,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 66,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@\"",
        ),
        line: 67,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 67,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p'",
        ),
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 67,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'t'",
        ),
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 68,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 68,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%.%.%.p*t$\"",
        ),
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=xuxu\"",
        ),
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 70,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 70,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 71,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=%s\"",
        ),
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 71,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 72,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 72,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^x*$\"",
        ),
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 73,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 74,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        line: 74,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 74,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 75,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 75,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 75,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 75,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 75,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 75,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 75,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 78,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 79,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 79,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 80,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 80,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 81,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 81,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 81,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'f'",
        ),
        line: 81,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 81,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 81,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 81,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'local'",
        ),
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 82,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 82,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 83,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 83,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 83,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 83,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 83,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 83,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'field'",
        ),
        line: 83,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 84,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xixi'",
        ),
        line: 84,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 85,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 85,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 86,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 86,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xixi'",
        ),
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 88,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 88,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 89,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 89,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 89,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        line: 89,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 89,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 89,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 89,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 89,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 89,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 89,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 89,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 89,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 89,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 92,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 92,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 92,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'f'",
        ),
        line: 92,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 93,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 93,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 93,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 93,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 94,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 94,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 94,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 94,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 94,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 94,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'local'",
        ),
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 95,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 96,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 99,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 99,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 99,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 99,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 99,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 100,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 100,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 100,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 100,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 101,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 101,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 101,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 101,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 101,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 102,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 103,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 103,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 103,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 104,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 106,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 106,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 106,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 106,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 106,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 106,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 107,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 107,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 108,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 109,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 109,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 110,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 110,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 110,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 110,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 111,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[if\nmath.sin(1)\nthen\n  a=1\nelse\n  a=2\nend\n]]",
        ),
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 121,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal function foo()\nend\nfoo()\nA = 1\nA = 2\nA = 3\n]]",
        ),
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[--\nif nil then\n  a=1\nelse\n  a=2\nend\n]]",
        ),
        line: 139,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[a=1\nrepeat\n  a=a+1\nuntil a==3\n]]",
        ),
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ do\n  return\nend\n]]",
        ),
        line: 150,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 150,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[local a\na=1\nwhile a<=3 do\n  a=a+1\nend\n]]",
        ),
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[while math.sin(1) do\n  if math.sin(1)\n  then break\n  end\nend\na=1]]",
        ),
        line: 164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[for i=1,3 do\n  a=i\nend\n]]",
        ),
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[for i,v in pairs{'a','b'} do\n  a=tostring(i) .. v\nend\n]]",
        ),
        line: 174,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[for i=1,4 do a=1 end]]",
        ),
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 179,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 181,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 181,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "124",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "125",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "126",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "128",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "129",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "130",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "256",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "257",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 182,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 183,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 183,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n     local b = {10}\n     a = b[1] X + Y b[1]\n     b = 4\n  ]]",
        ),
        line: 187,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 188,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 188,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 188,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "subs",
        ),
        line: 189,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 189,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 189,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 189,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 189,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 189,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 190,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 190,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "subs",
        ),
        line: 191,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        line: 191,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 191,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 191,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 192,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 192,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 192,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[XY]\"",
        ),
        line: 192,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "subs",
        ),
        line: 192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 193,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 193,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 193,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 193,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 193,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 193,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 193,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 193,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 193,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 193,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 194,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 195,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 196,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 199,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 200,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkactivelines",
        ),
        line: 200,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 200,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 200,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 201,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 201,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 201,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"SL\"",
        ),
        line: 201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 202,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 202,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 203,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 203,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 203,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 204,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 204,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 204,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 205,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 205,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 205,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 205,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 205,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 207,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 207,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkactivelines",
        ),
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 214,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 216,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 218,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 218,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkactivelines",
        ),
        line: 220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 223,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 224,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 224,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 224,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 226,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 226,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkactivelines",
        ),
        line: 228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkactivelines",
        ),
        line: 230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 231,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 231,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 233,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 233,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 233,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkactivelines",
        ),
        line: 234,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 235,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s return 1\"",
        ),
        line: 235,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 235,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 235,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 236,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 236,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 236,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 237,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 241,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 244,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 244,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 244,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 244,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 245,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 249,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 249,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 249,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 249,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 249,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 249,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 250,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 250,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 252,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 252,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 252,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 253,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 253,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 253,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 253,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 254,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 255,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 255,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 255,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 255,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 256,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 256,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 256,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 256,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 256,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 257,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 259,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 262,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 262,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 262,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 267,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 267,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 268,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 268,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        line: 268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 269,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 269,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 269,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 269,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 270,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 270,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 270,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 271,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 271,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(vararg)\"",
        ),
        line: 271,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 271,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 271,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 271,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 273,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 273,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 273,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 273,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 273,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 274,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 274,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 274,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 275,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 275,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 275,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 277,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 277,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(vararg)\"",
        ),
        line: 277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 278,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 278,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 278,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(vararg)\"",
        ),
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "430",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 280,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 280,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "430",
                    after_decimal: "",
                },
            ),
        ),
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 281,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 285,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 287,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 287,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 287,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 287,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 288,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 288,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 288,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 288,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 288,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 288,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 289,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 290,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 290,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 290,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 295,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 296,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 296,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 296,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 297,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 298,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 298,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 298,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hook\"",
        ),
        line: 298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sndline",
        ),
        line: 299,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 299,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 299,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 299,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n(.-)\\n\"",
        ),
        line: 299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 300,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 300,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 300,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sndline",
        ),
        line: 300,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 300,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hook\"",
        ),
        line: 300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 301,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 301,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 301,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 301,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 303,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 303,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 303,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 303,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 303,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 304,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 304,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 305,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 305,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 306,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 306,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 307,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 308,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 313,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getregistry",
        ),
        line: 313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_HOOKKEY",
        ),
        line: 313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 313,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 313,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'k'",
        ),
        line: 313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 316,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 316,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 316,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 316,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 316,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 316,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 316,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 317,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 317,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldglob",
        ),
        line: 318,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 319,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 319,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 319,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 321,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 321,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 321,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 321,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 322,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 322,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'crl'",
        ),
        line: 322,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 322,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 322,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 323,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 323,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        line: 323,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 323,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 324,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldglob",
        ),
        line: 324,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 325,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 325,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 325,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldglob",
        ),
        line: 326,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 326,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 327,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 328,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 328,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        line: 328,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 328,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 329,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 329,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 329,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 330,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 330,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 330,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 330,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 331,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 332,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 333,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 333,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"crl\"",
        ),
        line: 333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 336,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 336,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 338,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 338,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 338,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 339,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 339,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 339,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 339,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 340,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 340,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 340,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 341,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 341,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pera\"",
        ),
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 341,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        line: 341,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 341,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 342,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"maçã\"",
        ),
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 342,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 343,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 343,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 344,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 344,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 344,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 344,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 344,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 344,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        line: 344,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 344,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 344,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 344,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'g'",
        ),
        line: 344,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 345,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 345,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 345,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 345,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 345,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 345,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 345,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 345,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^@.*db%.lua$\"",
        ),
        line: 345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 346,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 346,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 346,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 347,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 347,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 347,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 348,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 348,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 348,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 348,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 348,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 348,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 349,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 352,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        line: 352,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 352,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 353,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 353,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 353,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 353,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 353,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 353,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 353,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 353,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 354,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 357,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 357,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\\nalo'",
        ),
        line: 358,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 358,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n]]",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 363,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 363,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        line: 363,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 363,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 367,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 367,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 367,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 367,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 367,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 368,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 368,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 368,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 368,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 368,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 368,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "feijao",
        ),
        line: 369,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAAA",
        ),
        line: 370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 370,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 370,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mamão\"",
        ),
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAAA",
        ),
        line: 371,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 371,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAAA",
        ),
        line: 372,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 372,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pera\"",
        ),
        line: 372,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 372,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 372,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"maçã\"",
        ),
        line: 372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 373,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 374,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 374,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 375,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 375,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 375,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 375,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 376,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 376,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B'",
        ),
        line: 376,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 376,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 376,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 377,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 383,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 383,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 383,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 383,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 383,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 383,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 383,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 383,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 383,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 383,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 383,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 388,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 388,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 388,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 388,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 388,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 389,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 389,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 389,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(C temporary)\"",
        ),
        line: 389,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 390,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 390,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 390,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 391,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 391,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 391,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 391,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 391,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(C temporary)\"",
        ),
        line: 391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 392,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 392,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 393,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 393,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 396,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 397,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 397,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 397,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 398,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 400,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 402,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 402,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 402,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 402,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 402,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 402,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 404,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 404,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 404,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 404,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 407,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 408,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 413,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        line: 413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 413,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 413,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 414,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 414,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        line: 414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 414,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 414,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 414,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 415,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 415,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 415,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 415,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 416,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 419,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 420,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 420,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 420,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 420,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 420,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 420,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 420,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 420,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 420,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 421,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 421,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 422,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 422,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 422,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 422,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 423,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 423,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 423,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 423,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 423,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 423,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 424,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 424,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        line: 424,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 424,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 424,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 424,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 425,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 425,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 425,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 426,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 427,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 427,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 427,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 427,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 427,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 427,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 427,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 428,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 428,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 429,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 429,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 429,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 429,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 430,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 430,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 431,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 436,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectlocals",
        ),
        line: 436,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "level",
        ),
        line: 436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 437,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 437,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 437,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 437,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 438,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 438,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 438,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 438,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 438,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 439,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 439,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 439,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "level",
        ),
        line: 439,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 439,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 439,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 439,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 440,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 440,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 440,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 440,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 440,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^[a-zA-Z0-9_]+$\"",
        ),
        line: 440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 440,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 440,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 441,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 443,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 443,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 443,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 443,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 444,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 445,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 449,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 449,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 450,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 450,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 450,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 450,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 451,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 451,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 451,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 451,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 451,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 451,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 451,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 451,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 451,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 451,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 452,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 452,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 453,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 453,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        line: 453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XX = 12\"",
        ),
        line: 454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 456,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a='joao'+1\"",
        ),
        line: 456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 457,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 457,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 458,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 458,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 458,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 458,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 458,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 458,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 459,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 459,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 460,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 460,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 460,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        line: 460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 461,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 461,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        line: 461,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 461,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 461,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 461,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 462,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 464,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectlocals",
        ),
        line: 464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 465,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 466,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 466,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 468,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 469,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 469,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 469,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 469,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 469,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 469,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 469,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 469,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 469,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 469,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 469,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 469,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 469,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 469,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 469,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 470,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 470,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 471,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 471,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 471,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 475,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 476,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 476,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 476,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 478,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 478,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 478,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 478,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 479,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 479,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 479,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 479,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 479,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 480,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 480,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 480,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 480,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 480,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 480,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 481,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 482,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 484,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 484,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 485,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 485,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 485,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 485,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"foo\"",
        ),
        line: 485,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 486,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 486,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 486,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 487,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 487,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 487,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 487,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 487,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 487,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 487,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 488,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectlocals",
        ),
        line: 488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 488,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 488,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 488,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 488,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 489,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 489,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 489,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 489,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 490,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 490,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 490,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 490,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tab",
        ),
        line: 492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 492,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 493,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 496,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 496,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        line: 496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 496,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 496,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 497,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 497,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 499,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 502,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqseq",
        ),
        line: 502,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 502,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 503,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 503,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 503,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 503,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 503,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 504,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 504,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 504,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 504,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 504,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 505,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 505,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 505,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 505,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 505,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 505,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 506,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 507,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 510,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing inspection of parameters/returned values\"",
        ),
        line: 510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 510,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 511,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 511,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 511,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inp",
        ),
        line: 512,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 512,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 514,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hook",
        ),
        line: 514,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        line: 514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 514,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 515,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 515,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 515,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 515,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 515,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ar",
        ),
        line: 516,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 516,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 516,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 516,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ruS\"",
        ),
        line: 516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 516,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 517,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 517,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 517,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 517,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 518,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ar",
        ),
        line: 518,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ftransfer",
        ),
        line: 518,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ar",
        ),
        line: 518,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ftransfer",
        ),
        line: 518,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ar",
        ),
        line: 518,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ntransfer",
        ),
        line: 518,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 518,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 518,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 518,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 519,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 519,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 519,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 519,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 519,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 520,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 520,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 520,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 520,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 520,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 520,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 520,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 521,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        line: 522,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 522,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 522,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 523,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 523,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inp",
        ),
        line: 525,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 525,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 526,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 529,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hook",
        ),
        line: 529,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 529,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cr\"",
        ),
        line: 529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 531,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 531,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 531,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 531,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 531,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 531,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 531,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqseq",
        ),
        line: 532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inp",
        ),
        line: 532,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 532,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 532,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 532,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqseq",
        ),
        line: 532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 532,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 532,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 532,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 534,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 534,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 534,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 534,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 534,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 534,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 534,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 534,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 534,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqseq",
        ),
        line: 535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inp",
        ),
        line: 535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqseq",
        ),
        line: 535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 535,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 537,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 537,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 537,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 537,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 537,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 537,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 537,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 538,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 538,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 538,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 538,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 538,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 538,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 538,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 538,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 538,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 538,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 538,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 538,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 538,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 539,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 539,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "on",
        ),
        line: 539,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 539,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqseq",
        ),
        line: 540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inp",
        ),
        line: 540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 540,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 540,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 540,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqseq",
        ),
        line: 540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 540,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 540,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 542,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 542,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 543,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 548,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalues",
        ),
        line: 548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 548,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 549,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 549,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 549,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 549,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 550,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 550,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 550,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 551,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 551,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 551,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 552,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "value",
        ),
        line: 552,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 552,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 552,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 552,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 552,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 553,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 553,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 553,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 553,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 554,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 554,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 554,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 555,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 555,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 555,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "value",
        ),
        line: 555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 556,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 556,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 556,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 556,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 557,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 558,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 559,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 561,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 561,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 561,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 561,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 561,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 561,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 561,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 561,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 561,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 562,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 562,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 562,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 562,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 562,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 562,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 562,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 563,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 563,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 563,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 563,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 563,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 563,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 564,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 564,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 564,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 564,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 565,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 565,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 565,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 565,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 566,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 566,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 566,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 566,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 566,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 566,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 566,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 566,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 566,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 567,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalues",
        ),
        line: 567,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 568,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 568,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 568,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 568,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 568,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 568,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 568,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 568,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 568,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 568,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 568,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 569,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalues",
        ),
        line: 569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 569,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 570,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 570,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 570,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 570,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 570,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 570,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 570,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 570,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 570,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 570,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 570,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 570,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 570,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 571,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        line: 571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 571,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 571,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 571,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 571,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 572,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 572,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 572,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 572,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 572,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 572,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 572,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 572,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 572,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 574,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 574,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 574,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 574,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 574,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 574,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 574,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 578,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 578,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 579,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 579,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 579,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 579,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 579,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 579,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 579,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 579,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 579,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 579,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 579,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 579,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 580,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 580,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 580,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 580,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 580,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 580,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 580,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 580,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 580,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 580,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 580,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1012",
                    after_decimal: "",
                },
            ),
        ),
        line: 580,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 581,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 581,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 581,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 581,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 581,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 581,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 581,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 581,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 581,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 582,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 582,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 582,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 582,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 582,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "250",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 582,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 582,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 582,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 583,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 583,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 583,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 584,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 584,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 584,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 584,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 584,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 584,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 585,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 585,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 585,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 585,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 585,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 585,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 585,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 585,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 585,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 585,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 585,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4000",
                    after_decimal: "",
                },
            ),
        ),
        line: 585,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 586,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 586,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 586,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 586,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 586,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 586,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 586,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 586,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 586,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 586,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 586,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 586,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 586,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 586,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 586,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 589,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 589,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 589,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 589,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 589,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 589,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 589,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 589,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 590,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 590,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 590,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 590,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 591,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 591,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 591,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 591,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 591,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 591,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 591,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 591,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 591,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 591,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 591,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 591,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 594,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 594,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 594,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 598,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 598,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 598,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 598,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 599,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 600,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 600,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"S\"",
        ),
        line: 600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 600,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 600,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 600,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        line: 600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 601,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 601,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 601,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 601,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 601,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 601,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 601,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        line: 601,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 601,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 601,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        line: 602,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 602,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 603,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        line: 603,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 603,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g1",
        ),
        line: 603,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        line: 603,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        line: 603,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 603,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 604,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 604,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 604,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 604,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"S\"",
        ),
        line: 604,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 604,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 604,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 604,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"main\"",
        ),
        line: 604,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 605,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 605,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 606,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 607,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 609,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 609,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 609,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 609,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 609,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g1",
        ),
        line: 611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 611,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 611,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 613,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 613,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g1",
        ),
        line: 613,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 613,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 615,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 615,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 617,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 617,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 617,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 618,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 618,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 618,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 618,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 618,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cr\"",
        ),
        line: 618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 619,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 620,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 620,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 620,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 621,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 621,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 621,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 621,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 621,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        line: 622,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail call\"",
        ),
        line: 622,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        line: 622,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail call\"",
        ),
        line: 622,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 623,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 623,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 623,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 623,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        line: 624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 624,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 625,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 626,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 626,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 626,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 626,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 626,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 626,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 626,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 626,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 626,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 626,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 626,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 626,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 628,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 628,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 629,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 629,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 629,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 630,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 630,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail call\"",
        ),
        line: 630,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 631,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 631,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 631,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 632,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 632,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 632,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 632,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 632,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        line: 632,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 632,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 632,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 634,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 634,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 634,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 634,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 634,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 634,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        line: 634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 634,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        line: 634,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 634,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 634,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 635,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 636,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 636,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 636,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 637,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 637,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 638,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 639,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 639,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 641,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 641,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 641,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 641,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 641,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        line: 641,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 642,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 642,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 642,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 643,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 643,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 643,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 644,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 644,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 644,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 644,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 644,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        line: 644,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 644,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"main\"",
        ),
        line: 644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 644,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 645,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 645,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 645,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 645,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 645,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 646,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        line: 646,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 646,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 646,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 646,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 646,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 646,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 646,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 647,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 647,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 647,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 647,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 647,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 647,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 648,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 654,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 658,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 658,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local A = function ()\n    return x\n  end\n  return\n]]",
        ),
        line: 663,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 665,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 665,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 667,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 667,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 667,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 667,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 667,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 667,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 667,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 668,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 668,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 668,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 668,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 668,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 668,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 668,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 668,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 668,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 668,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 668,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 668,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 668,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 668,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(temporary)\"",
        ),
        line: 668,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 668,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 669,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 669,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 669,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 669,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 669,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 669,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 669,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 669,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 669,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 669,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        line: 669,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 669,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 670,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 671,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 671,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 672,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 673,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 673,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 673,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 674,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 674,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 678,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 678,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 678,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 678,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 679,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 679,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 679,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 679,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 679,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 679,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 680,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 680,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 680,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 680,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 680,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 680,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^hi\\n\"",
        ),
        line: 680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 681,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 681,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 681,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 681,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 681,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 681,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 681,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^hi\\n\"",
        ),
        line: 681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 682,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 682,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 682,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 682,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'debug.traceback'\"",
        ),
        line: 682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 683,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 683,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 683,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 683,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 683,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 683,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 683,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'debug.traceback'\"",
        ),
        line: 683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 684,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 684,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 684,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 684,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^stack traceback:\\n\"",
        ),
        line: 684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 684,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 686,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 687,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 687,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 687,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 687,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 688,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 688,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 688,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 688,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 688,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 688,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pcall\"",
        ),
        line: 688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 688,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 689,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 693,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 693,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 693,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 693,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"u\"",
        ),
        line: 693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 694,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 694,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 694,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 694,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 694,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 694,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 694,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 694,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 694,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 694,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 694,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 696,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 696,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 696,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 696,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 696,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 696,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 696,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 696,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"u\"",
        ),
        line: 696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 697,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 697,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 697,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 697,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 697,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 697,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 697,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 697,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 697,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 697,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 697,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 697,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 697,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 699,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 699,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 699,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 699,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 699,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 699,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 699,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 699,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 699,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 699,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 699,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 699,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"u\"",
        ),
        line: 699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 700,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 700,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 700,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 700,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 700,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 700,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 700,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 700,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 700,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 700,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 700,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 700,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 702,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 702,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 702,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 702,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 702,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 703,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 703,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 703,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 703,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 703,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 703,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 703,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 703,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 703,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 703,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 703,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 703,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 704,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        line: 704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 704,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 704,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 704,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 704,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 704,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_ENV\"",
        ),
        line: 704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 706,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 706,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 706,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 707,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 707,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 707,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 707,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 707,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 707,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 707,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 707,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 707,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 707,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 707,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 707,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 707,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 709,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 709,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 709,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 709,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        line: 709,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 709,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 709,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 709,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 710,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        line: 710,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 710,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 710,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 710,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        line: 710,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 710,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 710,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 710,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        line: 710,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 710,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 710,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 716,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 716,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 716,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "level",
        ),
        line: 716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 716,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tb",
        ),
        line: 717,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 717,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 717,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 717,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 717,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 717,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "level",
        ),
        line: 717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 717,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 718,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 718,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 718,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 719,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 719,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tb",
        ),
        line: 719,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 719,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^\\n]+\\n?\"",
        ),
        line: 719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 719,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 720,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 720,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 720,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 720,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 720,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 720,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 720,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 720,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 720,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 721,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 721,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 721,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 721,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 723,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 723,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 723,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 723,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 723,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 723,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 724,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 727,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 727,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 727,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 728,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 728,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 728,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 728,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 728,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 728,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 729,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 729,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 729,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 729,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 730,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 732,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 732,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 732,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 733,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 733,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 733,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 734,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 734,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 734,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 734,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield\"",
        ),
        line: 734,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 734,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 734,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 734,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 734,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 734,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 734,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 734,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 734,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 735,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 735,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 735,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 735,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 735,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 735,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 735,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 735,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 735,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 735,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 735,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 735,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 735,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 735,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 736,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 736,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 736,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 736,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 736,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 736,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 736,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 736,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 736,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 736,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 737,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 737,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 737,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 737,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        line: 737,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 737,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 737,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 737,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 738,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 738,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 738,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 738,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 738,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 738,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 741,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 741,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 741,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 741,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 741,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 741,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 742,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 742,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 743,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 743,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 743,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 743,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 743,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 744,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 744,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 744,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 744,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 744,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 744,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 744,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 745,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 746,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 746,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 748,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 748,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 748,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 748,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 749,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 749,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 749,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 749,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 749,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 749,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 749,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 749,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 749,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 750,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 750,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 750,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 750,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lcr\"",
        ),
        line: 750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 750,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 752,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 752,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 752,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 752,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 752,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 752,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 752,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 753,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 753,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 753,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 753,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 753,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 753,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 753,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lfLS\"",
        ),
        line: 753,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 754,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 754,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 754,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 754,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 754,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 754,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 754,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 754,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 755,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 755,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 755,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 755,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 756,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 756,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        line: 756,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 756,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 756,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 756,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        line: 756,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 757,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 757,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 757,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 758,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 758,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 758,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 758,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 758,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 760,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 760,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 760,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        line: 760,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 760,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 760,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 760,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 761,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 761,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 761,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 761,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 761,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 761,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 761,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 761,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 761,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 762,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 762,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 762,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 762,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 762,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 762,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 762,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 763,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 763,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 763,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 763,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 763,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 764,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 764,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 764,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 764,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 764,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 764,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 764,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 764,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 764,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 765,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 765,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 765,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 765,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 765,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 765,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 766,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 766,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 766,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 766,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 766,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 766,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 766,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 766,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 766,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 767,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 767,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 768,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 768,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 768,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 768,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 769,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 769,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 769,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 769,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 769,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 769,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 769,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 769,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 769,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 769,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 769,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 769,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 769,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 769,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 771,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 771,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 771,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 771,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 771,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 772,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 772,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 772,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 772,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 772,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 772,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 772,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 773,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 773,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield\"",
        ),
        line: 773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 773,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"in function <\"",
        ),
        line: 773,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 775,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 775,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 775,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 775,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 775,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 776,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 776,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 776,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 777,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 777,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 777,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 777,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        line: 777,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 777,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 777,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 777,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 777,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 777,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 778,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 778,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 778,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 778,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 778,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 778,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 779,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 779,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        line: 779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 779,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 779,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 780,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 780,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 780,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 784,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 784,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 784,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 784,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 785,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 785,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 785,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 785,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 786,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 786,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 786,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 786,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 786,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 786,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 786,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 787,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 789,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 789,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 789,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 789,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 790,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 790,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 791,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 791,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 791,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 791,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 791,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 792,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 792,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 792,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 792,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 792,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 793,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 793,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        line: 793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 793,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 793,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 794,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 794,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 794,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 794,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 794,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 794,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 794,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 794,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 794,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 794,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 794,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 795,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 795,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        line: 795,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 795,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 795,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 795,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 795,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 795,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 796,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 796,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 796,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 797,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 797,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 797,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 797,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 797,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 797,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 802,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 802,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 803,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 803,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 803,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 803,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 804,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 804,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 804,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 804,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 804,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 804,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 805,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 809,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 809,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 809,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 809,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 810,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 810,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 810,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 810,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 811,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 811,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 811,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'coroutine.yield'\"",
        ),
        line: 811,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 811,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'f'\"",
        ),
        line: 811,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 811,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"in function <\"",
        ),
        line: 811,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 811,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 812,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        line: 812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 812,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 812,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 812,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"suspended\"",
        ),
        line: 812,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 813,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 813,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 814,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 814,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 814,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 815,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 815,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 815,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 815,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 815,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'f'\"",
        ),
        line: 815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 815,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 817,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 817,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 817,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 817,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 817,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'error'\"",
        ),
        line: 817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        line: 818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 818,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 818,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 824,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 825,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 825,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 826,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 828,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 828,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 829,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 829,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 829,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 829,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 829,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 829,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 830,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 830,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 830,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 831,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 831,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 831,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 832,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 833,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 835,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 835,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 835,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 836,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 836,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 837,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        line: 838,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 841,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 841,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 841,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getregistry",
        ),
        line: 841,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 841,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 841,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 841,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 845,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 845,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 845,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 845,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 846,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 846,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 847,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 847,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 847,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 847,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 847,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 848,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 848,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 848,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"metamethod\"",
        ),
        line: 848,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 849,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 849,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 849,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 849,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        line: 850,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 850,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 852,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 852,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 853,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 853,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__add",
        ),
        line: 853,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 853,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__div",
        ),
        line: 853,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 853,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mod",
        ),
        line: 853,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 853,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__concat",
        ),
        line: 853,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 853,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__pow",
        ),
        line: 853,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 853,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mul",
        ),
        line: 854,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 854,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__idiv",
        ),
        line: 854,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 854,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__unm",
        ),
        line: 854,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 854,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 854,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 854,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__sub",
        ),
        line: 854,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 854,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__shl",
        ),
        line: 855,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 855,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__shr",
        ),
        line: 855,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 855,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__bor",
        ),
        line: 855,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 855,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__bxor",
        ),
        line: 855,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 855,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        line: 856,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 856,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__le",
        ),
        line: 856,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 856,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 856,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 856,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__unm",
        ),
        line: 856,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 856,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 856,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 856,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__band",
        ),
        line: 856,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 856,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__bnot",
        ),
        line: 857,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 857,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 857,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 858,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 858,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 860,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 860,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 860,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 860,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 860,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 860,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 860,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 860,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 862,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 862,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 862,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 862,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 862,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"index\"",
        ),
        line: 862,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 862,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 862,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 862,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 862,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pow\"",
        ),
        line: 862,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 862,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 862,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 862,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat\"",
        ),
        line: 862,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 863,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 863,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 863,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 863,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"div\"",
        ),
        line: 863,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 863,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 863,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 863,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 863,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mod\"",
        ),
        line: 863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 864,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 864,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 864,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 864,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"add\"",
        ),
        line: 864,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 864,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 864,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 864,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 864,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sub\"",
        ),
        line: 864,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 864,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 864,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 864,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 864,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mul\"",
        ),
        line: 864,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 864,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 865,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 865,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unm\"",
        ),
        line: 865,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 865,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 865,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 865,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"len\"",
        ),
        line: 865,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 865,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 865,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 865,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 865,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"band\"",
        ),
        line: 865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 866,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 866,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        line: 866,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 866,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"add\"",
        ),
        line: 866,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 866,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 866,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 866,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 866,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sub\"",
        ),
        line: 866,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 866,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 866,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 866,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 866,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mul\"",
        ),
        line: 866,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 866,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 867,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 867,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unm\"",
        ),
        line: 867,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 867,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 867,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 867,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"len\"",
        ),
        line: 867,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 867,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 867,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 867,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 867,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"band\"",
        ),
        line: 867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 868,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 868,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 868,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 868,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bor\"",
        ),
        line: 868,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 868,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 868,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 868,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bxor\"",
        ),
        line: 868,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 868,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 868,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 868,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"shl\"",
        ),
        line: 868,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 868,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 868,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 868,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"shr\"",
        ),
        line: 868,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 869,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 869,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 869,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 869,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 869,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"eq\"",
        ),
        line: 869,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 870,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 870,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 870,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 870,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 870,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"le\"",
        ),
        line: 870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 871,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 871,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 871,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 871,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 871,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 871,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 871,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"le\"",
        ),
        line: 871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 872,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 872,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 872,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 872,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 872,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 872,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lt\"",
        ),
        line: 872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 873,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 873,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 873,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 873,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 873,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 873,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lt\"",
        ),
        line: 873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 874,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 874,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 874,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bnot\"",
        ),
        line: 874,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 874,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 876,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 877,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 878,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 878,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 878,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 878,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 878,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 878,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 878,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 878,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for iterator\"",
        ),
        line: 878,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 878,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 879,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 881,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 881,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 881,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 881,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 882,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 885,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 886,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 886,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 889,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 889,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 889,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 889,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 889,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        line: 889,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 889,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 889,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 889,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 890,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 890,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 890,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 891,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        line: 891,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 891,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"metamethod\"",
        ),
        line: 891,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 892,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 892,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 892,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 893,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 893,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 896,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 896,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 896,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 896,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 896,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 897,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 897,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 897,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__gc\"",
        ),
        line: 897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 897,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 898,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 902,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 902,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing traceback sizes\"",
        ),
        line: 902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 902,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 904,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "countlines",
        ),
        line: 904,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 904,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 904,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 905,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 905,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 905,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 905,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 905,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 905,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 905,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 905,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 906,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 908,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 908,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lvl",
        ),
        line: 908,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 908,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 908,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lvl",
        ),
        line: 909,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 909,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 909,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 909,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 910,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 910,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"message\"",
        ),
        line: 910,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 910,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 911,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lvl",
        ),
        line: 912,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 912,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 912,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 912,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 913,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 914,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 916,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkdeep",
        ),
        line: 916,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        line: 916,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 916,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 916,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 917,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        line: 917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        line: 917,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 917,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 917,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 918,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 918,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 918,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 918,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 918,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^message\\nstack traceback:\\n(.*)$\"",
        ),
        line: 918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 918,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 919,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "countlines",
        ),
        line: 919,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 919,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 921,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 921,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 921,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 921,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 921,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 921,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "brk",
        ),
        line: 922,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 922,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 922,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 922,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.%.%.\"",
        ),
        line: 922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 922,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "brk",
        ),
        line: 923,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 923,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest1",
        ),
        line: 924,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 924,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 924,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 924,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 924,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 924,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "brk",
        ),
        line: 924,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 924,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest2",
        ),
        line: 925,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 925,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 925,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "brk",
        ),
        line: 925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 925,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest",
        ),
        line: 925,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "countlines",
        ),
        line: 926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest1",
        ),
        line: 926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 926,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 926,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "countlines",
        ),
        line: 926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rest2",
        ),
        line: 926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 926,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 926,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 928,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        line: 928,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        line: 928,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "start",
        ),
        line: 928,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 928,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 928,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 929,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 930,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 932,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 932,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 932,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 932,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "51",
                    after_decimal: "",
                },
            ),
        ),
        line: 932,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 932,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 932,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 932,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 933,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 933,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 933,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 933,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 935,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkdeep",
        ),
        line: 935,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 935,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 935,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 935,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 936,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 937,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 942,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing debug functions on chunk without debug info\"",
        ),
        line: 942,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 943,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 943,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[-- program to be loaded without debug information (strip)\nlocal debug = require'debug'\nlocal a = 12  -- a local variable\n\nlocal n, v = debug.getlocal(1, 1)\nassert(n == \"(temporary)\" and v == debug)   -- unkown name but known value\nn, v = debug.getlocal(1, 2)\nassert(n == \"(temporary)\" and v == 12)   -- unkown name but known value\n\n-- a function with an upvalue\nlocal f = function () local x; return a end\nn, v = debug.getupvalue(f, 1)\nassert(n == \"(no name)\" and v == 12)\nassert(debug.setupvalue(f, 1, 13) == \"(no name)\")\nassert(a == 13)\n\nlocal t = debug.getinfo(f)\nassert(t.name == nil and t.linedefined > 0 and\n       t.lastlinedefined == t.linedefined and\n       t.short_src == \"?\")\nassert(debug.getinfo(1).currentline == -1)\n\nt = debug.getinfo(f, \"L\").activelines\nassert(next(t) == nil)    -- active lines are empty\n\n-- dump/load a function without debug info\nf = load(string.dump(f))\n\nt = debug.getinfo(f)\nassert(t.name == nil and t.linedefined > 0 and\n       t.lastlinedefined == t.linedefined and\n       t.short_src == \"?\")\nassert(debug.getinfo(1).currentline == -1)\n\nreturn a\n]]",
        ),
        line: 978,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 982,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 982,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 982,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 982,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 982,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 982,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 982,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 982,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 984,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 984,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 984,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 986,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 987,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 987,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 987,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 987,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 988,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 988,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 988,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 989,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 989,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 989,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 990,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 991,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 993,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 993,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 993,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 993,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 994,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 994,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 995,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 995,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 995,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 995,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 995,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 996,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 996,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 996,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        line: 996,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 997,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 997,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 998,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 998,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 999,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 999,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 999,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 999,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 999,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 999,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        line: 999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 999,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 999,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 1000,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1000,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 1000,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1000,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 1001,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 1003,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 1004,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1004,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    return function (x)\n      return function (y) \n        return x + y\n      end\n    end\n  ]]",
        ),
        line: 1010,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 1011,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 1011,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 1011,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1011,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 1011,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1011,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 1011,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1011,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 1012,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 1012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 1012,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 1012,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1012,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1012,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 1014,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 1014,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 1014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 1014,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1015,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 1015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 1015,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 1015,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 1015,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 1015,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 1015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 1015,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 1015,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 1015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1015,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 1016,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1016,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 1016,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 1016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1016,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 1017,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 1017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1017,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1017,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 1018,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 1018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 1018,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 1019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 1019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1019,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 1019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1020,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 1020,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 1020,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 1020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1020,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 1020,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 1020,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 1020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 1021,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 1021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 1021,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1021,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 1021,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 1021,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 1021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 1022,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 1022,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 1022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1022,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 1022,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 1022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1022,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 1024,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 1024,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 1024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 1024,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1024,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 1024,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1025,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 1025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 1025,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 1025,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        line: 1025,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1025,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 1026,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 1026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 1026,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1026,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1026,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 1027,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 1027,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1027,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 1028,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 1028,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1028,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 1028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 1029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 1029,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1029,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        line: 1029,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 1030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 1030,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 1030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 1030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1030,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 1030,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1030,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'=?'",
        ),
        line: 1030,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 1030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 1031,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 1031,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 1031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1031,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 1031,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1031,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'=?'",
        ),
        line: 1031,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 1031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 1032,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 1032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 1032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1032,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 1032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 1032,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1032,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'=?'",
        ),
        line: 1032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1032,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 1033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1035,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        line: 1035,
    },
]
