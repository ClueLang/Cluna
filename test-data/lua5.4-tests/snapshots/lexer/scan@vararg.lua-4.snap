---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.4-tests/vararg.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 69..74,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 7,
        span: 74..75,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing vararg'",
        ),
        line: 4,
        column: 23,
        span: 75..91,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 24,
        span: 91..92,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 6,
        column: 9,
        span: 94..102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 6,
        column: 11,
        span: 103..104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 12,
        span: 104..105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 6,
        column: 13,
        span: 105..106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
        column: 14,
        span: 106..107,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 6,
        column: 18,
        span: 108..111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 19,
        span: 111..112,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 7,
        column: 8,
        span: 115..120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 7,
        column: 10,
        span: 121..122,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 12,
        span: 123..124,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 7,
        column: 14,
        span: 125..126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 7,
        column: 15,
        span: 126..127,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 17,
        span: 128..129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 7,
        column: 24,
        span: 130..136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 25,
        span: 136..137,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 7,
        column: 28,
        span: 137..140,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 7,
        column: 29,
        span: 140..141,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 7,
        column: 33,
        span: 142..145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 34,
        span: 145..146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 7,
        column: 35,
        span: 146..147,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 7,
        column: 39,
        span: 148..151,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 7,
        column: 40,
        span: 151..152,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 8,
        column: 6,
        span: 155..158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 8,
        column: 8,
        span: 159..160,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 8,
        column: 10,
        span: 161..162,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 8,
        column: 12,
        span: 162..164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
        column: 13,
        span: 164..165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 8,
        column: 15,
        span: 166..167,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 8,
        column: 16,
        span: 167..168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 8,
        column: 17,
        span: 168..169,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 8,
        column: 20,
        span: 170..172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 27,
        span: 173..179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 28,
        span: 179..180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 8,
        column: 29,
        span: 180..181,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 8,
        column: 30,
        span: 181..182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 8,
        column: 31,
        span: 182..183,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 8,
        column: 32,
        span: 183..184,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 8,
        column: 35,
        span: 185..187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 8,
        column: 37,
        span: 188..189,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 8,
        column: 38,
        span: 189..190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 8,
        column: 39,
        span: 190..191,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 8,
        column: 40,
        span: 191..192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 41,
        span: 192..193,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 8,
        column: 0,
        span: 194..197,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 9,
        column: 9,
        span: 200..206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 9,
        column: 11,
        span: 207..208,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 9,
        column: 12,
        span: 208..209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 9,
        column: 0,
        span: 209..210,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 10,
        column: 0,
        span: 211..214,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 12,
        column: 9,
        span: 216..224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 12,
        column: 13,
        span: 225..228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 15,
        span: 229..230,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 12,
        column: 18,
        span: 230..233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 19,
        span: 233..234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 13,
        column: 9,
        span: 237..243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 10,
        span: 243..244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 13,
        column: 13,
        span: 244..247,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 13,
        column: 16,
        span: 248..250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 13,
        column: 19,
        span: 251..253,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 13,
        column: 20,
        span: 253..254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 13,
        column: 23,
        span: 254..257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 24,
        span: 257..258,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 14,
        column: 8,
        span: 282..287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 14,
        column: 10,
        span: 288..289,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 12,
        span: 290..291,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 14,
        column: 14,
        span: 292..293,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 14,
        column: 17,
        span: 293..296,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 14,
        column: 18,
        span: 296..297,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 14,
        column: 19,
        span: 297..298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 14,
        column: 21,
        span: 299..300,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 14,
        column: 22,
        span: 300..301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 14,
        column: 23,
        span: 301..302,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 25,
        span: 303..304,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 14,
        column: 27,
        span: 305..306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 14,
        column: 0,
        span: 306..307,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 15,
        column: 8,
        span: 310..315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 15,
        column: 12,
        span: 316..319,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 15,
        column: 14,
        span: 320..321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 16,
        span: 322..323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 15,
        column: 17,
        span: 323..324,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
        column: 18,
        span: 324..325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 15,
        column: 19,
        span: 325..326,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 21,
        span: 326..328,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 22,
        span: 327..329,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 15,
        column: 26,
        span: 330..333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 15,
        column: 28,
        span: 334..335,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 15,
        column: 29,
        span: 335..336,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 30,
        span: 335..337,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 15,
        column: 31,
        span: 337..338,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 34,
        span: 339..341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 36,
        span: 341..343,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 15,
        column: 40,
        span: 344..347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 15,
        column: 42,
        span: 348..349,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 15,
        column: 43,
        span: 349..350,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 44,
        span: 349..351,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 15,
        column: 45,
        span: 351..352,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 48,
        span: 353..355,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 50,
        span: 355..357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 51,
        span: 357..358,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 16,
        column: 5,
        span: 361..363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 16,
        column: 9,
        span: 364..367,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 16,
        column: 14,
        span: 368..372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 16,
        column: 18,
        span: 373..376,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 20,
        span: 377..378,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "55",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 23,
        span: 378..381,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 16,
        column: 0,
        span: 382..385,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 17,
        column: 9,
        span: 388..394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 17,
        column: 13,
        span: 395..398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 17,
        column: 14,
        span: 398..399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 17,
        column: 0,
        span: 399..401,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 18,
        column: 0,
        span: 402..405,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 20,
        column: 9,
        span: 407..415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "vararg",
        ),
        line: 20,
        column: 16,
        span: 416..422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 18,
        span: 423..424,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 20,
        column: 21,
        span: 424..427,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 22,
        span: 427..428,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 20,
        column: 29,
        span: 429..435,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 20,
        column: 31,
        span: 436..437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 20,
        column: 32,
        span: 437..438,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
        column: 34,
        span: 439..440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 20,
        column: 41,
        span: 441..447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 42,
        span: 447..448,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 20,
        column: 45,
        span: 448..451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 46,
        span: 451..452,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 20,
        column: 50,
        span: 453..456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 51,
        span: 456..457,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 52,
        span: 457..458,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 20,
        column: 56,
        span: 459..462,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 20,
        column: 57,
        span: 462..463,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 20,
        column: 0,
        span: 464..467,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 22,
        column: 6,
        span: 469..474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 22,
        column: 11,
        span: 475..479,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 22,
        column: 13,
        span: 480..481,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 22,
        column: 22,
        span: 482..490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 24,
        span: 491..492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 22,
        column: 25,
        span: 492..493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 26,
        span: 493..494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "args",
        ),
        line: 22,
        column: 31,
        span: 495..499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 32,
        span: 499..500,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 22,
        column: 39,
        span: 501..507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 22,
        column: 41,
        span: 508..509,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 42,
        span: 509..510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 22,
        column: 47,
        span: 510..515,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 22,
        column: 48,
        span: 515..516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 22,
        column: 54,
        span: 516..522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 55,
        span: 522..523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "args",
        ),
        line: 22,
        column: 59,
        span: 523..527,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 60,
        span: 527..528,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 22,
        column: 62,
        span: 528..530,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 63,
        span: 530..531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "args",
        ),
        line: 22,
        column: 68,
        span: 532..536,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 22,
        column: 69,
        span: 536..537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 22,
        column: 70,
        span: 537..538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 71,
        span: 538..539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 72,
        span: 539..540,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 22,
        column: 0,
        span: 541..544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 24,
        column: 7,
        span: 546..552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 8,
        span: 552..553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 24,
        column: 9,
        span: 553..554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 10,
        span: 554..555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 11,
        span: 555..556,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 24,
        column: 14,
        span: 557..559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 16,
        span: 559..561,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 17,
        span: 561..562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 7,
        span: 563..569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 8,
        span: 569..570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 25,
        column: 9,
        span: 570..571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 10,
        span: 571..572,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 25,
        column: 11,
        span: 572..573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 12,
        span: 572..574,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 13,
        span: 574..575,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 14,
        span: 574..576,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 15,
        span: 576..577,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 16,
        span: 576..578,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 25,
        column: 17,
        span: 578..579,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 18,
        span: 579..580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 20,
        span: 580..582,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 21,
        span: 582..583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 23,
        span: 583..585,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 24,
        span: 585..586,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 26,
        span: 586..588,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 27,
        span: 588..589,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 30,
        span: 590..592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 32,
        span: 592..594,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 33,
        span: 594..595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 26,
        column: 7,
        span: 596..602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 8,
        span: 602..603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 26,
        column: 9,
        span: 603..604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 10,
        span: 604..605,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 26,
        column: 11,
        span: 605..606,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 26,
        column: 16,
        span: 606..611,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 17,
        span: 611..612,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 26,
        column: 21,
        span: 613..616,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 22,
        span: 616..617,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 25,
        span: 617..620,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 26,
        span: 620..621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 26,
        column: 28,
        span: 622..623,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 29,
        span: 623..624,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 26,
        column: 33,
        span: 625..628,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 26,
        column: 34,
        span: 628..629,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 35,
        span: 629..630,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 26,
        column: 41,
        span: 631..636,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 42,
        span: 636..637,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 26,
        column: 46,
        span: 638..641,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 47,
        span: 641..642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 50,
        span: 642..645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 51,
        span: 645..646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 26,
        column: 53,
        span: 647..648,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 54,
        span: 648..649,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 26,
        column: 58,
        span: 650..653,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 59,
        span: 653..654,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 26,
        column: 62,
        span: 655..657,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 64,
        span: 657..659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 65,
        span: 659..660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
        column: 7,
        span: 662..668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 8,
        span: 668..669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "vararg",
        ),
        line: 28,
        column: 14,
        span: 669..675,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 15,
        span: 675..676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 16,
        span: 676..677,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 28,
        column: 17,
        span: 677..678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 28,
        column: 18,
        span: 678..679,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 28,
        column: 21,
        span: 680..682,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 23,
        span: 682..684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 24,
        span: 684..685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 7,
        span: 686..692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 8,
        span: 692..693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "vararg",
        ),
        line: 29,
        column: 14,
        span: 693..699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 15,
        span: 699..700,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 29,
        column: 18,
        span: 700..703,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 19,
        span: 703..704,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 29,
        column: 23,
        span: 705..708,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 24,
        span: 708..709,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 29,
        column: 25,
        span: 709..710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 29,
        column: 26,
        span: 710..711,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
        column: 29,
        span: 712..714,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 31,
        span: 714..716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 32,
        span: 716..717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 31,
        column: 7,
        span: 719..725,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 8,
        span: 725..726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 31,
        column: 11,
        span: 726..729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 12,
        span: 729..730,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 13,
        span: 729..731,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 14,
        span: 731..732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 15,
        span: 731..733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 16,
        span: 733..734,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 31,
        column: 18,
        span: 734..736,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "55",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 20,
        span: 735..738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 21,
        span: 738..739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
        column: 2,
        span: 740..741,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 3,
        span: 741..742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 32,
        column: 4,
        span: 742..743,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 32,
        column: 6,
        span: 744..745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 32,
        column: 13,
        span: 746..752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 14,
        span: 752..753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 32,
        column: 18,
        span: 753..757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 19,
        span: 757..758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 32,
        column: 22,
        span: 758..761,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 23,
        span: 761..762,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 32,
        column: 25,
        span: 763..764,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 26,
        span: 763..765,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 27,
        span: 765..766,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 28,
        span: 765..767,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 32,
        column: 29,
        span: 767..768,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 30,
        span: 768..769,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 31,
        span: 769..770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
        column: 7,
        span: 771..777,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 8,
        span: 777..778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 33,
        column: 9,
        span: 778..779,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 33,
        column: 12,
        span: 780..782,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "55",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 15,
        span: 782..785,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 33,
        column: 19,
        span: 786..789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 33,
        column: 21,
        span: 790..791,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 33,
        column: 24,
        span: 792..794,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 26,
        span: 794..796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 27,
        span: 796..797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 34,
        column: 2,
        span: 798..799,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
        column: 4,
        span: 800..801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 34,
        column: 9,
        span: 802..806,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 10,
        span: 806..807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 34,
        column: 13,
        span: 807..810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 14,
        span: 810..811,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 34,
        column: 16,
        span: 812..813,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 17,
        span: 812..814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 18,
        span: 814..815,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 19,
        span: 814..816,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 34,
        column: 20,
        span: 816..817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 34,
        column: 21,
        span: 817..818,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
        column: 22,
        span: 818..819,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 23,
        span: 818..820,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 34,
        column: 24,
        span: 820..821,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 25,
        span: 821..822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 7,
        span: 823..829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 8,
        span: 829..830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 35,
        column: 9,
        span: 830..831,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 12,
        span: 832..834,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "55",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 15,
        span: 834..837,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 35,
        column: 19,
        span: 838..841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 35,
        column: 21,
        span: 842..843,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 24,
        span: 844..846,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 26,
        span: 846..848,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 27,
        span: 848..849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 36,
        column: 2,
        span: 850..851,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 36,
        column: 4,
        span: 852..853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 36,
        column: 9,
        span: 854..858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 10,
        span: 858..859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 36,
        column: 13,
        span: 859..862,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 14,
        span: 862..863,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 36,
        column: 16,
        span: 864..865,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 17,
        span: 864..866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 18,
        span: 866..867,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 19,
        span: 866..868,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 36,
        column: 20,
        span: 868..869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 36,
        column: 21,
        span: 869..870,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 36,
        column: 22,
        span: 870..871,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 23,
        span: 870..872,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 36,
        column: 24,
        span: 872..873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 25,
        span: 873..874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
        column: 7,
        span: 875..881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 8,
        span: 881..882,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 37,
        column: 11,
        span: 882..885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 37,
        column: 13,
        span: 886..887,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 14,
        span: 887..888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
        column: 7,
        span: 889..895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 8,
        span: 895..896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 38,
        column: 11,
        span: 896..899,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 12,
        span: 899..900,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 13,
        span: 899..901,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 14,
        span: 901..902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 15,
        span: 901..903,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 16,
        span: 903..904,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 17,
        span: 903..905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 18,
        span: 905..906,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 21,
        span: 907..909,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 38,
        column: 27,
        span: 910..915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 28,
        span: 915..916,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 39,
        column: 6,
        span: 917..922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 39,
        column: 8,
        span: 923..924,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 39,
        column: 10,
        span: 925..926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "vararg",
        ),
        line: 39,
        column: 17,
        span: 927..933,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 18,
        span: 933..934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 39,
        column: 22,
        span: 934..938,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 23,
        span: 938..939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 39,
        column: 27,
        span: 939..943,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 28,
        span: 943..944,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 39,
        column: 30,
        span: 945..946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 39,
        column: 32,
        span: 946..948,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 33,
        span: 948..949,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 39,
        column: 36,
        span: 949..952,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 39,
        column: 37,
        span: 952..953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 39,
        column: 38,
        span: 953..954,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 39,
        column: 39,
        span: 954..955,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 40,
        span: 954..956,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 39,
        column: 41,
        span: 956..957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 42,
        span: 957..958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 43,
        span: 958..959,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 40,
        column: 6,
        span: 960..965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 40,
        column: 8,
        span: 966..967,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 9,
        span: 967..968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 40,
        column: 10,
        span: 968..969,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 40,
        column: 12,
        span: 970..971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 40,
        column: 17,
        span: 972..976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 18,
        span: 976..977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 40,
        column: 20,
        span: 977..979,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 21,
        span: 979..980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 7,
        span: 981..987,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 8,
        span: 987..988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 41,
        column: 9,
        span: 988..989,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 41,
        column: 10,
        span: 989..990,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 11,
        span: 989..991,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 41,
        column: 12,
        span: 991..992,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 15,
        span: 993..995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 41,
        column: 17,
        span: 996..997,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 41,
        column: 21,
        span: 998..1001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 41,
        column: 23,
        span: 1002..1003,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 41,
        column: 24,
        span: 1003..1004,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 25,
        span: 1003..1005,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 41,
        column: 26,
        span: 1005..1006,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 29,
        span: 1007..1009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 41,
        column: 31,
        span: 1010..1011,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 41,
        column: 35,
        span: 1012..1015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 41,
        column: 37,
        span: 1016..1017,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 38,
        span: 1017..1018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 41,
        column: 39,
        span: 1018..1019,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 42,
        span: 1020..1022,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 44,
        span: 1022..1024,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 45,
        span: 1024..1025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 42,
        column: 2,
        span: 1026..1027,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 42,
        column: 4,
        span: 1028..1029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "vararg",
        ),
        line: 42,
        column: 11,
        span: 1030..1036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 12,
        span: 1036..1037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 42,
        column: 16,
        span: 1037..1041,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 17,
        span: 1041..1042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 42,
        column: 21,
        span: 1042..1046,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 22,
        span: 1046..1047,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 42,
        column: 24,
        span: 1048..1049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c12",
        ),
        line: 42,
        column: 27,
        span: 1049..1052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 28,
        span: 1052..1053,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 42,
        column: 30,
        span: 1054..1055,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 31,
        span: 1054..1056,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 32,
        span: 1056..1057,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 33,
        span: 1056..1058,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 42,
        column: 34,
        span: 1058..1059,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 42,
        column: 35,
        span: 1059..1060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 36,
        span: 1060..1061,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 37,
        span: 1061..1062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 43,
        column: 7,
        span: 1063..1069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 8,
        span: 1069..1070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 43,
        column: 9,
        span: 1070..1071,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 10,
        span: 1071..1072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 43,
        column: 11,
        span: 1072..1073,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
        column: 14,
        span: 1074..1076,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 16,
        span: 1076..1078,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 43,
        column: 20,
        span: 1079..1082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 43,
        column: 22,
        span: 1083..1084,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 43,
        column: 23,
        span: 1084..1085,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 24,
        span: 1084..1086,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 43,
        column: 25,
        span: 1086..1087,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
        column: 28,
        span: 1088..1090,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "55",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 31,
        span: 1090..1093,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 43,
        column: 35,
        span: 1094..1097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 43,
        column: 37,
        span: 1098..1099,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 43,
        column: 38,
        span: 1099..1100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 39,
        span: 1099..1101,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 43,
        column: 40,
        span: 1101..1102,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
        column: 43,
        span: 1103..1105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 45,
        span: 1105..1107,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 46,
        span: 1107..1108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 44,
        column: 2,
        span: 1109..1110,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 4,
        span: 1111..1112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 44,
        column: 9,
        span: 1113..1117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 10,
        span: 1117..1118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 44,
        column: 15,
        span: 1118..1123,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 16,
        span: 1123..1124,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 44,
        column: 18,
        span: 1125..1126,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 44,
        column: 21,
        span: 1126..1129,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 44,
        column: 22,
        span: 1129..1130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 23,
        span: 1130..1131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
        column: 7,
        span: 1132..1138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 8,
        span: 1138..1139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 45,
        column: 9,
        span: 1139..1140,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
        column: 12,
        span: 1141..1143,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 45,
        column: 16,
        span: 1144..1147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 17,
        span: 1147..1148,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 47,
        column: 6,
        span: 1150..1155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 47,
        column: 8,
        span: 1156..1157,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 47,
        column: 10,
        span: 1158..1159,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 47,
        column: 12,
        span: 1160..1161,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 13,
        span: 1160..1162,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 14,
        span: 1162..1163,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 17,
        span: 1163..1166,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 47,
        column: 18,
        span: 1166..1167,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 48,
        column: 9,
        span: 1168..1176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 48,
        column: 11,
        span: 1177..1178,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 48,
        column: 12,
        span: 1178..1179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 48,
        column: 13,
        span: 1179..1180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 15,
        span: 1181..1182,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 48,
        column: 18,
        span: 1182..1185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 19,
        span: 1185..1186,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 48,
        column: 25,
        span: 1187..1192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 48,
        column: 29,
        span: 1193..1196,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 48,
        column: 31,
        span: 1197..1198,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 48,
        column: 33,
        span: 1199..1200,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 48,
        column: 36,
        span: 1200..1203,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 48,
        column: 37,
        span: 1203..1204,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 48,
        column: 38,
        span: 1204..1205,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 48,
        column: 45,
        span: 1206..1212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        line: 48,
        column: 50,
        span: 1213..1217,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 48,
        column: 51,
        span: 1217..1218,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 48,
        column: 54,
        span: 1218..1221,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 48,
        column: 55,
        span: 1221..1222,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 48,
        column: 56,
        span: 1222..1223,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 48,
        column: 57,
        span: 1223..1224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 48,
        column: 60,
        span: 1224..1227,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 48,
        column: 0,
        span: 1228..1231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 49,
        column: 7,
        span: 1232..1238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 8,
        span: 1238..1239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 49,
        column: 9,
        span: 1239..1240,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 49,
        column: 10,
        span: 1240..1241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 49,
        column: 11,
        span: 1241..1242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 12,
        span: 1242..1243,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 13,
        span: 1242..1244,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 14,
        span: 1244..1245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 15,
        span: 1244..1246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 16,
        span: 1246..1247,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 49,
        column: 19,
        span: 1248..1250,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 21,
        span: 1250..1252,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 49,
        column: 25,
        span: 1253..1256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 49,
        column: 27,
        span: 1257..1258,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 49,
        column: 28,
        span: 1258..1259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 49,
        column: 29,
        span: 1259..1260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 30,
        span: 1260..1261,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 31,
        span: 1260..1262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 32,
        span: 1262..1263,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 49,
        column: 35,
        span: 1264..1266,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 38,
        span: 1266..1269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 39,
        span: 1269..1270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 50,
        column: 6,
        span: 1271..1276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 7,
        span: 1276..1277,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 50,
        column: 10,
        span: 1277..1280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 11,
        span: 1280..1281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 52,
        column: 4,
        span: 1283..1286,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
        column: 6,
        span: 1287..1288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 52,
        column: 0,
        span: 1288..1291,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 53,
        column: 6,
        span: 1292..1297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 53,
        column: 8,
        span: 1298..1299,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 9,
        span: 1299..1300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
        column: 11,
        span: 1301..1302,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 53,
        column: 13,
        span: 1303..1304,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 15,
        span: 1304..1306,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 16,
        span: 1306..1307,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 53,
        column: 18,
        span: 1308..1309,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 53,
        column: 19,
        span: 1309..1310,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 54,
        column: 6,
        span: 1311..1316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 54,
        column: 8,
        span: 1317..1318,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 54,
        column: 11,
        span: 1319..1321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 54,
        column: 15,
        span: 1322..1325,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 54,
        column: 18,
        span: 1326..1328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 54,
        column: 20,
        span: 1329..1330,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 54,
        column: 21,
        span: 1330..1331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 54,
        column: 22,
        span: 1331..1332,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 54,
        column: 23,
        span: 1332..1333,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 54,
        column: 25,
        span: 1334..1335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 54,
        column: 27,
        span: 1336..1337,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 54,
        column: 28,
        span: 1337..1338,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 54,
        column: 31,
        span: 1337..1341,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 54,
        column: 32,
        span: 1341..1342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 54,
        column: 34,
        span: 1343..1344,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 54,
        column: 35,
        span: 1344..1345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 54,
        column: 36,
        span: 1345..1346,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 54,
        column: 37,
        span: 1346..1347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
        column: 38,
        span: 1346..1348,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 54,
        column: 0,
        span: 1349..1352,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 56,
        column: 9,
        span: 1354..1362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 56,
        column: 11,
        span: 1363..1364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 12,
        span: 1364..1365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 56,
        column: 13,
        span: 1365..1366,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 14,
        span: 1366..1367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 56,
        column: 16,
        span: 1368..1369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 17,
        span: 1369..1370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 56,
        column: 19,
        span: 1371..1372,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 20,
        span: 1372..1373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 56,
        column: 22,
        span: 1374..1375,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 23,
        span: 1375..1376,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 56,
        column: 27,
        span: 1377..1380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 28,
        span: 1380..1381,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 57,
        column: 8,
        span: 1384..1389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "more",
        ),
        line: 57,
        column: 13,
        span: 1390..1394,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 57,
        column: 15,
        span: 1395..1396,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 57,
        column: 17,
        span: 1397..1398,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 57,
        column: 20,
        span: 1398..1401,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 57,
        column: 21,
        span: 1401..1402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 58,
        column: 9,
        span: 1405..1411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 10,
        span: 1411..1412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 58,
        column: 11,
        span: 1412..1413,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 58,
        column: 14,
        span: 1414..1416,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 58,
        column: 18,
        span: 1416..1420,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 58,
        column: 22,
        span: 1421..1424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "more",
        ),
        line: 58,
        column: 27,
        span: 1425..1429,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 58,
        column: 28,
        span: 1429..1430,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 29,
        span: 1429..1431,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 58,
        column: 30,
        span: 1431..1432,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 58,
        column: 33,
        span: 1433..1435,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 58,
        column: 37,
        span: 1435..1439,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 58,
        column: 0,
        span: 1440..1443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "more",
        ),
        line: 59,
        column: 14,
        span: 1453..1457,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 59,
        column: 15,
        span: 1457..1458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 59,
        column: 18,
        span: 1458..1461,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 59,
        column: 19,
        span: 1461..1462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 20,
        span: 1461..1463,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 59,
        column: 21,
        span: 1463..1464,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 59,
        column: 24,
        span: 1465..1467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 59,
        column: 28,
        span: 1468..1471,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 59,
        column: 29,
        span: 1471..1472,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 59,
        column: 32,
        span: 1471..1475,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 59,
        column: 36,
        span: 1476..1479,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 59,
        column: 40,
        span: 1480..1483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "more",
        ),
        line: 59,
        column: 45,
        span: 1484..1488,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 59,
        column: 46,
        span: 1488..1489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 59,
        column: 49,
        span: 1489..1492,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 59,
        column: 50,
        span: 1492..1493,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 51,
        span: 1492..1494,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 59,
        column: 52,
        span: 1494..1495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 53,
        span: 1495..1496,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 60,
        column: 0,
        span: 1497..1500,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 62,
        column: 9,
        span: 1502..1510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 62,
        column: 11,
        span: 1511..1512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 12,
        span: 1512..1513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 62,
        column: 13,
        span: 1513..1514,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 14,
        span: 1514..1515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 62,
        column: 15,
        span: 1515..1516,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 16,
        span: 1516..1517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 62,
        column: 17,
        span: 1517..1518,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 18,
        span: 1518..1519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 63,
        column: 9,
        span: 1522..1528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 10,
        span: 1528..1529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 63,
        column: 11,
        span: 1529..1530,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 63,
        column: 14,
        span: 1531..1533,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 63,
        column: 18,
        span: 1533..1537,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 63,
        column: 22,
        span: 1538..1541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 63,
        column: 24,
        span: 1542..1543,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 63,
        column: 27,
        span: 1544..1546,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 63,
        column: 31,
        span: 1546..1550,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 63,
        column: 35,
        span: 1551..1554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 63,
        column: 37,
        span: 1555..1556,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 63,
        column: 40,
        span: 1557..1559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 63,
        column: 44,
        span: 1559..1563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 45,
        span: 1563..1564,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 64,
        column: 0,
        span: 1565..1568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 66,
        column: 5,
        span: 1570..1574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 6,
        span: 1574..1575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 66,
        column: 7,
        span: 1575..1576,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 8,
        span: 1576..1577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
        column: 10,
        span: 1578..1579,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 11,
        span: 1579..1580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 67,
        column: 5,
        span: 1581..1585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 6,
        span: 1585..1586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 67,
        column: 7,
        span: 1586..1587,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 8,
        span: 1587..1588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 67,
        column: 10,
        span: 1589..1590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 11,
        span: 1590..1591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 69,
        column: 2,
        span: 1593..1594,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 69,
        column: 4,
        span: 1595..1596,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 69,
        column: 6,
        span: 1597..1598,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 69,
        column: 7,
        span: 1598..1599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 70,
        column: 2,
        span: 1600..1601,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 70,
        column: 4,
        span: 1602..1603,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 0,
        span: 1603..1605,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 71,
        column: 6,
        span: 1606..1611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 71,
        column: 8,
        span: 1612..1613,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 71,
        column: 11,
        span: 1614..1616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 71,
        column: 15,
        span: 1617..1620,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 71,
        column: 18,
        span: 1621..1623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 71,
        column: 20,
        span: 1624..1625,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 71,
        column: 21,
        span: 1625..1626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 71,
        column: 22,
        span: 1626..1627,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 71,
        column: 23,
        span: 1627..1628,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 71,
        column: 25,
        span: 1629..1630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 71,
        column: 27,
        span: 1631..1632,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 71,
        column: 28,
        span: 1632..1633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 71,
        column: 30,
        span: 1634..1635,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 71,
        column: 31,
        span: 1635..1636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 71,
        column: 32,
        span: 1636..1637,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 71,
        column: 33,
        span: 1637..1638,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 34,
        span: 1637..1639,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 71,
        column: 0,
        span: 1640..1643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 72,
        column: 7,
        span: 1644..1650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 8,
        span: 1650..1651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "call",
        ),
        line: 72,
        column: 12,
        span: 1651..1655,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 13,
        span: 1655..1656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 72,
        column: 17,
        span: 1656..1660,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 72,
        column: 18,
        span: 1660..1661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 72,
        column: 21,
        span: 1661..1664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 22,
        span: 1664..1665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 72,
        column: 24,
        span: 1666..1667,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 25,
        span: 1667..1668,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 72,
        column: 28,
        span: 1669..1671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 72,
        column: 32,
        span: 1672..1675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 33,
        span: 1675..1676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 74,
        column: 6,
        span: 1678..1683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 7,
        span: 1683..1684,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 74,
        column: 10,
        span: 1684..1687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 11,
        span: 1687..1688,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 79,
        column: 9,
        span: 1713..1721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oneless",
        ),
        line: 79,
        column: 17,
        span: 1722..1729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 19,
        span: 1730..1731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 79,
        column: 20,
        span: 1731..1732,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 21,
        span: 1732..1733,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 79,
        column: 25,
        span: 1734..1737,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 26,
        span: 1737..1738,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 79,
        column: 33,
        span: 1739..1745,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 79,
        column: 37,
        span: 1746..1749,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 79,
        column: 0,
        span: 1750..1753,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 81,
        column: 9,
        span: 1755..1763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 81,
        column: 11,
        span: 1764..1765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 13,
        span: 1766..1767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 81,
        column: 14,
        span: 1767..1768,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 15,
        span: 1768..1769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 81,
        column: 17,
        span: 1770..1771,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 18,
        span: 1771..1772,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 81,
        column: 22,
        span: 1773..1776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 23,
        span: 1776..1777,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 82,
        column: 8,
        span: 1780..1785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 82,
        column: 0,
        span: 1786..1787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 83,
        column: 9,
        span: 1790..1796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 10,
        span: 1796..1797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 83,
        column: 13,
        span: 1797..1800,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 83,
        column: 16,
        span: 1801..1803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 83,
        column: 19,
        span: 1804..1806,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 83,
        column: 20,
        span: 1806..1807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 83,
        column: 23,
        span: 1807..1810,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 24,
        span: 1810..1811,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 84,
        column: 5,
        span: 1834..1836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 84,
        column: 7,
        span: 1837..1838,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 84,
        column: 10,
        span: 1839..1841,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 12,
        span: 1841..1843,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 84,
        column: 0,
        span: 1844..1848,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 85,
        column: 10,
        span: 1853..1858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 85,
        column: 12,
        span: 1859..1860,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 13,
        span: 1860..1861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 85,
        column: 15,
        span: 1862..1863,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 16,
        span: 1863..1864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 85,
        column: 18,
        span: 1865..1866,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 20,
        span: 1867..1868,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 85,
        column: 24,
        span: 1869..1872,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 86,
        column: 11,
        span: 1877..1883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 86,
        column: 13,
        span: 1884..1885,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 14,
        span: 1885..1886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 86,
        column: 16,
        span: 1887..1888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 17,
        span: 1888..1889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 86,
        column: 19,
        span: 1890..1891,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 20,
        span: 1891..1892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 86,
        column: 22,
        span: 1893..1894,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 23,
        span: 1894..1895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oneless",
        ),
        line: 86,
        column: 31,
        span: 1896..1903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 32,
        span: 1903..1904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oneless",
        ),
        line: 86,
        column: 39,
        span: 1904..1911,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 40,
        span: 1911..1912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oneless",
        ),
        line: 86,
        column: 47,
        span: 1912..1919,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 48,
        span: 1919..1920,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 86,
        column: 51,
        span: 1920..1923,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 52,
        span: 1923..1924,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 53,
        span: 1924..1925,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 54,
        span: 1925..1926,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 87,
        column: 0,
        span: 1929..1933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 88,
        column: 6,
        span: 1938..1939,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 7,
        span: 1939..1940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 88,
        column: 9,
        span: 1941..1942,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 10,
        span: 1942..1943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 88,
        column: 12,
        span: 1944..1945,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 88,
        column: 14,
        span: 1946..1947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 88,
        column: 16,
        span: 1948..1949,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 88,
        column: 17,
        span: 1949..1950,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
        column: 18,
        span: 1949..1951,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 19,
        span: 1951..1952,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 88,
        column: 23,
        span: 1953..1956,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 24,
        span: 1956..1957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 88,
        column: 0,
        span: 1958..1959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 89,
        column: 11,
        span: 1964..1970,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 12,
        span: 1970..1971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 89,
        column: 13,
        span: 1971..1972,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 89,
        column: 16,
        span: 1973..1975,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 89,
        column: 20,
        span: 1976..1979,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 21,
        span: 1979..1980,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 90,
        column: 11,
        span: 1985..1991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 90,
        column: 13,
        span: 1992..1993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 14,
        span: 1993..1994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 90,
        column: 15,
        span: 1994..1995,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 16,
        span: 1995..1996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 90,
        column: 18,
        span: 1997..1998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 19,
        span: 1998..1999,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 90,
        column: 23,
        span: 2000..2003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 24,
        span: 2003..2004,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 91,
        column: 0,
        span: 2007..2010,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 92,
        column: 0,
        span: 2011..2014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 94,
        column: 2,
        span: 2016..2017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 3,
        span: 2017..2018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 94,
        column: 4,
        span: 2018..2019,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 5,
        span: 2019..2020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 94,
        column: 6,
        span: 2020..2021,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 7,
        span: 2021..2022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 94,
        column: 8,
        span: 2022..2023,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 9,
        span: 2023..2024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 94,
        column: 10,
        span: 2024..2025,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 94,
        column: 12,
        span: 2026..2027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 94,
        column: 19,
        span: 2028..2034,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 20,
        span: 2034..2035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 94,
        column: 21,
        span: 2035..2036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 22,
        span: 2036..2037,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 24,
        span: 2036..2039,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 25,
        span: 2039..2040,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 26,
        span: 2039..2041,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 27,
        span: 2041..2042,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 28,
        span: 2041..2043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 29,
        span: 2043..2044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 30,
        span: 2043..2045,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 31,
        span: 2045..2046,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 32,
        span: 2045..2047,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 33,
        span: 2047..2048,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 34,
        span: 2047..2049,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 35,
        span: 2049..2050,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 36,
        span: 2050..2051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 95,
        column: 7,
        span: 2052..2058,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 8,
        span: 2058..2059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 95,
        column: 9,
        span: 2059..2060,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 11,
        span: 2060..2062,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 12,
        span: 2061..2063,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 95,
        column: 16,
        span: 2064..2067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 95,
        column: 18,
        span: 2068..2069,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 20,
        span: 2069..2071,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 21,
        span: 2070..2072,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 95,
        column: 25,
        span: 2073..2076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 95,
        column: 27,
        span: 2077..2078,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 29,
        span: 2078..2080,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 30,
        span: 2079..2081,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 95,
        column: 34,
        span: 2082..2085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 95,
        column: 36,
        span: 2086..2087,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 38,
        span: 2087..2089,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 39,
        span: 2088..2090,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 95,
        column: 43,
        span: 2091..2094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 95,
        column: 45,
        span: 2095..2096,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 47,
        span: 2096..2098,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 48,
        span: 2097..2099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 49,
        span: 2099..2100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 97,
        column: 2,
        span: 2102..2103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 3,
        span: 2103..2104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 97,
        column: 4,
        span: 2104..2105,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 5,
        span: 2105..2106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 97,
        column: 6,
        span: 2106..2107,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 7,
        span: 2107..2108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 97,
        column: 8,
        span: 2108..2109,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 9,
        span: 2109..2110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 97,
        column: 10,
        span: 2110..2111,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 97,
        column: 12,
        span: 2112..2113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 97,
        column: 14,
        span: 2114..2115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 15,
        span: 2115..2116,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 16,
        span: 2115..2117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 17,
        span: 2117..2118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 98,
        column: 7,
        span: 2119..2125,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 8,
        span: 2125..2126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 98,
        column: 9,
        span: 2126..2127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
        column: 11,
        span: 2127..2129,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 98,
        column: 14,
        span: 2129..2132,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 98,
        column: 18,
        span: 2133..2136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 98,
        column: 20,
        span: 2137..2138,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
        column: 22,
        span: 2138..2140,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 98,
        column: 25,
        span: 2140..2143,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 98,
        column: 29,
        span: 2144..2147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 98,
        column: 31,
        span: 2148..2149,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
        column: 33,
        span: 2149..2151,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 98,
        column: 36,
        span: 2151..2154,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 98,
        column: 40,
        span: 2155..2158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 98,
        column: 42,
        span: 2159..2160,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
        column: 44,
        span: 2160..2162,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 98,
        column: 47,
        span: 2162..2165,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 98,
        column: 51,
        span: 2166..2169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 98,
        column: 53,
        span: 2170..2171,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
        column: 55,
        span: 2171..2173,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 98,
        column: 58,
        span: 2173..2176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 59,
        span: 2176..2177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 102,
        column: 2,
        span: 2207..2208,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 102,
        column: 4,
        span: 2209..2210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 102,
        column: 9,
        span: 2211..2215,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ return {...} ]]",
        ),
        line: 102,
        column: 27,
        span: 2215..2233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 103,
        column: 2,
        span: 2234..2235,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 103,
        column: 4,
        span: 2236..2237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 103,
        column: 6,
        span: 2238..2239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 7,
        span: 2239..2240,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 8,
        span: 2239..2241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
        column: 9,
        span: 2241..2242,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 10,
        span: 2241..2243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 11,
        span: 2243..2244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 104,
        column: 7,
        span: 2245..2251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 8,
        span: 2251..2252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 104,
        column: 9,
        span: 2252..2253,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 104,
        column: 10,
        span: 2253..2254,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 11,
        span: 2253..2255,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 104,
        column: 12,
        span: 2255..2256,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 104,
        column: 15,
        span: 2257..2259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 17,
        span: 2259..2261,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 104,
        column: 21,
        span: 2262..2265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 104,
        column: 23,
        span: 2266..2267,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 104,
        column: 24,
        span: 2267..2268,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 25,
        span: 2267..2269,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 104,
        column: 26,
        span: 2269..2270,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 104,
        column: 29,
        span: 2271..2273,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 31,
        span: 2273..2275,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 104,
        column: 35,
        span: 2276..2279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 104,
        column: 37,
        span: 2280..2281,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 104,
        column: 38,
        span: 2281..2282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 39,
        span: 2281..2283,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 104,
        column: 40,
        span: 2283..2284,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 104,
        column: 43,
        span: 2285..2287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 104,
        column: 49,
        span: 2288..2293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 50,
        span: 2293..2294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 107,
        column: 2,
        span: 2297..2298,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
        column: 4,
        span: 2299..2300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 107,
        column: 9,
        span: 2301..2305,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local x = {...}\n  for i=1,select('#', ...) do assert(x[i] == select(i, ...)) end\n  assert(x[select('#', ...)+1] == undef)\n  return true\n]]",
        ),
        line: 112,
        column: 3,
        span: 2305..2448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 114,
        column: 7,
        span: 2450..2456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 8,
        span: 2456..2457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 114,
        column: 9,
        span: 2457..2458,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 10,
        span: 2458..2459,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 114,
        column: 13,
        span: 2459..2462,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 14,
        span: 2462..2463,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 114,
        column: 18,
        span: 2464..2467,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 19,
        span: 2467..2468,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 114,
        column: 23,
        span: 2469..2472,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 24,
        span: 2472..2473,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 114,
        column: 26,
        span: 2474..2475,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 114,
        column: 27,
        span: 2475..2476,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 28,
        span: 2476..2477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 114,
        column: 35,
        span: 2478..2484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 36,
        span: 2484..2485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 37,
        span: 2485..2486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 115,
        column: 7,
        span: 2487..2493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 8,
        span: 2493..2494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 115,
        column: 9,
        span: 2494..2495,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 10,
        span: 2495..2496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 11,
        span: 2496..2497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 12,
        span: 2497..2498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 117,
        column: 2,
        span: 2500..2501,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 117,
        column: 4,
        span: 2502..2503,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 117,
        column: 6,
        span: 2504..2505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 117,
        column: 12,
        span: 2505..2511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 13,
        span: 2511..2512,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 14,
        span: 2511..2513,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 15,
        span: 2513..2514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 117,
        column: 21,
        span: 2515..2520,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 117,
        column: 22,
        span: 2520..2521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 117,
        column: 28,
        span: 2521..2527,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 117,
        column: 29,
        span: 2527..2528,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 31,
        span: 2527..2530,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 32,
        span: 2530..2531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 34,
        span: 2530..2533,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 35,
        span: 2533..2534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 37,
        span: 2533..2536,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 38,
        span: 2536..2537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 40,
        span: 2536..2539,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 117,
        column: 41,
        span: 2539..2540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 42,
        span: 2540..2541,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 117,
        column: 43,
        span: 2541..2542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 118,
        column: 7,
        span: 2543..2549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 8,
        span: 2549..2550,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 118,
        column: 9,
        span: 2550..2551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 10,
        span: 2551..2552,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
        column: 13,
        span: 2553..2555,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 15,
        span: 2555..2557,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 118,
        column: 19,
        span: 2558..2561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 21,
        span: 2562..2563,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 118,
        column: 22,
        span: 2563..2564,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 23,
        span: 2563..2565,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 118,
        column: 24,
        span: 2565..2566,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
        column: 27,
        span: 2567..2569,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 30,
        span: 2569..2572,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 118,
        column: 34,
        span: 2573..2576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 36,
        span: 2577..2578,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 118,
        column: 37,
        span: 2578..2579,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 38,
        span: 2578..2580,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 118,
        column: 39,
        span: 2580..2581,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
        column: 42,
        span: 2582..2584,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 45,
        span: 2584..2587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 46,
        span: 2587..2588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 119,
        column: 2,
        span: 2589..2590,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 119,
        column: 4,
        span: 2591..2592,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 119,
        column: 6,
        span: 2593..2594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 119,
        column: 12,
        span: 2594..2600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 13,
        span: 2600..2601,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 14,
        span: 2600..2602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 15,
        span: 2602..2603,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 119,
        column: 16,
        span: 2603..2604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 120,
        column: 7,
        span: 2605..2611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 8,
        span: 2611..2612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 120,
        column: 12,
        span: 2612..2616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 13,
        span: 2616..2617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 14,
        span: 2617..2618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 15,
        span: 2618..2619,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
        column: 18,
        span: 2620..2622,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 120,
        column: 22,
        span: 2623..2626,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 23,
        span: 2626..2627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 121,
        column: 2,
        span: 2628..2629,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 121,
        column: 4,
        span: 2630..2631,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 121,
        column: 6,
        span: 2632..2633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 121,
        column: 12,
        span: 2633..2639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 13,
        span: 2639..2640,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 121,
        column: 14,
        span: 2640..2641,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 15,
        span: 2640..2642,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 16,
        span: 2642..2643,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 18,
        span: 2643..2645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 19,
        span: 2645..2646,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 21,
        span: 2646..2648,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 22,
        span: 2648..2649,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 24,
        span: 2649..2651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 25,
        span: 2651..2652,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 121,
        column: 26,
        span: 2652..2653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 122,
        column: 7,
        span: 2654..2660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 8,
        span: 2660..2661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 122,
        column: 9,
        span: 2661..2662,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 122,
        column: 10,
        span: 2662..2663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 11,
        span: 2662..2664,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 122,
        column: 12,
        span: 2664..2665,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 122,
        column: 15,
        span: 2666..2668,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 17,
        span: 2668..2670,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 122,
        column: 21,
        span: 2671..2674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 122,
        column: 23,
        span: 2675..2676,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 122,
        column: 24,
        span: 2676..2677,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 25,
        span: 2676..2678,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 122,
        column: 26,
        span: 2678..2679,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 122,
        column: 29,
        span: 2680..2682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 122,
        column: 35,
        span: 2683..2688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 36,
        span: 2688..2689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 123,
        column: 2,
        span: 2690..2691,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 123,
        column: 4,
        span: 2692..2693,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 123,
        column: 6,
        span: 2694..2695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 123,
        column: 12,
        span: 2695..2701,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 13,
        span: 2701..2702,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 123,
        column: 14,
        span: 2702..2703,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
        column: 15,
        span: 2702..2704,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 16,
        span: 2704..2705,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
        column: 18,
        span: 2705..2707,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 19,
        span: 2707..2708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
        column: 21,
        span: 2708..2710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 22,
        span: 2710..2711,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
        column: 24,
        span: 2711..2713,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 25,
        span: 2713..2714,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 123,
        column: 26,
        span: 2714..2715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 124,
        column: 7,
        span: 2716..2722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 8,
        span: 2722..2723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 124,
        column: 9,
        span: 2723..2724,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 124,
        column: 10,
        span: 2724..2725,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 11,
        span: 2724..2726,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 124,
        column: 12,
        span: 2726..2727,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
        column: 15,
        span: 2728..2730,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 17,
        span: 2730..2732,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 124,
        column: 21,
        span: 2733..2736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 124,
        column: 23,
        span: 2737..2738,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 124,
        column: 24,
        span: 2738..2739,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 25,
        span: 2738..2740,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 124,
        column: 26,
        span: 2740..2741,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
        column: 29,
        span: 2742..2744,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 31,
        span: 2744..2746,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 124,
        column: 35,
        span: 2747..2750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 124,
        column: 37,
        span: 2751..2752,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 124,
        column: 38,
        span: 2752..2753,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 39,
        span: 2752..2754,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 124,
        column: 40,
        span: 2754..2755,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
        column: 43,
        span: 2756..2758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "undef",
        ),
        line: 124,
        column: 49,
        span: 2759..2764,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 50,
        span: 2764..2765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 125,
        column: 6,
        span: 2766..2771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 7,
        span: 2771..2772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 125,
        column: 13,
        span: 2772..2778,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 14,
        span: 2778..2779,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 20,
        span: 2779..2785,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 21,
        span: 2785..2786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 126,
        column: 6,
        span: 2787..2792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 7,
        span: 2792..2793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 126,
        column: 13,
        span: 2793..2799,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 14,
        span: 2799..2800,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
        column: 16,
        span: 2801..2802,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 21,
        span: 2801..2807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 22,
        span: 2807..2808,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 131,
        column: 9,
        span: 2828..2836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 131,
        column: 11,
        span: 2837..2838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 12,
        span: 2838..2839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p1",
        ),
        line: 131,
        column: 14,
        span: 2839..2841,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 15,
        span: 2841..2842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p2",
        ),
        line: 131,
        column: 18,
        span: 2843..2845,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 19,
        span: 2845..2846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p3",
        ),
        line: 131,
        column: 22,
        span: 2847..2849,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 23,
        span: 2849..2850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p4",
        ),
        line: 131,
        column: 26,
        span: 2851..2853,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 27,
        span: 2853..2854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p5",
        ),
        line: 131,
        column: 30,
        span: 2855..2857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 31,
        span: 2857..2858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p6",
        ),
        line: 131,
        column: 34,
        span: 2859..2861,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 35,
        span: 2861..2862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p7",
        ),
        line: 131,
        column: 38,
        span: 2863..2865,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 39,
        span: 2865..2866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p8",
        ),
        line: 131,
        column: 42,
        span: 2867..2869,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 43,
        span: 2869..2870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p9",
        ),
        line: 131,
        column: 46,
        span: 2871..2873,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 47,
        span: 2873..2874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p10",
        ),
        line: 131,
        column: 51,
        span: 2875..2878,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 52,
        span: 2878..2879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p11",
        ),
        line: 132,
        column: 4,
        span: 2880..2883,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 5,
        span: 2883..2884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p12",
        ),
        line: 132,
        column: 9,
        span: 2885..2888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 10,
        span: 2888..2889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p13",
        ),
        line: 132,
        column: 14,
        span: 2890..2893,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 15,
        span: 2893..2894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p14",
        ),
        line: 132,
        column: 19,
        span: 2895..2898,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 20,
        span: 2898..2899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p15",
        ),
        line: 132,
        column: 24,
        span: 2900..2903,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 25,
        span: 2903..2904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p16",
        ),
        line: 132,
        column: 29,
        span: 2905..2908,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 30,
        span: 2908..2909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p17",
        ),
        line: 132,
        column: 34,
        span: 2910..2913,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 35,
        span: 2913..2914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p18",
        ),
        line: 132,
        column: 39,
        span: 2915..2918,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 40,
        span: 2918..2919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p19",
        ),
        line: 132,
        column: 44,
        span: 2920..2923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 45,
        span: 2923..2924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p20",
        ),
        line: 132,
        column: 49,
        span: 2925..2928,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 50,
        span: 2928..2929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p21",
        ),
        line: 133,
        column: 4,
        span: 2930..2933,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 5,
        span: 2933..2934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p22",
        ),
        line: 133,
        column: 9,
        span: 2935..2938,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 10,
        span: 2938..2939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p23",
        ),
        line: 133,
        column: 14,
        span: 2940..2943,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 15,
        span: 2943..2944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p24",
        ),
        line: 133,
        column: 19,
        span: 2945..2948,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 20,
        span: 2948..2949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p25",
        ),
        line: 133,
        column: 24,
        span: 2950..2953,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 25,
        span: 2953..2954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p26",
        ),
        line: 133,
        column: 29,
        span: 2955..2958,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 30,
        span: 2958..2959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p27",
        ),
        line: 133,
        column: 34,
        span: 2960..2963,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 35,
        span: 2963..2964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p28",
        ),
        line: 133,
        column: 39,
        span: 2965..2968,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 40,
        span: 2968..2969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p29",
        ),
        line: 133,
        column: 44,
        span: 2970..2973,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 45,
        span: 2973..2974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p30",
        ),
        line: 133,
        column: 49,
        span: 2975..2978,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 50,
        span: 2978..2979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p31",
        ),
        line: 134,
        column: 4,
        span: 2980..2983,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 5,
        span: 2983..2984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p32",
        ),
        line: 134,
        column: 9,
        span: 2985..2988,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 10,
        span: 2988..2989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p33",
        ),
        line: 134,
        column: 14,
        span: 2990..2993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 15,
        span: 2993..2994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p34",
        ),
        line: 134,
        column: 19,
        span: 2995..2998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 20,
        span: 2998..2999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p35",
        ),
        line: 134,
        column: 24,
        span: 3000..3003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 25,
        span: 3003..3004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p36",
        ),
        line: 134,
        column: 29,
        span: 3005..3008,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 30,
        span: 3008..3009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p37",
        ),
        line: 134,
        column: 34,
        span: 3010..3013,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 35,
        span: 3013..3014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p38",
        ),
        line: 134,
        column: 39,
        span: 3015..3018,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 40,
        span: 3018..3019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p39",
        ),
        line: 134,
        column: 44,
        span: 3020..3023,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 45,
        span: 3023..3024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p40",
        ),
        line: 134,
        column: 49,
        span: 3025..3028,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 50,
        span: 3028..3029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p41",
        ),
        line: 135,
        column: 4,
        span: 3030..3033,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 5,
        span: 3033..3034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p42",
        ),
        line: 135,
        column: 9,
        span: 3035..3038,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 10,
        span: 3038..3039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p43",
        ),
        line: 135,
        column: 14,
        span: 3040..3043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 15,
        span: 3043..3044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p44",
        ),
        line: 135,
        column: 19,
        span: 3045..3048,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 20,
        span: 3048..3049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p45",
        ),
        line: 135,
        column: 24,
        span: 3050..3053,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 25,
        span: 3053..3054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p46",
        ),
        line: 135,
        column: 29,
        span: 3055..3058,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 30,
        span: 3058..3059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p48",
        ),
        line: 135,
        column: 34,
        span: 3060..3063,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 35,
        span: 3063..3064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p49",
        ),
        line: 135,
        column: 39,
        span: 3065..3068,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 40,
        span: 3068..3069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p50",
        ),
        line: 135,
        column: 44,
        span: 3070..3073,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 45,
        span: 3073..3074,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 135,
        column: 49,
        span: 3075..3078,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 50,
        span: 3078..3079,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 136,
        column: 8,
        span: 3082..3087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 136,
        column: 11,
        span: 3088..3090,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 12,
        span: 3090..3091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        line: 136,
        column: 14,
        span: 3091..3093,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 15,
        span: 3093..3094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 136,
        column: 17,
        span: 3094..3096,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 18,
        span: 3096..3097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        line: 136,
        column: 20,
        span: 3097..3099,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 21,
        span: 3099..3100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a5",
        ),
        line: 136,
        column: 23,
        span: 3100..3102,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 24,
        span: 3102..3103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a6",
        ),
        line: 136,
        column: 26,
        span: 3103..3105,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 27,
        span: 3105..3106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a7",
        ),
        line: 136,
        column: 0,
        span: 3106..3108,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 137,
        column: 8,
        span: 3111..3116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a8",
        ),
        line: 137,
        column: 11,
        span: 3117..3119,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 12,
        span: 3119..3120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a9",
        ),
        line: 137,
        column: 14,
        span: 3120..3122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 15,
        span: 3122..3123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a10",
        ),
        line: 137,
        column: 18,
        span: 3123..3126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 19,
        span: 3126..3127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a11",
        ),
        line: 137,
        column: 22,
        span: 3127..3130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 23,
        span: 3130..3131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a12",
        ),
        line: 137,
        column: 26,
        span: 3131..3134,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 27,
        span: 3134..3135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a13",
        ),
        line: 137,
        column: 30,
        span: 3135..3138,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 31,
        span: 3138..3139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a14",
        ),
        line: 137,
        column: 0,
        span: 3139..3142,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 138,
        column: 0,
        span: 3143..3146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 141,
        column: 2,
        span: 3171..3172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 3,
        span: 3172..3173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 4,
        span: 3173..3174,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 144,
        column: 0,
        span: 3210..3212,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 145,
        column: 8,
        span: 3215..3220,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 145,
        column: 17,
        span: 3221..3229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 145,
        column: 19,
        span: 3230..3231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 20,
        span: 3231..3232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 145,
        column: 21,
        span: 3232..3233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 22,
        span: 3233..3234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 145,
        column: 23,
        span: 3234..3235,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 24,
        span: 3235..3236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 145,
        column: 25,
        span: 3236..3237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 26,
        span: 3237..3238,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 145,
        column: 33,
        span: 3239..3245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 145,
        column: 35,
        span: 3246..3247,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 36,
        span: 3247..3248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 145,
        column: 38,
        span: 3249..3250,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 145,
        column: 0,
        span: 3251..3254,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 146,
        column: 8,
        span: 3257..3262,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 146,
        column: 17,
        span: 3263..3271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 146,
        column: 19,
        span: 3272..3273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 20,
        span: 3273..3274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 21,
        span: 3274..3275,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 146,
        column: 28,
        span: 3276..3282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 146,
        column: 30,
        span: 3283..3284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 31,
        span: 3284..3285,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 32,
        span: 3284..3286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 33,
        span: 3286..3287,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 34,
        span: 3286..3288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 35,
        span: 3288..3289,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 146,
        column: 0,
        span: 3290..3293,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 147,
        column: 8,
        span: 3296..3301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 147,
        column: 10,
        span: 3302..3303,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
        column: 11,
        span: 3303..3304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 147,
        column: 13,
        span: 3305..3306,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 147,
        column: 15,
        span: 3307..3308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 147,
        column: 17,
        span: 3309..3310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 18,
        span: 3310..3311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 19,
        span: 3311..3312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 148,
        column: 9,
        span: 3315..3321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 10,
        span: 3321..3322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 148,
        column: 11,
        span: 3322..3323,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 148,
        column: 14,
        span: 3324..3326,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 148,
        column: 18,
        span: 3327..3330,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 148,
        column: 22,
        span: 3331..3334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 148,
        column: 24,
        span: 3335..3336,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 148,
        column: 27,
        span: 3337..3339,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 29,
        span: 3339..3341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 30,
        span: 3341..3342,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 149,
        column: 0,
        span: 3343..3346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 150,
        column: 6,
        span: 3347..3352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 7,
        span: 3352..3353,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 150,
        column: 11,
        span: 3353..3357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 12,
        span: 3357..3358,
    },
]
