---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/calls.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 4,
            column: 6,
            span: 100..105,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 4,
            column: 7,
            span: 105..106,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing functions and calls\"",
        ),
        position: Position {
            line: 4,
            column: 36,
            span: 106..135,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 4,
            column: 37,
            span: 135..136,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 6,
            column: 6,
            span: 138..143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 6,
            column: 12,
            span: 144..149,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 6,
            column: 14,
            span: 150..151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 6,
            column: 22,
            span: 152..159,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        position: Position {
            line: 6,
            column: 30,
            span: 160..167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 10,
            column: 7,
            span: 215..221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 8,
            span: 221..222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 10,
            column: 12,
            span: 222..226,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 13,
            span: 226..227,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 10,
            column: 14,
            span: 226..228,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 10,
            column: 15,
            span: 228..229,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 10,
            column: 16,
            span: 228..230,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 17,
            span: 230..231,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 10,
            column: 20,
            span: 232..234,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'boolean'",
        ),
        position: Position {
            line: 10,
            column: 30,
            span: 235..244,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 31,
            span: 244..245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 11,
            column: 7,
            span: 246..252,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 8,
            span: 252..253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 11,
            column: 12,
            span: 253..257,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 13,
            span: 257..258,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 11,
            column: 17,
            span: 258..262,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 18,
            span: 262..263,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 11,
            column: 21,
            span: 264..266,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'boolean'",
        ),
        position: Position {
            line: 11,
            column: 31,
            span: 267..276,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 11,
            column: 35,
            span: 277..280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 11,
            column: 40,
            span: 281..285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 41,
            span: 285..286,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 11,
            column: 46,
            span: 286..291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 47,
            span: 291..292,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 11,
            column: 50,
            span: 293..295,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'boolean'",
        ),
        position: Position {
            line: 11,
            column: 60,
            span: 296..305,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 61,
            span: 305..306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 12,
            column: 7,
            span: 307..313,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 12,
            column: 8,
            span: 313..314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 12,
            column: 12,
            span: 314..318,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 12,
            column: 13,
            span: 318..319,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 12,
            column: 16,
            span: 319..322,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 12,
            column: 17,
            span: 322..323,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 12,
            column: 20,
            span: 324..326,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nil'",
        ),
        position: Position {
            line: 12,
            column: 26,
            span: 327..332,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 13,
            column: 7,
            span: 336..339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 13,
            column: 12,
            span: 340..344,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 13,
            span: 344..345,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 13,
            column: 14,
            span: 345..346,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 13,
            column: 15,
            span: 345..347,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 16,
            span: 347..348,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 13,
            column: 19,
            span: 349..351,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'number'",
        ),
        position: Position {
            line: 13,
            column: 28,
            span: 352..360,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 14,
            column: 7,
            span: 364..367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 14,
            column: 12,
            span: 368..372,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 14,
            column: 15,
            span: 372..375,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 14,
            column: 18,
            span: 376..378,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        position: Position {
            line: 14,
            column: 27,
            span: 379..387,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 15,
            column: 7,
            span: 391..394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 15,
            column: 12,
            span: 395..399,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 15,
            column: 13,
            span: 399..400,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 15,
            column: 14,
            span: 400..401,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 15,
            column: 17,
            span: 402..404,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 15,
            column: 25,
            span: 405..412,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 16,
            column: 7,
            span: 416..419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 16,
            column: 12,
            span: 420..424,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 13,
            span: 424..425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 16,
            column: 17,
            span: 425..429,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 18,
            span: 429..430,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 16,
            column: 21,
            span: 431..433,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        position: Position {
            line: 16,
            column: 32,
            span: 434..444,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 33,
            span: 444..445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 18,
            column: 7,
            span: 447..453,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 8,
            span: 453..454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 18,
            column: 12,
            span: 454..458,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 13,
            span: 458..459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 18,
            column: 19,
            span: 459..465,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 20,
            span: 465..466,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 18,
            column: 23,
            span: 467..469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 18,
            column: 28,
            span: 470..474,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 29,
            span: 474..475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 18,
            column: 34,
            span: 475..480,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 35,
            span: 480..481,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 36,
            span: 481..482,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 19,
            column: 9,
            span: 483..491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 19,
            column: 11,
            span: 492..493,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 13,
            span: 494..495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 19,
            column: 14,
            span: 495..496,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 15,
            span: 496..497,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 19,
            column: 22,
            span: 498..504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 19,
            column: 24,
            span: 505..506,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 19,
            column: 25,
            span: 506..507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 19,
            column: 26,
            span: 507..508,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 28,
            span: 509..510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 19,
            column: 29,
            span: 510..511,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 30,
            span: 511..512,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 19,
            column: 0,
            span: 513..516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 20,
            column: 7,
            span: 517..523,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 8,
            span: 523..524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 20,
            column: 12,
            span: 524..528,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 13,
            span: 528..529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 20,
            column: 14,
            span: 529..530,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 15,
            span: 530..531,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 20,
            column: 18,
            span: 532..534,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        position: Position {
            line: 20,
            column: 29,
            span: 535..545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 30,
            span: 545..546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 21,
            column: 7,
            span: 547..553,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 8,
            span: 553..554,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 21,
            column: 11,
            span: 554..557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 21,
            column: 17,
            span: 558..563,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 18,
            span: 563..564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 21,
            column: 22,
            span: 564..568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 23,
            span: 568..569,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 24,
            span: 569..570,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 24,
            column: 3,
            span: 573..575,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 25,
            column: 8,
            span: 613..618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 25,
            column: 17,
            span: 619..627,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 25,
            column: 19,
            span: 628..629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 25,
            column: 24,
            span: 630..634,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 25,
            column: 25,
            span: 634..635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 25,
            column: 0,
            span: 635..643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 27,
            column: 7,
            span: 647..651,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 27,
            column: 8,
            span: 651..652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 27,
            column: 16,
            span: 652..660,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 27,
            column: 18,
            span: 661..662,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 27,
            column: 0,
            span: 663..666,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 28,
            column: 8,
            span: 669..674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 28,
            column: 11,
            span: 675..677,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 28,
            column: 12,
            span: 677..678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 28,
            column: 16,
            span: 679..682,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 28,
            column: 18,
            span: 683..684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 28,
            column: 24,
            span: 685..690,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 25,
            span: 690..691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 28,
            column: 30,
            span: 691..696,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 28,
            column: 31,
            span: 696..697,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 28,
            column: 33,
            span: 697..699,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 34,
            span: 699..700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 29,
            column: 9,
            span: 703..709,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 10,
            span: 709..710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 29,
            column: 12,
            span: 710..712,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 29,
            column: 15,
            span: 713..715,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 29,
            column: 21,
            span: 716..721,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 29,
            column: 25,
            span: 722..725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 29,
            column: 32,
            span: 726..732,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 29,
            column: 33,
            span: 732..733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 29,
            column: 37,
            span: 733..737,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 38,
            span: 737..738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 29,
            column: 41,
            span: 738..741,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 29,
            column: 42,
            span: 741..742,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to call a nil value\"",
        ),
        position: Position {
            line: 29,
            column: 72,
            span: 743..772,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 73,
            span: 772..773,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 74,
            span: 773..774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 31,
            column: 7,
            span: 778..782,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 31,
            column: 8,
            span: 782..783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 31,
            column: 16,
            span: 783..791,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 31,
            column: 18,
            span: 792..793,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 31,
            column: 27,
            span: 794..802,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 29,
            span: 803..804,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 30,
            span: 804..805,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 31,
            column: 37,
            span: 806..812,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 31,
            column: 39,
            span: 813..814,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 31,
            column: 40,
            span: 814..815,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 31,
            column: 0,
            span: 816..819,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 32,
            column: 8,
            span: 822..827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 32,
            column: 11,
            span: 828..830,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 12,
            span: 830..831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 32,
            column: 16,
            span: 832..835,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 32,
            column: 18,
            span: 836..837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 32,
            column: 24,
            span: 838..843,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 25,
            span: 843..844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 32,
            column: 30,
            span: 844..849,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 31,
            span: 849..850,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 32,
            column: 33,
            span: 850..852,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 34,
            span: 852..853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 33,
            column: 9,
            span: 856..862,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 10,
            span: 862..863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 33,
            column: 12,
            span: 863..865,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 33,
            column: 15,
            span: 866..868,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 33,
            column: 21,
            span: 869..874,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 33,
            column: 25,
            span: 875..878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 33,
            column: 32,
            span: 879..885,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 33,
            column: 33,
            span: 885..886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 33,
            column: 37,
            span: 886..890,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 38,
            span: 890..891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 33,
            column: 41,
            span: 891..894,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 33,
            column: 42,
            span: 894..895,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"must return a string\"",
        ),
        position: Position {
            line: 33,
            column: 65,
            span: 896..918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 66,
            span: 918..919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 67,
            span: 919..920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 35,
            column: 7,
            span: 926..930,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 35,
            column: 8,
            span: 930..931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 35,
            column: 16,
            span: 931..939,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 35,
            column: 18,
            span: 940..941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 35,
            column: 0,
            span: 942..950,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 36,
            column: 0,
            span: 951..954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        position: Position {
            line: 40,
            column: 5,
            span: 993..997,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 40,
            column: 7,
            span: 998..999,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 40,
            column: 0,
            span: 1000..1005,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 41,
            column: 0,
            span: 1006..1008,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 42,
            column: 8,
            span: 1011..1016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 42,
            column: 12,
            span: 1017..1020,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 42,
            column: 14,
            span: 1021..1022,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 42,
            column: 0,
            span: 1022..1024,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 43,
            column: 8,
            span: 1027..1032,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 43,
            column: 17,
            span: 1033..1041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        position: Position {
            line: 43,
            column: 22,
            span: 1042..1046,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 24,
            span: 1047..1048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 43,
            column: 25,
            span: 1048..1049,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 26,
            span: 1049..1050,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 44,
            column: 7,
            span: 1055..1057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 44,
            column: 9,
            span: 1058..1059,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 44,
            column: 11,
            span: 1059..1061,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 44,
            column: 12,
            span: 1060..1062,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 44,
            column: 17,
            span: 1063..1067,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 44,
            column: 24,
            span: 1068..1074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 44,
            column: 0,
            span: 1075..1078,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 45,
            column: 9,
            span: 1083..1087,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 45,
            column: 16,
            span: 1088..1094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 45,
            column: 18,
            span: 1095..1096,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 45,
            column: 19,
            span: 1096..1097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        position: Position {
            line: 45,
            column: 23,
            span: 1097..1101,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 24,
            span: 1101..1102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 45,
            column: 25,
            span: 1102..1103,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 45,
            column: 26,
            span: 1103..1104,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 45,
            column: 27,
            span: 1103..1105,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 28,
            span: 1105..1106,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 46,
            column: 0,
            span: 1111..1114,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 47,
            column: 0,
            span: 1117..1120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 48,
            column: 9,
            span: 1123..1129,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 10,
            span: 1129..1130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        position: Position {
            line: 48,
            column: 14,
            span: 1130..1134,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 15,
            span: 1134..1135,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 48,
            column: 16,
            span: 1134..1136,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 17,
            span: 1136..1137,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 48,
            column: 20,
            span: 1138..1140,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 48,
            column: 24,
            span: 1140..1144,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 25,
            span: 1144..1145,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 49,
            column: 0,
            span: 1146..1149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 50,
            column: 7,
            span: 1150..1156,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 8,
            span: 1156..1157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        position: Position {
            line: 50,
            column: 12,
            span: 1157..1161,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 50,
            column: 15,
            span: 1162..1164,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 50,
            column: 21,
            span: 1165..1170,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 22,
            span: 1170..1171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 53,
            column: 2,
            span: 1197..1198,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 53,
            column: 4,
            span: 1199..1200,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 53,
            column: 6,
            span: 1201..1202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 53,
            column: 7,
            span: 1202..1203,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 53,
            column: 9,
            span: 1204..1205,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 53,
            column: 12,
            span: 1205..1208,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 53,
            column: 13,
            span: 1208..1209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 54,
            column: 5,
            span: 1210..1214,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 54,
            column: 7,
            span: 1215..1216,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 54,
            column: 0,
            span: 1216..1219,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 55,
            column: 9,
            span: 1220..1228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 55,
            column: 11,
            span: 1229..1230,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 55,
            column: 12,
            span: 1230..1231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 55,
            column: 13,
            span: 1231..1232,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 15,
            span: 1233..1234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 55,
            column: 16,
            span: 1234..1235,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 17,
            span: 1235..1236,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 55,
            column: 24,
            span: 1237..1243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 55,
            column: 26,
            span: 1244..1245,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 55,
            column: 27,
            span: 1245..1246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 55,
            column: 31,
            span: 1246..1250,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 55,
            column: 32,
            span: 1250..1251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 55,
            column: 33,
            span: 1251..1252,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 55,
            column: 0,
            span: 1253..1256,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 56,
            column: 9,
            span: 1257..1265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 56,
            column: 11,
            span: 1266..1267,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 56,
            column: 12,
            span: 1267..1268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 56,
            column: 13,
            span: 1268..1269,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 15,
            span: 1270..1271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 56,
            column: 16,
            span: 1271..1272,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 17,
            span: 1272..1273,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 56,
            column: 24,
            span: 1274..1280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 56,
            column: 26,
            span: 1281..1282,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 56,
            column: 27,
            span: 1282..1283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 56,
            column: 31,
            span: 1283..1287,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 56,
            column: 0,
            span: 1288..1291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 58,
            column: 7,
            span: 1293..1299,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 8,
            span: 1299..1300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 58,
            column: 9,
            span: 1300..1301,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 58,
            column: 10,
            span: 1301..1302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 58,
            column: 11,
            span: 1302..1303,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 12,
            span: 1303..1304,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 58,
            column: 13,
            span: 1303..1305,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 14,
            span: 1305..1306,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 58,
            column: 15,
            span: 1306..1307,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 58,
            column: 17,
            span: 1306..1309,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 58,
            column: 20,
            span: 1310..1312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 58,
            column: 22,
            span: 1313..1314,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 58,
            column: 23,
            span: 1314..1315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 58,
            column: 24,
            span: 1315..1316,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 25,
            span: 1316..1317,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 58,
            column: 26,
            span: 1316..1318,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 27,
            span: 1318..1319,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 28,
            span: 1319..1320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 60,
            column: 2,
            span: 1322..1323,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 60,
            column: 3,
            span: 1323..1324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 60,
            column: 4,
            span: 1324..1325,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 60,
            column: 6,
            span: 1326..1327,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 60,
            column: 8,
            span: 1328..1329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 60,
            column: 9,
            span: 1329..1330,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 60,
            column: 10,
            span: 1330..1331,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 60,
            column: 11,
            span: 1331..1332,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 60,
            column: 14,
            span: 1331..1335,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 60,
            column: 15,
            span: 1335..1336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 61,
            column: 2,
            span: 1337..1338,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 61,
            column: 3,
            span: 1338..1339,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        position: Position {
            line: 61,
            column: 6,
            span: 1339..1342,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 61,
            column: 7,
            span: 1342..1343,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 61,
            column: 8,
            span: 1343..1344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 61,
            column: 9,
            span: 1344..1345,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 61,
            column: 11,
            span: 1346..1347,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 61,
            column: 20,
            span: 1348..1356,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 22,
            span: 1357..1358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 61,
            column: 26,
            span: 1358..1362,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 27,
            span: 1362..1363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 61,
            column: 29,
            span: 1364..1365,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 30,
            span: 1365..1366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 61,
            column: 31,
            span: 1366..1367,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 32,
            span: 1367..1368,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 61,
            column: 39,
            span: 1369..1375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 61,
            column: 44,
            span: 1376..1380,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 61,
            column: 45,
            span: 1380..1381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 61,
            column: 46,
            span: 1381..1382,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 61,
            column: 47,
            span: 1382..1383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 61,
            column: 48,
            span: 1383..1384,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 61,
            column: 49,
            span: 1384..1385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 61,
            column: 50,
            span: 1385..1386,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 61,
            column: 0,
            span: 1387..1390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 63,
            column: 7,
            span: 1392..1398,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 8,
            span: 1398..1399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 63,
            column: 9,
            span: 1399..1400,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 63,
            column: 10,
            span: 1400..1401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 63,
            column: 11,
            span: 1401..1402,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 63,
            column: 12,
            span: 1402..1403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 63,
            column: 13,
            span: 1403..1404,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 14,
            span: 1404..1405,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 63,
            column: 15,
            span: 1404..1406,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 63,
            column: 16,
            span: 1406..1407,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 63,
            column: 17,
            span: 1406..1408,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 18,
            span: 1408..1409,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 63,
            column: 21,
            span: 1410..1412,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 63,
            column: 23,
            span: 1413..1414,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "95",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 63,
            column: 25,
            span: 1413..1416,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 26,
            span: 1416..1417,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 65,
            column: 0,
            span: 1419..1421,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 66,
            column: 8,
            span: 1424..1429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 66,
            column: 10,
            span: 1430..1431,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 66,
            column: 12,
            span: 1432..1433,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 66,
            column: 14,
            span: 1434..1435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 66,
            column: 15,
            span: 1435..1436,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 66,
            column: 16,
            span: 1436..1437,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 17,
            span: 1436..1438,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 66,
            column: 18,
            span: 1438..1439,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 67,
            column: 11,
            span: 1442..1450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 67,
            column: 13,
            span: 1451..1452,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 67,
            column: 14,
            span: 1452..1453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        position: Position {
            line: 67,
            column: 17,
            span: 1453..1456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 19,
            span: 1457..1458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 67,
            column: 20,
            span: 1458..1459,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 21,
            span: 1459..1460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 67,
            column: 26,
            span: 1461..1465,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 67,
            column: 27,
            span: 1465..1466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 67,
            column: 28,
            span: 1466..1467,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 29,
            span: 1467..1468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 67,
            column: 31,
            span: 1469..1470,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 67,
            column: 32,
            span: 1470..1471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 67,
            column: 33,
            span: 1471..1472,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 67,
            column: 35,
            span: 1473..1474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 67,
            column: 40,
            span: 1475..1479,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 67,
            column: 41,
            span: 1479..1480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 67,
            column: 42,
            span: 1480..1481,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 67,
            column: 43,
            span: 1481..1482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 67,
            column: 44,
            span: 1482..1483,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 45,
            span: 1483..1484,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 48,
            span: 1484..1487,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 67,
            column: 49,
            span: 1487..1488,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 67,
            column: 56,
            span: 1489..1495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 67,
            column: 61,
            span: 1496..1500,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 67,
            column: 0,
            span: 1501..1504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 68,
            column: 9,
            span: 1507..1513,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 10,
            span: 1513..1514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 68,
            column: 11,
            span: 1514..1515,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 68,
            column: 12,
            span: 1515..1516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        position: Position {
            line: 68,
            column: 15,
            span: 1516..1519,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 16,
            span: 1519..1520,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 18,
            span: 1519..1522,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 19,
            span: 1522..1523,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 68,
            column: 20,
            span: 1523..1524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        position: Position {
            line: 68,
            column: 23,
            span: 1524..1527,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 24,
            span: 1527..1528,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 26,
            span: 1527..1530,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 27,
            span: 1530..1531,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 68,
            column: 28,
            span: 1531..1532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "add",
        ),
        position: Position {
            line: 68,
            column: 31,
            span: 1532..1535,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 32,
            span: 1535..1536,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 34,
            span: 1535..1538,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 35,
            span: 1538..1539,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 68,
            column: 36,
            span: 1539..1540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 68,
            column: 37,
            span: 1540..1541,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 68,
            column: 40,
            span: 1542..1544,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 43,
            span: 1544..1547,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 68,
            column: 47,
            span: 1548..1551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 68,
            column: 49,
            span: 1552..1553,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 68,
            column: 50,
            span: 1553..1554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 68,
            column: 51,
            span: 1554..1555,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 68,
            column: 54,
            span: 1556..1558,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 57,
            span: 1558..1561,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 58,
            span: 1561..1562,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 69,
            column: 0,
            span: 1563..1566,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 71,
            column: 6,
            span: 1568..1573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 71,
            column: 8,
            span: 1574..1575,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 71,
            column: 10,
            span: 1576..1577,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 71,
            column: 12,
            span: 1578..1579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 71,
            column: 13,
            span: 1579..1580,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 71,
            column: 14,
            span: 1580..1581,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 71,
            column: 15,
            span: 1581..1582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 71,
            column: 16,
            span: 1582..1583,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 71,
            column: 17,
            span: 1583..1584,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 71,
            column: 18,
            span: 1584..1585,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 71,
            column: 19,
            span: 1585..1586,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 71,
            column: 20,
            span: 1586..1587,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 71,
            column: 21,
            span: 1587..1588,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 73,
            column: 9,
            span: 1590..1598,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 73,
            column: 11,
            span: 1599..1600,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 73,
            column: 12,
            span: 1600..1601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 73,
            column: 13,
            span: 1601..1602,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 73,
            column: 14,
            span: 1602..1603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 73,
            column: 15,
            span: 1603..1604,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 73,
            column: 16,
            span: 1604..1605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 73,
            column: 18,
            span: 1605..1607,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 20,
            span: 1608..1609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 73,
            column: 21,
            span: 1609..1610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 22,
            span: 1610..1611,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 73,
            column: 29,
            span: 1612..1618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 73,
            column: 31,
            span: 1619..1620,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 73,
            column: 32,
            span: 1620..1621,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 73,
            column: 33,
            span: 1620..1622,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 73,
            column: 0,
            span: 1623..1626,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 74,
            column: 9,
            span: 1627..1635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 74,
            column: 11,
            span: 1636..1637,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 74,
            column: 12,
            span: 1637..1638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 74,
            column: 13,
            span: 1638..1639,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 74,
            column: 14,
            span: 1639..1640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 74,
            column: 15,
            span: 1640..1641,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 74,
            column: 16,
            span: 1641..1642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2",
        ),
        position: Position {
            line: 74,
            column: 18,
            span: 1642..1644,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 20,
            span: 1645..1646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 74,
            column: 21,
            span: 1646..1647,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 22,
            span: 1647..1648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 74,
            column: 23,
            span: 1648..1649,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 24,
            span: 1649..1650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 74,
            column: 29,
            span: 1651..1655,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 74,
            column: 30,
            span: 1655..1656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 74,
            column: 31,
            span: 1656..1657,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 74,
            column: 32,
            span: 1657..1658,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 74,
            column: 34,
            span: 1659..1660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 74,
            column: 36,
            span: 1661..1662,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 74,
            column: 0,
            span: 1663..1666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 75,
            column: 7,
            span: 1667..1673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 8,
            span: 1673..1674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 75,
            column: 9,
            span: 1674..1675,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 75,
            column: 10,
            span: 1675..1676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 75,
            column: 11,
            span: 1676..1677,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 75,
            column: 12,
            span: 1677..1678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 75,
            column: 13,
            span: 1678..1679,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 75,
            column: 14,
            span: 1679..1680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 75,
            column: 16,
            span: 1680..1682,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 17,
            span: 1682..1683,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 18,
            span: 1682..1684,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 19,
            span: 1684..1685,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 75,
            column: 22,
            span: 1686..1688,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 24,
            span: 1688..1690,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 25,
            span: 1690..1691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 76,
            column: 2,
            span: 1692..1693,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 76,
            column: 3,
            span: 1693..1694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 76,
            column: 4,
            span: 1694..1695,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 76,
            column: 5,
            span: 1695..1696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 76,
            column: 6,
            span: 1696..1697,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 76,
            column: 7,
            span: 1697..1698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f2",
        ),
        position: Position {
            line: 76,
            column: 9,
            span: 1698..1700,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 10,
            span: 1700..1701,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'k'",
        ),
        position: Position {
            line: 76,
            column: 13,
            span: 1701..1704,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 14,
            span: 1704..1705,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 17,
            span: 1705..1708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 18,
            span: 1708..1709,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 76,
            column: 19,
            span: 1709..1710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 76,
            column: 26,
            span: 1711..1717,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 27,
            span: 1717..1718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 76,
            column: 28,
            span: 1718..1719,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 76,
            column: 29,
            span: 1719..1720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 76,
            column: 30,
            span: 1720..1721,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 76,
            column: 31,
            span: 1721..1722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 76,
            column: 32,
            span: 1722..1723,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 76,
            column: 33,
            span: 1723..1724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 76,
            column: 34,
            span: 1724..1725,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 76,
            column: 37,
            span: 1726..1728,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 40,
            span: 1728..1731,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 41,
            span: 1731..1732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 78,
            column: 6,
            span: 1734..1739,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 7,
            span: 1739..1740,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 78,
            column: 10,
            span: 1740..1743,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 11,
            span: 1743..1744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 80,
            column: 2,
            span: 1746..1747,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 80,
            column: 4,
            span: 1748..1749,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 80,
            column: 8,
            span: 1750..1753,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 81,
            column: 9,
            span: 1771..1779,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 81,
            column: 11,
            span: 1780..1781,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 12,
            span: 1781..1782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 81,
            column: 13,
            span: 1782..1783,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 14,
            span: 1783..1784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 81,
            column: 15,
            span: 1784..1785,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 16,
            span: 1785..1786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 81,
            column: 17,
            span: 1786..1787,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 18,
            span: 1787..1788,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 81,
            column: 24,
            span: 1789..1794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 81,
            column: 26,
            span: 1795..1796,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 81,
            column: 28,
            span: 1797..1798,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 81,
            column: 32,
            span: 1799..1802,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 81,
            column: 33,
            span: 1802..1803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 81,
            column: 35,
            span: 1804..1805,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 81,
            column: 36,
            span: 1805..1806,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 81,
            column: 37,
            span: 1806..1807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 81,
            column: 38,
            span: 1807..1808,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 39,
            span: 1808..1809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 81,
            column: 40,
            span: 1809..1810,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 41,
            span: 1810..1811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 81,
            column: 42,
            span: 1811..1812,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 43,
            span: 1812..1813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 81,
            column: 44,
            span: 1813..1814,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 81,
            column: 45,
            span: 1814..1815,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 81,
            column: 0,
            span: 1816..1819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 83,
            column: 2,
            span: 1821..1822,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 3,
            span: 1822..1823,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 84,
            column: 4,
            span: 1864..1866,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 84,
            column: 5,
            span: 1866..1867,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 84,
            column: 6,
            span: 1866..1868,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 7,
            span: 1868..1869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 85,
            column: 7,
            span: 1870..1876,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 8,
            span: 1876..1877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 85,
            column: 9,
            span: 1877..1878,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 85,
            column: 10,
            span: 1878..1879,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 11,
            span: 1878..1880,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 85,
            column: 12,
            span: 1880..1881,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 85,
            column: 15,
            span: 1882..1884,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 17,
            span: 1884..1886,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 85,
            column: 21,
            span: 1887..1890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 85,
            column: 23,
            span: 1891..1892,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 85,
            column: 24,
            span: 1892..1893,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 25,
            span: 1892..1894,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 85,
            column: 26,
            span: 1894..1895,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 85,
            column: 29,
            span: 1896..1898,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 31,
            span: 1898..1900,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 85,
            column: 35,
            span: 1901..1904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 85,
            column: 37,
            span: 1905..1906,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 85,
            column: 38,
            span: 1906..1907,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 39,
            span: 1906..1908,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 85,
            column: 40,
            span: 1908..1909,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 85,
            column: 43,
            span: 1910..1912,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 85,
            column: 47,
            span: 1913..1916,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 85,
            column: 51,
            span: 1917..1920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 85,
            column: 53,
            span: 1921..1922,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 85,
            column: 54,
            span: 1922..1923,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 55,
            span: 1922..1924,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 85,
            column: 56,
            span: 1924..1925,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 85,
            column: 59,
            span: 1926..1928,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 85,
            column: 63,
            span: 1929..1932,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 64,
            span: 1932..1933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 86,
            column: 2,
            span: 1934..1935,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 3,
            span: 1935..1936,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 4,
            span: 1935..1937,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 5,
            span: 1937..1938,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 6,
            span: 1937..1939,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 7,
            span: 1939..1940,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 8,
            span: 1964..1966,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 87,
            column: 9,
            span: 1966..1967,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 10,
            span: 1966..1968,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 11,
            span: 1968..1969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 88,
            column: 7,
            span: 1970..1976,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 8,
            span: 1976..1977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 88,
            column: 9,
            span: 1977..1978,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 88,
            column: 10,
            span: 1978..1979,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 11,
            span: 1978..1980,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 88,
            column: 12,
            span: 1980..1981,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 88,
            column: 15,
            span: 1982..1984,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 17,
            span: 1984..1986,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 88,
            column: 21,
            span: 1987..1990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 88,
            column: 23,
            span: 1991..1992,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 88,
            column: 24,
            span: 1992..1993,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 25,
            span: 1992..1994,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 88,
            column: 26,
            span: 1994..1995,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 88,
            column: 29,
            span: 1996..1998,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 31,
            span: 1998..2000,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 88,
            column: 35,
            span: 2001..2004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 88,
            column: 37,
            span: 2005..2006,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 88,
            column: 38,
            span: 2006..2007,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 39,
            span: 2006..2008,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 88,
            column: 40,
            span: 2008..2009,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 88,
            column: 43,
            span: 2010..2012,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 45,
            span: 2012..2014,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 88,
            column: 49,
            span: 2015..2018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 88,
            column: 51,
            span: 2019..2020,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 88,
            column: 52,
            span: 2020..2021,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 53,
            span: 2020..2022,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 88,
            column: 54,
            span: 2022..2023,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 88,
            column: 57,
            span: 2024..2026,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 88,
            column: 61,
            span: 2027..2030,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 62,
            span: 2030..2031,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 90,
            column: 9,
            span: 2033..2041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        position: Position {
            line: 90,
            column: 13,
            span: 2042..2045,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 14,
            span: 2045..2046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 90,
            column: 15,
            span: 2046..2047,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 16,
            span: 2047..2048,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 91,
            column: 5,
            span: 2051..2053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 91,
            column: 7,
            span: 2054..2055,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 91,
            column: 10,
            span: 2056..2058,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 91,
            column: 12,
            span: 2058..2060,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 91,
            column: 17,
            span: 2061..2065,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 91,
            column: 24,
            span: 2066..2072,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 91,
            column: 0,
            span: 2072..2074,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 92,
            column: 7,
            span: 2077..2081,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 92,
            column: 14,
            span: 2082..2088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 92,
            column: 16,
            span: 2089..2090,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 92,
            column: 17,
            span: 2090..2091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 92,
            column: 21,
            span: 2091..2095,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 22,
            span: 2095..2096,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return fat(\"",
        ),
        position: Position {
            line: 92,
            column: 35,
            span: 2096..2109,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 92,
            column: 38,
            span: 2110..2112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 92,
            column: 40,
            span: 2113..2114,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 92,
            column: 41,
            span: 2114..2115,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 42,
            span: 2114..2116,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 92,
            column: 45,
            span: 2117..2119,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        position: Position {
            line: 92,
            column: 49,
            span: 2120..2123,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 50,
            span: 2123..2124,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 92,
            column: 53,
            span: 2125..2127,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 54,
            span: 2127..2128,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 55,
            span: 2128..2129,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 56,
            span: 2129..2130,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 93,
            column: 0,
            span: 2133..2136,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 94,
            column: 0,
            span: 2137..2140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 96,
            column: 7,
            span: 2142..2148,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 8,
            span: 2148..2149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 96,
            column: 12,
            span: 2149..2153,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"load 'assert(fat(6)==720)' () \"",
        ),
        position: Position {
            line: 96,
            column: 45,
            span: 2154..2186,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 46,
            span: 2186..2187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 47,
            span: 2187..2188,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 48,
            span: 2188..2189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 97,
            column: 2,
            span: 2190..2191,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 97,
            column: 4,
            span: 2192..2193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 97,
            column: 9,
            span: 2194..2198,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 10,
            span: 2198..2199,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return fat(5), 3'",
        ),
        position: Position {
            line: 97,
            column: 28,
            span: 2199..2217,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 29,
            span: 2217..2218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 98,
            column: 2,
            span: 2219..2220,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 3,
            span: 2220..2221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 98,
            column: 4,
            span: 2221..2222,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 98,
            column: 6,
            span: 2223..2224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 98,
            column: 8,
            span: 2225..2226,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 9,
            span: 2226..2227,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 10,
            span: 2227..2228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 99,
            column: 7,
            span: 2229..2235,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 8,
            span: 2235..2236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 99,
            column: 9,
            span: 2236..2237,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 99,
            column: 12,
            span: 2238..2240,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 99,
            column: 16,
            span: 2240..2244,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 99,
            column: 20,
            span: 2245..2248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 99,
            column: 22,
            span: 2249..2250,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 99,
            column: 25,
            span: 2251..2253,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 99,
            column: 27,
            span: 2253..2255,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 28,
            span: 2255..2256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 100,
            column: 6,
            span: 2257..2262,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 7,
            span: 2262..2263,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 100,
            column: 10,
            span: 2263..2266,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 11,
            span: 2266..2267,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 102,
            column: 9,
            span: 2269..2277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err_on_n",
        ),
        position: Position {
            line: 102,
            column: 18,
            span: 2278..2286,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 20,
            span: 2287..2288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 102,
            column: 21,
            span: 2288..2289,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 22,
            span: 2289..2290,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 103,
            column: 5,
            span: 2293..2295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 103,
            column: 7,
            span: 2296..2297,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 103,
            column: 9,
            span: 2297..2299,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 10,
            span: 2298..2300,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 103,
            column: 15,
            span: 2301..2305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 103,
            column: 21,
            span: 2306..2311,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 22,
            span: 2311..2312,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 23,
            span: 2312..2313,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 103,
            column: 24,
            span: 2313..2314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exit",
        ),
        position: Position {
            line: 103,
            column: 29,
            span: 2315..2319,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 30,
            span: 2319..2320,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 31,
            span: 2319..2321,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 32,
            span: 2321..2322,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 103,
            column: 33,
            span: 2322..2323,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 104,
            column: 7,
            span: 2326..2330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err_on_n",
        ),
        position: Position {
            line: 104,
            column: 16,
            span: 2331..2339,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 18,
            span: 2340..2341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 104,
            column: 19,
            span: 2341..2342,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 104,
            column: 20,
            span: 2342..2343,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 21,
            span: 2342..2344,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 22,
            span: 2344..2345,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 104,
            column: 23,
            span: 2345..2346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exit",
        ),
        position: Position {
            line: 104,
            column: 28,
            span: 2347..2351,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 29,
            span: 2351..2352,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 30,
            span: 2351..2353,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 31,
            span: 2353..2354,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 104,
            column: 32,
            span: 2354..2355,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 105,
            column: 0,
            span: 2358..2361,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 106,
            column: 0,
            span: 2362..2365,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 108,
            column: 0,
            span: 2367..2369,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 109,
            column: 11,
            span: 2372..2380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        position: Position {
            line: 109,
            column: 17,
            span: 2381..2386,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 19,
            span: 2387..2388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 109,
            column: 20,
            span: 2388..2389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 21,
            span: 2389..2390,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 110,
            column: 7,
            span: 2395..2397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 110,
            column: 9,
            span: 2398..2399,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 110,
            column: 11,
            span: 2400..2401,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 13,
            span: 2401..2403,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 110,
            column: 0,
            span: 2404..2408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 111,
            column: 13,
            span: 2415..2421,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 14,
            span: 2421..2422,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 111,
            column: 17,
            span: 2422..2425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 111,
            column: 23,
            span: 2426..2431,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 24,
            span: 2431..2432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err_on_n",
        ),
        position: Position {
            line: 111,
            column: 32,
            span: 2432..2440,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 33,
            span: 2440..2441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 111,
            column: 35,
            span: 2442..2443,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 36,
            span: 2443..2444,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 37,
            span: 2444..2445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        position: Position {
            line: 112,
            column: 12,
            span: 2452..2457,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 13,
            span: 2457..2458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 112,
            column: 14,
            span: 2458..2459,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 112,
            column: 15,
            span: 2459..2460,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 16,
            span: 2459..2461,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 112,
            column: 17,
            span: 2461..2462,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 113,
            column: 0,
            span: 2467..2470,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 114,
            column: 0,
            span: 2473..2476,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 115,
            column: 0,
            span: 2477..2480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        position: Position {
            line: 117,
            column: 6,
            span: 2482..2487,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 7,
            span: 2487..2488,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 117,
            column: 9,
            span: 2487..2490,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 10,
            span: 2490..2491,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 119,
            column: 9,
            span: 2493..2501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        position: Position {
            line: 119,
            column: 14,
            span: 2502..2506,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 16,
            span: 2507..2508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 119,
            column: 17,
            span: 2508..2509,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 18,
            span: 2509..2510,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 120,
            column: 5,
            span: 2513..2515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 120,
            column: 7,
            span: 2516..2517,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 120,
            column: 8,
            span: 2517..2518,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 120,
            column: 9,
            span: 2517..2519,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 120,
            column: 14,
            span: 2520..2524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        position: Position {
            line: 120,
            column: 19,
            span: 2525..2529,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 120,
            column: 20,
            span: 2529..2530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 120,
            column: 21,
            span: 2530..2531,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 120,
            column: 22,
            span: 2531..2532,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 120,
            column: 23,
            span: 2531..2533,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 120,
            column: 24,
            span: 2533..2534,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 120,
            column: 0,
            span: 2535..2538,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 121,
            column: 0,
            span: 2539..2542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        position: Position {
            line: 122,
            column: 5,
            span: 2543..2547,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 122,
            column: 6,
            span: 2547..2548,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 122,
            column: 8,
            span: 2547..2550,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 122,
            column: 9,
            span: 2550..2551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        position: Position {
            line: 123,
            column: 5,
            span: 2552..2556,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 6,
            span: 2556..2557,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 123,
            column: 9,
            span: 2556..2560,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 123,
            column: 10,
            span: 2560..2561,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 126,
            column: 9,
            span: 2584..2592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        position: Position {
            line: 126,
            column: 14,
            span: 2593..2597,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 16,
            span: 2598..2599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 126,
            column: 17,
            span: 2599..2600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 18,
            span: 2600..2601,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 126,
            column: 21,
            span: 2602..2604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 126,
            column: 23,
            span: 2605..2606,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 126,
            column: 24,
            span: 2606..2607,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 126,
            column: 25,
            span: 2606..2608,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 126,
            column: 30,
            span: 2609..2613,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 126,
            column: 37,
            span: 2614..2620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        position: Position {
            line: 126,
            column: 42,
            span: 2621..2625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 43,
            span: 2625..2626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 126,
            column: 44,
            span: 2626..2627,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 126,
            column: 45,
            span: 2627..2628,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 126,
            column: 46,
            span: 2627..2629,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 47,
            span: 2629..2630,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 126,
            column: 52,
            span: 2631..2635,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 126,
            column: 59,
            span: 2636..2642,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 126,
            column: 63,
            span: 2642..2646,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 126,
            column: 67,
            span: 2647..2650,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 126,
            column: 0,
            span: 2651..2654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 127,
            column: 7,
            span: 2655..2661,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 8,
            span: 2661..2662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        position: Position {
            line: 127,
            column: 12,
            span: 2662..2666,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 13,
            span: 2666..2667,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 127,
            column: 18,
            span: 2666..2672,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 19,
            span: 2672..2673,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 127,
            column: 22,
            span: 2674..2676,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 127,
            column: 26,
            span: 2676..2680,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 27,
            span: 2680..2681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 128,
            column: 2,
            span: 2682..2683,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 128,
            column: 4,
            span: 2684..2685,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 128,
            column: 6,
            span: 2686..2687,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 128,
            column: 7,
            span: 2687..2688,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 129,
            column: 9,
            span: 2689..2697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 129,
            column: 11,
            span: 2698..2699,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 129,
            column: 12,
            span: 2699..2700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        position: Position {
            line: 129,
            column: 16,
            span: 2700..2704,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 18,
            span: 2705..2706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 129,
            column: 19,
            span: 2706..2707,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 20,
            span: 2707..2708,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 129,
            column: 23,
            span: 2709..2711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 129,
            column: 25,
            span: 2712..2713,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 129,
            column: 26,
            span: 2713..2714,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 27,
            span: 2713..2715,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 129,
            column: 32,
            span: 2716..2720,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 129,
            column: 39,
            span: 2721..2727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 129,
            column: 44,
            span: 2728..2732,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 129,
            column: 45,
            span: 2732..2733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        position: Position {
            line: 129,
            column: 49,
            span: 2733..2737,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 50,
            span: 2737..2738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 129,
            column: 51,
            span: 2738..2739,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 129,
            column: 52,
            span: 2739..2740,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 53,
            span: 2739..2741,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 54,
            span: 2741..2742,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 129,
            column: 59,
            span: 2743..2747,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 129,
            column: 66,
            span: 2748..2754,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 70,
            span: 2754..2758,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 129,
            column: 74,
            span: 2759..2762,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 129,
            column: 0,
            span: 2763..2766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 130,
            column: 7,
            span: 2767..2773,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 8,
            span: 2773..2774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 130,
            column: 9,
            span: 2774..2775,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 130,
            column: 10,
            span: 2775..2776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        position: Position {
            line: 130,
            column: 14,
            span: 2776..2780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 15,
            span: 2780..2781,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 130,
            column: 20,
            span: 2780..2786,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 21,
            span: 2786..2787,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 130,
            column: 24,
            span: 2788..2790,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 130,
            column: 28,
            span: 2790..2794,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 29,
            span: 2794..2795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 132,
            column: 6,
            span: 2797..2802,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 132,
            column: 7,
            span: 2802..2803,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 132,
            column: 10,
            span: 2803..2806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 132,
            column: 11,
            span: 2806..2807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 135,
            column: 2,
            span: 2810..2811,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 135,
            column: 4,
            span: 2812..2813,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 135,
            column: 0,
            span: 2814..2817,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 2,
            span: 2818..2819,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 136,
            column: 10,
            span: 2819..2827,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 12,
            span: 2828..2829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 136,
            column: 13,
            span: 2829..2830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 14,
            span: 2830..2831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 136,
            column: 16,
            span: 2832..2833,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 136,
            column: 17,
            span: 2833..2834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 136,
            column: 18,
            span: 2834..2835,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 136,
            column: 22,
            span: 2836..2839,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 23,
            span: 2839..2840,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 24,
            span: 2840..2841,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 136,
            column: 26,
            span: 2840..2843,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 27,
            span: 2843..2844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 137,
            column: 7,
            span: 2845..2851,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 8,
            span: 2851..2852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 137,
            column: 9,
            span: 2852..2853,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 137,
            column: 12,
            span: 2854..2856,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 137,
            column: 15,
            span: 2856..2859,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 137,
            column: 19,
            span: 2860..2863,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 21,
            span: 2864..2865,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 137,
            column: 29,
            span: 2865..2873,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 31,
            span: 2874..2875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 137,
            column: 32,
            span: 2875..2876,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 33,
            span: 2876..2877,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 137,
            column: 40,
            span: 2878..2884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 137,
            column: 42,
            span: 2885..2886,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 137,
            column: 43,
            span: 2886..2887,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 137,
            column: 44,
            span: 2886..2888,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 137,
            column: 48,
            span: 2889..2892,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 49,
            span: 2892..2893,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 50,
            span: 2893..2894,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 137,
            column: 52,
            span: 2893..2896,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 53,
            span: 2896..2897,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 137,
            column: 56,
            span: 2898..2900,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 137,
            column: 59,
            span: 2900..2903,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 60,
            span: 2903..2904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Z",
        ),
        position: Position {
            line: 143,
            column: 2,
            span: 2952..2953,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 143,
            column: 4,
            span: 2954..2955,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 143,
            column: 13,
            span: 2956..2964,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 15,
            span: 2965..2966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "le",
        ),
        position: Position {
            line: 143,
            column: 17,
            span: 2966..2968,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 18,
            span: 2968..2969,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 144,
            column: 12,
            span: 2976..2981,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 144,
            column: 21,
            span: 2982..2990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 144,
            column: 23,
            span: 2991..2992,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 25,
            span: 2993..2994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 144,
            column: 26,
            span: 2994..2995,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 27,
            span: 2995..2996,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 145,
            column: 15,
            span: 3005..3011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "le",
        ),
        position: Position {
            line: 145,
            column: 18,
            span: 3012..3014,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 19,
            span: 3014..3015,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 145,
            column: 27,
            span: 3015..3023,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 29,
            span: 3024..3025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 145,
            column: 30,
            span: 3025..3026,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 31,
            span: 3026..3027,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 145,
            column: 38,
            span: 3028..3034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 145,
            column: 40,
            span: 3035..3036,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 41,
            span: 3036..3037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 145,
            column: 42,
            span: 3037..3038,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 43,
            span: 3038..3039,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 44,
            span: 3039..3040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 145,
            column: 45,
            span: 3040..3041,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 46,
            span: 3041..3042,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 145,
            column: 50,
            span: 3043..3046,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 51,
            span: 3046..3047,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 146,
            column: 0,
            span: 3054..3057,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 147,
            column: 13,
            span: 3064..3070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 147,
            column: 15,
            span: 3071..3072,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 16,
            span: 3072..3073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 147,
            column: 17,
            span: 3073..3074,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 18,
            span: 3074..3075,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 148,
            column: 0,
            span: 3080..3083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 153,
            column: 2,
            span: 3114..3115,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 153,
            column: 4,
            span: 3116..3117,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 153,
            column: 13,
            span: 3118..3126,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 15,
            span: 3127..3128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 153,
            column: 16,
            span: 3128..3129,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 17,
            span: 3129..3130,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 154,
            column: 13,
            span: 3137..3143,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 154,
            column: 22,
            span: 3144..3152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 24,
            span: 3153..3154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 154,
            column: 25,
            span: 3154..3155,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 26,
            span: 3155..3156,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 155,
            column: 18,
            span: 3172..3174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 155,
            column: 20,
            span: 3175..3176,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 155,
            column: 23,
            span: 3177..3179,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 155,
            column: 25,
            span: 3179..3181,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 155,
            column: 30,
            span: 3182..3186,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 155,
            column: 37,
            span: 3187..3193,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 155,
            column: 0,
            span: 3193..3195,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 156,
            column: 20,
            span: 3211..3215,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 156,
            column: 27,
            span: 3216..3222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 156,
            column: 29,
            span: 3223..3224,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 156,
            column: 30,
            span: 3224..3225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 156,
            column: 31,
            span: 3225..3226,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 32,
            span: 3226..3227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 156,
            column: 33,
            span: 3227..3228,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 156,
            column: 34,
            span: 3228..3229,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 156,
            column: 35,
            span: 3228..3230,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 36,
            span: 3230..3231,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 156,
            column: 0,
            span: 3232..3235,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 157,
            column: 0,
            span: 3249..3252,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 158,
            column: 0,
            span: 3257..3260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        position: Position {
            line: 160,
            column: 4,
            span: 3262..3265,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 160,
            column: 6,
            span: 3266..3267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Z",
        ),
        position: Position {
            line: 160,
            column: 8,
            span: 3268..3269,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 9,
            span: 3269..3270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 160,
            column: 10,
            span: 3270..3271,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 11,
            span: 3271..3272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 162,
            column: 7,
            span: 3274..3280,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 8,
            span: 3280..3281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        position: Position {
            line: 162,
            column: 11,
            span: 3281..3284,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 12,
            span: 3284..3285,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 13,
            span: 3284..3286,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 14,
            span: 3286..3287,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 162,
            column: 17,
            span: 3288..3290,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 19,
            span: 3290..3292,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 162,
            column: 23,
            span: 3293..3296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fat",
        ),
        position: Position {
            line: 162,
            column: 27,
            span: 3297..3300,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 28,
            span: 3300..3301,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 29,
            span: 3300..3302,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 30,
            span: 3302..3303,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 162,
            column: 33,
            span: 3304..3306,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 36,
            span: 3306..3309,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 162,
            column: 40,
            span: 3310..3313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Z",
        ),
        position: Position {
            line: 162,
            column: 42,
            span: 3314..3315,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 43,
            span: 3315..3316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 162,
            column: 44,
            span: 3316..3317,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 45,
            span: 3317..3318,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 46,
            span: 3318..3319,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 47,
            span: 3318..3320,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 48,
            span: 3320..3321,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 162,
            column: 50,
            span: 3321..3323,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 51,
            span: 3322..3324,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 162,
            column: 52,
            span: 3324..3325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Z",
        ),
        position: Position {
            line: 162,
            column: 53,
            span: 3325..3326,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 54,
            span: 3326..3327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 162,
            column: 55,
            span: 3327..3328,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 56,
            span: 3328..3329,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 57,
            span: 3329..3330,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 58,
            span: 3329..3331,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 59,
            span: 3331..3332,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 60,
            span: 3332..3333,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 164,
            column: 6,
            span: 3335..3340,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 164,
            column: 15,
            span: 3341..3349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 164,
            column: 17,
            span: 3350..3351,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 164,
            column: 19,
            span: 3352..3353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 164,
            column: 20,
            span: 3353..3354,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 164,
            column: 21,
            span: 3354..3355,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 165,
            column: 8,
            span: 3358..3363,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 165,
            column: 17,
            span: 3364..3372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 165,
            column: 19,
            span: 3373..3374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 21,
            span: 3375..3376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 165,
            column: 22,
            span: 3376..3377,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 165,
            column: 23,
            span: 3377..3378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 165,
            column: 24,
            span: 3378..3379,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 165,
            column: 25,
            span: 3379..3380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 165,
            column: 26,
            span: 3380..3381,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 165,
            column: 27,
            span: 3381..3382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 165,
            column: 28,
            span: 3382..3383,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 29,
            span: 3383..3384,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 166,
            column: 11,
            span: 3389..3395,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 166,
            column: 20,
            span: 3396..3404,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 22,
            span: 3405..3406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 166,
            column: 23,
            span: 3406..3407,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 166,
            column: 24,
            span: 3407..3408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 166,
            column: 25,
            span: 3408..3409,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 26,
            span: 3409..3410,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 166,
            column: 33,
            span: 3411..3417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 166,
            column: 35,
            span: 3418..3419,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 166,
            column: 36,
            span: 3419..3420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 166,
            column: 37,
            span: 3420..3421,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 166,
            column: 38,
            span: 3421..3422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 166,
            column: 39,
            span: 3422..3423,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 166,
            column: 40,
            span: 3423..3424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 166,
            column: 41,
            span: 3424..3425,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 166,
            column: 42,
            span: 3425..3426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 166,
            column: 43,
            span: 3426..3427,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 166,
            column: 44,
            span: 3427..3428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 166,
            column: 45,
            span: 3428..3429,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 166,
            column: 46,
            span: 3429..3430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 166,
            column: 47,
            span: 3430..3431,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 166,
            column: 48,
            span: 3431..3432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 166,
            column: 49,
            span: 3432..3433,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 166,
            column: 0,
            span: 3434..3437,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 167,
            column: 0,
            span: 3440..3443,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 168,
            column: 9,
            span: 3446..3452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 168,
            column: 11,
            span: 3453..3454,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 12,
            span: 3454..3455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 168,
            column: 13,
            span: 3455..3456,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 14,
            span: 3456..3457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 168,
            column: 15,
            span: 3457..3458,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 168,
            column: 16,
            span: 3458..3459,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 168,
            column: 17,
            span: 3458..3460,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 18,
            span: 3460..3461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 168,
            column: 19,
            span: 3461..3462,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 168,
            column: 20,
            span: 3462..3463,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 168,
            column: 21,
            span: 3462..3464,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 22,
            span: 3464..3465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 168,
            column: 23,
            span: 3465..3466,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 168,
            column: 24,
            span: 3466..3467,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 168,
            column: 25,
            span: 3466..3468,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 26,
            span: 3468..3469,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 169,
            column: 0,
            span: 3470..3473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 171,
            column: 2,
            span: 3475..3476,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 171,
            column: 4,
            span: 3477..3478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 171,
            column: 6,
            span: 3479..3480,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 7,
            span: 3480..3481,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 171,
            column: 9,
            span: 3480..3483,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 10,
            span: 3483..3484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 172,
            column: 7,
            span: 3485..3491,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 8,
            span: 3491..3492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 172,
            column: 9,
            span: 3492..3493,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 10,
            span: 3493..3494,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 172,
            column: 11,
            span: 3493..3495,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 172,
            column: 12,
            span: 3495..3496,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 172,
            column: 15,
            span: 3496..3499,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 16,
            span: 3499..3500,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 172,
            column: 19,
            span: 3501..3503,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 172,
            column: 22,
            span: 3503..3506,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 172,
            column: 23,
            span: 3506..3507,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 172,
            column: 25,
            span: 3506..3509,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 172,
            column: 26,
            span: 3509..3510,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 172,
            column: 28,
            span: 3509..3512,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 172,
            column: 29,
            span: 3512..3513,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 172,
            column: 31,
            span: 3512..3515,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 172,
            column: 32,
            span: 3515..3516,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 172,
            column: 34,
            span: 3515..3518,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 172,
            column: 35,
            span: 3518..3519,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 172,
            column: 36,
            span: 3518..3520,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 172,
            column: 37,
            span: 3520..3521,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 172,
            column: 39,
            span: 3520..3523,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 172,
            column: 40,
            span: 3523..3524,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 172,
            column: 42,
            span: 3523..3526,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 43,
            span: 3526..3527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Z",
        ),
        position: Position {
            line: 174,
            column: 2,
            span: 3529..3530,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 174,
            column: 3,
            span: 3530..3531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 174,
            column: 5,
            span: 3532..3533,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 174,
            column: 6,
            span: 3533..3534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 174,
            column: 8,
            span: 3535..3536,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 174,
            column: 10,
            span: 3537..3538,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 174,
            column: 0,
            span: 3539..3542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 175,
            column: 6,
            span: 3543..3548,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 7,
            span: 3548..3549,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 175,
            column: 10,
            span: 3549..3552,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 11,
            span: 3552..3553,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 179,
            column: 9,
            span: 3584..3592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        position: Position {
            line: 179,
            column: 17,
            span: 3593..3600,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 19,
            span: 3601..3602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 179,
            column: 20,
            span: 3602..3603,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 179,
            column: 21,
            span: 3603..3604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 179,
            column: 23,
            span: 3605..3606,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 24,
            span: 3606..3607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 180,
            column: 4,
            span: 3610..3611,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 180,
            column: 6,
            span: 3612..3613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 180,
            column: 8,
            span: 3614..3615,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 180,
            column: 11,
            span: 3616..3618,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 180,
            column: 0,
            span: 3618..3620,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 181,
            column: 5,
            span: 3623..3625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 7,
            span: 3626..3627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 181,
            column: 8,
            span: 3627..3628,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 181,
            column: 11,
            span: 3629..3631,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 181,
            column: 13,
            span: 3632..3633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 181,
            column: 14,
            span: 3633..3634,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 15,
            span: 3634..3635,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 181,
            column: 0,
            span: 3636..3640,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 182,
            column: 11,
            span: 3645..3651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 182,
            column: 13,
            span: 3652..3653,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 182,
            column: 14,
            span: 3653..3654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 182,
            column: 15,
            span: 3654..3655,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 182,
            column: 16,
            span: 3655..3656,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 182,
            column: 17,
            span: 3656..3657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        position: Position {
            line: 182,
            column: 25,
            span: 3658..3665,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 26,
            span: 3665..3666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 182,
            column: 27,
            span: 3666..3667,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 182,
            column: 28,
            span: 3667..3668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 182,
            column: 30,
            span: 3669..3670,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 182,
            column: 31,
            span: 3670..3671,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 182,
            column: 32,
            span: 3670..3672,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 33,
            span: 3672..3673,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 183,
            column: 0,
            span: 3676..3679,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 184,
            column: 0,
            span: 3680..3683,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 186,
            column: 9,
            span: 3685..3693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "equaltab",
        ),
        position: Position {
            line: 186,
            column: 18,
            span: 3694..3702,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 20,
            span: 3703..3704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 186,
            column: 22,
            span: 3704..3706,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 186,
            column: 23,
            span: 3706..3707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 186,
            column: 26,
            span: 3708..3710,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 27,
            span: 3710..3711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 187,
            column: 9,
            span: 3714..3720,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 10,
            span: 3720..3721,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 187,
            column: 11,
            span: 3721..3722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 187,
            column: 13,
            span: 3722..3724,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 187,
            column: 16,
            span: 3725..3727,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 187,
            column: 18,
            span: 3728..3729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 187,
            column: 20,
            span: 3729..3731,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 187,
            column: 21,
            span: 3731..3732,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 188,
            column: 6,
            span: 3735..3738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 188,
            column: 8,
            span: 3739..3740,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 188,
            column: 10,
            span: 3741..3742,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 188,
            column: 12,
            span: 3742..3744,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 13,
            span: 3744..3745,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 188,
            column: 15,
            span: 3746..3747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 188,
            column: 17,
            span: 3747..3749,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 188,
            column: 0,
            span: 3750..3752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 189,
            column: 11,
            span: 3757..3763,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 12,
            span: 3763..3764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 189,
            column: 14,
            span: 3764..3766,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 189,
            column: 15,
            span: 3766..3767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 189,
            column: 16,
            span: 3767..3768,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 189,
            column: 17,
            span: 3768..3769,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 189,
            column: 20,
            span: 3770..3772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 189,
            column: 23,
            span: 3773..3775,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 189,
            column: 24,
            span: 3775..3776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 189,
            column: 25,
            span: 3776..3777,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 189,
            column: 26,
            span: 3777..3778,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 27,
            span: 3778..3779,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 190,
            column: 0,
            span: 3782..3785,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 191,
            column: 0,
            span: 3786..3789,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 193,
            column: 6,
            span: 3791..3796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 193,
            column: 11,
            span: 3797..3801,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 193,
            column: 13,
            span: 3802..3803,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 193,
            column: 22,
            span: 3804..3812,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 24,
            span: 3813..3814,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 193,
            column: 27,
            span: 3814..3817,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 28,
            span: 3817..3818,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 193,
            column: 35,
            span: 3819..3825,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 37,
            span: 3826..3827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 193,
            column: 42,
            span: 3827..3832,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 193,
            column: 43,
            span: 3832..3833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 193,
            column: 47,
            span: 3833..3837,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 48,
            span: 3837..3838,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 193,
            column: 51,
            span: 3838..3841,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 52,
            span: 3841..3842,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 53,
            span: 3842..3843,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 193,
            column: 0,
            span: 3844..3847,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 195,
            column: 9,
            span: 3849..3857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 195,
            column: 11,
            span: 3858..3859,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 195,
            column: 12,
            span: 3859..3860,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 195,
            column: 13,
            span: 3860..3861,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 195,
            column: 20,
            span: 3862..3868,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 195,
            column: 22,
            span: 3868..3870,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 23,
            span: 3870..3871,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 195,
            column: 24,
            span: 3870..3872,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 25,
            span: 3872..3873,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 195,
            column: 27,
            span: 3872..3875,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 28,
            span: 3875..3876,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 195,
            column: 29,
            span: 3875..3877,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 195,
            column: 0,
            span: 3878..3881,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 196,
            column: 9,
            span: 3882..3890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        position: Position {
            line: 196,
            column: 14,
            span: 3891..3895,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 16,
            span: 3896..3897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 196,
            column: 17,
            span: 3897..3898,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 196,
            column: 18,
            span: 3898..3899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 196,
            column: 19,
            span: 3899..3900,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 20,
            span: 3900..3901,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 196,
            column: 27,
            span: 3902..3908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 196,
            column: 29,
            span: 3909..3910,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 196,
            column: 30,
            span: 3910..3911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 196,
            column: 31,
            span: 3911..3912,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 196,
            column: 0,
            span: 3913..3916,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 198,
            column: 6,
            span: 3918..3923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 198,
            column: 8,
            span: 3924..3925,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 198,
            column: 9,
            span: 3925..3926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 198,
            column: 10,
            span: 3926..3927,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 198,
            column: 11,
            span: 3927..3928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 198,
            column: 12,
            span: 3928..3929,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 198,
            column: 13,
            span: 3929..3930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 198,
            column: 14,
            span: 3930..3931,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 198,
            column: 16,
            span: 3932..3933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        position: Position {
            line: 198,
            column: 24,
            span: 3934..3941,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 198,
            column: 25,
            span: 3941..3942,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 26,
            span: 3941..3943,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 198,
            column: 27,
            span: 3943..3944,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 28,
            span: 3943..3945,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 198,
            column: 29,
            span: 3945..3946,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 30,
            span: 3945..3947,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 198,
            column: 31,
            span: 3947..3948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 199,
            column: 7,
            span: 3949..3955,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 199,
            column: 8,
            span: 3955..3956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 199,
            column: 9,
            span: 3956..3957,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 199,
            column: 11,
            span: 3957..3959,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 199,
            column: 12,
            span: 3958..3960,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 199,
            column: 16,
            span: 3961..3964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 199,
            column: 18,
            span: 3965..3966,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 199,
            column: 20,
            span: 3966..3968,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 199,
            column: 21,
            span: 3967..3969,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 199,
            column: 25,
            span: 3970..3973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 199,
            column: 27,
            span: 3974..3975,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 199,
            column: 29,
            span: 3975..3977,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 199,
            column: 30,
            span: 3976..3978,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 199,
            column: 34,
            span: 3979..3982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 199,
            column: 36,
            span: 3983..3984,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 199,
            column: 38,
            span: 3984..3986,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 199,
            column: 41,
            span: 3986..3989,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 199,
            column: 42,
            span: 3989..3990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 200,
            column: 2,
            span: 3991..3992,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 200,
            column: 4,
            span: 3993..3994,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 200,
            column: 6,
            span: 3995..3996,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 200,
            column: 7,
            span: 3995..3997,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 8,
            span: 3997..3998,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 200,
            column: 9,
            span: 3997..3999,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 10,
            span: 3999..4000,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 200,
            column: 11,
            span: 3999..4001,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 12,
            span: 4001..4002,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 200,
            column: 13,
            span: 4001..4003,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 14,
            span: 4003..4004,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 200,
            column: 19,
            span: 4004..4009,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 20,
            span: 4009..4010,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 200,
            column: 22,
            span: 4009..4012,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 23,
            span: 4012..4013,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 200,
            column: 28,
            span: 4013..4018,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 29,
            span: 4018..4019,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 200,
            column: 34,
            span: 4019..4024,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 35,
            span: 4024..4025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 200,
            column: 41,
            span: 4025..4031,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 200,
            column: 42,
            span: 4031..4032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "equaltab",
        ),
        position: Position {
            line: 201,
            column: 9,
            span: 4033..4041,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 10,
            span: 4041..4042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 201,
            column: 14,
            span: 4042..4046,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 15,
            span: 4046..4047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        position: Position {
            line: 201,
            column: 22,
            span: 4047..4054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 23,
            span: 4054..4055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 201,
            column: 24,
            span: 4055..4056,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 201,
            column: 25,
            span: 4056..4057,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 201,
            column: 26,
            span: 4057..4058,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 201,
            column: 27,
            span: 4058..4059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 201,
            column: 29,
            span: 4060..4061,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 201,
            column: 30,
            span: 4061..4062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "equaltab",
        ),
        position: Position {
            line: 202,
            column: 9,
            span: 4063..4071,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 202,
            column: 10,
            span: 4071..4072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 202,
            column: 14,
            span: 4072..4076,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 202,
            column: 15,
            span: 4076..4077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        position: Position {
            line: 202,
            column: 22,
            span: 4077..4084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 202,
            column: 23,
            span: 4084..4085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 202,
            column: 24,
            span: 4085..4086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 25,
            span: 4086..4087,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 202,
            column: 26,
            span: 4087..4088,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 202,
            column: 28,
            span: 4089..4090,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 202,
            column: 29,
            span: 4089..4091,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 30,
            span: 4091..4092,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 202,
            column: 31,
            span: 4092..4093,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 202,
            column: 33,
            span: 4094..4095,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 202,
            column: 34,
            span: 4094..4096,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 202,
            column: 35,
            span: 4096..4097,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 202,
            column: 36,
            span: 4097..4098,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 202,
            column: 37,
            span: 4097..4099,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 202,
            column: 38,
            span: 4099..4100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 39,
            span: 4100..4101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 203,
            column: 2,
            span: 4102..4103,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 3,
            span: 4103..4104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 203,
            column: 4,
            span: 4104..4105,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 5,
            span: 4105..4106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 203,
            column: 6,
            span: 4106..4107,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 7,
            span: 4107..4108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 203,
            column: 8,
            span: 4108..4109,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 203,
            column: 10,
            span: 4110..4111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        position: Position {
            line: 203,
            column: 15,
            span: 4112..4116,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 16,
            span: 4116..4117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 203,
            column: 17,
            span: 4117..4118,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 18,
            span: 4118..4119,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 19,
            span: 4119..4120,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 20,
            span: 4120..4121,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 203,
            column: 21,
            span: 4121..4122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        position: Position {
            line: 203,
            column: 26,
            span: 4123..4127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 27,
            span: 4127..4128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 203,
            column: 28,
            span: 4128..4129,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 29,
            span: 4129..4130,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 30,
            span: 4130..4131,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 31,
            span: 4131..4132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 204,
            column: 7,
            span: 4133..4139,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 204,
            column: 8,
            span: 4139..4140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 204,
            column: 9,
            span: 4140..4141,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 204,
            column: 11,
            span: 4141..4143,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 204,
            column: 12,
            span: 4142..4144,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 204,
            column: 16,
            span: 4145..4148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 204,
            column: 18,
            span: 4149..4150,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 204,
            column: 20,
            span: 4150..4152,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 204,
            column: 21,
            span: 4151..4153,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 204,
            column: 25,
            span: 4154..4157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 204,
            column: 27,
            span: 4158..4159,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 204,
            column: 29,
            span: 4159..4161,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 204,
            column: 30,
            span: 4160..4162,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 204,
            column: 34,
            span: 4163..4166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 204,
            column: 36,
            span: 4167..4168,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 204,
            column: 38,
            span: 4168..4170,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 204,
            column: 41,
            span: 4170..4173,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 204,
            column: 42,
            span: 4173..4174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 205,
            column: 2,
            span: 4175..4176,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 3,
            span: 4176..4177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 205,
            column: 4,
            span: 4177..4178,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 5,
            span: 4178..4179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 205,
            column: 6,
            span: 4179..4180,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 7,
            span: 4180..4181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 205,
            column: 8,
            span: 4181..4182,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 205,
            column: 10,
            span: 4183..4184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        position: Position {
            line: 205,
            column: 18,
            span: 4185..4192,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 19,
            span: 4192..4193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 205,
            column: 23,
            span: 4193..4197,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 24,
            span: 4197..4198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        position: Position {
            line: 205,
            column: 28,
            span: 4198..4202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 29,
            span: 4202..4203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 205,
            column: 30,
            span: 4203..4204,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 31,
            span: 4204..4205,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 32,
            span: 4205..4206,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 33,
            span: 4206..4207,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 34,
            span: 4207..4208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        position: Position {
            line: 205,
            column: 39,
            span: 4209..4213,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 40,
            span: 4213..4214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 205,
            column: 41,
            span: 4214..4215,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 42,
            span: 4215..4216,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 43,
            span: 4216..4217,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 44,
            span: 4217..4218,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 45,
            span: 4218..4219,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 46,
            span: 4219..4220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 206,
            column: 7,
            span: 4221..4227,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 8,
            span: 4227..4228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 206,
            column: 9,
            span: 4228..4229,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 206,
            column: 11,
            span: 4229..4231,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 206,
            column: 12,
            span: 4230..4232,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 206,
            column: 16,
            span: 4233..4236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 206,
            column: 18,
            span: 4237..4238,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 206,
            column: 20,
            span: 4238..4240,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 206,
            column: 21,
            span: 4239..4241,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 206,
            column: 25,
            span: 4242..4245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 206,
            column: 27,
            span: 4246..4247,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 206,
            column: 29,
            span: 4247..4249,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 206,
            column: 30,
            span: 4248..4250,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 206,
            column: 34,
            span: 4251..4254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 206,
            column: 36,
            span: 4255..4256,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 206,
            column: 38,
            span: 4256..4258,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 206,
            column: 41,
            span: 4258..4261,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 42,
            span: 4261..4262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 207,
            column: 2,
            span: 4263..4264,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 3,
            span: 4264..4265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 207,
            column: 4,
            span: 4265..4266,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 5,
            span: 4266..4267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 207,
            column: 6,
            span: 4267..4268,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 7,
            span: 4268..4269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 207,
            column: 8,
            span: 4269..4270,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 207,
            column: 10,
            span: 4271..4272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        position: Position {
            line: 207,
            column: 18,
            span: 4273..4280,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 19,
            span: 4280..4281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 207,
            column: 23,
            span: 4281..4285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 24,
            span: 4285..4286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        position: Position {
            line: 207,
            column: 28,
            span: 4286..4290,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 29,
            span: 4290..4291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 207,
            column: 30,
            span: 4291..4292,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 31,
            span: 4292..4293,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 32,
            span: 4293..4294,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 33,
            span: 4294..4295,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 34,
            span: 4295..4296,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 36,
            span: 4297..4298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        position: Position {
            line: 207,
            column: 40,
            span: 4298..4302,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 41,
            span: 4302..4303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 207,
            column: 42,
            span: 4303..4304,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 43,
            span: 4304..4305,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 44,
            span: 4305..4306,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 45,
            span: 4306..4307,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 46,
            span: 4307..4308,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 47,
            span: 4308..4309,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 48,
            span: 4309..4310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 208,
            column: 7,
            span: 4311..4317,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 208,
            column: 8,
            span: 4317..4318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 208,
            column: 9,
            span: 4318..4319,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 208,
            column: 11,
            span: 4319..4321,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 208,
            column: 12,
            span: 4320..4322,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 208,
            column: 16,
            span: 4323..4326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 208,
            column: 18,
            span: 4327..4328,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 208,
            column: 20,
            span: 4328..4330,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 208,
            column: 21,
            span: 4329..4331,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 208,
            column: 25,
            span: 4332..4335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 208,
            column: 27,
            span: 4336..4337,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 208,
            column: 29,
            span: 4337..4339,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 208,
            column: 32,
            span: 4339..4342,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 208,
            column: 36,
            span: 4343..4346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 208,
            column: 38,
            span: 4347..4348,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 208,
            column: 40,
            span: 4348..4350,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 208,
            column: 43,
            span: 4350..4353,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 208,
            column: 44,
            span: 4353..4354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 210,
            column: 2,
            span: 4356..4357,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 210,
            column: 4,
            span: 4358..4359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ret2",
        ),
        position: Position {
            line: 210,
            column: 9,
            span: 4360..4364,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 210,
            column: 10,
            span: 4364..4365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        position: Position {
            line: 210,
            column: 18,
            span: 4366..4373,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 210,
            column: 19,
            span: 4373..4374,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 20,
            span: 4373..4375,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 21,
            span: 4375..4376,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 22,
            span: 4375..4377,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 23,
            span: 4377..4378,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 24,
            span: 4377..4379,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 210,
            column: 25,
            span: 4379..4380,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 26,
            span: 4380..4381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        position: Position {
            line: 210,
            column: 34,
            span: 4382..4389,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 210,
            column: 35,
            span: 4389..4390,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 36,
            span: 4389..4391,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 37,
            span: 4391..4392,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 38,
            span: 4391..4393,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 39,
            span: 4393..4394,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 40,
            span: 4393..4395,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 210,
            column: 41,
            span: 4395..4396,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 42,
            span: 4396..4397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unlpack",
        ),
        position: Position {
            line: 210,
            column: 50,
            span: 4398..4405,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 210,
            column: 51,
            span: 4405..4406,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 210,
            column: 54,
            span: 4406..4409,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 55,
            span: 4409..4410,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 210,
            column: 59,
            span: 4411..4414,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 210,
            column: 60,
            span: 4414..4415,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 210,
            column: 61,
            span: 4415..4416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 211,
            column: 7,
            span: 4417..4423,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 211,
            column: 8,
            span: 4423..4424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 211,
            column: 9,
            span: 4424..4425,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 211,
            column: 10,
            span: 4425..4426,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 11,
            span: 4425..4427,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 211,
            column: 12,
            span: 4427..4428,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 211,
            column: 15,
            span: 4429..4431,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 17,
            span: 4431..4433,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 211,
            column: 21,
            span: 4434..4437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 211,
            column: 23,
            span: 4438..4439,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 211,
            column: 24,
            span: 4439..4440,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 25,
            span: 4439..4441,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 211,
            column: 26,
            span: 4441..4442,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 211,
            column: 29,
            span: 4443..4445,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 31,
            span: 4445..4447,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 211,
            column: 35,
            span: 4448..4451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 211,
            column: 37,
            span: 4452..4453,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 211,
            column: 38,
            span: 4453..4454,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 39,
            span: 4453..4455,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 211,
            column: 40,
            span: 4455..4456,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 211,
            column: 43,
            span: 4457..4459,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 211,
            column: 47,
            span: 4460..4463,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 211,
            column: 51,
            span: 4464..4467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 211,
            column: 53,
            span: 4468..4469,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 211,
            column: 54,
            span: 4469..4470,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 55,
            span: 4469..4471,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 211,
            column: 56,
            span: 4471..4472,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 211,
            column: 59,
            span: 4473..4475,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 211,
            column: 63,
            span: 4476..4479,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 211,
            column: 64,
            span: 4479..4480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        position: Position {
            line: 215,
            column: 7,
            span: 4527..4533,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 215,
            column: 8,
            span: 4533..4534,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 215,
            column: 9,
            span: 4534..4535,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 215,
            column: 10,
            span: 4535..4536,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 11,
            span: 4536..4537,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 215,
            column: 15,
            span: 4538..4541,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 16,
            span: 4541..4542,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 215,
            column: 18,
            span: 4542..4544,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 215,
            column: 19,
            span: 4544..4545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        position: Position {
            line: 216,
            column: 7,
            span: 4546..4552,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 216,
            column: 8,
            span: 4552..4553,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 216,
            column: 9,
            span: 4553..4554,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 216,
            column: 10,
            span: 4554..4555,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 11,
            span: 4555..4556,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 216,
            column: 15,
            span: 4557..4560,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 16,
            span: 4560..4561,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 216,
            column: 18,
            span: 4561..4563,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 19,
            span: 4563..4564,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 216,
            column: 21,
            span: 4564..4566,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 216,
            column: 22,
            span: 4566..4567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 217,
            column: 7,
            span: 4568..4574,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 8,
            span: 4574..4575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 217,
            column: 12,
            span: 4575..4579,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 217,
            column: 13,
            span: 4579..4580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        position: Position {
            line: 217,
            column: 16,
            span: 4580..4583,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 17,
            span: 4583..4584,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 217,
            column: 18,
            span: 4583..4585,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 217,
            column: 19,
            span: 4585..4586,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 217,
            column: 20,
            span: 4585..4587,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 21,
            span: 4587..4588,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 217,
            column: 24,
            span: 4589..4591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 217,
            column: 29,
            span: 4592..4596,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 217,
            column: 30,
            span: 4596..4597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        position: Position {
            line: 217,
            column: 33,
            span: 4597..4600,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 34,
            span: 4600..4601,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 217,
            column: 35,
            span: 4600..4602,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 36,
            span: 4602..4603,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 37,
            span: 4603..4604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 218,
            column: 6,
            span: 4605..4610,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 218,
            column: 7,
            span: 4610..4611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        position: Position {
            line: 218,
            column: 11,
            span: 4611..4615,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 218,
            column: 12,
            span: 4615..4616,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 218,
            column: 13,
            span: 4616..4617,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 218,
            column: 15,
            span: 4616..4619,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 16,
            span: 4619..4620,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 218,
            column: 17,
            span: 4619..4621,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 18,
            span: 4621..4622,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 218,
            column: 19,
            span: 4621..4623,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 20,
            span: 4623..4624,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 218,
            column: 21,
            span: 4623..4625,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 22,
            span: 4625..4626,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 218,
            column: 24,
            span: 4625..4628,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 25,
            span: 4628..4629,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 218,
            column: 27,
            span: 4628..4631,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 28,
            span: 4631..4632,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 218,
            column: 29,
            span: 4631..4633,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 30,
            span: 4633..4634,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 218,
            column: 31,
            span: 4633..4635,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 218,
            column: 32,
            span: 4635..4636,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 33,
            span: 4636..4637,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 218,
            column: 42,
            span: 4638..4646,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 218,
            column: 44,
            span: 4647..4648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 218,
            column: 45,
            span: 4648..4649,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 46,
            span: 4649..4650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 218,
            column: 47,
            span: 4650..4651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 218,
            column: 48,
            span: 4651..4652,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 218,
            column: 55,
            span: 4653..4659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 218,
            column: 57,
            span: 4660..4661,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 218,
            column: 58,
            span: 4661..4662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 218,
            column: 59,
            span: 4662..4663,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 218,
            column: 63,
            span: 4664..4667,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 64,
            span: 4667..4668,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"extra arg\"",
        ),
        position: Position {
            line: 218,
            column: 76,
            span: 4669..4680,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 218,
            column: 77,
            span: 4680..4681,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 222,
            column: 6,
            span: 4709..4714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 222,
            column: 8,
            span: 4715..4716,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 222,
            column: 10,
            span: 4717..4718,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-- a comment\\0\\0\\0\\n  x = 10 + \\n23; \\\n     local a = function () x = 'hi' end; \\\n     return '\\0'\"",
        ),
        position: Position {
            line: 224,
            column: 18,
            span: 4719..4819,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 225,
            column: 9,
            span: 4820..4828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        position: Position {
            line: 225,
            column: 15,
            span: 4829..4834,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 17,
            span: 4835..4836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 225,
            column: 18,
            span: 4836..4837,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 19,
            span: 4837..4838,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 226,
            column: 8,
            span: 4841..4846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 226,
            column: 10,
            span: 4847..4848,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 226,
            column: 12,
            span: 4849..4850,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 226,
            column: 0,
            span: 4850..4852,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 227,
            column: 9,
            span: 4855..4861,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 227,
            column: 18,
            span: 4862..4870,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 20,
            span: 4871..4872,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 21,
            span: 4872..4873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 228,
            column: 19,
            span: 4878..4892,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 20,
            span: 4892..4893,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 228,
            column: 21,
            span: 4893..4894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 229,
            column: 6,
            span: 4899..4900,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 229,
            column: 7,
            span: 4900..4901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 229,
            column: 8,
            span: 4901..4902,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 229,
            column: 9,
            span: 4902..4903,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 229,
            column: 0,
            span: 4902..4904,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 230,
            column: 11,
            span: 4909..4915,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 230,
            column: 18,
            span: 4916..4922,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 230,
            column: 19,
            span: 4922..4923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 230,
            column: 22,
            span: 4923..4926,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 23,
            span: 4926..4927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 230,
            column: 24,
            span: 4927..4928,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 25,
            span: 4928..4929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 230,
            column: 27,
            span: 4930..4931,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 28,
            span: 4931..4932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 230,
            column: 30,
            span: 4933..4934,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 31,
            span: 4934..4935,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 231,
            column: 0,
            span: 4938..4941,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 232,
            column: 0,
            span: 4942..4945,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 234,
            column: 9,
            span: 4947..4955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        position: Position {
            line: 234,
            column: 20,
            span: 4956..4966,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 234,
            column: 22,
            span: 4967..4968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 234,
            column: 25,
            span: 4968..4971,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 26,
            span: 4971..4972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 234,
            column: 28,
            span: 4973..4974,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 29,
            span: 4974..4975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 234,
            column: 30,
            span: 4975..4976,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 234,
            column: 31,
            span: 4976..4977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 235,
            column: 9,
            span: 4980..4986,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 10,
            span: 4986..4987,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 235,
            column: 13,
            span: 4987..4990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 235,
            column: 15,
            span: 4991..4992,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 235,
            column: 19,
            span: 4993..4996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 235,
            column: 26,
            span: 4997..5003,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 235,
            column: 27,
            span: 5003..5004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 235,
            column: 31,
            span: 5004..5008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 32,
            span: 5008..5009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 235,
            column: 33,
            span: 5009..5010,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 235,
            column: 34,
            span: 5010..5011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 235,
            column: 38,
            span: 5012..5015,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 235,
            column: 39,
            span: 5015..5016,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 235,
            column: 40,
            span: 5016..5017,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 236,
            column: 0,
            span: 5018..5021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 238,
            column: 2,
            span: 5023..5024,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 238,
            column: 4,
            span: 5025..5026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 238,
            column: 11,
            span: 5027..5033,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 12,
            span: 5033..5034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 238,
            column: 16,
            span: 5034..5038,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 17,
            span: 5038..5039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        position: Position {
            line: 238,
            column: 22,
            span: 5039..5044,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 23,
            span: 5044..5045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 238,
            column: 24,
            span: 5045..5046,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 238,
            column: 25,
            span: 5046..5047,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 26,
            span: 5047..5048,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"modname\"",
        ),
        position: Position {
            line: 238,
            column: 36,
            span: 5049..5058,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 37,
            span: 5058..5059,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        position: Position {
            line: 238,
            column: 41,
            span: 5060..5063,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 42,
            span: 5063..5064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 238,
            column: 45,
            span: 5065..5067,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 238,
            column: 46,
            span: 5067..5068,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 238,
            column: 47,
            span: 5068..5069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 239,
            column: 7,
            span: 5070..5076,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 8,
            span: 5076..5077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 239,
            column: 9,
            span: 5077..5078,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 10,
            span: 5078..5079,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 11,
            span: 5079..5080,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 239,
            column: 14,
            span: 5081..5083,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 239,
            column: 19,
            span: 5084..5088,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 239,
            column: 23,
            span: 5089..5092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 239,
            column: 26,
            span: 5093..5095,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 239,
            column: 27,
            span: 5095..5096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 239,
            column: 28,
            span: 5096..5097,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 239,
            column: 31,
            span: 5098..5100,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 239,
            column: 34,
            span: 5100..5103,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 35,
            span: 5103..5104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 240,
            column: 7,
            span: 5105..5111,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 240,
            column: 8,
            span: 5111..5112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 240,
            column: 13,
            span: 5112..5117,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 240,
            column: 14,
            span: 5117..5118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 240,
            column: 21,
            span: 5118..5125,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 240,
            column: 22,
            span: 5125..5126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 240,
            column: 23,
            span: 5126..5127,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 240,
            column: 24,
            span: 5127..5128,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 240,
            column: 25,
            span: 5128..5129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        position: Position {
            line: 240,
            column: 31,
            span: 5129..5135,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 240,
            column: 34,
            span: 5136..5138,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"modname\"",
        ),
        position: Position {
            line: 240,
            column: 44,
            span: 5139..5148,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 240,
            column: 45,
            span: 5148..5149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        position: Position {
            line: 242,
            column: 11,
            span: 5185..5195,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 12,
            span: 5195..5196,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to load a text chunk\"",
        ),
        position: Position {
            line: 242,
            column: 42,
            span: 5196..5226,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 43,
            span: 5226..5227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 242,
            column: 48,
            span: 5228..5232,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 49,
            span: 5232..5233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        position: Position {
            line: 242,
            column: 54,
            span: 5233..5238,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 55,
            span: 5238..5239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 242,
            column: 56,
            span: 5239..5240,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 57,
            span: 5240..5241,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 58,
            span: 5241..5242,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"modname\"",
        ),
        position: Position {
            line: 242,
            column: 68,
            span: 5243..5252,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 69,
            span: 5252..5253,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 242,
            column: 73,
            span: 5254..5257,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 242,
            column: 74,
            span: 5257..5258,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 242,
            column: 76,
            span: 5259..5260,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 242,
            column: 77,
            span: 5260..5261,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 78,
            span: 5261..5262,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 79,
            span: 5262..5263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        position: Position {
            line: 243,
            column: 11,
            span: 5264..5274,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 12,
            span: 5274..5275,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to load a text chunk\"",
        ),
        position: Position {
            line: 243,
            column: 42,
            span: 5275..5305,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 243,
            column: 43,
            span: 5305..5306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 243,
            column: 48,
            span: 5307..5311,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 49,
            span: 5311..5312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 243,
            column: 50,
            span: 5312..5313,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 243,
            column: 51,
            span: 5313..5314,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"modname\"",
        ),
        position: Position {
            line: 243,
            column: 61,
            span: 5315..5324,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 243,
            column: 62,
            span: 5324..5325,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 243,
            column: 66,
            span: 5326..5329,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 67,
            span: 5329..5330,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 68,
            span: 5330..5331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 245,
            column: 2,
            span: 5333..5334,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 245,
            column: 4,
            span: 5335..5336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 245,
            column: 11,
            span: 5337..5343,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 245,
            column: 12,
            span: 5343..5344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 245,
            column: 16,
            span: 5344..5348,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 245,
            column: 17,
            span: 5348..5349,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 245,
            column: 25,
            span: 5349..5357,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 245,
            column: 27,
            span: 5358..5359,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 245,
            column: 28,
            span: 5359..5360,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 245,
            column: 35,
            span: 5361..5367,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 245,
            column: 39,
            span: 5368..5371,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 245,
            column: 43,
            span: 5372..5375,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 245,
            column: 44,
            span: 5375..5376,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 245,
            column: 45,
            span: 5376..5377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 246,
            column: 2,
            span: 5378..5379,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 246,
            column: 3,
            span: 5379..5380,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 4,
            span: 5380..5381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 248,
            column: 7,
            span: 5399..5405,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 248,
            column: 8,
            span: 5405..5406,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 248,
            column: 11,
            span: 5406..5409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 248,
            column: 16,
            span: 5410..5414,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 248,
            column: 17,
            span: 5414..5415,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 248,
            column: 25,
            span: 5415..5423,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 248,
            column: 27,
            span: 5424..5425,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 248,
            column: 28,
            span: 5425..5426,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 248,
            column: 35,
            span: 5427..5433,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 248,
            column: 40,
            span: 5434..5438,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 248,
            column: 44,
            span: 5439..5442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 248,
            column: 45,
            span: 5442..5443,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 248,
            column: 46,
            span: 5443..5444,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 252,
            column: 6,
            span: 5460..5465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 252,
            column: 8,
            span: 5466..5467,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 252,
            column: 10,
            span: 5468..5469,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 252,
            column: 12,
            span: 5470..5471,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 252,
            column: 15,
            span: 5471..5474,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 16,
            span: 5474..5475,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return \"",
        ),
        position: Position {
            line: 252,
            column: 26,
            span: 5476..5485,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 27,
            span: 5485..5486,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        position: Position {
            line: 252,
            column: 31,
            span: 5487..5490,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 252,
            column: 32,
            span: 5490..5491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 253,
            column: 2,
            span: 5492..5493,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 253,
            column: 3,
            span: 5493..5494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 253,
            column: 7,
            span: 5495..5498,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 253,
            column: 9,
            span: 5499..5500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 253,
            column: 14,
            span: 5501..5505,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 15,
            span: 5505..5506,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 253,
            column: 23,
            span: 5506..5514,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 25,
            span: 5515..5516,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 26,
            span: 5516..5517,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 253,
            column: 33,
            span: 5518..5524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 253,
            column: 39,
            span: 5525..5530,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 253,
            column: 40,
            span: 5530..5531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 253,
            column: 46,
            span: 5531..5537,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 47,
            span: 5537..5538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 253,
            column: 48,
            span: 5538..5539,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 253,
            column: 49,
            span: 5539..5540,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 253,
            column: 51,
            span: 5540..5542,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 52,
            span: 5542..5543,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 253,
            column: 56,
            span: 5544..5547,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 57,
            span: 5547..5548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 254,
            column: 7,
            span: 5549..5555,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 8,
            span: 5555..5556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 254,
            column: 9,
            span: 5556..5557,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 10,
            span: 5557..5558,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 11,
            span: 5558..5559,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 254,
            column: 14,
            span: 5560..5562,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 254,
            column: 18,
            span: 5563..5566,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 19,
            span: 5566..5567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 257,
            column: 2,
            span: 5634..5635,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 257,
            column: 4,
            span: 5636..5637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 257,
            column: 9,
            span: 5638..5642,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 10,
            span: 5642..5643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 257,
            column: 16,
            span: 5643..5649,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 257,
            column: 17,
            span: 5649..5650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 257,
            column: 21,
            span: 5650..5654,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 22,
            span: 5654..5655,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 257,
            column: 30,
            span: 5655..5663,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 32,
            span: 5664..5665,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 33,
            span: 5665..5666,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 257,
            column: 40,
            span: 5667..5673,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 257,
            column: 42,
            span: 5673..5675,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 257,
            column: 46,
            span: 5676..5679,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 47,
            span: 5679..5680,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 257,
            column: 48,
            span: 5680..5681,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 257,
            column: 52,
            span: 5682..5685,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 257,
            column: 53,
            span: 5685..5686,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 257,
            column: 57,
            span: 5687..5690,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 257,
            column: 58,
            span: 5690..5691,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 257,
            column: 60,
            span: 5692..5693,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 257,
            column: 61,
            span: 5693..5694,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 62,
            span: 5694..5695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 258,
            column: 7,
            span: 5696..5702,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 8,
            span: 5702..5703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 258,
            column: 12,
            span: 5703..5707,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 13,
            span: 5707..5708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 258,
            column: 14,
            span: 5708..5709,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 15,
            span: 5709..5710,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 258,
            column: 18,
            span: 5711..5713,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        position: Position {
            line: 258,
            column: 29,
            span: 5714..5724,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 258,
            column: 33,
            span: 5725..5728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 258,
            column: 35,
            span: 5729..5730,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 258,
            column: 36,
            span: 5730..5731,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 37,
            span: 5731..5732,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 258,
            column: 40,
            span: 5733..5735,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 258,
            column: 42,
            span: 5735..5737,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 43,
            span: 5737..5738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 261,
            column: 2,
            span: 5741..5742,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 261,
            column: 4,
            span: 5743..5744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 261,
            column: 11,
            span: 5745..5751,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 261,
            column: 12,
            span: 5751..5752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 261,
            column: 16,
            span: 5752..5756,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 17,
            span: 5756..5757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 261,
            column: 21,
            span: 5757..5761,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 22,
            span: 5761..5762,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x = 1; return x\"",
        ),
        position: Position {
            line: 261,
            column: 39,
            span: 5762..5779,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 40,
            span: 5779..5780,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 41,
            span: 5780..5781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 262,
            column: 2,
            span: 5782..5783,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 262,
            column: 4,
            span: 5784..5785,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 262,
            column: 11,
            span: 5786..5792,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 262,
            column: 12,
            span: 5792..5793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 262,
            column: 16,
            span: 5793..5797,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 262,
            column: 17,
            span: 5797..5798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        position: Position {
            line: 262,
            column: 22,
            span: 5798..5803,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 262,
            column: 23,
            span: 5803..5804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 262,
            column: 24,
            span: 5804..5805,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 262,
            column: 25,
            span: 5805..5806,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 26,
            span: 5806..5807,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 262,
            column: 30,
            span: 5808..5811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 31,
            span: 5811..5812,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 262,
            column: 35,
            span: 5813..5816,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 262,
            column: 36,
            span: 5816..5817,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 262,
            column: 37,
            span: 5817..5818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 263,
            column: 7,
            span: 5819..5825,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 263,
            column: 8,
            span: 5825..5826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 263,
            column: 9,
            span: 5826..5827,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 263,
            column: 10,
            span: 5827..5828,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 263,
            column: 11,
            span: 5828..5829,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 263,
            column: 14,
            span: 5830..5832,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 263,
            column: 16,
            span: 5832..5834,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 263,
            column: 20,
            span: 5835..5838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 263,
            column: 23,
            span: 5839..5841,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 263,
            column: 24,
            span: 5841..5842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 263,
            column: 25,
            span: 5842..5843,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 263,
            column: 28,
            span: 5844..5846,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 263,
            column: 30,
            span: 5846..5848,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 263,
            column: 31,
            span: 5848..5849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        position: Position {
            line: 264,
            column: 11,
            span: 5850..5860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 12,
            span: 5860..5861,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to load a binary chunk\"",
        ),
        position: Position {
            line: 264,
            column: 44,
            span: 5861..5893,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 45,
            span: 5893..5894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 264,
            column: 50,
            span: 5895..5899,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 51,
            span: 5899..5900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        position: Position {
            line: 264,
            column: 56,
            span: 5900..5905,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 57,
            span: 5905..5906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 264,
            column: 58,
            span: 5906..5907,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 59,
            span: 5907..5908,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 60,
            span: 5908..5909,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 264,
            column: 64,
            span: 5910..5913,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 65,
            span: 5913..5914,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        position: Position {
            line: 264,
            column: 69,
            span: 5915..5918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 70,
            span: 5918..5919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 71,
            span: 5919..5920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        position: Position {
            line: 265,
            column: 11,
            span: 5921..5931,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 265,
            column: 12,
            span: 5931..5932,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to load a binary chunk\"",
        ),
        position: Position {
            line: 265,
            column: 44,
            span: 5932..5964,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 265,
            column: 45,
            span: 5964..5965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 265,
            column: 50,
            span: 5966..5970,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 265,
            column: 51,
            span: 5970..5971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 265,
            column: 52,
            span: 5971..5972,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 265,
            column: 53,
            span: 5972..5973,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 265,
            column: 57,
            span: 5974..5977,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 265,
            column: 58,
            span: 5977..5978,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        position: Position {
            line: 265,
            column: 62,
            span: 5979..5982,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 265,
            column: 63,
            span: 5982..5983,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 265,
            column: 64,
            span: 5983..5984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 267,
            column: 7,
            span: 5986..5992,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 8,
            span: 5992..5993,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 267,
            column: 11,
            span: 5993..5996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 267,
            column: 17,
            span: 5997..6002,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 18,
            span: 6002..6003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 267,
            column: 24,
            span: 6003..6009,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 267,
            column: 25,
            span: 6009..6010,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 267,
            column: 29,
            span: 6010..6014,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 267,
            column: 30,
            span: 6014..6015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 267,
            column: 36,
            span: 6016..6021,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 267,
            column: 37,
            span: 6021..6022,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 267,
            column: 38,
            span: 6022..6023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        position: Position {
            line: 269,
            column: 11,
            span: 6052..6062,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 269,
            column: 12,
            span: 6062..6063,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unexpected symbol\"",
        ),
        position: Position {
            line: 269,
            column: 31,
            span: 6063..6082,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 269,
            column: 32,
            span: 6082..6083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 269,
            column: 37,
            span: 6084..6088,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 269,
            column: 38,
            span: 6088..6089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        position: Position {
            line: 269,
            column: 43,
            span: 6089..6094,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 269,
            column: 44,
            span: 6094..6095,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*a = 123\"",
        ),
        position: Position {
            line: 269,
            column: 54,
            span: 6095..6105,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 269,
            column: 55,
            span: 6105..6106,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 269,
            column: 56,
            span: 6106..6107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 269,
            column: 57,
            span: 6107..6108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        position: Position {
            line: 270,
            column: 11,
            span: 6109..6119,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 12,
            span: 6119..6120,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unexpected symbol\"",
        ),
        position: Position {
            line: 270,
            column: 31,
            span: 6120..6139,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 32,
            span: 6139..6140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 270,
            column: 37,
            span: 6141..6145,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 38,
            span: 6145..6146,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*a = 123\"",
        ),
        position: Position {
            line: 270,
            column: 48,
            span: 6146..6156,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 49,
            span: 6156..6157,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 50,
            span: 6157..6158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cannotload",
        ),
        position: Position {
            line: 271,
            column: 11,
            span: 6159..6169,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 12,
            span: 6169..6170,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hhi\"",
        ),
        position: Position {
            line: 271,
            column: 17,
            span: 6170..6175,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 271,
            column: 18,
            span: 6175..6176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 271,
            column: 23,
            span: 6177..6181,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 24,
            span: 6181..6182,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 271,
            column: 32,
            span: 6182..6190,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 34,
            span: 6191..6192,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 35,
            span: 6192..6193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 271,
            column: 41,
            span: 6194..6199,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 42,
            span: 6199..6200,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hhi\"",
        ),
        position: Position {
            line: 271,
            column: 47,
            span: 6200..6205,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 48,
            span: 6205..6206,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 271,
            column: 52,
            span: 6207..6210,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 53,
            span: 6210..6211,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 54,
            span: 6211..6212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 274,
            column: 7,
            span: 6245..6251,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 274,
            column: 8,
            span: 6251..6252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 274,
            column: 12,
            span: 6252..6256,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 274,
            column: 13,
            span: 6256..6257,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return _ENV\"",
        ),
        position: Position {
            line: 274,
            column: 26,
            span: 6257..6270,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 274,
            column: 27,
            span: 6270..6271,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 274,
            column: 31,
            span: 6272..6275,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 274,
            column: 32,
            span: 6275..6276,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 274,
            column: 36,
            span: 6277..6280,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 274,
            column: 37,
            span: 6280..6281,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 274,
            column: 41,
            span: 6281..6285,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 274,
            column: 42,
            span: 6285..6286,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 274,
            column: 43,
            span: 6286..6287,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 274,
            column: 44,
            span: 6287..6288,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 274,
            column: 47,
            span: 6289..6291,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 274,
            column: 51,
            span: 6291..6295,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 274,
            column: 52,
            span: 6295..6296,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 278,
            column: 6,
            span: 6338..6343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 278,
            column: 8,
            span: 6344..6345,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 278,
            column: 9,
            span: 6345..6346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 278,
            column: 12,
            span: 6347..6349,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 278,
            column: 14,
            span: 6350..6351,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 278,
            column: 0,
            span: 6351..6355,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 279,
            column: 6,
            span: 6356..6361,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 279,
            column: 15,
            span: 6362..6370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 279,
            column: 17,
            span: 6371..6372,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 19,
            span: 6373..6374,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 20,
            span: 6374..6375,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 280,
            column: 8,
            span: 6378..6383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 280,
            column: 10,
            span: 6384..6385,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 280,
            column: 11,
            span: 6385..6386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 280,
            column: 12,
            span: 6386..6387,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 281,
            column: 9,
            span: 6435..6441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 281,
            column: 12,
            span: 6442..6444,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 282,
            column: 0,
            span: 6462..6465,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 283,
            column: 6,
            span: 6466..6471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 283,
            column: 8,
            span: 6472..6473,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 283,
            column: 10,
            span: 6474..6475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 283,
            column: 17,
            span: 6476..6482,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 283,
            column: 18,
            span: 6482..6483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 283,
            column: 22,
            span: 6483..6487,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 283,
            column: 23,
            span: 6487..6488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 283,
            column: 24,
            span: 6488..6489,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 283,
            column: 25,
            span: 6489..6490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 284,
            column: 2,
            span: 6491..6492,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 284,
            column: 4,
            span: 6493..6494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 284,
            column: 9,
            span: 6495..6499,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 284,
            column: 10,
            span: 6499..6500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 284,
            column: 11,
            span: 6500..6501,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 284,
            column: 12,
            span: 6501..6502,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 284,
            column: 15,
            span: 6503..6505,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 284,
            column: 16,
            span: 6505..6506,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 284,
            column: 20,
            span: 6507..6510,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 284,
            column: 21,
            span: 6510..6511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 285,
            column: 7,
            span: 6512..6518,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 285,
            column: 8,
            span: 6518..6519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 285,
            column: 13,
            span: 6519..6524,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 285,
            column: 14,
            span: 6524..6525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 285,
            column: 24,
            span: 6525..6535,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 285,
            column: 25,
            span: 6535..6536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 285,
            column: 26,
            span: 6536..6537,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 285,
            column: 27,
            span: 6537..6538,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 285,
            column: 29,
            span: 6538..6540,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 285,
            column: 30,
            span: 6540..6541,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 285,
            column: 33,
            span: 6542..6544,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'_ENV'",
        ),
        position: Position {
            line: 285,
            column: 40,
            span: 6545..6551,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 285,
            column: 41,
            span: 6551..6552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 286,
            column: 6,
            span: 6553..6558,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 286,
            column: 7,
            span: 6558..6559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        position: Position {
            line: 286,
            column: 17,
            span: 6559..6569,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 286,
            column: 18,
            span: 6569..6570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 286,
            column: 19,
            span: 6570..6571,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 286,
            column: 20,
            span: 6571..6572,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 286,
            column: 22,
            span: 6572..6574,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 286,
            column: 23,
            span: 6574..6575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 286,
            column: 26,
            span: 6576..6578,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 286,
            column: 27,
            span: 6578..6579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 287,
            column: 7,
            span: 6580..6586,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 8,
            span: 6586..6587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 287,
            column: 9,
            span: 6587..6588,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 10,
            span: 6588..6589,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 11,
            span: 6589..6590,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 287,
            column: 14,
            span: 6591..6593,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 287,
            column: 18,
            span: 6593..6597,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 19,
            span: 6597..6598,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 289,
            column: 7,
            span: 6600..6606,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 8,
            span: 6606..6607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 289,
            column: 14,
            span: 6607..6613,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 15,
            span: 6613..6614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 289,
            column: 19,
            span: 6614..6618,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 20,
            span: 6618..6619,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return XX + ...\"",
        ),
        position: Position {
            line: 289,
            column: 37,
            span: 6619..6636,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 289,
            column: 38,
            span: 6636..6637,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 289,
            column: 42,
            span: 6638..6641,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 289,
            column: 43,
            span: 6641..6642,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 289,
            column: 47,
            span: 6643..6646,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 289,
            column: 48,
            span: 6646..6647,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 289,
            column: 50,
            span: 6648..6649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 289,
            column: 52,
            span: 6649..6651,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 289,
            column: 54,
            span: 6652..6653,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 289,
            column: 57,
            span: 6653..6656,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 289,
            column: 58,
            span: 6656..6657,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 59,
            span: 6657..6658,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 60,
            span: 6658..6659,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 61,
            span: 6659..6660,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 289,
            column: 62,
            span: 6659..6661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 63,
            span: 6661..6662,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 289,
            column: 66,
            span: 6663..6665,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "17",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 289,
            column: 69,
            span: 6665..6668,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 70,
            span: 6668..6669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 293,
            column: 2,
            span: 6715..6716,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 293,
            column: 4,
            span: 6717..6718,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  return function (x)\n    return function (y)\n     return function (z)\n       return x+y+z\n     end\n   end\n  end\n]]",
        ),
        position: Position {
            line: 301,
            column: 3,
            span: 6719..6837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 303,
            column: 2,
            span: 6839..6840,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 303,
            column: 4,
            span: 6841..6842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 303,
            column: 11,
            span: 6843..6849,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 12,
            span: 6849..6850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 303,
            column: 16,
            span: 6850..6854,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 17,
            span: 6854..6855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read1",
        ),
        position: Position {
            line: 303,
            column: 22,
            span: 6855..6860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 23,
            span: 6860..6861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 303,
            column: 24,
            span: 6861..6862,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 25,
            span: 6862..6863,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 26,
            span: 6863..6864,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 27,
            span: 6864..6865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 304,
            column: 7,
            span: 6866..6872,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 8,
            span: 6872..6873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 304,
            column: 9,
            span: 6873..6874,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 10,
            span: 6874..6875,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 11,
            span: 6875..6876,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 12,
            span: 6876..6877,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 304,
            column: 13,
            span: 6876..6878,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 14,
            span: 6878..6879,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 15,
            span: 6879..6880,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 304,
            column: 16,
            span: 6879..6881,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 17,
            span: 6881..6882,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 18,
            span: 6882..6883,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 304,
            column: 20,
            span: 6882..6885,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 21,
            span: 6885..6886,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 304,
            column: 24,
            span: 6887..6889,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 304,
            column: 27,
            span: 6889..6892,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 28,
            span: 6892..6893,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 308,
            column: 6,
            span: 6934..6939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 308,
            column: 8,
            span: 6940..6941,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 308,
            column: 9,
            span: 6941..6942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 308,
            column: 11,
            span: 6943..6944,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 308,
            column: 13,
            span: 6945..6946,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 308,
            column: 16,
            span: 6946..6949,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 308,
            column: 17,
            span: 6949..6950,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 308,
            column: 0,
            span: 6950..6953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 309,
            column: 2,
            span: 6954..6955,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 309,
            column: 4,
            span: 6956..6957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 309,
            column: 9,
            span: 6958..6962,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 10,
            span: 6962..6963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 309,
            column: 16,
            span: 6963..6969,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 309,
            column: 17,
            span: 6969..6970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 309,
            column: 21,
            span: 6970..6974,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 22,
            span: 6974..6975,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 309,
            column: 30,
            span: 6975..6983,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 32,
            span: 6984..6985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 309,
            column: 33,
            span: 6985..6986,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 34,
            span: 6986..6987,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 310,
            column: 5,
            span: 6990..6992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 310,
            column: 7,
            span: 6993..6994,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 310,
            column: 10,
            span: 6995..6997,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        position: Position {
            line: 310,
            column: 16,
            span: 6998..7003,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 310,
            column: 21,
            span: 7004..7008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 310,
            column: 23,
            span: 7009..7010,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 310,
            column: 25,
            span: 7011..7012,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 310,
            column: 28,
            span: 7012..7015,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 310,
            column: 29,
            span: 7015..7016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 310,
            column: 30,
            span: 7016..7017,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 310,
            column: 31,
            span: 7017..7018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 310,
            column: 33,
            span: 7019..7020,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 310,
            column: 35,
            span: 7021..7022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 310,
            column: 37,
            span: 7023..7024,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 310,
            column: 38,
            span: 7024..7025,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 310,
            column: 39,
            span: 7024..7026,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 310,
            column: 0,
            span: 7027..7031,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 311,
            column: 9,
            span: 7034..7040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 311,
            column: 0,
            span: 7041..7042,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 312,
            column: 0,
            span: 7045..7048,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 313,
            column: 4,
            span: 7049..7052,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 313,
            column: 5,
            span: 7052..7053,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 6,
            span: 7053..7054,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 313,
            column: 9,
            span: 7055..7057,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 10,
            span: 7057..7058,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 313,
            column: 14,
            span: 7059..7062,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 15,
            span: 7062..7063,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 313,
            column: 19,
            span: 7064..7067,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 313,
            column: 20,
            span: 7067..7068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 314,
            column: 7,
            span: 7069..7075,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 314,
            column: 8,
            span: 7075..7076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 314,
            column: 9,
            span: 7076..7077,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 314,
            column: 10,
            span: 7077..7078,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 314,
            column: 11,
            span: 7078..7079,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 314,
            column: 14,
            span: 7080..7082,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 314,
            column: 18,
            span: 7083..7086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 314,
            column: 19,
            span: 7086..7087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 315,
            column: 7,
            span: 7088..7094,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 8,
            span: 7094..7095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 315,
            column: 13,
            span: 7095..7100,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 315,
            column: 14,
            span: 7100..7101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        position: Position {
            line: 315,
            column: 24,
            span: 7101..7111,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 25,
            span: 7111..7112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 315,
            column: 26,
            span: 7112..7113,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 315,
            column: 27,
            span: 7113..7114,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 315,
            column: 29,
            span: 7114..7116,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 315,
            column: 30,
            span: 7116..7117,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 315,
            column: 35,
            span: 7118..7122,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 36,
            span: 7122..7123,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 315,
            column: 39,
            span: 7124..7126,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 315,
            column: 43,
            span: 7127..7130,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 44,
            span: 7130..7131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 316,
            column: 7,
            span: 7132..7138,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 316,
            column: 8,
            span: 7138..7139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 316,
            column: 9,
            span: 7139..7140,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 316,
            column: 10,
            span: 7140..7141,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 316,
            column: 11,
            span: 7141..7142,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 316,
            column: 14,
            span: 7143..7145,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 316,
            column: 19,
            span: 7146..7150,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 316,
            column: 20,
            span: 7150..7151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 317,
            column: 7,
            span: 7152..7158,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 8,
            span: 7158..7159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 317,
            column: 13,
            span: 7159..7164,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 317,
            column: 14,
            span: 7164..7165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        position: Position {
            line: 317,
            column: 24,
            span: 7165..7175,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 25,
            span: 7175..7176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 317,
            column: 26,
            span: 7176..7177,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 317,
            column: 27,
            span: 7177..7178,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 29,
            span: 7178..7180,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 317,
            column: 30,
            span: 7180..7181,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 33,
            span: 7181..7184,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 34,
            span: 7184..7185,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 317,
            column: 37,
            span: 7186..7188,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 317,
            column: 41,
            span: 7189..7192,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 42,
            span: 7192..7193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 318,
            column: 7,
            span: 7194..7200,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 318,
            column: 8,
            span: 7200..7201,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 318,
            column: 11,
            span: 7201..7204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 318,
            column: 17,
            span: 7205..7210,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 318,
            column: 18,
            span: 7210..7211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        position: Position {
            line: 318,
            column: 28,
            span: 7211..7221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 318,
            column: 29,
            span: 7221..7222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 318,
            column: 30,
            span: 7222..7223,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 318,
            column: 31,
            span: 7223..7224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 318,
            column: 33,
            span: 7224..7226,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 318,
            column: 34,
            span: 7226..7227,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 318,
            column: 37,
            span: 7227..7230,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 318,
            column: 38,
            span: 7230..7231,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 318,
            column: 39,
            span: 7231..7232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 319,
            column: 2,
            span: 7254..7255,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 319,
            column: 3,
            span: 7255..7256,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        position: Position {
            line: 319,
            column: 8,
            span: 7256..7261,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 319,
            column: 9,
            span: 7261..7262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 320,
            column: 7,
            span: 7263..7269,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 320,
            column: 8,
            span: 7269..7270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 320,
            column: 9,
            span: 7270..7271,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 320,
            column: 10,
            span: 7271..7272,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 320,
            column: 11,
            span: 7272..7273,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 320,
            column: 14,
            span: 7274..7276,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 320,
            column: 17,
            span: 7276..7279,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 320,
            column: 18,
            span: 7279..7280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 321,
            column: 2,
            span: 7281..7282,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 321,
            column: 3,
            span: 7282..7283,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        position: Position {
            line: 321,
            column: 8,
            span: 7283..7288,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 321,
            column: 9,
            span: 7288..7289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 322,
            column: 7,
            span: 7290..7296,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 322,
            column: 8,
            span: 7296..7297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 322,
            column: 9,
            span: 7297..7298,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 322,
            column: 10,
            span: 7298..7299,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 322,
            column: 11,
            span: 7299..7300,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 322,
            column: 14,
            span: 7301..7303,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 322,
            column: 17,
            span: 7303..7306,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 322,
            column: 18,
            span: 7306..7307,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 325,
            column: 0,
            span: 7352..7354,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 326,
            column: 8,
            span: 7357..7362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        position: Position {
            line: 326,
            column: 12,
            span: 7363..7366,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 326,
            column: 14,
            span: 7367..7368,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 326,
            column: 18,
            span: 7368..7372,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 327,
            column: 8,
            span: 7415..7420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 327,
            column: 13,
            span: 7421..7425,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 327,
            column: 15,
            span: 7426..7427,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 327,
            column: 17,
            span: 7428..7429,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a1\"",
        ),
        position: Position {
            line: 327,
            column: 27,
            span: 7429..7439,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 327,
            column: 28,
            span: 7439..7440,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 328,
            column: 6,
            span: 7443..7446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 328,
            column: 8,
            span: 7447..7448,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 328,
            column: 10,
            span: 7449..7450,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 328,
            column: 12,
            span: 7450..7452,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 328,
            column: 13,
            span: 7452..7453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        position: Position {
            line: 328,
            column: 17,
            span: 7454..7457,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 328,
            column: 20,
            span: 7458..7460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 328,
            column: 25,
            span: 7461..7465,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 328,
            column: 26,
            span: 7465..7466,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 328,
            column: 27,
            span: 7466..7467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 328,
            column: 31,
            span: 7467..7471,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 328,
            column: 33,
            span: 7472..7473,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 328,
            column: 35,
            span: 7473..7475,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 328,
            column: 36,
            span: 7475..7476,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 328,
            column: 38,
            span: 7477..7478,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", a\"",
        ),
        position: Position {
            line: 328,
            column: 44,
            span: 7479..7484,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 328,
            column: 47,
            span: 7485..7487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 328,
            column: 49,
            span: 7488..7489,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 328,
            column: 0,
            span: 7490..7493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 329,
            column: 7,
            span: 7496..7500,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 329,
            column: 8,
            span: 7500..7501,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 329,
            column: 9,
            span: 7501..7502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 329,
            column: 13,
            span: 7502..7506,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 329,
            column: 15,
            span: 7507..7508,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 329,
            column: 17,
            span: 7508..7510,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 329,
            column: 18,
            span: 7510..7511,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 329,
            column: 20,
            span: 7512..7513,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" = 1\"",
        ),
        position: Position {
            line: 329,
            column: 27,
            span: 7514..7520,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 330,
            column: 6,
            span: 7523..7526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 330,
            column: 8,
            span: 7527..7528,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 330,
            column: 10,
            span: 7529..7530,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 330,
            column: 12,
            span: 7530..7532,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 13,
            span: 7532..7533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        position: Position {
            line: 330,
            column: 17,
            span: 7534..7537,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 330,
            column: 20,
            span: 7538..7540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 330,
            column: 25,
            span: 7541..7545,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 330,
            column: 26,
            span: 7545..7546,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 330,
            column: 27,
            span: 7546..7547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 330,
            column: 31,
            span: 7547..7551,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 330,
            column: 33,
            span: 7552..7553,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 330,
            column: 35,
            span: 7553..7555,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 330,
            column: 36,
            span: 7555..7556,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 330,
            column: 38,
            span: 7557..7558,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        position: Position {
            line: 330,
            column: 43,
            span: 7559..7563,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 330,
            column: 46,
            span: 7564..7566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 330,
            column: 48,
            span: 7567..7568,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 330,
            column: 0,
            span: 7569..7572,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 331,
            column: 8,
            span: 7575..7580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sum",
        ),
        position: Position {
            line: 331,
            column: 12,
            span: 7581..7584,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 331,
            column: 14,
            span: 7585..7586,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 331,
            column: 0,
            span: 7586..7588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 332,
            column: 7,
            span: 7591..7595,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 332,
            column: 8,
            span: 7595..7596,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 332,
            column: 9,
            span: 7596..7597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 332,
            column: 13,
            span: 7597..7601,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 332,
            column: 15,
            span: 7602..7603,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 332,
            column: 17,
            span: 7603..7605,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 332,
            column: 18,
            span: 7605..7606,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 332,
            column: 20,
            span: 7607..7608,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; return function () return a1\"",
        ),
        position: Position {
            line: 332,
            column: 53,
            span: 7609..7641,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 333,
            column: 6,
            span: 7644..7647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 333,
            column: 8,
            span: 7648..7649,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 333,
            column: 10,
            span: 7650..7651,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 333,
            column: 12,
            span: 7651..7653,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 333,
            column: 13,
            span: 7653..7654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        position: Position {
            line: 333,
            column: 17,
            span: 7655..7658,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 333,
            column: 20,
            span: 7659..7661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 333,
            column: 25,
            span: 7662..7666,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 333,
            column: 26,
            span: 7666..7667,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 333,
            column: 27,
            span: 7667..7668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 333,
            column: 31,
            span: 7668..7672,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 333,
            column: 33,
            span: 7673..7674,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 333,
            column: 35,
            span: 7674..7676,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 333,
            column: 36,
            span: 7676..7677,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 333,
            column: 38,
            span: 7678..7679,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" + a\"",
        ),
        position: Position {
            line: 333,
            column: 45,
            span: 7680..7686,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 333,
            column: 48,
            span: 7687..7689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 333,
            column: 50,
            span: 7690..7691,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 333,
            column: 51,
            span: 7691..7692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sum",
        ),
        position: Position {
            line: 333,
            column: 55,
            span: 7693..7696,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 333,
            column: 57,
            span: 7697..7698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sum",
        ),
        position: Position {
            line: 333,
            column: 61,
            span: 7699..7702,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 333,
            column: 63,
            span: 7703..7704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 333,
            column: 65,
            span: 7705..7706,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 333,
            column: 0,
            span: 7707..7710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 334,
            column: 7,
            span: 7713..7717,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 334,
            column: 8,
            span: 7717..7718,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 334,
            column: 9,
            span: 7718..7719,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 334,
            column: 13,
            span: 7719..7723,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 334,
            column: 15,
            span: 7724..7725,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 334,
            column: 17,
            span: 7725..7727,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 334,
            column: 18,
            span: 7727..7728,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 334,
            column: 20,
            span: 7729..7730,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        position: Position {
            line: 334,
            column: 27,
            span: 7731..7737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 335,
            column: 7,
            span: 7740..7744,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 335,
            column: 9,
            span: 7745..7746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 335,
            column: 15,
            span: 7747..7752,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 335,
            column: 16,
            span: 7752..7753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        position: Position {
            line: 335,
            column: 22,
            span: 7753..7759,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 23,
            span: 7759..7760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 335,
            column: 27,
            span: 7760..7764,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 28,
            span: 7764..7765,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 336,
            column: 8,
            span: 7768..7773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 336,
            column: 10,
            span: 7774..7775,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 336,
            column: 12,
            span: 7776..7777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 336,
            column: 19,
            span: 7778..7784,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 20,
            span: 7784..7785,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 336,
            column: 24,
            span: 7785..7789,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 25,
            span: 7789..7790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 336,
            column: 29,
            span: 7790..7794,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 30,
            span: 7794..7795,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 31,
            span: 7795..7796,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 32,
            span: 7796..7797,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 33,
            span: 7797..7798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 337,
            column: 9,
            span: 7801..7807,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 10,
            span: 7807..7808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 337,
            column: 11,
            span: 7808..7809,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 12,
            span: 7809..7810,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 13,
            span: 7810..7811,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 337,
            column: 16,
            span: 7812..7814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sum",
        ),
        position: Position {
            line: 337,
            column: 20,
            span: 7815..7818,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 21,
            span: 7818..7819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 339,
            column: 4,
            span: 7823..7824,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 339,
            column: 6,
            span: 7825..7826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 339,
            column: 11,
            span: 7827..7831,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 339,
            column: 12,
            span: 7831..7832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 339,
            column: 18,
            span: 7832..7838,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 339,
            column: 19,
            span: 7838..7839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 339,
            column: 23,
            span: 7839..7843,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 339,
            column: 24,
            span: 7843..7844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 339,
            column: 25,
            span: 7844..7845,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 339,
            column: 26,
            span: 7845..7846,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 339,
            column: 27,
            span: 7846..7847,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 340,
            column: 8,
            span: 7888..7893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 340,
            column: 10,
            span: 7894..7895,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 340,
            column: 12,
            span: 7896..7897,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 0,
            span: 7897..7900,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 341,
            column: 8,
            span: 7903..7908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 341,
            column: 10,
            span: 7909..7910,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 341,
            column: 12,
            span: 7911..7912,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 341,
            column: 21,
            span: 7913..7921,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 23,
            span: 7922..7923,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 24,
            span: 7923..7924,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 341,
            column: 31,
            span: 7925..7931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 341,
            column: 33,
            span: 7932..7933,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 341,
            column: 0,
            span: 7934..7937,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 342,
            column: 6,
            span: 7940..7943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 342,
            column: 8,
            span: 7944..7945,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 342,
            column: 10,
            span: 7946..7947,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 342,
            column: 12,
            span: 7947..7949,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 342,
            column: 13,
            span: 7949..7950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        position: Position {
            line: 342,
            column: 17,
            span: 7951..7954,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 342,
            column: 0,
            span: 7955..7957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 343,
            column: 10,
            span: 7962..7967,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 343,
            column: 11,
            span: 7967..7968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        position: Position {
            line: 343,
            column: 22,
            span: 7968..7979,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 23,
            span: 7979..7980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 343,
            column: 24,
            span: 7980..7981,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 343,
            column: 25,
            span: 7981..7982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 343,
            column: 27,
            span: 7983..7984,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 343,
            column: 28,
            span: 7984..7985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 343,
            column: 30,
            span: 7986..7987,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 343,
            column: 31,
            span: 7987..7988,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 343,
            column: 33,
            span: 7988..7990,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 343,
            column: 34,
            span: 7990..7991,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 344,
            column: 0,
            span: 7994..7997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 345,
            column: 9,
            span: 8000..8006,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 345,
            column: 10,
            span: 8006..8007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 345,
            column: 11,
            span: 8007..8008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 345,
            column: 12,
            span: 8008..8009,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 345,
            column: 13,
            span: 8009..8010,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 345,
            column: 16,
            span: 8011..8013,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 345,
            column: 19,
            span: 8013..8016,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 345,
            column: 21,
            span: 8017..8018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nup",
        ),
        position: Position {
            line: 345,
            column: 25,
            span: 8019..8022,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 345,
            column: 26,
            span: 8022..8023,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 346,
            column: 0,
            span: 8024..8027,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 349,
            column: 0,
            span: 8059..8061,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 350,
            column: 8,
            span: 8064..8069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 350,
            column: 10,
            span: 8070..8071,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 350,
            column: 12,
            span: 8072..8073,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 350,
            column: 14,
            span: 8074..8075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 350,
            column: 15,
            span: 8075..8076,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 350,
            column: 17,
            span: 8077..8078,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 350,
            column: 19,
            span: 8078..8080,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 350,
            column: 20,
            span: 8080..8081,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 351,
            column: 11,
            span: 8084..8092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 351,
            column: 13,
            span: 8093..8094,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 351,
            column: 14,
            span: 8094..8095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_012345678901234567890123456789012345678901234567890123456789",
        ),
        position: Position {
            line: 351,
            column: 75,
            span: 8095..8156,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 351,
            column: 77,
            span: 8157..8158,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 351,
            column: 78,
            span: 8158..8159,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 352,
            column: 11,
            span: 8164..8170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 352,
            column: 16,
            span: 8171..8175,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 352,
            column: 17,
            span: 8175..8176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 352,
            column: 0,
            span: 8176..8177,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 353,
            column: 0,
            span: 8180..8183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 354,
            column: 9,
            span: 8186..8192,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 354,
            column: 10,
            span: 8192..8193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 354,
            column: 11,
            span: 8193..8194,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 354,
            column: 12,
            span: 8194..8195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_012345678901234567890123456789012345678901234567890123456789",
        ),
        position: Position {
            line: 354,
            column: 73,
            span: 8195..8256,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 354,
            column: 74,
            span: 8256..8257,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 354,
            column: 75,
            span: 8257..8258,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 354,
            column: 78,
            span: 8259..8261,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 354,
            column: 80,
            span: 8261..8263,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 354,
            column: 81,
            span: 8263..8264,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 355,
            column: 0,
            span: 8265..8268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 359,
            column: 7,
            span: 8311..8317,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 8,
            span: 8317..8318,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 9,
            span: 8318..8319,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 359,
            column: 17,
            span: 8319..8327,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 19,
            span: 8328..8329,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 20,
            span: 8329..8330,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 359,
            column: 27,
            span: 8331..8337,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 359,
            column: 31,
            span: 8338..8341,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 359,
            column: 35,
            span: 8342..8345,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 36,
            span: 8345..8346,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 37,
            span: 8346..8347,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 359,
            column: 38,
            span: 8346..8348,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 39,
            span: 8348..8349,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 359,
            column: 42,
            span: 8350..8352,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 359,
            column: 46,
            span: 8353..8356,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 47,
            span: 8356..8357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 360,
            column: 7,
            span: 8358..8364,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 8,
            span: 8364..8365,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 9,
            span: 8365..8366,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 360,
            column: 17,
            span: 8366..8374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 19,
            span: 8375..8376,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 20,
            span: 8376..8377,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 360,
            column: 26,
            span: 8378..8383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 360,
            column: 28,
            span: 8384..8385,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 360,
            column: 29,
            span: 8385..8386,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 360,
            column: 36,
            span: 8387..8393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 360,
            column: 38,
            span: 8394..8395,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 360,
            column: 42,
            span: 8396..8399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 43,
            span: 8399..8400,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 44,
            span: 8400..8401,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 360,
            column: 45,
            span: 8400..8402,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 46,
            span: 8402..8403,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 360,
            column: 49,
            span: 8404..8406,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 360,
            column: 53,
            span: 8407..8410,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 54,
            span: 8410..8411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 361,
            column: 7,
            span: 8412..8418,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 8,
            span: 8418..8419,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 9,
            span: 8419..8420,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 361,
            column: 17,
            span: 8420..8428,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 19,
            span: 8429..8430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 361,
            column: 20,
            span: 8430..8431,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 21,
            span: 8431..8432,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 361,
            column: 28,
            span: 8433..8439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 361,
            column: 30,
            span: 8440..8441,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 361,
            column: 34,
            span: 8442..8445,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 35,
            span: 8445..8446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 36,
            span: 8446..8447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 37,
            span: 8447..8448,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 361,
            column: 40,
            span: 8449..8451,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 361,
            column: 44,
            span: 8452..8455,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 45,
            span: 8455..8456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 364,
            column: 6,
            span: 8459..8464,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 364,
            column: 7,
            span: 8464..8465,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing binary chunks\"",
        ),
        position: Position {
            line: 364,
            column: 30,
            span: 8465..8488,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 364,
            column: 31,
            span: 8488..8489,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 365,
            column: 0,
            span: 8490..8492,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 366,
            column: 8,
            span: 8495..8500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "header",
        ),
        position: Position {
            line: 366,
            column: 15,
            span: 8501..8507,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 366,
            column: 17,
            span: 8508..8509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 366,
            column: 24,
            span: 8510..8516,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 366,
            column: 25,
            span: 8516..8517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 366,
            column: 29,
            span: 8517..8521,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 366,
            column: 30,
            span: 8521..8522,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c4BBc6BBBBBj\"",
        ),
        position: Position {
            line: 366,
            column: 44,
            span: 8522..8536,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 366,
            column: 45,
            span: 8536..8537,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\27Lua\"",
        ),
        position: Position {
            line: 367,
            column: 13,
            span: 8542..8550,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 367,
            column: 14,
            span: 8550..8551,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 368,
            column: 6,
            span: 8583..8585,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 368,
            column: 7,
            span: 8585..8586,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 368,
            column: 9,
            span: 8585..8588,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 368,
            column: 11,
            span: 8589..8590,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 368,
            column: 13,
            span: 8590..8592,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 368,
            column: 14,
            span: 8592..8593,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 369,
            column: 6,
            span: 8627..8629,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 7,
            span: 8629..8630,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x19\\x93\\r\\n\\x1a\\n\"",
        ),
        position: Position {
            line: 370,
            column: 25,
            span: 8667..8687,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 370,
            column: 26,
            span: 8687..8688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 371,
            column: 11,
            span: 8704..8710,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 371,
            column: 12,
            span: 8710..8711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 371,
            column: 20,
            span: 8711..8719,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 371,
            column: 21,
            span: 8719..8720,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"i\"",
        ),
        position: Position {
            line: 371,
            column: 24,
            span: 8720..8723,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 371,
            column: 25,
            span: 8723..8724,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 371,
            column: 26,
            span: 8724..8725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 372,
            column: 11,
            span: 8748..8754,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 372,
            column: 12,
            span: 8754..8755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 372,
            column: 20,
            span: 8755..8763,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 372,
            column: 21,
            span: 8763..8764,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"T\"",
        ),
        position: Position {
            line: 372,
            column: 24,
            span: 8764..8767,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 372,
            column: 25,
            span: 8767..8768,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 372,
            column: 26,
            span: 8768..8769,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 373,
            column: 6,
            span: 8794..8796,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 373,
            column: 7,
            span: 8796..8797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 374,
            column: 11,
            span: 8847..8853,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 374,
            column: 12,
            span: 8853..8854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 374,
            column: 20,
            span: 8854..8862,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 374,
            column: 21,
            span: 8862..8863,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"j\"",
        ),
        position: Position {
            line: 374,
            column: 24,
            span: 8863..8866,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 374,
            column: 25,
            span: 8866..8867,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 374,
            column: 26,
            span: 8867..8868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 375,
            column: 11,
            span: 8899..8905,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 375,
            column: 12,
            span: 8905..8906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 375,
            column: 20,
            span: 8906..8914,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 375,
            column: 21,
            span: 8914..8915,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 375,
            column: 24,
            span: 8915..8918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 375,
            column: 25,
            span: 8918..8919,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 375,
            column: 26,
            span: 8919..8920,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x5678",
            ),
        ),
        position: Position {
            line: 376,
            column: 11,
            span: 8949..8956,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 378,
            column: 4,
            span: 9062..9063,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 379,
            column: 8,
            span: 9066..9071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 379,
            column: 10,
            span: 9072..9073,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 379,
            column: 12,
            span: 9074..9075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 379,
            column: 19,
            span: 9076..9082,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 379,
            column: 20,
            span: 9082..9083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 379,
            column: 24,
            span: 9083..9087,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 379,
            column: 25,
            span: 9087..9088,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 379,
            column: 33,
            span: 9088..9096,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 379,
            column: 35,
            span: 9097..9098,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 379,
            column: 36,
            span: 9098..9099,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 379,
            column: 42,
            span: 9100..9105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 379,
            column: 44,
            span: 9106..9107,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 379,
            column: 46,
            span: 9108..9109,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 379,
            column: 48,
            span: 9109..9111,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 379,
            column: 49,
            span: 9111..9112,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 379,
            column: 55,
            span: 9113..9118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 379,
            column: 57,
            span: 9119..9120,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 379,
            column: 59,
            span: 9121..9122,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 379,
            column: 61,
            span: 9122..9124,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 379,
            column: 62,
            span: 9124..9125,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 379,
            column: 69,
            span: 9126..9132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 379,
            column: 71,
            span: 9133..9134,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 379,
            column: 72,
            span: 9134..9135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 379,
            column: 73,
            span: 9135..9136,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 379,
            column: 74,
            span: 9136..9137,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 379,
            column: 75,
            span: 9136..9138,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 379,
            column: 79,
            span: 9139..9142,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 379,
            column: 80,
            span: 9142..9143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 381,
            column: 9,
            span: 9147..9153,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 381,
            column: 10,
            span: 9153..9154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 381,
            column: 16,
            span: 9154..9160,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 381,
            column: 17,
            span: 9160..9161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 381,
            column: 20,
            span: 9161..9164,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 381,
            column: 21,
            span: 9164..9165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 381,
            column: 22,
            span: 9165..9166,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 381,
            column: 23,
            span: 9166..9167,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 381,
            column: 25,
            span: 9167..9169,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 381,
            column: 26,
            span: 9169..9170,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 381,
            column: 28,
            span: 9171..9172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "header",
        ),
        position: Position {
            line: 381,
            column: 34,
            span: 9172..9178,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 381,
            column: 35,
            span: 9178..9179,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 381,
            column: 38,
            span: 9180..9182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "header",
        ),
        position: Position {
            line: 381,
            column: 45,
            span: 9183..9189,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 381,
            column: 46,
            span: 9189..9190,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 384,
            column: 6,
            span: 9216..9219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 384,
            column: 8,
            span: 9220..9221,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 384,
            column: 10,
            span: 9222..9223,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 384,
            column: 12,
            span: 9223..9225,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 384,
            column: 13,
            span: 9225..9226,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 384,
            column: 15,
            span: 9227..9228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "header",
        ),
        position: Position {
            line: 384,
            column: 21,
            span: 9228..9234,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 384,
            column: 0,
            span: 9235..9237,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 385,
            column: 10,
            span: 9242..9247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 385,
            column: 12,
            span: 9248..9249,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 385,
            column: 14,
            span: 9250..9251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 385,
            column: 21,
            span: 9252..9258,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 385,
            column: 22,
            span: 9258..9259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 385,
            column: 25,
            span: 9259..9262,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 385,
            column: 26,
            span: 9262..9263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 385,
            column: 27,
            span: 9263..9264,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 385,
            column: 28,
            span: 9264..9265,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 385,
            column: 30,
            span: 9265..9267,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 385,
            column: 31,
            span: 9267..9268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 385,
            column: 33,
            span: 9269..9270,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 385,
            column: 35,
            span: 9271..9272,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 385,
            column: 37,
            span: 9272..9274,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 385,
            column: 38,
            span: 9274..9275,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 385,
            column: 41,
            span: 9276..9278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 386,
            column: 21,
            span: 9293..9299,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 386,
            column: 22,
            span: 9299..9300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        position: Position {
            line: 386,
            column: 26,
            span: 9300..9304,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 27,
            span: 9304..9305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 386,
            column: 33,
            span: 9305..9311,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 386,
            column: 34,
            span: 9311..9312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        position: Position {
            line: 386,
            column: 38,
            span: 9312..9316,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 39,
            span: 9316..9317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 386,
            column: 45,
            span: 9317..9323,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 386,
            column: 46,
            span: 9323..9324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 386,
            column: 49,
            span: 9324..9327,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 50,
            span: 9327..9328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 386,
            column: 51,
            span: 9328..9329,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 386,
            column: 52,
            span: 9329..9330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 386,
            column: 54,
            span: 9331..9332,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 386,
            column: 55,
            span: 9332..9333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 386,
            column: 57,
            span: 9334..9335,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 58,
            span: 9335..9336,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 59,
            span: 9336..9337,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 386,
            column: 61,
            span: 9338..9339,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 386,
            column: 63,
            span: 9339..9341,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 64,
            span: 9341..9342,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 386,
            column: 67,
            span: 9343..9345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 387,
            column: 21,
            span: 9360..9366,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 387,
            column: 22,
            span: 9366..9367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 387,
            column: 25,
            span: 9367..9370,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 387,
            column: 26,
            span: 9370..9371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 387,
            column: 27,
            span: 9371..9372,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 387,
            column: 28,
            span: 9372..9373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 387,
            column: 30,
            span: 9374..9375,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 387,
            column: 32,
            span: 9376..9377,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 387,
            column: 34,
            span: 9377..9379,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 387,
            column: 35,
            span: 9379..9380,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 387,
            column: 37,
            span: 9381..9382,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 387,
            column: 38,
            span: 9381..9383,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 387,
            column: 39,
            span: 9383..9384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 388,
            column: 11,
            span: 9389..9395,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 388,
            column: 12,
            span: 9395..9396,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 388,
            column: 13,
            span: 9396..9397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 388,
            column: 14,
            span: 9397..9398,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 388,
            column: 17,
            span: 9399..9401,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 388,
            column: 19,
            span: 9402..9403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 388,
            column: 20,
            span: 9403..9404,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 388,
            column: 21,
            span: 9404..9405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 389,
            column: 11,
            span: 9410..9416,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 389,
            column: 12,
            span: 9416..9417,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 389,
            column: 15,
            span: 9417..9420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 389,
            column: 20,
            span: 9421..9425,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 389,
            column: 21,
            span: 9425..9426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 389,
            column: 22,
            span: 9426..9427,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 389,
            column: 23,
            span: 9427..9428,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 389,
            column: 24,
            span: 9428..9429,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 390,
            column: 0,
            span: 9432..9435,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 393,
            column: 6,
            span: 9476..9479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 393,
            column: 8,
            span: 9480..9481,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 393,
            column: 10,
            span: 9482..9483,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 393,
            column: 12,
            span: 9483..9485,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 393,
            column: 13,
            span: 9485..9486,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 393,
            column: 15,
            span: 9487..9488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 393,
            column: 16,
            span: 9488..9489,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 393,
            column: 18,
            span: 9490..9491,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 393,
            column: 20,
            span: 9491..9493,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 393,
            column: 0,
            span: 9494..9496,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 394,
            column: 10,
            span: 9501..9506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 394,
            column: 13,
            span: 9507..9509,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 394,
            column: 14,
            span: 9509..9510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 394,
            column: 18,
            span: 9511..9514,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 394,
            column: 20,
            span: 9515..9516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 394,
            column: 25,
            span: 9517..9521,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 394,
            column: 26,
            span: 9521..9522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 394,
            column: 32,
            span: 9522..9528,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 394,
            column: 33,
            span: 9528..9529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 394,
            column: 36,
            span: 9529..9532,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 394,
            column: 37,
            span: 9532..9533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 394,
            column: 38,
            span: 9533..9534,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 394,
            column: 39,
            span: 9534..9535,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 394,
            column: 41,
            span: 9535..9537,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 394,
            column: 42,
            span: 9537..9538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 394,
            column: 44,
            span: 9539..9540,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 394,
            column: 45,
            span: 9540..9541,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 394,
            column: 46,
            span: 9541..9542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 395,
            column: 11,
            span: 9547..9553,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 395,
            column: 12,
            span: 9553..9554,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 395,
            column: 15,
            span: 9554..9557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 395,
            column: 18,
            span: 9558..9560,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 395,
            column: 22,
            span: 9561..9564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 395,
            column: 29,
            span: 9565..9571,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 395,
            column: 30,
            span: 9571..9572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 395,
            column: 34,
            span: 9572..9576,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 395,
            column: 35,
            span: 9576..9577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 395,
            column: 38,
            span: 9577..9580,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 395,
            column: 39,
            span: 9580..9581,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"truncated\"",
        ),
        position: Position {
            line: 395,
            column: 51,
            span: 9582..9593,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 395,
            column: 52,
            span: 9593..9594,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 395,
            column: 53,
            span: 9594..9595,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 396,
            column: 0,
            span: 9598..9601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 397,
            column: 9,
            span: 9604..9610,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 397,
            column: 10,
            span: 9610..9611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 397,
            column: 16,
            span: 9611..9617,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 397,
            column: 17,
            span: 9617..9618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 397,
            column: 21,
            span: 9618..9622,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 397,
            column: 22,
            span: 9622..9623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 397,
            column: 23,
            span: 9623..9624,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 397,
            column: 24,
            span: 9624..9625,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 397,
            column: 25,
            span: 9625..9626,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 397,
            column: 26,
            span: 9626..9627,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 397,
            column: 27,
            span: 9627..9628,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 397,
            column: 30,
            span: 9629..9631,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 397,
            column: 33,
            span: 9631..9634,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 397,
            column: 34,
            span: 9634..9635,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 398,
            column: 0,
            span: 9636..9639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 400,
            column: 6,
            span: 9641..9646,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 400,
            column: 7,
            span: 9646..9647,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 400,
            column: 11,
            span: 9647..9651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 400,
            column: 12,
            span: 9651..9652,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 401,
            column: 7,
            span: 9653..9659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        position: Position {
            line: 401,
            column: 0,
            span: 9660..9664,
        },
    },
]
