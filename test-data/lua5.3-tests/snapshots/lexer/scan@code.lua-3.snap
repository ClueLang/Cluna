---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/code.lua
---
[
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 4,
        column: 3,
        span: 99..101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 4,
        column: 5,
        span: 102..103,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 4,
        column: 8,
        span: 104..106,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 4,
        column: 12,
        span: 107..110,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 4,
        column: 0,
        span: 111..115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 5,
        column: 4,
        span: 118..119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 5,
        column: 11,
        span: 119..126,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 5,
        column: 14,
        span: 127..129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 5,
        column: 20,
        span: 130..135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 5,
        column: 21,
        span: 135..136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 5,
        column: 22,
        span: 136..137,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n >>> testC not active: skipping opcode tests <<<\\n'",
        ),
        line: 5,
        column: 76,
        span: 137..191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 5,
        column: 77,
        span: 191..192,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 6,
        column: 0,
        span: 195..201,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 7,
        column: 0,
        span: 202..205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 8,
        column: 6,
        span: 206..211,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing code generation and optimizations\"",
        ),
        line: 8,
        column: 50,
        span: 212..255,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 12,
        column: 0,
        span: 306..308,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 13,
        column: 8,
        span: 311..316,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 13,
        column: 17,
        span: 317..325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 13,
        column: 19,
        span: 326..327,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 20,
        span: 327..328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 13,
        column: 21,
        span: 328..329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 22,
        span: 329..330,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 14,
        column: 8,
        span: 335..338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 14,
        column: 10,
        span: 339..340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 11,
        span: 340..341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 14,
        column: 13,
        span: 342..343,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 14,
        span: 343..344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 14,
        column: 16,
        span: 345..346,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 14,
        column: 19,
        span: 347..349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 14,
        column: 21,
        span: 350..351,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 14,
        column: 24,
        span: 352..354,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 14,
        column: 0,
        span: 355..358,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 15,
        column: 0,
        span: 361..364,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 16,
        column: 0,
        span: 365..368,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 20,
        column: 6,
        span: 406..411,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 20,
        column: 15,
        span: 412..420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkKlist",
        ),
        line: 20,
        column: 26,
        span: 421..431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 27,
        span: 431..432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 20,
        column: 31,
        span: 432..436,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 32,
        span: 436..437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "list",
        ),
        line: 20,
        column: 37,
        span: 438..442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 38,
        span: 442..443,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 21,
        column: 8,
        span: 446..451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 21,
        column: 10,
        span: 452..453,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 12,
        span: 454..455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 21,
        column: 14,
        span: 456..457,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 21,
        column: 15,
        span: 457..458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listk",
        ),
        line: 21,
        column: 20,
        span: 458..463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 21,
        span: 463..464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 21,
        column: 25,
        span: 464..468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 26,
        span: 468..469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 22,
        column: 9,
        span: 472..478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 10,
        span: 478..479,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 22,
        column: 11,
        span: 479..480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 22,
        column: 12,
        span: 480..481,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 22,
        column: 15,
        span: 482..484,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 22,
        column: 17,
        span: 485..486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "list",
        ),
        line: 22,
        column: 21,
        span: 486..490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 22,
        span: 490..491,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 23,
        column: 6,
        span: 494..497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 23,
        column: 8,
        span: 498..499,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 23,
        column: 10,
        span: 500..501,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
        column: 12,
        span: 501..503,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
        column: 13,
        span: 503..504,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 23,
        column: 15,
        span: 505..506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 23,
        column: 16,
        span: 506..507,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 23,
        column: 0,
        span: 508..510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 24,
        column: 11,
        span: 515..521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 12,
        span: 521..522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 24,
        column: 13,
        span: 522..523,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 24,
        column: 14,
        span: 523..524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 24,
        column: 15,
        span: 524..525,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 24,
        column: 16,
        span: 525..526,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 24,
        column: 19,
        span: 527..529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "list",
        ),
        line: 24,
        column: 24,
        span: 530..534,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 24,
        column: 25,
        span: 534..535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 24,
        column: 26,
        span: 535..536,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 24,
        column: 27,
        span: 536..537,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 24,
        column: 31,
        span: 538..541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 24,
        column: 36,
        span: 542..546,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 24,
        column: 37,
        span: 546..547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 24,
        column: 41,
        span: 547..551,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 42,
        span: 551..552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 24,
        column: 43,
        span: 552..553,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 24,
        column: 44,
        span: 553..554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 24,
        column: 45,
        span: 554..555,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 24,
        column: 46,
        span: 555..556,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 47,
        span: 556..557,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 24,
        column: 50,
        span: 558..560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 24,
        column: 55,
        span: 561..565,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 24,
        column: 56,
        span: 565..566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 24,
        column: 60,
        span: 566..570,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 61,
        span: 570..571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "list",
        ),
        line: 24,
        column: 65,
        span: 571..575,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 24,
        column: 66,
        span: 575..576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 24,
        column: 67,
        span: 576..577,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 24,
        column: 68,
        span: 577..578,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 69,
        span: 578..579,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 70,
        span: 579..580,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 25,
        column: 0,
        span: 583..586,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 26,
        column: 0,
        span: 587..590,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 28,
        column: 6,
        span: 592..597,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 28,
        column: 15,
        span: 598..606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 28,
        column: 19,
        span: 607..610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 20,
        span: 610..611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 21,
        span: 611..612,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 29,
        column: 8,
        span: 615..620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 29,
        column: 0,
        span: 621..622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 30,
        column: 4,
        span: 625..626,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 6,
        span: 627..628,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 8,
        span: 628..630,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 30,
        column: 9,
        span: 630..631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 31,
        column: 4,
        span: 634..635,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 6,
        span: 636..637,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 8,
        span: 637..639,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 31,
        column: 9,
        span: 639..640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 31,
        column: 11,
        span: 641..642,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 13,
        span: 643..644,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 31,
        column: 17,
        span: 644..648,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 31,
        column: 18,
        span: 648..649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 31,
        column: 20,
        span: 650..651,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 22,
        span: 652..653,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 31,
        column: 24,
        span: 654..655,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 25,
        span: 654..656,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 31,
        column: 27,
        span: 657..658,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 0,
        span: 658..660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
        column: 4,
        span: 663..664,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 32,
        column: 6,
        span: 665..666,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".78",
                },
            ),
        ),
        line: 32,
        column: 11,
        span: 666..671,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 32,
        column: 13,
        span: 672..673,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 15,
        span: 673..675,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 32,
        column: 16,
        span: 675..676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
        column: 18,
        span: 677..678,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 32,
        column: 20,
        span: 679..680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".78",
                },
            ),
        ),
        line: 32,
        column: 25,
        span: 680..685,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 32,
        column: 27,
        span: 686..687,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 0,
        span: 687..689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 33,
        column: 4,
        span: 692..693,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
        column: 6,
        span: 694..695,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 33,
        column: 8,
        span: 696..697,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".78",
                },
            ),
        ),
        line: 33,
        column: 12,
        span: 696..701,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 33,
        column: 14,
        span: 702..703,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 16,
        span: 703..705,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 33,
        column: 17,
        span: 705..706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 33,
        column: 19,
        span: 707..708,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
        column: 21,
        span: 709..710,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".78",
                },
            ),
        ),
        line: 33,
        column: 26,
        span: 710..715,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 33,
        column: 28,
        span: 716..717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 30,
        span: 717..719,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 33,
        column: 31,
        span: 719..720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 33,
        column: 33,
        span: 721..722,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
        column: 35,
        span: 723..724,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 33,
        column: 37,
        span: 725..726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".78",
                },
            ),
        ),
        line: 33,
        column: 41,
        span: 725..730,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 33,
        column: 43,
        span: 731..732,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 0,
        span: 732..734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 34,
        column: 4,
        span: 737..738,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
        column: 6,
        span: 739..740,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 34,
        column: 8,
        span: 741..742,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".79",
                },
            ),
        ),
        line: 34,
        column: 12,
        span: 741..746,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 34,
        column: 14,
        span: 747..748,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 16,
        span: 748..750,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 34,
        column: 17,
        span: 750..751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 34,
        column: 19,
        span: 752..753,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
        column: 21,
        span: 754..755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 34,
        column: 25,
        span: 755..759,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 34,
        column: 26,
        span: 759..760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 34,
        column: 28,
        span: 761..762,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 34,
        column: 30,
        span: 763..764,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 34,
        column: 32,
        span: 765..766,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 33,
        span: 765..767,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 34,
        column: 34,
        span: 767..768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 35,
        column: 4,
        span: 771..772,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 35,
        column: 6,
        span: 773..774,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 8,
        span: 774..776,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 35,
        column: 9,
        span: 776..777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 35,
        column: 11,
        span: 778..779,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 35,
        column: 13,
        span: 780..781,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 35,
        column: 17,
        span: 781..785,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 35,
        column: 18,
        span: 785..786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 35,
        column: 20,
        span: 787..788,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 35,
        column: 22,
        span: 789..790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 24,
        span: 790..792,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 35,
        column: 25,
        span: 792..793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 35,
        column: 27,
        span: 794..795,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 35,
        column: 29,
        span: 796..797,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 35,
        column: 0,
        span: 797..801,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 36,
        column: 0,
        span: 802..805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkKlist",
        ),
        line: 38,
        column: 11,
        span: 807..817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 12,
        span: 817..818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 38,
        column: 15,
        span: 818..821,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 16,
        span: 821..822,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 38,
        column: 18,
        span: 823..824,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 20,
        span: 824..826,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 21,
        span: 826..827,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 23,
        span: 827..829,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 24,
        span: 829..830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 38,
        column: 28,
        span: 830..834,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 29,
        span: 834..835,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".78",
                },
            ),
        ),
        line: 38,
        column: 34,
        span: 835..840,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 38,
        column: 36,
        span: 841..842,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 38,
        span: 842..844,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 39,
        span: 844..845,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 38,
        column: 41,
        span: 846..847,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".78",
                },
            ),
        ),
        line: 38,
        column: 45,
        span: 846..851,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 38,
        column: 47,
        span: 852..853,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 49,
        span: 853..855,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 50,
        span: 855..856,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 38,
        column: 52,
        span: 857..858,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".79",
                },
            ),
        ),
        line: 38,
        column: 56,
        span: 857..862,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 38,
        column: 58,
        span: 863..864,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 60,
        span: 864..866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 61,
        span: 866..867,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 38,
        column: 65,
        span: 867..871,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 38,
        column: 67,
        span: 872..873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 68,
        span: 873..874,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 43,
        column: 9,
        span: 897..905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 43,
        column: 15,
        span: 906..911,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 16,
        span: 911..912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 43,
        column: 17,
        span: 912..913,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 18,
        span: 913..914,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 43,
        column: 22,
        span: 915..918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 23,
        span: 918..919,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 44,
        column: 8,
        span: 922..927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 44,
        column: 12,
        span: 928..931,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 14,
        span: 932..933,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 44,
        column: 16,
        span: 934..935,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 44,
        column: 20,
        span: 936..939,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 44,
        column: 22,
        span: 940..941,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 45,
        column: 8,
        span: 944..949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 45,
        column: 10,
        span: 950..951,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 45,
        column: 12,
        span: 952..953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 45,
        column: 14,
        span: 954..955,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 15,
        span: 955..956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listcode",
        ),
        line: 45,
        column: 23,
        span: 956..964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 24,
        span: 964..965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 45,
        column: 25,
        span: 965..966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 26,
        span: 966..967,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 46,
        column: 6,
        span: 970..973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 46,
        column: 8,
        span: 974..975,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
        column: 10,
        span: 976..977,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 12,
        span: 977..979,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 13,
        span: 979..980,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 46,
        column: 15,
        span: 981..982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 46,
        column: 18,
        span: 982..985,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 46,
        column: 0,
        span: 986..988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 48,
        column: 11,
        span: 1020..1026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 12,
        span: 1026..1027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 48,
        column: 18,
        span: 1027..1033,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 48,
        column: 19,
        span: 1033..1034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 48,
        column: 23,
        span: 1034..1038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 24,
        span: 1038..1039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 48,
        column: 25,
        span: 1039..1040,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 48,
        column: 26,
        span: 1040..1041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 48,
        column: 27,
        span: 1041..1042,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 48,
        column: 28,
        span: 1042..1043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 29,
        span: 1043..1044,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'- '",
        ),
        line: 48,
        column: 34,
        span: 1045..1049,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 48,
        column: 37,
        span: 1050..1052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 48,
        column: 41,
        span: 1053..1056,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 48,
        column: 42,
        span: 1056..1057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 48,
        column: 43,
        span: 1057..1058,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 48,
        column: 44,
        span: 1058..1059,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 48,
        column: 47,
        span: 1060..1062,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' *%d'",
        ),
        line: 48,
        column: 54,
        span: 1063..1069,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 55,
        span: 1069..1070,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 56,
        span: 1070..1071,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 49,
        column: 0,
        span: 1074..1077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 50,
        column: 9,
        span: 1080..1086,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 10,
        span: 1086..1087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 50,
        column: 11,
        span: 1087..1088,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 50,
        column: 12,
        span: 1088..1089,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 50,
        column: 13,
        span: 1089..1090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 50,
        column: 16,
        span: 1090..1093,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 50,
        column: 18,
        span: 1094..1095,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 20,
        span: 1095..1097,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 50,
        column: 21,
        span: 1097..1098,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 50,
        column: 24,
        span: 1099..1101,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 50,
        column: 28,
        span: 1102..1105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 29,
        span: 1105..1106,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 51,
        column: 0,
        span: 1107..1110,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 53,
        column: 9,
        span: 1112..1120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        line: 53,
        column: 20,
        span: 1121..1131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 21,
        span: 1131..1132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
        column: 22,
        span: 1132..1133,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 23,
        span: 1133..1134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 53,
        column: 25,
        span: 1135..1136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 26,
        span: 1136..1137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 54,
        column: 4,
        span: 1140..1141,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 54,
        column: 6,
        span: 1142..1143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 54,
        column: 8,
        span: 1144..1145,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 54,
        column: 9,
        span: 1145..1146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listcode",
        ),
        line: 54,
        column: 17,
        span: 1146..1154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 18,
        span: 1154..1155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 54,
        column: 19,
        span: 1155..1156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 20,
        span: 1156..1157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 55,
        column: 4,
        span: 1160..1161,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 55,
        column: 6,
        span: 1162..1163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 55,
        column: 8,
        span: 1164..1165,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 55,
        column: 9,
        span: 1165..1166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listcode",
        ),
        line: 55,
        column: 17,
        span: 1166..1174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 18,
        span: 1174..1175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 55,
        column: 19,
        span: 1175..1176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 20,
        span: 1176..1177,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 56,
        column: 6,
        span: 1180..1183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 56,
        column: 8,
        span: 1184..1185,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
        column: 10,
        span: 1186..1187,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 12,
        span: 1187..1189,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 13,
        span: 1189..1190,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 56,
        column: 15,
        span: 1191..1192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 56,
        column: 16,
        span: 1192..1193,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 56,
        column: 0,
        span: 1194..1196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 57,
        column: 6,
        span: 1201..1202,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 57,
        column: 7,
        span: 1202..1203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 57,
        column: 8,
        span: 1203..1204,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 57,
        column: 9,
        span: 1204..1205,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 57,
        column: 11,
        span: 1206..1207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 57,
        column: 18,
        span: 1208..1214,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 57,
        column: 19,
        span: 1214..1215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 57,
        column: 23,
        span: 1215..1219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 24,
        span: 1219..1220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 57,
        column: 25,
        span: 1220..1221,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 57,
        column: 26,
        span: 1221..1222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 57,
        column: 27,
        span: 1222..1223,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 57,
        column: 28,
        span: 1223..1224,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
        column: 29,
        span: 1224..1225,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%b()'",
        ),
        line: 57,
        column: 36,
        span: 1226..1232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
        column: 37,
        span: 1232..1233,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 57,
        column: 40,
        span: 1234..1236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 41,
        span: 1236..1237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 58,
        column: 6,
        span: 1264..1265,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 58,
        column: 7,
        span: 1265..1266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 58,
        column: 8,
        span: 1266..1267,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 58,
        column: 9,
        span: 1267..1268,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 11,
        span: 1269..1270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 58,
        column: 18,
        span: 1271..1277,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
        column: 19,
        span: 1277..1278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 58,
        column: 23,
        span: 1278..1282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 24,
        span: 1282..1283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 58,
        column: 25,
        span: 1283..1284,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 58,
        column: 26,
        span: 1284..1285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 58,
        column: 27,
        span: 1285..1286,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 58,
        column: 28,
        span: 1286..1287,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 29,
        span: 1287..1288,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%b()'",
        ),
        line: 58,
        column: 36,
        span: 1289..1295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 37,
        span: 1295..1296,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 58,
        column: 40,
        span: 1297..1299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 41,
        span: 1299..1300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
        column: 11,
        span: 1327..1333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 12,
        span: 1333..1334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 59,
        column: 13,
        span: 1334..1335,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 59,
        column: 14,
        span: 1335..1336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 59,
        column: 15,
        span: 1336..1337,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 59,
        column: 16,
        span: 1337..1338,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 59,
        column: 19,
        span: 1339..1341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 59,
        column: 21,
        span: 1342..1343,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 59,
        column: 22,
        span: 1343..1344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 59,
        column: 23,
        span: 1344..1345,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 59,
        column: 24,
        span: 1345..1346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 25,
        span: 1346..1347,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 60,
        column: 0,
        span: 1350..1353,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 61,
        column: 0,
        span: 1354..1357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 64,
        column: 6,
        span: 1386..1391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 7,
        span: 1391..1392,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 64,
        column: 15,
        span: 1392..1400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 16,
        span: 1400..1401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 17,
        span: 1401..1402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 4,
        span: 1405..1406,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 65,
        column: 12,
        span: 1406..1414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 13,
        span: 1414..1415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 14,
        span: 1415..1416,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 65,
        column: 18,
        span: 1417..1420,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 19,
        span: 1420..1421,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 65,
        column: 21,
        span: 1422..1423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 65,
        column: 23,
        span: 1424..1425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 24,
        span: 1425..1426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 25,
        span: 1426..1427,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 65,
        column: 27,
        span: 1428..1429,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 66,
        column: 4,
        span: 1430..1433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 5,
        span: 1433..1434,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CLOSURE'",
        ),
        line: 66,
        column: 15,
        span: 1435..1444,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 16,
        span: 1444..1445,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'NEWTABLE'",
        ),
        line: 66,
        column: 27,
        span: 1446..1456,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 28,
        span: 1456..1457,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABUP'",
        ),
        line: 66,
        column: 39,
        span: 1458..1468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 40,
        span: 1468..1469,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CALL'",
        ),
        line: 66,
        column: 47,
        span: 1470..1476,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 48,
        span: 1476..1477,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETLIST'",
        ),
        line: 66,
        column: 58,
        span: 1478..1487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 59,
        span: 1487..1488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CALL'",
        ),
        line: 66,
        column: 66,
        span: 1489..1495,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 67,
        span: 1495..1496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 66,
        column: 76,
        span: 1497..1505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 77,
        span: 1505..1506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 70,
        column: 6,
        span: 1533..1538,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 7,
        span: 1538..1539,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 70,
        column: 15,
        span: 1539..1547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 16,
        span: 1547..1548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 17,
        span: 1548..1549,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 71,
        column: 8,
        span: 1552..1557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 71,
        column: 10,
        span: 1558..1559,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 11,
        span: 1559..1560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 71,
        column: 13,
        span: 1561..1562,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 14,
        span: 1562..1563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 71,
        column: 0,
        span: 1564..1565,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 72,
        column: 8,
        span: 1568..1573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 72,
        column: 10,
        span: 1574..1575,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 72,
        column: 11,
        span: 1575..1576,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 72,
        column: 17,
        span: 1577..1582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 72,
        column: 19,
        span: 1583..1584,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 72,
        column: 20,
        span: 1584..1585,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 73,
        column: 8,
        span: 1588..1593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 73,
        column: 10,
        span: 1594..1595,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 11,
        span: 1595..1596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 73,
        column: 13,
        span: 1597..1598,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 14,
        span: 1598..1599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 73,
        column: 16,
        span: 1600..1601,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 73,
        column: 17,
        span: 1601..1602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 74,
        column: 4,
        span: 1605..1606,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 6,
        span: 1607..1608,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 74,
        column: 10,
        span: 1609..1612,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 74,
        column: 11,
        span: 1612..1613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 74,
        column: 13,
        span: 1614..1615,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 15,
        span: 1616..1617,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 74,
        column: 19,
        span: 1618..1621,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 74,
        column: 20,
        span: 1621..1622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 74,
        column: 22,
        span: 1623..1624,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 24,
        span: 1625..1626,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 74,
        column: 28,
        span: 1627..1630,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 74,
        column: 29,
        span: 1630..1631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 74,
        column: 31,
        span: 1632..1633,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 33,
        span: 1634..1635,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 74,
        column: 37,
        span: 1636..1639,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 74,
        column: 38,
        span: 1639..1640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 74,
        column: 40,
        span: 1641..1642,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 42,
        span: 1643..1644,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 74,
        column: 46,
        span: 1645..1648,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 74,
        column: 47,
        span: 1648..1649,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 75,
        column: 4,
        span: 1650..1653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 5,
        span: 1653..1654,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        line: 75,
        column: 15,
        span: 1655..1664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 16,
        span: 1664..1665,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 75,
        column: 25,
        span: 1666..1674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 26,
        span: 1674..1675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 77,
        column: 6,
        span: 1677..1682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 7,
        span: 1682..1683,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 77,
        column: 15,
        span: 1683..1691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 16,
        span: 1691..1692,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 17,
        span: 1692..1693,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 78,
        column: 8,
        span: 1696..1701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 78,
        column: 10,
        span: 1702..1703,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 11,
        span: 1703..1704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 78,
        column: 13,
        span: 1705..1706,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 14,
        span: 1706..1707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 78,
        column: 16,
        span: 1708..1709,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 17,
        span: 1709..1710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 78,
        column: 19,
        span: 1711..1712,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 78,
        column: 21,
        span: 1713..1714,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 23,
        span: 1714..1716,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 24,
        span: 1716..1717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 26,
        span: 1717..1719,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 27,
        span: 1719..1720,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 29,
        span: 1720..1722,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 30,
        span: 1722..1723,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 0,
        span: 1723..1725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 79,
        column: 4,
        span: 1728..1729,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 6,
        span: 1730..1731,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 79,
        column: 10,
        span: 1732..1735,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 79,
        column: 11,
        span: 1735..1736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 79,
        column: 13,
        span: 1737..1738,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 15,
        span: 1739..1740,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 79,
        column: 19,
        span: 1741..1744,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 79,
        column: 20,
        span: 1744..1745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 79,
        column: 22,
        span: 1746..1747,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 24,
        span: 1748..1749,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 79,
        column: 28,
        span: 1750..1753,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 79,
        column: 29,
        span: 1753..1754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 79,
        column: 31,
        span: 1755..1756,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 33,
        span: 1757..1758,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 79,
        column: 0,
        span: 1759..1762,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 80,
        column: 4,
        span: 1763..1766,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 5,
        span: 1766..1767,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 80,
        column: 13,
        span: 1768..1775,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 14,
        span: 1775..1776,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 80,
        column: 22,
        span: 1777..1784,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 23,
        span: 1784..1785,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 80,
        column: 31,
        span: 1786..1793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 32,
        span: 1793..1794,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 80,
        column: 40,
        span: 1795..1802,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 41,
        span: 1802..1803,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        line: 80,
        column: 51,
        span: 1804..1813,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 52,
        span: 1813..1814,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 80,
        column: 61,
        span: 1815..1823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 62,
        span: 1823..1824,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 82,
        column: 0,
        span: 1826..1828,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 83,
        column: 8,
        span: 1831..1836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
        column: 10,
        span: 1837..1838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 11,
        span: 1838..1839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 83,
        column: 13,
        span: 1840..1841,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 14,
        span: 1841..1842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 83,
        column: 16,
        span: 1843..1844,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 17,
        span: 1844..1845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 83,
        column: 19,
        span: 1846..1847,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 83,
        column: 21,
        span: 1848..1849,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 23,
        span: 1849..1851,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 24,
        span: 1851..1852,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 26,
        span: 1852..1854,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 27,
        span: 1854..1855,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 29,
        span: 1855..1857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 30,
        span: 1857..1858,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 0,
        span: 1858..1860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 84,
        column: 4,
        span: 1863..1864,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
        column: 6,
        span: 1865..1866,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 84,
        column: 10,
        span: 1867..1870,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 84,
        column: 11,
        span: 1870..1871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 84,
        column: 13,
        span: 1872..1873,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
        column: 15,
        span: 1874..1875,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 84,
        column: 19,
        span: 1876..1879,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 84,
        column: 20,
        span: 1879..1880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 84,
        column: 22,
        span: 1881..1882,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
        column: 24,
        span: 1883..1884,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 84,
        column: 28,
        span: 1885..1888,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 84,
        column: 29,
        span: 1888..1889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 84,
        column: 31,
        span: 1890..1891,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
        column: 33,
        span: 1892..1893,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 84,
        column: 0,
        span: 1894..1897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 85,
        column: 9,
        span: 1900..1906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 10,
        span: 1906..1907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 85,
        column: 11,
        span: 1907..1908,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 85,
        column: 14,
        span: 1909..1911,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 85,
        column: 18,
        span: 1912..1915,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 85,
        column: 22,
        span: 1916..1919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 85,
        column: 24,
        span: 1920..1921,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 85,
        column: 27,
        span: 1922..1924,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 85,
        column: 31,
        span: 1925..1928,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 85,
        column: 35,
        span: 1929..1932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 85,
        column: 37,
        span: 1933..1934,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 85,
        column: 40,
        span: 1935..1937,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 85,
        column: 44,
        span: 1938..1941,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 85,
        column: 48,
        span: 1942..1945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 85,
        column: 50,
        span: 1946..1947,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 85,
        column: 53,
        span: 1948..1950,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 85,
        column: 57,
        span: 1951..1954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 58,
        span: 1954..1955,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 86,
        column: 0,
        span: 1956..1959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 90,
        column: 6,
        span: 1979..1984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 7,
        span: 1984..1985,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 90,
        column: 15,
        span: 1985..1993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 16,
        span: 1993..1994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 90,
        column: 17,
        span: 1994..1995,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 18,
        span: 1995..1996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 90,
        column: 20,
        span: 1997..1998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 21,
        span: 1998..1999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 90,
        column: 23,
        span: 2000..2001,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 24,
        span: 2001..2002,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 90,
        column: 31,
        span: 2003..2009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 90,
        column: 33,
        span: 2010..2011,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 90,
        column: 37,
        span: 2012..2015,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 38,
        span: 2015..2016,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 90,
        column: 47,
        span: 2017..2025,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 48,
        span: 2025..2026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 94,
        column: 6,
        span: 2047..2052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 7,
        span: 2052..2053,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 94,
        column: 15,
        span: 2053..2061,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 16,
        span: 2061..2062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 17,
        span: 2062..2063,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 94,
        column: 23,
        span: 2064..2069,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 94,
        column: 28,
        span: 2070..2074,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 94,
        column: 31,
        span: 2075..2077,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 94,
        column: 37,
        span: 2078..2083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 94,
        column: 39,
        span: 2084..2085,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 94,
        column: 41,
        span: 2086..2087,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 94,
        column: 43,
        span: 2088..2089,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 44,
        span: 2088..2090,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 94,
        column: 48,
        span: 2091..2094,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 94,
        column: 52,
        span: 2095..2098,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 53,
        span: 2098..2099,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 95,
        column: 10,
        span: 2102..2109,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 11,
        span: 2109..2110,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 95,
        column: 17,
        span: 2111..2116,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 18,
        span: 2116..2117,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 95,
        column: 27,
        span: 2118..2126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 28,
        span: 2126..2127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 97,
        column: 6,
        span: 2129..2134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 7,
        span: 2134..2135,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 97,
        column: 15,
        span: 2135..2143,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 16,
        span: 2143..2144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 17,
        span: 2144..2145,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 97,
        column: 23,
        span: 2146..2151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 25,
        span: 2151..2153,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 97,
        column: 28,
        span: 2154..2156,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 97,
        column: 34,
        span: 2157..2162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 97,
        column: 36,
        span: 2163..2164,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 97,
        column: 38,
        span: 2165..2166,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 97,
        column: 40,
        span: 2167..2168,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 41,
        span: 2167..2169,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 97,
        column: 45,
        span: 2170..2173,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 97,
        column: 49,
        span: 2174..2177,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 50,
        span: 2177..2178,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 98,
        column: 10,
        span: 2181..2188,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 11,
        span: 2188..2189,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 98,
        column: 17,
        span: 2190..2195,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 18,
        span: 2195..2196,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 98,
        column: 27,
        span: 2197..2205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 28,
        span: 2205..2206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 100,
        column: 6,
        span: 2208..2213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 7,
        span: 2213..2214,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 100,
        column: 15,
        span: 2214..2222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 16,
        span: 2222..2223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 17,
        span: 2223..2224,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 100,
        column: 24,
        span: 2225..2231,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 100,
        column: 30,
        span: 2232..2237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 100,
        column: 32,
        span: 2238..2239,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 100,
        column: 34,
        span: 2240..2241,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 36,
        span: 2241..2243,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 100,
        column: 42,
        span: 2244..2249,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 100,
        column: 47,
        span: 2250..2254,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 100,
        column: 51,
        span: 2255..2258,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 52,
        span: 2258..2259,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 101,
        column: 10,
        span: 2262..2269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 11,
        span: 2269..2270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 101,
        column: 20,
        span: 2271..2279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 21,
        span: 2279..2280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 105,
        column: 6,
        span: 2306..2311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 7,
        span: 2311..2312,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 105,
        column: 15,
        span: 2312..2320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 16,
        span: 2320..2321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
        column: 17,
        span: 2321..2322,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 18,
        span: 2322..2323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 105,
        column: 20,
        span: 2324..2325,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 21,
        span: 2325..2326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 105,
        column: 23,
        span: 2327..2328,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 24,
        span: 2328..2329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 105,
        column: 26,
        span: 2330..2331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 27,
        span: 2331..2332,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 105,
        column: 34,
        span: 2333..2339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
        column: 36,
        span: 2340..2341,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 105,
        column: 39,
        span: 2342..2344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 105,
        column: 41,
        span: 2345..2346,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 105,
        column: 44,
        span: 2347..2349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 105,
        column: 46,
        span: 2350..2351,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 105,
        column: 49,
        span: 2352..2354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 105,
        column: 51,
        span: 2355..2356,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 105,
        column: 55,
        span: 2357..2360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 56,
        span: 2360..2361,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 106,
        column: 9,
        span: 2364..2370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 10,
        span: 2370..2371,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 106,
        column: 17,
        span: 2372..2378,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 18,
        span: 2378..2379,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 106,
        column: 25,
        span: 2380..2386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 26,
        span: 2386..2387,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 106,
        column: 33,
        span: 2388..2394,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 34,
        span: 2394..2395,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CONCAT'",
        ),
        line: 106,
        column: 43,
        span: 2396..2404,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 44,
        span: 2404..2405,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 106,
        column: 53,
        span: 2406..2414,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 54,
        span: 2414..2415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 109,
        column: 6,
        span: 2424..2429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 7,
        span: 2429..2430,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 109,
        column: 15,
        span: 2430..2438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 16,
        span: 2438..2439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 17,
        span: 2439..2440,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 109,
        column: 24,
        span: 2441..2447,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 109,
        column: 28,
        span: 2448..2451,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 109,
        column: 32,
        span: 2452..2455,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 109,
        column: 36,
        span: 2456..2459,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 109,
        column: 40,
        span: 2460..2463,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 41,
        span: 2463..2464,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADBOOL'",
        ),
        line: 109,
        column: 52,
        span: 2465..2475,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 53,
        span: 2475..2476,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 109,
        column: 62,
        span: 2477..2485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 63,
        span: 2485..2486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 110,
        column: 6,
        span: 2487..2492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 7,
        span: 2492..2493,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 110,
        column: 15,
        span: 2493..2501,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 16,
        span: 2501..2502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 17,
        span: 2502..2503,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 110,
        column: 24,
        span: 2504..2510,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 110,
        column: 28,
        span: 2511..2514,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 110,
        column: 32,
        span: 2515..2518,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 110,
        column: 38,
        span: 2519..2524,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 110,
        column: 42,
        span: 2525..2528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 43,
        span: 2528..2529,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADBOOL'",
        ),
        line: 110,
        column: 54,
        span: 2530..2540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 55,
        span: 2540..2541,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 110,
        column: 64,
        span: 2542..2550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 65,
        span: 2550..2551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 111,
        column: 6,
        span: 2552..2557,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 7,
        span: 2557..2558,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 111,
        column: 15,
        span: 2558..2566,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 16,
        span: 2566..2567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 17,
        span: 2567..2568,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 111,
        column: 24,
        span: 2569..2575,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 111,
        column: 28,
        span: 2576..2579,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 111,
        column: 32,
        span: 2580..2583,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 111,
        column: 37,
        span: 2584..2588,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 111,
        column: 41,
        span: 2589..2592,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 42,
        span: 2592..2593,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADBOOL'",
        ),
        line: 111,
        column: 53,
        span: 2594..2604,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 54,
        span: 2604..2605,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 111,
        column: 63,
        span: 2606..2614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 64,
        span: 2614..2615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 112,
        column: 6,
        span: 2616..2621,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 7,
        span: 2621..2622,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 112,
        column: 15,
        span: 2622..2630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 16,
        span: 2630..2631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 17,
        span: 2631..2632,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 112,
        column: 24,
        span: 2633..2639,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 112,
        column: 28,
        span: 2640..2643,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 112,
        column: 32,
        span: 2644..2647,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
        column: 34,
        span: 2647..2649,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 112,
        column: 38,
        span: 2650..2653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 39,
        span: 2653..2654,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADBOOL'",
        ),
        line: 112,
        column: 50,
        span: 2655..2665,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 51,
        span: 2665..2666,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 112,
        column: 60,
        span: 2667..2675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 61,
        span: 2675..2676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 115,
        column: 6,
        span: 2705..2710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 7,
        span: 2710..2711,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 115,
        column: 15,
        span: 2711..2719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 16,
        span: 2719..2720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 17,
        span: 2720..2721,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 116,
        column: 10,
        span: 2726..2731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 116,
        column: 12,
        span: 2732..2733,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 13,
        span: 2733..2734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 116,
        column: 15,
        span: 2735..2736,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 16,
        span: 2736..2737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 116,
        column: 18,
        span: 2738..2739,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 19,
        span: 2739..2740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 116,
        column: 0,
        span: 2741..2742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 117,
        column: 6,
        span: 2747..2748,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 117,
        column: 8,
        span: 2749..2750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 117,
        column: 10,
        span: 2751..2752,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 117,
        column: 12,
        span: 2753..2754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 0,
        span: 2754..2756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 118,
        column: 6,
        span: 2761..2762,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 118,
        column: 7,
        span: 2762..2763,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 8,
        span: 2762..2764,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 118,
        column: 9,
        span: 2764..2765,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 10,
        span: 2765..2766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 12,
        span: 2767..2768,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 118,
        column: 13,
        span: 2768..2769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 118,
        column: 14,
        span: 2769..2770,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 118,
        column: 15,
        span: 2770..2771,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 118,
        column: 17,
        span: 2772..2773,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 118,
        column: 19,
        span: 2774..2775,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 20,
        span: 2775..2776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 21,
        span: 2776..2777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 22,
        span: 2777..2778,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 118,
        column: 24,
        span: 2779..2780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 118,
        column: 26,
        span: 2781..2782,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 118,
        column: 28,
        span: 2783..2784,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 30,
        span: 2784..2786,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 118,
        column: 32,
        span: 2787..2788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 34,
        span: 2789..2790,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 118,
        column: 35,
        span: 2790..2791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 118,
        column: 36,
        span: 2791..2792,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 118,
        column: 37,
        span: 2792..2793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 38,
        span: 2793..2794,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 118,
        column: 40,
        span: 2795..2796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 42,
        span: 2797..2798,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 118,
        column: 43,
        span: 2798..2799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 118,
        column: 44,
        span: 2799..2800,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 45,
        span: 2800..2801,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 46,
        span: 2801..2802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 118,
        column: 0,
        span: 2803..2804,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 119,
        column: 6,
        span: 2807..2810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 7,
        span: 2810..2811,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        line: 120,
        column: 12,
        span: 2814..2823,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 13,
        span: 2823..2824,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MUL'",
        ),
        line: 121,
        column: 8,
        span: 2827..2832,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 9,
        span: 2832..2833,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'DIV'",
        ),
        line: 122,
        column: 8,
        span: 2836..2841,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 9,
        span: 2841..2842,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ADD'",
        ),
        line: 122,
        column: 15,
        span: 2843..2848,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 16,
        span: 2848..2849,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABLE'",
        ),
        line: 122,
        column: 27,
        span: 2850..2860,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 28,
        span: 2860..2861,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SUB'",
        ),
        line: 122,
        column: 34,
        span: 2862..2867,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 35,
        span: 2867..2868,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABLE'",
        ),
        line: 122,
        column: 46,
        span: 2869..2879,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 47,
        span: 2879..2880,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'POW'",
        ),
        line: 122,
        column: 53,
        span: 2881..2886,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 54,
        span: 2886..2887,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'UNM'",
        ),
        line: 123,
        column: 8,
        span: 2890..2895,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 9,
        span: 2895..2896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 123,
        column: 20,
        span: 2897..2907,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 21,
        span: 2907..2908,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 123,
        column: 32,
        span: 2909..2919,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 33,
        span: 2919..2920,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 123,
        column: 42,
        span: 2921..2929,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 43,
        span: 2929..2930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 127,
        column: 6,
        span: 2963..2968,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 7,
        span: 2968..2969,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 127,
        column: 15,
        span: 2969..2977,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 16,
        span: 2977..2978,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 17,
        span: 2978..2979,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 128,
        column: 10,
        span: 2984..2989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 128,
        column: 12,
        span: 2990..2991,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 13,
        span: 2991..2992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 128,
        column: 0,
        span: 2993..2994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 129,
        column: 6,
        span: 2999..3000,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 129,
        column: 7,
        span: 3000..3001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 129,
        column: 8,
        span: 3001..3002,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
        column: 10,
        span: 3003..3004,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".2",
                },
            ),
        ),
        line: 129,
        column: 0,
        span: 3004..3008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 130,
        column: 6,
        span: 3013..3014,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 130,
        column: 7,
        span: 3014..3015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 130,
        column: 8,
        span: 3015..3016,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 130,
        column: 10,
        span: 3017..3018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 130,
        column: 0,
        span: 3019..3020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 131,
        column: 6,
        span: 3025..3026,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 131,
        column: 7,
        span: 3026..3027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 131,
        column: 8,
        span: 3027..3028,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 131,
        column: 9,
        span: 3028..3029,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 131,
        column: 11,
        span: 3030..3031,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 131,
        column: 15,
        span: 3032..3035,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 132,
        column: 6,
        span: 3038..3041,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 7,
        span: 3041..3042,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        line: 133,
        column: 12,
        span: 3045..3054,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 13,
        span: 3054..3055,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 133,
        column: 24,
        span: 3056..3066,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 25,
        span: 3066..3067,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 133,
        column: 36,
        span: 3068..3078,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 37,
        span: 3078..3079,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 133,
        column: 48,
        span: 3080..3090,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 49,
        span: 3090..3091,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 133,
        column: 58,
        span: 3092..3100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 59,
        span: 3100..3101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 135,
        column: 6,
        span: 3103..3108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 7,
        span: 3108..3109,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 135,
        column: 15,
        span: 3109..3117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 16,
        span: 3117..3118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 17,
        span: 3118..3119,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 136,
        column: 10,
        span: 3124..3129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 136,
        column: 12,
        span: 3130..3131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 13,
        span: 3131..3132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 136,
        column: 0,
        span: 3133..3134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 137,
        column: 6,
        span: 3139..3140,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
        column: 8,
        span: 3141..3142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 10,
        span: 3142..3144,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 137,
        column: 12,
        span: 3145..3146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 137,
        column: 0,
        span: 3147..3148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 138,
        column: 6,
        span: 3153..3154,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 138,
        column: 8,
        span: 3155..3156,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 10,
        span: 3156..3158,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 138,
        column: 12,
        span: 3159..3160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 138,
        column: 0,
        span: 3161..3162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 139,
        column: 6,
        span: 3167..3168,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 139,
        column: 8,
        span: 3169..3170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 10,
        span: 3170..3172,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 139,
        column: 12,
        span: 3173..3174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 0,
        span: 3174..3176,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 140,
        column: 6,
        span: 3179..3182,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 7,
        span: 3182..3183,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        line: 141,
        column: 12,
        span: 3186..3195,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 13,
        span: 3195..3196,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SUB'",
        ),
        line: 141,
        column: 19,
        span: 3197..3202,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 20,
        span: 3202..3203,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'DIV'",
        ),
        line: 141,
        column: 26,
        span: 3204..3209,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 27,
        span: 3209..3210,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 141,
        column: 35,
        span: 3211..3218,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 36,
        span: 3218..3219,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 141,
        column: 45,
        span: 3220..3228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 46,
        span: 3228..3229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 143,
        column: 6,
        span: 3231..3236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 7,
        span: 3236..3237,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 143,
        column: 15,
        span: 3237..3245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 16,
        span: 3245..3246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 17,
        span: 3246..3247,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 144,
        column: 10,
        span: 3252..3257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 144,
        column: 12,
        span: 3258..3259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 144,
        column: 13,
        span: 3259..3260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 144,
        column: 0,
        span: 3261..3262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 145,
        column: 6,
        span: 3267..3268,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 145,
        column: 7,
        span: 3268..3269,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 145,
        column: 11,
        span: 3269..3273,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 145,
        column: 12,
        span: 3273..3274,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 145,
        column: 14,
        span: 3275..3276,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 145,
        column: 0,
        span: 3277..3282,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 146,
        column: 6,
        span: 3285..3288,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 7,
        span: 3288..3289,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        line: 147,
        column: 12,
        span: 3292..3301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
        column: 13,
        span: 3301..3302,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 147,
        column: 24,
        span: 3303..3313,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
        column: 25,
        span: 3313..3314,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 147,
        column: 34,
        span: 3315..3323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 35,
        span: 3323..3324,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 151,
        column: 6,
        span: 3347..3352,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 151,
        column: 15,
        span: 3353..3361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        line: 151,
        column: 22,
        span: 3362..3368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 23,
        span: 3368..3369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 151,
        column: 27,
        span: 3369..3373,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 28,
        span: 3373..3374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 151,
        column: 32,
        span: 3375..3378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 33,
        span: 3378..3379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 152,
        column: 8,
        span: 3382..3387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 9,
        span: 3387..3388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 152,
        column: 13,
        span: 3388..3392,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 14,
        span: 3392..3393,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 152,
        column: 22,
        span: 3394..3401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 23,
        span: 3401..3402,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 152,
        column: 32,
        span: 3403..3411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 33,
        span: 3411..3412,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 153,
        column: 8,
        span: 3415..3420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 153,
        column: 10,
        span: 3421..3422,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 153,
        column: 12,
        span: 3423..3424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 153,
        column: 14,
        span: 3425..3426,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 153,
        column: 15,
        span: 3426..3427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listk",
        ),
        line: 153,
        column: 20,
        span: 3427..3432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 21,
        span: 3432..3433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 153,
        column: 25,
        span: 3433..3437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 26,
        span: 3437..3438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
        column: 9,
        span: 3441..3447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 10,
        span: 3447..3448,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 154,
        column: 11,
        span: 3448..3449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 154,
        column: 12,
        span: 3449..3450,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 15,
        span: 3451..3453,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 17,
        span: 3453..3455,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 154,
        column: 21,
        span: 3456..3459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 154,
        column: 23,
        span: 3460..3461,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 154,
        column: 24,
        span: 3461..3462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 25,
        span: 3461..3463,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 154,
        column: 26,
        span: 3463..3464,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 29,
        span: 3465..3467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 154,
        column: 33,
        span: 3468..3471,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 154,
        column: 37,
        span: 3472..3475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 154,
        column: 42,
        span: 3476..3480,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 154,
        column: 43,
        span: 3480..3481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 154,
        column: 47,
        span: 3481..3485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 48,
        span: 3485..3486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 154,
        column: 49,
        span: 3486..3487,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 154,
        column: 50,
        span: 3487..3488,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 51,
        span: 3487..3489,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 154,
        column: 52,
        span: 3489..3490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 53,
        span: 3490..3491,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 56,
        span: 3492..3494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 154,
        column: 61,
        span: 3495..3499,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 154,
        column: 62,
        span: 3499..3500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 154,
        column: 66,
        span: 3500..3504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 67,
        span: 3504..3505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 154,
        column: 70,
        span: 3505..3508,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 71,
        span: 3508..3509,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 72,
        span: 3509..3510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 155,
        column: 9,
        span: 3513..3519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 10,
        span: 3519..3520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        line: 155,
        column: 14,
        span: 3520..3524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 15,
        span: 3524..3525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 16,
        span: 3525..3526,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 155,
        column: 19,
        span: 3527..3529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 155,
        column: 23,
        span: 3530..3533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 24,
        span: 3533..3534,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 156,
        column: 0,
        span: 3535..3538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        line: 157,
        column: 7,
        span: 3539..3545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 8,
        span: 3545..3546,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 157,
        column: 16,
        span: 3546..3554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 17,
        span: 3554..3555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 18,
        span: 3555..3556,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 157,
        column: 25,
        span: 3557..3563,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 157,
        column: 29,
        span: 3563..3567,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 157,
        column: 33,
        span: 3568..3571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 34,
        span: 3571..3572,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 157,
        column: 38,
        span: 3572..3576,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 39,
        span: 3576..3577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        line: 158,
        column: 7,
        span: 3578..3584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 8,
        span: 3584..3585,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 158,
        column: 16,
        span: 3585..3593,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 17,
        span: 3593..3594,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 18,
        span: 3594..3595,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 158,
        column: 25,
        span: 3596..3602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 27,
        span: 3602..3604,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 158,
        column: 31,
        span: 3605..3608,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 32,
        span: 3608..3609,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 34,
        span: 3609..3611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 35,
        span: 3611..3612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        line: 159,
        column: 7,
        span: 3613..3619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 8,
        span: 3619..3620,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 159,
        column: 16,
        span: 3620..3628,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 17,
        span: 3628..3629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 18,
        span: 3629..3630,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 159,
        column: 25,
        span: 3631..3637,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 159,
        column: 27,
        span: 3638..3639,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 28,
        span: 3638..3640,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 159,
        column: 31,
        span: 3641..3643,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 33,
        span: 3643..3645,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 159,
        column: 37,
        span: 3646..3649,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 38,
        span: 3649..3650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 40,
        span: 3650..3652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 41,
        span: 3652..3653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        line: 160,
        column: 7,
        span: 3654..3660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 8,
        span: 3660..3661,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 160,
        column: 16,
        span: 3661..3669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 17,
        span: 3669..3670,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 18,
        span: 3670..3671,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 160,
        column: 25,
        span: 3672..3678,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 27,
        span: 3678..3680,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 160,
        column: 29,
        span: 3681..3682,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 160,
        column: 31,
        span: 3683..3684,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 32,
        span: 3683..3685,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 160,
        column: 36,
        span: 3686..3689,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 160,
        column: 37,
        span: 3689..3690,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 39,
        span: 3690..3692,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 160,
        column: 41,
        span: 3693..3694,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 160,
        column: 43,
        span: 3694..3696,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 44,
        span: 3696..3697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        line: 161,
        column: 7,
        span: 3698..3704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 8,
        span: 3704..3705,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 161,
        column: 16,
        span: 3705..3713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 17,
        span: 3713..3714,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 18,
        span: 3714..3715,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 161,
        column: 25,
        span: 3716..3722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 27,
        span: 3723..3724,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 28,
        span: 3723..3725,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 161,
        column: 30,
        span: 3726..3727,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 32,
        span: 3727..3729,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 33,
        span: 3729..3730,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 161,
        column: 35,
        span: 3731..3732,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 37,
        span: 3733..3734,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 39,
        span: 3733..3736,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 161,
        column: 41,
        span: 3737..3738,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 44,
        span: 3738..3741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 45,
        span: 3741..3742,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 161,
        column: 49,
        span: 3743..3746,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 50,
        span: 3746..3747,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 52,
        span: 3747..3749,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 161,
        column: 54,
        span: 3750..3751,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 58,
        span: 3751..3755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 59,
        span: 3755..3756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        line: 162,
        column: 7,
        span: 3757..3763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 8,
        span: 3763..3764,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 162,
        column: 16,
        span: 3764..3772,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 17,
        span: 3772..3773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 18,
        span: 3773..3774,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 162,
        column: 25,
        span: 3775..3781,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 27,
        span: 3782..3783,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 162,
        column: 28,
        span: 3783..3784,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 29,
        span: 3783..3785,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 30,
        span: 3785..3786,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 162,
        column: 32,
        span: 3787..3788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 34,
        span: 3789..3790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 36,
        span: 3789..3792,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 162,
        column: 38,
        span: 3793..3794,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 40,
        span: 3794..3796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 41,
        span: 3796..3797,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 162,
        column: 45,
        span: 3798..3801,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 46,
        span: 3801..3802,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 162,
        column: 48,
        span: 3803..3804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x20000000",
            ),
        ),
        line: 162,
        column: 58,
        span: 3803..3814,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 162,
        column: 60,
        span: 3815..3816,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 162,
        column: 64,
        span: 3816..3820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 65,
        span: 3820..3821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        line: 163,
        column: 7,
        span: 3822..3828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 8,
        span: 3828..3829,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 163,
        column: 16,
        span: 3829..3837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 17,
        span: 3837..3838,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 18,
        span: 3838..3839,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 163,
        column: 25,
        span: 3840..3846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 27,
        span: 3847..3848,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 163,
        column: 28,
        span: 3848..3849,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 29,
        span: 3848..3850,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 163,
        column: 31,
        span: 3851..3852,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 33,
        span: 3852..3854,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 163,
        column: 35,
        span: 3855..3856,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 37,
        span: 3856..3858,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 38,
        span: 3858..3859,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 163,
        column: 41,
        span: 3860..3862,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 163,
        column: 45,
        span: 3862..3866,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 163,
        column: 49,
        span: 3867..3870,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
        column: 50,
        span: 3870..3871,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 163,
        column: 54,
        span: 3871..3875,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 55,
        span: 3875..3876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        line: 164,
        column: 7,
        span: 3877..3883,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 8,
        span: 3883..3884,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 164,
        column: 16,
        span: 3884..3892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 17,
        span: 3892..3893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 18,
        span: 3893..3894,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 164,
        column: 25,
        span: 3895..3901,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 164,
        column: 27,
        span: 3902..3903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 28,
        span: 3902..3904,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 164,
        column: 30,
        span: 3905..3906,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 32,
        span: 3906..3908,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 164,
        column: 36,
        span: 3909..3912,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
        column: 37,
        span: 3912..3913,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 39,
        span: 3913..3915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 40,
        span: 3915..3916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        line: 165,
        column: 7,
        span: 3917..3923,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 8,
        span: 3923..3924,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 165,
        column: 16,
        span: 3924..3932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 17,
        span: 3932..3933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 18,
        span: 3933..3934,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 165,
        column: 25,
        span: 3935..3941,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 165,
        column: 27,
        span: 3942..3943,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 28,
        span: 3943..3944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 29,
        span: 3944..3945,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 165,
        column: 32,
        span: 3944..3948,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 165,
        column: 34,
        span: 3949..3950,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 36,
        span: 3950..3952,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 165,
        column: 38,
        span: 3953..3954,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 165,
        column: 40,
        span: 3955..3956,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 41,
        span: 3956..3957,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 165,
        column: 42,
        span: 3957..3958,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 43,
        span: 3957..3959,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 44,
        span: 3959..3960,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 45,
        span: 3960..3961,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 165,
        column: 47,
        span: 3962..3963,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 49,
        span: 3963..3965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 50,
        span: 3965..3966,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 165,
        column: 52,
        span: 3967..3968,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 54,
        span: 3968..3970,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 165,
        column: 56,
        span: 3971..3972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 58,
        span: 3972..3974,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 165,
        column: 60,
        span: 3975..3976,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 62,
        span: 3976..3978,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 165,
        column: 66,
        span: 3979..3982,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 67,
        span: 3982..3983,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 165,
        column: 69,
        span: 3984..3985,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 165,
        column: 72,
        span: 3984..3988,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 73,
        span: 3988..3989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        line: 166,
        column: 7,
        span: 3990..3996,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 8,
        span: 3996..3997,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 166,
        column: 16,
        span: 3997..4005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 17,
        span: 4005..4006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 18,
        span: 4006..4007,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 166,
        column: 25,
        span: 4008..4014,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 166,
        column: 27,
        span: 4015..4016,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 28,
        span: 4016..4017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 29,
        span: 4017..4018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 30,
        span: 4017..4019,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 166,
        column: 32,
        span: 4020..4021,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 34,
        span: 4021..4023,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 166,
        column: 36,
        span: 4024..4025,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 166,
        column: 38,
        span: 4026..4027,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 39,
        span: 4027..4028,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 166,
        column: 40,
        span: 4028..4029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 41,
        span: 4028..4030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 42,
        span: 4030..4031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 43,
        span: 4031..4032,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 166,
        column: 45,
        span: 4033..4034,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 47,
        span: 4034..4036,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 48,
        span: 4036..4037,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 166,
        column: 51,
        span: 4038..4040,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 53,
        span: 4040..4042,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 166,
        column: 55,
        span: 4043..4044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 57,
        span: 4044..4046,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 166,
        column: 59,
        span: 4047..4048,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 61,
        span: 4048..4050,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 166,
        column: 65,
        span: 4051..4054,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 66,
        span: 4054..4055,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 166,
        column: 68,
        span: 4056..4057,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 166,
        column: 71,
        span: 4056..4060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 72,
        span: 4060..4061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        line: 167,
        column: 7,
        span: 4062..4068,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 8,
        span: 4068..4069,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 167,
        column: 16,
        span: 4069..4077,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 17,
        span: 4077..4078,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 18,
        span: 4078..4079,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 167,
        column: 25,
        span: 4080..4086,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "F0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 167,
        column: 32,
        span: 4086..4093,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 167,
        column: 34,
        span: 4094..4095,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "CC",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 167,
        column: 41,
        span: 4095..4102,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 167,
        column: 43,
        span: 4103..4104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xAA",
            ),
        ),
        line: 167,
        column: 48,
        span: 4104..4109,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 167,
        column: 50,
        span: 4110..4111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFD",
            ),
        ),
        line: 167,
        column: 55,
        span: 4111..4116,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 167,
        column: 59,
        span: 4117..4120,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 167,
        column: 60,
        span: 4120..4121,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xF4",
            ),
        ),
        line: 167,
        column: 65,
        span: 4121..4126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 66,
        span: 4126..4127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        line: 168,
        column: 7,
        span: 4128..4134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 8,
        span: 4134..4135,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 168,
        column: 16,
        span: 4135..4143,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 17,
        span: 4143..4144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 18,
        span: 4144..4145,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 168,
        column: 25,
        span: 4146..4152,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 168,
        column: 27,
        span: 4153..4154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 28,
        span: 4154..4155,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 168,
        column: 29,
        span: 4155..4156,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFF0",
            ),
        ),
        line: 168,
        column: 34,
        span: 4155..4161,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 168,
        column: 36,
        span: 4162..4163,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFF0",
            ),
        ),
        line: 168,
        column: 42,
        span: 4163..4169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 43,
        span: 4169..4170,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 168,
        column: 47,
        span: 4171..4174,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 168,
        column: 48,
        span: 4174..4175,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 168,
        column: 50,
        span: 4175..4177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 51,
        span: 4177..4178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        line: 169,
        column: 7,
        span: 4179..4185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 8,
        span: 4185..4186,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 169,
        column: 16,
        span: 4186..4194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 17,
        span: 4194..4195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 18,
        span: 4195..4196,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 169,
        column: 25,
        span: 4197..4203,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 169,
        column: 27,
        span: 4204..4205,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 169,
        column: 29,
        span: 4206..4207,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 169,
        column: 31,
        span: 4208..4209,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100024",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 169,
        column: 39,
        span: 4208..4217,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 169,
        column: 43,
        span: 4218..4221,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 44,
        span: 4221..4222,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 169,
        column: 46,
        span: 4223..4224,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100024",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 52,
        span: 4223..4230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 53,
        span: 4230..4231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkK",
        ),
        line: 170,
        column: 7,
        span: 4232..4238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 8,
        span: 4238..4239,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 170,
        column: 16,
        span: 4239..4247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 17,
        span: 4247..4248,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 18,
        span: 4248..4249,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 170,
        column: 25,
        span: 4250..4256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 27,
        span: 4257..4258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 28,
        span: 4258..4259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 31,
        span: 4258..4262,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 170,
        column: 34,
        span: 4263..4265,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 36,
        span: 4265..4267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 37,
        span: 4267..4268,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 170,
        column: 40,
        span: 4269..4271,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 170,
        column: 42,
        span: 4272..4273,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 43,
        span: 4272..4274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 44,
        span: 4274..4275,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 170,
        column: 47,
        span: 4276..4278,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 49,
        span: 4278..4280,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 170,
        column: 53,
        span: 4281..4284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 54,
        span: 4284..4285,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 58,
        span: 4285..4289,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 59,
        span: 4289..4290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 174,
        column: 6,
        span: 4308..4313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 7,
        span: 4313..4314,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 174,
        column: 15,
        span: 4314..4322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 16,
        span: 4322..4323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 17,
        span: 4323..4324,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 174,
        column: 24,
        span: 4325..4331,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 174,
        column: 26,
        span: 4332..4333,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 174,
        column: 29,
        span: 4332..4336,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 174,
        column: 33,
        span: 4337..4340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 34,
        span: 4340..4341,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 174,
        column: 42,
        span: 4342..4349,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 43,
        span: 4349..4350,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'UNM'",
        ),
        line: 174,
        column: 49,
        span: 4351..4356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 50,
        span: 4356..4357,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 174,
        column: 59,
        span: 4358..4366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 60,
        span: 4366..4367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 175,
        column: 6,
        span: 4368..4373,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 7,
        span: 4373..4374,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 175,
        column: 15,
        span: 4374..4382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 16,
        span: 4382..4383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 17,
        span: 4383..4384,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 175,
        column: 24,
        span: 4385..4391,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 26,
        span: 4391..4393,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 175,
        column: 28,
        span: 4394..4395,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 30,
        span: 4395..4397,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 175,
        column: 34,
        span: 4398..4401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 175,
        column: 35,
        span: 4401..4402,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'DIV'",
        ),
        line: 175,
        column: 41,
        span: 4403..4408,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 175,
        column: 42,
        span: 4408..4409,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 175,
        column: 51,
        span: 4410..4418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 52,
        span: 4418..4419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 176,
        column: 6,
        span: 4420..4425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 7,
        span: 4425..4426,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 176,
        column: 15,
        span: 4426..4434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 16,
        span: 4434..4435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 17,
        span: 4435..4436,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 176,
        column: 24,
        span: 4437..4443,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 26,
        span: 4443..4445,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 176,
        column: 28,
        span: 4446..4447,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 30,
        span: 4447..4449,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 176,
        column: 34,
        span: 4450..4453,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 35,
        span: 4453..4454,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOD'",
        ),
        line: 176,
        column: 41,
        span: 4455..4460,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 42,
        span: 4460..4461,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 176,
        column: 51,
        span: 4462..4470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 52,
        span: 4470..4471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 177,
        column: 6,
        span: 4472..4477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 7,
        span: 4477..4478,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 177,
        column: 15,
        span: 4478..4486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 16,
        span: 4486..4487,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 17,
        span: 4487..4488,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 177,
        column: 24,
        span: 4489..4495,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 177,
        column: 26,
        span: 4496..4497,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 27,
        span: 4496..4498,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 177,
        column: 30,
        span: 4499..4501,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 32,
        span: 4501..4503,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 177,
        column: 36,
        span: 4504..4507,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 37,
        span: 4507..4508,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'IDIV'",
        ),
        line: 177,
        column: 44,
        span: 4509..4515,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 45,
        span: 4515..4516,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 177,
        column: 54,
        span: 4517..4525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 55,
        span: 4525..4526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 180,
        column: 6,
        span: 4563..4568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 7,
        span: 4568..4569,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 180,
        column: 15,
        span: 4569..4577,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 16,
        span: 4577..4578,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 17,
        span: 4578..4579,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 180,
        column: 24,
        span: 4580..4586,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 180,
        column: 26,
        span: 4587..4588,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 180,
        column: 29,
        span: 4588..4591,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 180,
        column: 33,
        span: 4592..4595,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 34,
        span: 4595..4596,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        line: 180,
        column: 44,
        span: 4597..4606,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 45,
        span: 4606..4607,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'UNM'",
        ),
        line: 180,
        column: 51,
        span: 4608..4613,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 52,
        span: 4613..4614,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 180,
        column: 61,
        span: 4615..4623,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 62,
        span: 4623..4624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 183,
        column: 6,
        span: 4627..4632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 7,
        span: 4632..4633,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 183,
        column: 15,
        span: 4633..4641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 16,
        span: 4641..4642,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 17,
        span: 4642..4643,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 184,
        column: 10,
        span: 4648..4653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 184,
        column: 12,
        span: 4654..4655,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 13,
        span: 4655..4656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 184,
        column: 15,
        span: 4657..4658,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 16,
        span: 4658..4659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 184,
        column: 0,
        span: 4660..4661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 185,
        column: 6,
        span: 4666..4667,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 185,
        column: 7,
        span: 4667..4668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 185,
        column: 8,
        span: 4668..4669,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 185,
        column: 9,
        span: 4669..4670,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 10,
        span: 4670..4671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 185,
        column: 12,
        span: 4672..4673,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 185,
        column: 14,
        span: 4674..4675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 185,
        column: 16,
        span: 4676..4677,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 17,
        span: 4677..4678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 185,
        column: 0,
        span: 4679..4680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 186,
        column: 6,
        span: 4685..4686,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 186,
        column: 7,
        span: 4686..4687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 186,
        column: 8,
        span: 4687..4688,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 186,
        column: 9,
        span: 4688..4689,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 10,
        span: 4689..4690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 186,
        column: 12,
        span: 4691..4692,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 186,
        column: 14,
        span: 4693..4694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 186,
        column: 16,
        span: 4695..4696,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 17,
        span: 4696..4697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 186,
        column: 0,
        span: 4698..4699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 187,
        column: 6,
        span: 4704..4705,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 7,
        span: 4705..4706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 187,
        column: 9,
        span: 4707..4708,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 187,
        column: 11,
        span: 4709..4710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 187,
        column: 13,
        span: 4711..4712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 14,
        span: 4712..4713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 187,
        column: 0,
        span: 4714..4715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 188,
        column: 6,
        span: 4720..4721,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 188,
        column: 8,
        span: 4722..4723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 188,
        column: 0,
        span: 4724..4725,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 189,
        column: 6,
        span: 4728..4731,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 7,
        span: 4731..4732,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        line: 190,
        column: 12,
        span: 4735..4744,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 13,
        span: 4744..4745,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 191,
        column: 9,
        span: 4748..4754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 10,
        span: 4754..4755,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 191,
        column: 17,
        span: 4756..4762,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 18,
        span: 4762..4763,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 191,
        column: 29,
        span: 4764..4774,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 30,
        span: 4774..4775,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 192,
        column: 9,
        span: 4778..4784,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 10,
        span: 4784..4785,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 192,
        column: 17,
        span: 4786..4792,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 18,
        span: 4792..4793,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 192,
        column: 25,
        span: 4794..4800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 26,
        span: 4800..4801,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 192,
        column: 37,
        span: 4802..4812,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 192,
        column: 38,
        span: 4812..4813,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 193,
        column: 9,
        span: 4816..4822,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 10,
        span: 4822..4823,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 193,
        column: 17,
        span: 4824..4830,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 18,
        span: 4830..4831,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 193,
        column: 25,
        span: 4832..4838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 26,
        span: 4838..4839,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 195,
        column: 11,
        span: 4865..4873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 12,
        span: 4873..4874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        line: 199,
        column: 11,
        span: 4900..4910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 12,
        span: 4910..4911,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 199,
        column: 20,
        span: 4911..4919,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 21,
        span: 4919..4920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 22,
        span: 4920..4921,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 200,
        column: 7,
        span: 4926..4928,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 9,
        span: 4929..4930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 200,
        column: 10,
        span: 4930..4931,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 200,
        column: 13,
        span: 4932..4934,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 200,
        column: 17,
        span: 4935..4938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 18,
        span: 4938..4939,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 200,
        column: 23,
        span: 4940..4944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 200,
        column: 25,
        span: 4945..4946,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 200,
        column: 27,
        span: 4947..4948,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 200,
        column: 29,
        span: 4948..4950,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 200,
        column: 0,
        span: 4951..4954,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 201,
        column: 6,
        span: 4959..4960,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 201,
        column: 9,
        span: 4961..4963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 201,
        column: 11,
        span: 4964..4965,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 201,
        column: 14,
        span: 4966..4968,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 201,
        column: 18,
        span: 4969..4972,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 201,
        column: 23,
        span: 4973..4977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 201,
        column: 25,
        span: 4978..4979,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 201,
        column: 27,
        span: 4980..4981,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 201,
        column: 29,
        span: 4981..4983,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 201,
        column: 0,
        span: 4984..4987,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 202,
        column: 6,
        span: 4990..4993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
        column: 7,
        span: 4993..4994,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 203,
        column: 11,
        span: 4997..5005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 12,
        span: 5005..5006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 13,
        span: 5006..5007,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 204,
        column: 7,
        span: 5012..5014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 9,
        span: 5015..5016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 204,
        column: 10,
        span: 5016..5017,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 13,
        span: 5018..5020,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 15,
        span: 5020..5022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 16,
        span: 5022..5023,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 204,
        column: 21,
        span: 5024..5028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 204,
        column: 23,
        span: 5029..5030,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 204,
        column: 25,
        span: 5031..5032,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 27,
        span: 5032..5034,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 204,
        column: 0,
        span: 5035..5038,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 205,
        column: 6,
        span: 5043..5044,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 205,
        column: 9,
        span: 5045..5047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 205,
        column: 11,
        span: 5048..5049,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 205,
        column: 14,
        span: 5050..5052,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 16,
        span: 5052..5054,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 205,
        column: 21,
        span: 5055..5059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 205,
        column: 23,
        span: 5060..5061,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 205,
        column: 25,
        span: 5062..5063,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 205,
        column: 27,
        span: 5063..5065,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 205,
        column: 0,
        span: 5066..5069,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 206,
        column: 6,
        span: 5072..5075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 7,
        span: 5075..5076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 208,
        column: 6,
        span: 5078..5083,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 7,
        span: 5083..5084,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 208,
        column: 15,
        span: 5084..5092,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 16,
        span: 5092..5093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 17,
        span: 5093..5094,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 208,
        column: 20,
        span: 5095..5097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 208,
        column: 22,
        span: 5098..5099,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 208,
        column: 25,
        span: 5100..5102,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 208,
        column: 29,
        span: 5103..5106,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 208,
        column: 34,
        span: 5107..5111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 208,
        column: 36,
        span: 5112..5113,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 208,
        column: 38,
        span: 5114..5115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 208,
        column: 42,
        span: 5116..5119,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 208,
        column: 46,
        span: 5120..5123,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 208,
        column: 50,
        span: 5124..5127,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 51,
        span: 5127..5128,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABUP'",
        ),
        line: 209,
        column: 13,
        span: 5131..5141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 14,
        span: 5141..5142,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQ'",
        ),
        line: 209,
        column: 19,
        span: 5143..5147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 20,
        span: 5147..5148,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 209,
        column: 26,
        span: 5149..5154,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 27,
        span: 5154..5155,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABUP'",
        ),
        line: 209,
        column: 38,
        span: 5156..5166,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 39,
        span: 5166..5167,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 209,
        column: 48,
        span: 5168..5176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 49,
        span: 5176..5177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        line: 212,
        column: 11,
        span: 5192..5202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 12,
        span: 5202..5203,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 212,
        column: 20,
        span: 5203..5211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 21,
        span: 5211..5212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 22,
        span: 5212..5213,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 213,
        column: 10,
        span: 5218..5223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 213,
        column: 12,
        span: 5224..5225,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 213,
        column: 13,
        span: 5225..5226,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 213,
        column: 16,
        span: 5227..5229,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 213,
        column: 20,
        span: 5230..5233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 22,
        span: 5234..5235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 213,
        column: 23,
        span: 5235..5236,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 213,
        column: 26,
        span: 5237..5239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 213,
        column: 28,
        span: 5240..5241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 29,
        span: 5241..5242,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 213,
        column: 34,
        span: 5243..5247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 213,
        column: 36,
        span: 5248..5249,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 213,
        column: 38,
        span: 5250..5251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 213,
        column: 40,
        span: 5252..5253,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 213,
        column: 0,
        span: 5254..5257,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 214,
        column: 6,
        span: 5260..5263,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 7,
        span: 5263..5264,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 215,
        column: 11,
        span: 5267..5275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 12,
        span: 5275..5276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 13,
        span: 5276..5277,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 216,
        column: 10,
        span: 5282..5287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 216,
        column: 12,
        span: 5288..5289,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 216,
        column: 13,
        span: 5289..5290,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 216,
        column: 16,
        span: 5291..5293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 18,
        span: 5294..5295,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 216,
        column: 21,
        span: 5295..5298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 216,
        column: 23,
        span: 5299..5300,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 216,
        column: 27,
        span: 5301..5304,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 216,
        column: 31,
        span: 5305..5308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 216,
        column: 33,
        span: 5309..5310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 34,
        span: 5310..5311,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 216,
        column: 39,
        span: 5312..5316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 216,
        column: 41,
        span: 5317..5318,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 216,
        column: 43,
        span: 5319..5320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 216,
        column: 45,
        span: 5321..5322,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 216,
        column: 0,
        span: 5323..5326,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 217,
        column: 6,
        span: 5329..5332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 7,
        span: 5332..5333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        line: 219,
        column: 11,
        span: 5335..5345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 12,
        span: 5345..5346,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 219,
        column: 20,
        span: 5346..5354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 21,
        span: 5354..5355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 219,
        column: 22,
        span: 5355..5356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 23,
        span: 5356..5357,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 220,
        column: 10,
        span: 5362..5367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 220,
        column: 12,
        span: 5368..5369,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 220,
        column: 13,
        span: 5369..5370,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 220,
        column: 20,
        span: 5371..5377,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 220,
        column: 22,
        span: 5377..5379,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 220,
        column: 25,
        span: 5380..5382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 220,
        column: 27,
        span: 5383..5384,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 220,
        column: 31,
        span: 5385..5388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 220,
        column: 33,
        span: 5389..5390,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 220,
        column: 36,
        span: 5391..5393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 220,
        column: 0,
        span: 5394..5395,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 221,
        column: 6,
        span: 5398..5401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 221,
        column: 7,
        span: 5401..5402,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 222,
        column: 11,
        span: 5405..5413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 12,
        span: 5413..5414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 222,
        column: 13,
        span: 5414..5415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 14,
        span: 5415..5416,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 223,
        column: 10,
        span: 5421..5426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 223,
        column: 12,
        span: 5427..5428,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 223,
        column: 13,
        span: 5428..5429,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 223,
        column: 20,
        span: 5430..5436,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 223,
        column: 24,
        span: 5437..5440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 26,
        span: 5441..5442,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 223,
        column: 29,
        span: 5442..5445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 31,
        span: 5446..5447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 223,
        column: 32,
        span: 5447..5448,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 223,
        column: 35,
        span: 5449..5451,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 37,
        span: 5451..5453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 38,
        span: 5453..5454,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 223,
        column: 41,
        span: 5455..5457,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 223,
        column: 45,
        span: 5458..5461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 47,
        span: 5462..5463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 223,
        column: 48,
        span: 5463..5464,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 223,
        column: 51,
        span: 5465..5467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 223,
        column: 53,
        span: 5468..5469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 54,
        span: 5469..5470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 55,
        span: 5470..5471,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 224,
        column: 6,
        span: 5474..5477,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 7,
        span: 5477..5478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 228,
        column: 6,
        span: 5506..5511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 7,
        span: 5511..5512,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 228,
        column: 15,
        span: 5512..5520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 16,
        span: 5520..5521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 228,
        column: 17,
        span: 5521..5522,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
        column: 18,
        span: 5522..5523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 228,
        column: 20,
        span: 5524..5525,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
        column: 21,
        span: 5525..5526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 228,
        column: 23,
        span: 5527..5528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
        column: 24,
        span: 5528..5529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 228,
        column: 26,
        span: 5530..5531,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
        column: 27,
        span: 5531..5532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 228,
        column: 29,
        span: 5533..5534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 30,
        span: 5534..5535,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 229,
        column: 5,
        span: 5538..5540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 229,
        column: 7,
        span: 5541..5542,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 229,
        column: 10,
        span: 5543..5545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 229,
        column: 12,
        span: 5546..5547,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 229,
        column: 0,
        span: 5548..5552,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 230,
        column: 9,
        span: 5555..5561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 230,
        column: 11,
        span: 5562..5563,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 230,
        column: 14,
        span: 5564..5566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 230,
        column: 16,
        span: 5567..5568,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 230,
        column: 0,
        span: 5569..5573,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 231,
        column: 9,
        span: 5576..5582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 231,
        column: 11,
        span: 5583..5584,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 231,
        column: 14,
        span: 5585..5587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 231,
        column: 16,
        span: 5588..5589,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 231,
        column: 0,
        span: 5590..5594,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 232,
        column: 0,
        span: 5597..5601,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 233,
        column: 7,
        span: 5606..5608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 233,
        column: 9,
        span: 5609..5610,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 233,
        column: 12,
        span: 5611..5613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 233,
        column: 14,
        span: 5614..5615,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 233,
        column: 0,
        span: 5616..5620,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 234,
        column: 0,
        span: 5625..5629,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 235,
        column: 0,
        span: 5634..5637,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 236,
        column: 0,
        span: 5640..5643,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 237,
        column: 4,
        span: 5644..5647,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 5,
        span: 5647..5648,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQ'",
        ),
        line: 237,
        column: 10,
        span: 5649..5653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 11,
        span: 5653..5654,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 237,
        column: 17,
        span: 5655..5660,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 18,
        span: 5660..5661,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQ'",
        ),
        line: 237,
        column: 23,
        span: 5662..5666,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 24,
        span: 5666..5667,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 237,
        column: 30,
        span: 5668..5673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 31,
        span: 5673..5674,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQ'",
        ),
        line: 237,
        column: 36,
        span: 5675..5679,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 37,
        span: 5679..5680,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 237,
        column: 43,
        span: 5681..5686,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 44,
        span: 5686..5687,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQ'",
        ),
        line: 237,
        column: 49,
        span: 5688..5692,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 50,
        span: 5692..5693,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 237,
        column: 56,
        span: 5694..5699,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 57,
        span: 5699..5700,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 237,
        column: 63,
        span: 5701..5706,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 64,
        span: 5706..5707,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 237,
        column: 73,
        span: 5708..5716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 74,
        span: 5716..5717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        line: 239,
        column: 11,
        span: 5719..5729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 12,
        span: 5729..5730,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 240,
        column: 11,
        span: 5733..5741,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 12,
        span: 5741..5742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 240,
        column: 13,
        span: 5742..5743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 14,
        span: 5743..5744,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 240,
        column: 20,
        span: 5745..5750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 240,
        column: 22,
        span: 5751..5752,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 240,
        column: 24,
        span: 5753..5754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 27,
        span: 5754..5757,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 240,
        column: 30,
        span: 5758..5760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 240,
        column: 32,
        span: 5761..5762,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 240,
        column: 34,
        span: 5763..5764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 240,
        column: 36,
        span: 5765..5766,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 240,
        column: 38,
        span: 5767..5768,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 40,
        span: 5768..5770,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 240,
        column: 44,
        span: 5771..5774,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 240,
        column: 48,
        span: 5775..5778,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 49,
        span: 5778..5779,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 241,
        column: 11,
        span: 5782..5790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 12,
        span: 5790..5791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 241,
        column: 13,
        span: 5791..5792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 14,
        span: 5792..5793,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 242,
        column: 7,
        span: 5798..5800,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 242,
        column: 11,
        span: 5801..5804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 13,
        span: 5805..5806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 242,
        column: 14,
        span: 5806..5807,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 242,
        column: 16,
        span: 5808..5809,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 19,
        span: 5809..5812,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 20,
        span: 5812..5813,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 242,
        column: 25,
        span: 5814..5818,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 242,
        column: 0,
        span: 5819..5822,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 243,
        column: 6,
        span: 5827..5828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 243,
        column: 8,
        span: 5829..5830,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 243,
        column: 10,
        span: 5831..5832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 243,
        column: 12,
        span: 5833..5834,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 243,
        column: 14,
        span: 5835..5836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
        column: 16,
        span: 5836..5838,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 243,
        column: 17,
        span: 5838..5839,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 244,
        column: 0,
        span: 5842..5845,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 2,
        span: 5846..5847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        line: 247,
        column: 11,
        span: 5849..5859,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 12,
        span: 5859..5860,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 248,
        column: 11,
        span: 5863..5871,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 12,
        span: 5871..5872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 248,
        column: 13,
        span: 5872..5873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 14,
        span: 5873..5874,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 248,
        column: 20,
        span: 5875..5880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 248,
        column: 22,
        span: 5881..5882,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 248,
        column: 24,
        span: 5883..5884,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 27,
        span: 5884..5887,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 248,
        column: 30,
        span: 5888..5890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 248,
        column: 32,
        span: 5891..5892,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 248,
        column: 34,
        span: 5893..5894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 248,
        column: 36,
        span: 5895..5896,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 248,
        column: 38,
        span: 5897..5898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 40,
        span: 5898..5900,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 248,
        column: 44,
        span: 5901..5904,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 248,
        column: 48,
        span: 5905..5908,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 49,
        span: 5908..5909,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 249,
        column: 11,
        span: 5912..5920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 12,
        span: 5920..5921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 249,
        column: 13,
        span: 5921..5922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 14,
        span: 5922..5923,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 250,
        column: 10,
        span: 5928..5933,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 250,
        column: 15,
        span: 5934..5938,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 250,
        column: 0,
        span: 5939..5941,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 251,
        column: 9,
        span: 5948..5950,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 251,
        column: 13,
        span: 5951..5954,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 15,
        span: 5955..5956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 251,
        column: 16,
        span: 5956..5957,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 251,
        column: 18,
        span: 5958..5959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 251,
        column: 21,
        span: 5959..5962,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 22,
        span: 5962..5963,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 251,
        column: 27,
        span: 5964..5968,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 251,
        column: 33,
        span: 5969..5974,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 251,
        column: 0,
        span: 5975..5978,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 252,
        column: 8,
        span: 5985..5986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 252,
        column: 10,
        span: 5987..5988,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 12,
        span: 5989..5990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 252,
        column: 14,
        span: 5991..5992,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 252,
        column: 16,
        span: 5993..5994,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 18,
        span: 5994..5996,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 252,
        column: 19,
        span: 5996..5997,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 253,
        column: 0,
        span: 6002..6005,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 254,
        column: 0,
        span: 6008..6011,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 2,
        span: 6012..6013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 257,
        column: 6,
        span: 6015..6020,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 257,
        column: 11,
        span: 6021..6025,
    },
]
