---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/all.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 6,
            column: 6,
            span: 116..121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "version",
        ),
        position: Position {
            line: 6,
            column: 14,
            span: 122..129,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 6,
            column: 16,
            span: 130..131,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua 5.3\"",
        ),
        position: Position {
            line: 6,
            column: 26,
            span: 132..141,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 7,
            column: 3,
            span: 142..144,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_VERSION",
        ),
        position: Position {
            line: 7,
            column: 12,
            span: 145..153,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 7,
            column: 15,
            span: 154..156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "version",
        ),
        position: Position {
            line: 7,
            column: 23,
            span: 157..164,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 7,
            column: 0,
            span: 165..169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 8,
            column: 5,
            span: 172..174,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 8,
            column: 6,
            span: 174..175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        position: Position {
            line: 8,
            column: 12,
            span: 175..181,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 8,
            column: 13,
            span: 181..182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 8,
            column: 18,
            span: 182..187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 8,
            column: 19,
            span: 187..188,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nThis test suite is for \"",
        ),
        position: Position {
            line: 8,
            column: 46,
            span: 188..215,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 8,
            column: 47,
            span: 215..216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "version",
        ),
        position: Position {
            line: 8,
            column: 55,
            span: 217..224,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 8,
            column: 56,
            span: 224..225,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", not for \"",
        ),
        position: Position {
            line: 8,
            column: 69,
            span: 226..238,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 8,
            column: 70,
            span: 238..239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_VERSION",
        ),
        position: Position {
            line: 8,
            column: 79,
            span: 240..248,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 8,
            column: 80,
            span: 248..249,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nExiting tests\\n\"",
        ),
        position: Position {
            line: 9,
            column: 24,
            span: 254..273,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 25,
            span: 273..274,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 10,
            column: 0,
            span: 277..283,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 11,
            column: 0,
            span: 284..287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 14,
            column: 3,
            span: 290..292,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 14,
            column: 4,
            span: 292..293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ARG",
        ),
        position: Position {
            line: 14,
            column: 8,
            span: 293..297,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 14,
            column: 10,
            span: 298..299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 14,
            column: 14,
            span: 300..303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 21,
            column: 6,
            span: 557..562,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 21,
            column: 8,
            span: 563..564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        position: Position {
            line: 21,
            column: 15,
            span: 565..571,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 16,
            span: 571..572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 21,
            column: 18,
            span: 572..574,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 19,
            span: 574..575,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_soft\"",
        ),
        position: Position {
            line: 21,
            column: 27,
            span: 576..583,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 28,
            span: 583..584,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 21,
            column: 31,
            span: 585..587,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 21,
            column: 0,
            span: 588..593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        position: Position {
            line: 23,
            column: 6,
            span: 635..640,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 23,
            column: 8,
            span: 641..642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        position: Position {
            line: 23,
            column: 15,
            span: 643..649,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 16,
            span: 649..650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 23,
            column: 18,
            span: 650..652,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 23,
            column: 19,
            span: 652..653,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_port\"",
        ),
        position: Position {
            line: 23,
            column: 27,
            span: 654..661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 28,
            span: 661..662,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 23,
            column: 31,
            span: 663..665,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 23,
            column: 0,
            span: 666..671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_nomsg",
        ),
        position: Position {
            line: 25,
            column: 7,
            span: 729..735,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 25,
            column: 9,
            span: 736..737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        position: Position {
            line: 25,
            column: 16,
            span: 738..744,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 25,
            column: 17,
            span: 744..745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 25,
            column: 19,
            span: 745..747,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 25,
            column: 20,
            span: 747..748,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_nomsg\"",
        ),
        position: Position {
            line: 25,
            column: 29,
            span: 749..757,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 25,
            column: 30,
            span: 757..758,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 25,
            column: 33,
            span: 759..761,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 25,
            column: 0,
            span: 762..767,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 28,
            column: 6,
            span: 770..775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        position: Position {
            line: 28,
            column: 16,
            span: 776..785,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 28,
            column: 18,
            span: 786..787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        position: Position {
            line: 28,
            column: 25,
            span: 788..794,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 26,
            span: 794..795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 28,
            column: 28,
            span: 795..797,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 28,
            column: 29,
            span: 797..798,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_U\"",
        ),
        position: Position {
            line: 28,
            column: 34,
            span: 799..803,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 35,
            span: 803..804,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 30,
            column: 3,
            span: 806..808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        position: Position {
            line: 30,
            column: 13,
            span: 809..818,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 30,
            column: 0,
            span: 819..823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 32,
            column: 8,
            span: 868..873,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 32,
            column: 10,
            span: 874..875,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 32,
            column: 0,
            span: 876..880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        position: Position {
            line: 33,
            column: 8,
            span: 883..888,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 33,
            column: 10,
            span: 889..890,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 33,
            column: 0,
            span: 891..895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_nomsg",
        ),
        position: Position {
            line: 34,
            column: 9,
            span: 898..904,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 34,
            column: 11,
            span: 905..906,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 34,
            column: 0,
            span: 907..911,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 35,
            column: 0,
            span: 912..915,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 38,
            column: 6,
            span: 959..964,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 38,
            column: 8,
            span: 965..966,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 38,
            column: 0,
            span: 967..970,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 40,
            column: 3,
            span: 972..974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        position: Position {
            line: 40,
            column: 13,
            span: 975..984,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 40,
            column: 0,
            span: 985..989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 41,
            column: 4,
            span: 992..993,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 41,
            column: 6,
            span: 994..995,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 41,
            column: 10,
            span: 996..999,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 42,
            column: 0,
            span: 1041..1045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 43,
            column: 4,
            span: 1048..1049,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 43,
            column: 6,
            span: 1050..1051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        position: Position {
            line: 43,
            column: 13,
            span: 1052..1058,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 14,
            span: 1058..1059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 43,
            column: 16,
            span: 1059..1061,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 17,
            span: 1061..1062,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"T\"",
        ),
        position: Position {
            line: 43,
            column: 21,
            span: 1063..1066,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 22,
            span: 1066..1067,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 44,
            column: 0,
            span: 1108..1111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 46,
            column: 5,
            span: 1113..1117,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 46,
            column: 6,
            span: 1117..1118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        position: Position {
            line: 46,
            column: 16,
            span: 1118..1128,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 17,
            span: 1128..1129,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 46,
            column: 18,
            span: 1128..1130,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 19,
            span: 1130..1131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 54,
            column: 6,
            span: 1207..1212,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 7,
            span: 1212..1213,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"current path:\\n****\"",
        ),
        position: Position {
            line: 54,
            column: 28,
            span: 1213..1234,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 54,
            column: 31,
            span: 1235..1237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        position: Position {
            line: 54,
            column: 39,
            span: 1238..1245,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 54,
            column: 40,
            span: 1245..1246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        position: Position {
            line: 54,
            column: 44,
            span: 1246..1250,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 54,
            column: 47,
            span: 1251..1253,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"****\\n\"",
        ),
        position: Position {
            line: 54,
            column: 56,
            span: 1254..1262,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 57,
            span: 1262..1263,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 57,
            column: 6,
            span: 1266..1271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "initclock",
        ),
        position: Position {
            line: 57,
            column: 16,
            span: 1272..1281,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 57,
            column: 18,
            span: 1282..1283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 57,
            column: 21,
            span: 1284..1286,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 57,
            column: 22,
            span: 1286..1287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 57,
            column: 27,
            span: 1287..1292,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 28,
            span: 1292..1293,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 29,
            span: 1293..1294,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 58,
            column: 6,
            span: 1295..1300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastclock",
        ),
        position: Position {
            line: 58,
            column: 16,
            span: 1301..1310,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 58,
            column: 18,
            span: 1311..1312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "initclock",
        ),
        position: Position {
            line: 58,
            column: 0,
            span: 1313..1322,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 59,
            column: 6,
            span: 1323..1328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "walltime",
        ),
        position: Position {
            line: 59,
            column: 15,
            span: 1329..1337,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 59,
            column: 17,
            span: 1338..1339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 59,
            column: 20,
            span: 1340..1342,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 59,
            column: 21,
            span: 1342..1343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 59,
            column: 25,
            span: 1343..1347,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 26,
            span: 1347..1348,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 27,
            span: 1348..1349,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 61,
            column: 6,
            span: 1351..1356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 61,
            column: 21,
            span: 1357..1371,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 61,
            column: 23,
            span: 1372..1373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 61,
            column: 0,
            span: 1374..1388,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 63,
            column: 3,
            span: 1390..1392,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 66,
            column: 6,
            span: 1443..1448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        position: Position {
            line: 66,
            column: 11,
            span: 1449..1453,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 66,
            column: 13,
            span: 1454..1455,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 66,
            column: 15,
            span: 1456..1457,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 66,
            column: 16,
            span: 1457..1458,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 67,
            column: 9,
            span: 1459..1467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 67,
            column: 17,
            span: 1468..1475,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 19,
            span: 1476..1477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 67,
            column: 20,
            span: 1477..1478,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 21,
            span: 1478..1479,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 68,
            column: 5,
            span: 1482..1484,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 68,
            column: 9,
            span: 1485..1488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_nomsg",
        ),
        position: Position {
            line: 68,
            column: 16,
            span: 1489..1495,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 68,
            column: 0,
            span: 1496..1500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 69,
            column: 10,
            span: 1505..1510,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 11,
            span: 1510..1511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 69,
            column: 12,
            span: 1511..1512,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 13,
            span: 1512..1513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        position: Position {
            line: 70,
            column: 9,
            span: 1518..1522,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 70,
            column: 10,
            span: 1522..1523,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 70,
            column: 11,
            span: 1523..1524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        position: Position {
            line: 70,
            column: 15,
            span: 1524..1528,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 70,
            column: 16,
            span: 1528..1529,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 17,
            span: 1528..1530,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 70,
            column: 18,
            span: 1530..1531,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 70,
            column: 20,
            span: 1532..1533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 70,
            column: 27,
            span: 1534..1540,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 70,
            column: 28,
            span: 1540..1541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 70,
            column: 31,
            span: 1541..1544,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 32,
            span: 1544..1545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 70,
            column: 33,
            span: 1545..1546,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 34,
            span: 1546..1547,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 36,
            span: 1547..1549,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 37,
            span: 1549..1550,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 70,
            column: 39,
            span: 1551..1552,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 40,
            span: 1551..1553,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 41,
            span: 1553..1554,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 71,
            column: 0,
            span: 1557..1560,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 72,
            column: 0,
            span: 1561..1564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 74,
            column: 7,
            span: 1566..1572,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 8,
            span: 1572..1573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 74,
            column: 10,
            span: 1573..1575,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 74,
            column: 11,
            span: 1575..1576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        position: Position {
            line: 74,
            column: 20,
            span: 1576..1585,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        position: Position {
            line: 74,
            column: 23,
            span: 1585..1588,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 24,
            span: 1588..1589,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 76,
            column: 6,
            span: 1591..1596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 76,
            column: 8,
            span: 1597..1598,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 9,
            span: 1598..1599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 76,
            column: 14,
            span: 1599..1604,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 15,
            span: 1604..1605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 76,
            column: 21,
            span: 1605..1611,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 22,
            span: 1611..1612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 76,
            column: 27,
            span: 1612..1617,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 28,
            span: 1617..1618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 76,
            column: 34,
            span: 1618..1624,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 35,
            span: 1624..1625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 76,
            column: 39,
            span: 1625..1629,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 40,
            span: 1629..1630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 76,
            column: 46,
            span: 1630..1636,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 47,
            span: 1636..1637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        position: Position {
            line: 76,
            column: 52,
            span: 1637..1642,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 76,
            column: 54,
            span: 1643..1644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 77,
            column: 8,
            span: 1651..1652,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 9,
            span: 1652..1653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 77,
            column: 14,
            span: 1653..1658,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 15,
            span: 1658..1659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 77,
            column: 21,
            span: 1659..1665,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 22,
            span: 1665..1666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 77,
            column: 28,
            span: 1666..1672,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 29,
            span: 1672..1673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 77,
            column: 31,
            span: 1673..1675,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 32,
            span: 1675..1676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 77,
            column: 37,
            span: 1676..1681,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 38,
            span: 1681..1682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 77,
            column: 44,
            span: 1682..1688,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 45,
            span: 1688..1689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 77,
            column: 49,
            span: 1689..1693,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 50,
            span: 1693..1694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 77,
            column: 55,
            span: 1694..1699,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 56,
            span: 1699..1700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 77,
            column: 62,
            span: 1700..1706,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 63,
            span: 1706..1707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 77,
            column: 67,
            span: 1707..1711,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 68,
            span: 1711..1712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        position: Position {
            line: 77,
            column: 0,
            span: 1712..1717,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 80,
            column: 6,
            span: 1774..1779,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 80,
            column: 15,
            span: 1780..1788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 80,
            column: 17,
            span: 1789..1790,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 19,
            span: 1791..1792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 80,
            column: 20,
            span: 1792..1793,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 21,
            span: 1793..1794,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 81,
            column: 8,
            span: 1797..1802,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 81,
            column: 17,
            span: 1803..1811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "round",
        ),
        position: Position {
            line: 81,
            column: 23,
            span: 1812..1817,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 25,
            span: 1818..1819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 81,
            column: 26,
            span: 1819..1820,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 27,
            span: 1820..1821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 82,
            column: 6,
            span: 1826..1827,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 82,
            column: 8,
            span: 1828..1829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 82,
            column: 10,
            span: 1830..1831,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 82,
            column: 12,
            span: 1832..1833,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".04999",
                },
            ),
        ),
        position: Position {
            line: 82,
            column: 0,
            span: 1833..1841,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 83,
            column: 11,
            span: 1846..1852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 83,
            column: 18,
            span: 1853..1859,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 19,
            span: 1859..1860,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.1f\"",
        ),
        position: Position {
            line: 83,
            column: 25,
            span: 1860..1866,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 26,
            span: 1866..1867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 83,
            column: 28,
            span: 1868..1869,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 29,
            span: 1869..1870,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 84,
            column: 0,
            span: 1904..1907,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 85,
            column: 5,
            span: 1910..1912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 85,
            column: 7,
            span: 1913..1914,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 85,
            column: 9,
            span: 1915..1916,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 14,
            span: 1916..1921,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 85,
            column: 19,
            span: 1922..1926,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 85,
            column: 26,
            span: 1927..1933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 85,
            column: 0,
            span: 1934..1935,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 86,
            column: 0,
            span: 1938..1942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 87,
            column: 6,
            span: 1947..1948,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 87,
            column: 8,
            span: 1949..1950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 87,
            column: 10,
            span: 1951..1952,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 87,
            column: 12,
            span: 1953..1954,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 0,
            span: 1954..1959,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 88,
            column: 7,
            span: 1964..1966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 88,
            column: 9,
            span: 1967..1968,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 88,
            column: 11,
            span: 1969..1970,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 16,
            span: 1970..1975,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 88,
            column: 21,
            span: 1976..1980,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 88,
            column: 28,
            span: 1981..1987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "round",
        ),
        position: Position {
            line: 88,
            column: 34,
            span: 1988..1993,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 35,
            span: 1993..1994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 88,
            column: 36,
            span: 1994..1995,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 37,
            span: 1995..1996,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 88,
            column: 39,
            span: 1996..1998,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"K\"",
        ),
        position: Position {
            line: 88,
            column: 42,
            span: 1998..2001,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 89,
            column: 0,
            span: 2006..2010,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 90,
            column: 13,
            span: 2017..2023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "round",
        ),
        position: Position {
            line: 90,
            column: 19,
            span: 2024..2029,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 20,
            span: 2029..2030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 90,
            column: 21,
            span: 2030..2031,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 90,
            column: 22,
            span: 2031..2032,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 90,
            column: 26,
            span: 2031..2036,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 27,
            span: 2036..2037,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 90,
            column: 29,
            span: 2037..2039,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"M\"",
        ),
        position: Position {
            line: 90,
            column: 32,
            span: 2039..2042,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 91,
            column: 0,
            span: 2047..2050,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 92,
            column: 0,
            span: 2053..2056,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 93,
            column: 0,
            span: 2057..2060,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 95,
            column: 6,
            span: 2062..2067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 95,
            column: 0,
            span: 2068..2075,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 96,
            column: 3,
            span: 2076..2078,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 96,
            column: 7,
            span: 2079..2082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 96,
            column: 9,
            span: 2083..2084,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 96,
            column: 0,
            span: 2085..2089,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 97,
            column: 8,
            span: 2092..2097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 97,
            column: 12,
            span: 2098..2101,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 97,
            column: 14,
            span: 2102..2103,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 0,
            span: 2103..2105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 98,
            column: 10,
            span: 2108..2115,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 98,
            column: 12,
            span: 2116..2117,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 98,
            column: 21,
            span: 2118..2126,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 23,
            span: 2127..2128,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 24,
            span: 2128..2129,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 99,
            column: 10,
            span: 2134..2139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 99,
            column: 12,
            span: 2140..2141,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 99,
            column: 14,
            span: 2142..2143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 99,
            column: 29,
            span: 2144..2158,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 30,
            span: 2158..2159,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 99,
            column: 37,
            span: 2159..2166,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 38,
            span: 2166..2167,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 99,
            column: 40,
            span: 2168..2169,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1024",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 99,
            column: 0,
            span: 2169..2174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 100,
            column: 8,
            span: 2179..2182,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 100,
            column: 10,
            span: 2183..2184,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 12,
            span: 2185..2186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 100,
            column: 13,
            span: 2186..2187,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 100,
            column: 15,
            span: 2188..2189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 100,
            column: 19,
            span: 2190..2193,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 20,
            span: 2193..2194,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 100,
            column: 24,
            span: 2195..2198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 100,
            column: 26,
            span: 2199..2200,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 100,
            column: 29,
            span: 2201..2203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 100,
            column: 0,
            span: 2204..2207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 101,
            column: 10,
            span: 2212..2217,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 11,
            span: 2217..2218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 101,
            column: 17,
            span: 2218..2224,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 18,
            span: 2224..2225,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"    ---- total memory: %s, max memory: %s ----\\n\"",
        ),
        position: Position {
            line: 101,
            column: 68,
            span: 2225..2275,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 101,
            column: 69,
            span: 2275..2276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 102,
            column: 12,
            span: 2287..2288,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 13,
            span: 2288..2289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 102,
            column: 14,
            span: 2289..2290,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 15,
            span: 2290..2291,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 16,
            span: 2291..2292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 102,
            column: 18,
            span: 2293..2294,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 19,
            span: 2294..2295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        position: Position {
            line: 102,
            column: 22,
            span: 2295..2298,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 23,
            span: 2298..2299,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 24,
            span: 2299..2300,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 25,
            span: 2300..2301,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 103,
            column: 0,
            span: 2304..2307,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 104,
            column: 0,
            span: 2308..2312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 105,
            column: 10,
            span: 2315..2322,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 105,
            column: 12,
            span: 2323..2324,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 105,
            column: 21,
            span: 2325..2333,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 105,
            column: 23,
            span: 2334..2335,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 105,
            column: 24,
            span: 2335..2336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 106,
            column: 6,
            span: 2341..2342,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 106,
            column: 7,
            span: 2342..2343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmemory",
        ),
        position: Position {
            line: 106,
            column: 18,
            span: 2343..2354,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 19,
            span: 2354..2355,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 20,
            span: 2355..2356,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 107,
            column: 10,
            span: 2361..2366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        position: Position {
            line: 107,
            column: 16,
            span: 2367..2372,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 17,
            span: 2372..2373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numblocks",
        ),
        position: Position {
            line: 107,
            column: 27,
            span: 2374..2383,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 28,
            span: 2383..2384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxmem",
        ),
        position: Position {
            line: 107,
            column: 35,
            span: 2385..2391,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 107,
            column: 37,
            span: 2392..2393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 107,
            column: 39,
            span: 2394..2395,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 107,
            column: 40,
            span: 2395..2396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 107,
            column: 48,
            span: 2396..2404,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 107,
            column: 49,
            span: 2404..2405,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 50,
            span: 2405..2406,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 108,
            column: 10,
            span: 2411..2416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 108,
            column: 16,
            span: 2417..2422,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 108,
            column: 18,
            span: 2423..2424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 108,
            column: 33,
            span: 2425..2439,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 34,
            span: 2439..2440,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 108,
            column: 41,
            span: 2440..2447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 42,
            span: 2447..2448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 109,
            column: 10,
            span: 2453..2458,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 11,
            span: 2458..2459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 109,
            column: 17,
            span: 2459..2465,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 18,
            span: 2465..2466,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n    ---- total memory: %s (%.0fK), max use: %s,  blocks: %d\\n\"",
        ),
        position: Position {
            line: 110,
            column: 72,
            span: 2473..2538,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 73,
            span: 2538..2539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 111,
            column: 8,
            span: 2546..2547,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 9,
            span: 2547..2548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "total",
        ),
        position: Position {
            line: 111,
            column: 14,
            span: 2548..2553,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 15,
            span: 2553..2554,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 16,
            span: 2554..2555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 111,
            column: 22,
            span: 2556..2561,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 23,
            span: 2561..2562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 111,
            column: 25,
            span: 2563..2564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 26,
            span: 2564..2565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxmem",
        ),
        position: Position {
            line: 111,
            column: 32,
            span: 2565..2571,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 33,
            span: 2571..2572,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 34,
            span: 2572..2573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "numblocks",
        ),
        position: Position {
            line: 111,
            column: 44,
            span: 2574..2583,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 45,
            span: 2583..2584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 46,
            span: 2584..2585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 112,
            column: 10,
            span: 2590..2595,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 11,
            span: 2595..2596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 112,
            column: 17,
            span: 2596..2602,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 18,
            span: 2602..2603,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\t(strings:  %d, tables: %d, functions: %d, \"",
        ),
        position: Position {
            line: 112,
            column: 64,
            span: 2603..2649,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 112,
            column: 66,
            span: 2649..2651,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\tudata: %d, threads: %d)\"",
        ),
        position: Position {
            line: 113,
            column: 47,
            span: 2669..2698,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 48,
            span: 2698..2699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 114,
            column: 19,
            span: 2717..2718,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 114,
            column: 20,
            span: 2718..2719,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 114,
            column: 28,
            span: 2719..2727,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 114,
            column: 36,
            span: 2727..2735,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 37,
            span: 2735..2736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 114,
            column: 39,
            span: 2737..2738,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 114,
            column: 40,
            span: 2738..2739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 114,
            column: 48,
            span: 2739..2747,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        position: Position {
            line: 114,
            column: 55,
            span: 2747..2754,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 56,
            span: 2754..2755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 114,
            column: 58,
            span: 2756..2757,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 114,
            column: 59,
            span: 2757..2758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 114,
            column: 67,
            span: 2758..2766,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        position: Position {
            line: 114,
            column: 77,
            span: 2766..2776,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 78,
            span: 2776..2777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 115,
            column: 19,
            span: 2795..2796,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 115,
            column: 20,
            span: 2796..2797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 115,
            column: 28,
            span: 2797..2805,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        position: Position {
            line: 115,
            column: 38,
            span: 2805..2815,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 115,
            column: 39,
            span: 2815..2816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 115,
            column: 41,
            span: 2817..2818,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 115,
            column: 42,
            span: 2818..2819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 115,
            column: 50,
            span: 2819..2827,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        position: Position {
            line: 115,
            column: 58,
            span: 2827..2835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 115,
            column: 59,
            span: 2835..2836,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 115,
            column: 60,
            span: 2836..2837,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 116,
            column: 0,
            span: 2840..2843,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 117,
            column: 0,
            span: 2844..2847,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 123,
            column: 6,
            span: 2908..2913,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 123,
            column: 15,
            span: 2914..2922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        position: Position {
            line: 123,
            column: 22,
            span: 2923..2929,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 24,
            span: 2930..2931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 123,
            column: 25,
            span: 2931..2932,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 123,
            column: 26,
            span: 2932..2933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 123,
            column: 32,
            span: 2934..2939,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 33,
            span: 2939..2940,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n***** FILE '\"",
        ),
        position: Position {
            line: 123,
            column: 49,
            span: 2940..2956,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 123,
            column: 51,
            span: 2956..2958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 123,
            column: 52,
            span: 2958..2959,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 123,
            column: 54,
            span: 2959..2961,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'*****\"",
        ),
        position: Position {
            line: 123,
            column: 62,
            span: 2961..2969,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 123,
            column: 63,
            span: 2969..2970,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 123,
            column: 0,
            span: 2971..2974,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 124,
            column: 6,
            span: 2975..2980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "olddofile",
        ),
        position: Position {
            line: 124,
            column: 16,
            span: 2981..2990,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 124,
            column: 18,
            span: 2991..2992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 124,
            column: 0,
            span: 2993..2999,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 125,
            column: 6,
            span: 3000..3005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 125,
            column: 13,
            span: 3006..3012,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 125,
            column: 15,
            span: 3013..3014,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 125,
            column: 24,
            span: 3015..3023,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 26,
            span: 3024..3025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 125,
            column: 27,
            span: 3025..3026,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 28,
            span: 3026..3027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strip",
        ),
        position: Position {
            line: 125,
            column: 34,
            span: 3028..3033,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 35,
            span: 3033..3034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 126,
            column: 10,
            span: 3037..3044,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 11,
            span: 3044..3045,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 12,
            span: 3045..3046,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 127,
            column: 8,
            span: 3049..3054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 127,
            column: 10,
            span: 3055..3056,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 127,
            column: 12,
            span: 3057..3058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 127,
            column: 15,
            span: 3059..3061,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 127,
            column: 16,
            span: 3061..3062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 127,
            column: 21,
            span: 3062..3067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 22,
            span: 3067..3068,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 23,
            span: 3068..3069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 128,
            column: 8,
            span: 3072..3077,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 9,
            span: 3077..3078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 128,
            column: 15,
            span: 3078..3084,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 128,
            column: 16,
            span: 3084..3085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 128,
            column: 22,
            span: 3085..3091,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 23,
            span: 3091..3092,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"time: %g (+%g)\"",
        ),
        position: Position {
            line: 128,
            column: 39,
            span: 3092..3108,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 40,
            span: 3108..3109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 128,
            column: 42,
            span: 3110..3111,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 128,
            column: 44,
            span: 3112..3113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "initclock",
        ),
        position: Position {
            line: 128,
            column: 54,
            span: 3114..3123,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 55,
            span: 3123..3124,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 128,
            column: 57,
            span: 3125..3126,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 128,
            column: 59,
            span: 3127..3128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastclock",
        ),
        position: Position {
            line: 128,
            column: 69,
            span: 3129..3138,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 70,
            span: 3138..3139,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 71,
            span: 3139..3140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastclock",
        ),
        position: Position {
            line: 129,
            column: 12,
            span: 3143..3152,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 129,
            column: 14,
            span: 3153..3154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 129,
            column: 0,
            span: 3155..3156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        position: Position {
            line: 130,
            column: 9,
            span: 3159..3165,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 10,
            span: 3165..3166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 130,
            column: 11,
            span: 3166..3167,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 12,
            span: 3167..3168,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 131,
            column: 8,
            span: 3171..3176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 131,
            column: 10,
            span: 3177..3178,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 131,
            column: 12,
            span: 3179..3180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 131,
            column: 19,
            span: 3181..3187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 20,
            span: 3187..3188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 131,
            column: 28,
            span: 3188..3196,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 29,
            span: 3196..3197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 131,
            column: 30,
            span: 3197..3198,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 31,
            span: 3198..3199,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 32,
            span: 3199..3200,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 132,
            column: 8,
            span: 3203..3208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 132,
            column: 10,
            span: 3209..3210,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 132,
            column: 12,
            span: 3211..3212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 132,
            column: 19,
            span: 3213..3219,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 132,
            column: 20,
            span: 3219..3220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 132,
            column: 24,
            span: 3220..3224,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 132,
            column: 25,
            span: 3224..3225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 132,
            column: 26,
            span: 3225..3226,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 132,
            column: 27,
            span: 3226..3227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strip",
        ),
        position: Position {
            line: 132,
            column: 33,
            span: 3228..3233,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 132,
            column: 34,
            span: 3233..3234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 133,
            column: 4,
            span: 3237..3238,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 133,
            column: 6,
            span: 3239..3240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 133,
            column: 13,
            span: 3241..3247,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 14,
            span: 3247..3248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 133,
            column: 18,
            span: 3248..3252,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 19,
            span: 3252..3253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 133,
            column: 20,
            span: 3253..3254,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 21,
            span: 3254..3255,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 22,
            span: 3255..3256,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 134,
            column: 9,
            span: 3259..3265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 134,
            column: 11,
            span: 3266..3267,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 12,
            span: 3267..3268,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 13,
            span: 3268..3269,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 135,
            column: 0,
            span: 3270..3273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 137,
            column: 7,
            span: 3275..3281,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 8,
            span: 3281..3282,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'main.lua'",
        ),
        position: Position {
            line: 137,
            column: 18,
            span: 3282..3292,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 19,
            span: 3292..3293,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 139,
            column: 0,
            span: 3295..3297,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 140,
            column: 8,
            span: 3300..3305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 140,
            column: 13,
            span: 3306..3310,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 14,
            span: 3310..3311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 140,
            column: 27,
            span: 3312..3324,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 28,
            span: 3324..3325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        position: Position {
            line: 140,
            column: 35,
            span: 3326..3332,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 140,
            column: 37,
            span: 3333..3334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 140,
            column: 42,
            span: 3335..3339,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 43,
            span: 3339..3340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 140,
            column: 56,
            span: 3341..3353,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 57,
            span: 3353..3354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 140,
            column: 60,
            span: 3355..3357,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 140,
            column: 61,
            span: 3357..3358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        position: Position {
            line: 140,
            column: 0,
            span: 3358..3364,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 142,
            column: 8,
            span: 3390..3395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 142,
            column: 11,
            span: 3396..3398,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 142,
            column: 13,
            span: 3399..3400,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 142,
            column: 15,
            span: 3401..3402,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 142,
            column: 16,
            span: 3402..3403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 145,
            column: 5,
            span: 3489..3491,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 145,
            column: 6,
            span: 3491..3492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 145,
            column: 10,
            span: 3492..3496,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 145,
            column: 12,
            span: 3497..3498,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 145,
            column: 21,
            span: 3499..3507,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 23,
            span: 3508..3509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        position: Position {
            line: 145,
            column: 24,
            span: 3509..3510,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 25,
            span: 3510..3511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        position: Position {
            line: 146,
            column: 12,
            span: 3517..3523,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 146,
            column: 13,
            span: 3523..3524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 146,
            column: 18,
            span: 3524..3529,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        position: Position {
            line: 146,
            column: 21,
            span: 3529..3532,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 147,
            column: 11,
            span: 3558..3563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 147,
            column: 13,
            span: 3564..3565,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 147,
            column: 15,
            span: 3566..3567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 147,
            column: 28,
            span: 3568..3580,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 29,
            span: 3580..3581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        position: Position {
            line: 147,
            column: 30,
            span: 3581..3582,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 31,
            span: 3582..3583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 147,
            column: 34,
            span: 3584..3586,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 35,
            span: 3586..3587,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 148,
            column: 0,
            span: 3606..3609,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 149,
            column: 9,
            span: 3613..3618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 149,
            column: 11,
            span: 3619..3620,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 149,
            column: 13,
            span: 3621..3622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 149,
            column: 26,
            span: 3623..3635,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 27,
            span: 3635..3636,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 149,
            column: 28,
            span: 3636..3637,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 149,
            column: 29,
            span: 3637..3638,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 30,
            span: 3638..3639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 149,
            column: 33,
            span: 3640..3642,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 34,
            span: 3642..3643,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 150,
            column: 0,
            span: 3664..3667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        position: Position {
            line: 152,
            column: 7,
            span: 3669..3675,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gc.lua\"",
        ),
        position: Position {
            line: 152,
            column: 15,
            span: 3675..3683,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 153,
            column: 6,
            span: 3684..3689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 153,
            column: 8,
            span: 3690..3691,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 153,
            column: 10,
            span: 3692..3693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 153,
            column: 17,
            span: 3694..3700,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 18,
            span: 3700..3701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 153,
            column: 26,
            span: 3701..3709,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 27,
            span: 3709..3710,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'gc.lua'",
        ),
        position: Position {
            line: 153,
            column: 35,
            span: 3710..3718,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 36,
            span: 3718..3719,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 37,
            span: 3719..3720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 154,
            column: 2,
            span: 3721..3722,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 3,
            span: 3722..3723,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 4,
            span: 3723..3724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 156,
            column: 7,
            span: 3726..3732,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 8,
            span: 3732..3733,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'db.lua'",
        ),
        position: Position {
            line: 156,
            column: 16,
            span: 3733..3741,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 17,
            span: 3741..3742,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 157,
            column: 7,
            span: 3743..3749,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 157,
            column: 8,
            span: 3749..3750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 157,
            column: 14,
            span: 3750..3756,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 157,
            column: 15,
            span: 3756..3757,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'calls.lua'",
        ),
        position: Position {
            line: 157,
            column: 26,
            span: 3757..3768,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 27,
            span: 3768..3769,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 157,
            column: 30,
            span: 3770..3772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        position: Position {
            line: 157,
            column: 35,
            span: 3773..3777,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 157,
            column: 39,
            span: 3778..3781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deep",
        ),
        position: Position {
            line: 157,
            column: 44,
            span: 3782..3786,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 45,
            span: 3786..3787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "olddofile",
        ),
        position: Position {
            line: 158,
            column: 10,
            span: 3788..3797,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 158,
            column: 11,
            span: 3797..3798,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'strings.lua'",
        ),
        position: Position {
            line: 158,
            column: 24,
            span: 3798..3811,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 158,
            column: 25,
            span: 3811..3812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "olddofile",
        ),
        position: Position {
            line: 159,
            column: 10,
            span: 3813..3822,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 159,
            column: 11,
            span: 3822..3823,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'literals.lua'",
        ),
        position: Position {
            line: 159,
            column: 25,
            span: 3823..3837,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 159,
            column: 26,
            span: 3837..3838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 160,
            column: 7,
            span: 3839..3845,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 8,
            span: 3845..3846,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'tpack.lua'",
        ),
        position: Position {
            line: 160,
            column: 19,
            span: 3846..3857,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 20,
            span: 3857..3858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 161,
            column: 7,
            span: 3859..3865,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 8,
            span: 3865..3866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 161,
            column: 14,
            span: 3866..3872,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 15,
            span: 3872..3873,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'attrib.lua'",
        ),
        position: Position {
            line: 161,
            column: 27,
            span: 3873..3885,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 28,
            span: 3885..3886,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 161,
            column: 31,
            span: 3887..3889,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "27",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 161,
            column: 34,
            span: 3889..3892,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 35,
            span: 3892..3893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 163,
            column: 7,
            span: 3895..3901,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 8,
            span: 3901..3902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 163,
            column: 14,
            span: 3902..3908,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 15,
            span: 3908..3909,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'locals.lua'",
        ),
        position: Position {
            line: 163,
            column: 27,
            span: 3909..3921,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 28,
            span: 3921..3922,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 163,
            column: 31,
            span: 3923..3925,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 163,
            column: 33,
            span: 3925..3927,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 34,
            span: 3927..3928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 164,
            column: 7,
            span: 3929..3935,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 164,
            column: 8,
            span: 3935..3936,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'constructs.lua'",
        ),
        position: Position {
            line: 164,
            column: 24,
            span: 3936..3952,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 164,
            column: 25,
            span: 3952..3953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 165,
            column: 7,
            span: 3954..3960,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 8,
            span: 3960..3961,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'code.lua'",
        ),
        position: Position {
            line: 165,
            column: 18,
            span: 3961..3971,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 165,
            column: 19,
            span: 3971..3972,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 165,
            column: 24,
            span: 3973..3977,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 25,
            span: 3977..3978,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 166,
            column: 3,
            span: 3979..3981,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 166,
            column: 7,
            span: 3982..3985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 166,
            column: 10,
            span: 3986..3988,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 166,
            column: 11,
            span: 3988..3989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 166,
            column: 16,
            span: 3989..3994,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 166,
            column: 0,
            span: 3995..3999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "report",
        ),
        position: Position {
            line: 167,
            column: 9,
            span: 4002..4008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 10,
            span: 4008..4009,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'big.lua'",
        ),
        position: Position {
            line: 167,
            column: 19,
            span: 4009..4018,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 20,
            span: 4018..4019,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 168,
            column: 8,
            span: 4022..4027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 168,
            column: 10,
            span: 4028..4029,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 168,
            column: 12,
            span: 4030..4031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 168,
            column: 22,
            span: 4032..4041,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 168,
            column: 23,
            span: 4041..4042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 168,
            column: 27,
            span: 4042..4046,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 28,
            span: 4046..4047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 168,
            column: 34,
            span: 4047..4053,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 35,
            span: 4053..4054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 168,
            column: 43,
            span: 4054..4062,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 44,
            span: 4062..4063,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'big.lua'",
        ),
        position: Position {
            line: 168,
            column: 53,
            span: 4063..4072,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 54,
            span: 4072..4073,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 55,
            span: 4073..4074,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 56,
            span: 4074..4075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 169,
            column: 9,
            span: 4078..4084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 169,
            column: 10,
            span: 4084..4085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 169,
            column: 11,
            span: 4085..4086,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 169,
            column: 12,
            span: 4086..4087,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 169,
            column: 13,
            span: 4087..4088,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 169,
            column: 16,
            span: 4089..4091,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 169,
            column: 20,
            span: 4092..4095,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 169,
            column: 21,
            span: 4095..4096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 170,
            column: 9,
            span: 4099..4105,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 10,
            span: 4105..4106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 170,
            column: 11,
            span: 4106..4107,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 12,
            span: 4107..4108,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 13,
            span: 4108..4109,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 170,
            column: 16,
            span: 4110..4112,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 170,
            column: 20,
            span: 4113..4116,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 21,
            span: 4116..4117,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 171,
            column: 0,
            span: 4118..4121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 172,
            column: 7,
            span: 4122..4128,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 8,
            span: 4128..4129,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nextvar.lua'",
        ),
        position: Position {
            line: 172,
            column: 21,
            span: 4129..4142,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 22,
            span: 4142..4143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 173,
            column: 7,
            span: 4144..4150,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 8,
            span: 4150..4151,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'pm.lua'",
        ),
        position: Position {
            line: 173,
            column: 16,
            span: 4151..4159,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 17,
            span: 4159..4160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 174,
            column: 7,
            span: 4161..4167,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 174,
            column: 8,
            span: 4167..4168,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'utf8.lua'",
        ),
        position: Position {
            line: 174,
            column: 18,
            span: 4168..4178,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 174,
            column: 19,
            span: 4178..4179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 175,
            column: 7,
            span: 4180..4186,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 8,
            span: 4186..4187,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'api.lua'",
        ),
        position: Position {
            line: 175,
            column: 17,
            span: 4187..4196,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 18,
            span: 4196..4197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 176,
            column: 7,
            span: 4198..4204,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 8,
            span: 4204..4205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 176,
            column: 14,
            span: 4205..4211,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 15,
            span: 4211..4212,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'events.lua'",
        ),
        position: Position {
            line: 176,
            column: 27,
            span: 4212..4224,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 28,
            span: 4224..4225,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 176,
            column: 31,
            span: 4226..4228,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 176,
            column: 34,
            span: 4228..4231,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 35,
            span: 4231..4232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 177,
            column: 7,
            span: 4233..4239,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 177,
            column: 8,
            span: 4239..4240,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'vararg.lua'",
        ),
        position: Position {
            line: 177,
            column: 20,
            span: 4240..4252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 177,
            column: 21,
            span: 4252..4253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 178,
            column: 7,
            span: 4254..4260,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 178,
            column: 8,
            span: 4260..4261,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'closure.lua'",
        ),
        position: Position {
            line: 178,
            column: 21,
            span: 4261..4274,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 178,
            column: 22,
            span: 4274..4275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 179,
            column: 7,
            span: 4276..4282,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 8,
            span: 4282..4283,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'coroutine.lua'",
        ),
        position: Position {
            line: 179,
            column: 23,
            span: 4283..4298,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 24,
            span: 4298..4299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 180,
            column: 7,
            span: 4300..4306,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 8,
            span: 4306..4307,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'goto.lua'",
        ),
        position: Position {
            line: 180,
            column: 18,
            span: 4307..4317,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 180,
            column: 19,
            span: 4317..4318,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 180,
            column: 24,
            span: 4319..4323,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 25,
            span: 4323..4324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 181,
            column: 7,
            span: 4325..4331,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 8,
            span: 4331..4332,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'errors.lua'",
        ),
        position: Position {
            line: 181,
            column: 20,
            span: 4332..4344,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 21,
            span: 4344..4345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 182,
            column: 7,
            span: 4346..4352,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 8,
            span: 4352..4353,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'math.lua'",
        ),
        position: Position {
            line: 182,
            column: 18,
            span: 4353..4363,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 19,
            span: 4363..4364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 183,
            column: 7,
            span: 4365..4371,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 8,
            span: 4371..4372,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'sort.lua'",
        ),
        position: Position {
            line: 183,
            column: 18,
            span: 4372..4382,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 183,
            column: 19,
            span: 4382..4383,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 183,
            column: 24,
            span: 4384..4388,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 25,
            span: 4388..4389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 184,
            column: 7,
            span: 4390..4396,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 8,
            span: 4396..4397,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'bitwise.lua'",
        ),
        position: Position {
            line: 184,
            column: 21,
            span: 4397..4410,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 22,
            span: 4410..4411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 185,
            column: 7,
            span: 4412..4418,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 8,
            span: 4418..4419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 185,
            column: 14,
            span: 4419..4425,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 15,
            span: 4425..4426,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'verybig.lua'",
        ),
        position: Position {
            line: 185,
            column: 28,
            span: 4426..4439,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 185,
            column: 29,
            span: 4439..4440,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 185,
            column: 34,
            span: 4441..4445,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 35,
            span: 4445..4446,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 185,
            column: 38,
            span: 4447..4449,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 185,
            column: 41,
            span: 4449..4452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 42,
            span: 4452..4453,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 185,
            column: 43,
            span: 4453..4454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 185,
            column: 58,
            span: 4455..4469,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 59,
            span: 4469..4470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 60,
            span: 4470..4471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dofile",
        ),
        position: Position {
            line: 186,
            column: 7,
            span: 4472..4478,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 8,
            span: 4478..4479,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'files.lua'",
        ),
        position: Position {
            line: 186,
            column: 19,
            span: 4479..4490,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 20,
            span: 4490..4491,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 188,
            column: 3,
            span: 4493..4495,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 188,
            column: 5,
            span: 4496..4497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        position: Position {
            line: 188,
            column: 9,
            span: 4497..4501,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 188,
            column: 11,
            span: 4502..4503,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 188,
            column: 13,
            span: 4503..4505,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 188,
            column: 0,
            span: 4506..4510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 189,
            column: 8,
            span: 4513..4518,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 9,
            span: 4518..4519,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\ntests not performed:\"",
        ),
        position: Position {
            line: 189,
            column: 33,
            span: 4519..4543,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 34,
            span: 4543..4544,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 190,
            column: 6,
            span: 4547..4550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 190,
            column: 8,
            span: 4551..4552,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 190,
            column: 9,
            span: 4552..4553,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 190,
            column: 10,
            span: 4552..4554,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 190,
            column: 11,
            span: 4554..4555,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 190,
            column: 12,
            span: 4555..4556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        position: Position {
            line: 190,
            column: 16,
            span: 4556..4560,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 190,
            column: 0,
            span: 4561..4563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 191,
            column: 10,
            span: 4568..4573,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 11,
            span: 4573..4574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msgs",
        ),
        position: Position {
            line: 191,
            column: 15,
            span: 4574..4578,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 191,
            column: 16,
            span: 4578..4579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 191,
            column: 17,
            span: 4579..4580,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 191,
            column: 18,
            span: 4580..4581,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 19,
            span: 4581..4582,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 192,
            column: 0,
            span: 4585..4588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 193,
            column: 8,
            span: 4591..4596,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 9,
            span: 4596..4597,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 10,
            span: 4597..4598,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 194,
            column: 0,
            span: 4599..4602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 197,
            column: 7,
            span: 4644..4650,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 8,
            span: 4650..4651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 197,
            column: 13,
            span: 4651..4656,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 197,
            column: 16,
            span: 4657..4659,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 197,
            column: 20,
            span: 4660..4663,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 21,
            span: 4663..4664,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 199,
            column: 6,
            span: 4666..4671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 199,
            column: 12,
            span: 4672..4677,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 199,
            column: 14,
            span: 4678..4679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 199,
            column: 22,
            span: 4680..4687,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        position: Position {
            line: 199,
            column: 30,
            span: 4688..4695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 201,
            column: 6,
            span: 4697..4702,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 7,
            span: 4702..4703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 201,
            column: 13,
            span: 4703..4709,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 201,
            column: 14,
            span: 4709..4710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 201,
            column: 20,
            span: 4710..4716,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 21,
            span: 4716..4717,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d-bit integers, %d-bit floats\"",
        ),
        position: Position {
            line: 201,
            column: 53,
            span: 4717..4749,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 201,
            column: 54,
            span: 4749..4750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 202,
            column: 15,
            span: 4759..4765,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 202,
            column: 16,
            span: 4765..4766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 202,
            column: 24,
            span: 4766..4774,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 202,
            column: 25,
            span: 4774..4775,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"j\"",
        ),
        position: Position {
            line: 202,
            column: 28,
            span: 4775..4778,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 29,
            span: 4778..4779,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 202,
            column: 31,
            span: 4780..4781,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 202,
            column: 33,
            span: 4781..4783,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 202,
            column: 34,
            span: 4783..4784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 202,
            column: 41,
            span: 4785..4791,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 202,
            column: 42,
            span: 4791..4792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "packsize",
        ),
        position: Position {
            line: 202,
            column: 50,
            span: 4792..4800,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 202,
            column: 51,
            span: 4800..4801,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 202,
            column: 54,
            span: 4801..4804,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 55,
            span: 4804..4805,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 202,
            column: 57,
            span: 4806..4807,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 202,
            column: 59,
            span: 4807..4809,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 60,
            span: 4809..4810,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 61,
            span: 4810..4811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 204,
            column: 6,
            span: 4813..4818,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 204,
            column: 7,
            span: 4818..4819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 204,
            column: 14,
            span: 4819..4826,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 204,
            column: 15,
            span: 4826..4827,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 204,
            column: 23,
            span: 4827..4835,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 204,
            column: 25,
            span: 4836..4837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 204,
            column: 26,
            span: 4837..4838,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 204,
            column: 27,
            span: 4838..4839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 204,
            column: 34,
            span: 4840..4846,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 204,
            column: 35,
            span: 4846..4847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 204,
            column: 39,
            span: 4847..4851,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 204,
            column: 40,
            span: 4851..4852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 204,
            column: 41,
            span: 4852..4853,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 204,
            column: 42,
            span: 4853..4854,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 204,
            column: 45,
            span: 4855..4857,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        position: Position {
            line: 204,
            column: 54,
            span: 4858..4866,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 204,
            column: 55,
            span: 4866..4867,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 204,
            column: 59,
            span: 4868..4871,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 60,
            span: 4871..4872,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cr\"",
        ),
        position: Position {
            line: 204,
            column: 65,
            span: 4873..4877,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 204,
            column: 66,
            span: 4877..4878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 207,
            column: 3,
            span: 4908..4910,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 207,
            column: 4,
            span: 4910..4911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 207,
            column: 11,
            span: 4911..4918,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 207,
            column: 13,
            span: 4919..4920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 207,
            column: 0,
            span: 4921..4928,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 209,
            column: 4,
            span: 4930..4933,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 211,
            column: 6,
            span: 4941..4946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 211,
            column: 9,
            span: 4947..4949,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 10,
            span: 4949..4950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 211,
            column: 18,
            span: 4951..4958,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 19,
            span: 4958..4959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 211,
            column: 25,
            span: 4960..4965,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 26,
            span: 4965..4966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 211,
            column: 33,
            span: 4967..4973,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 34,
            span: 4973..4974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 211,
            column: 40,
            span: 4975..4980,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 41,
            span: 4980..4981,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 211,
            column: 46,
            span: 4982..4986,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 47,
            span: 4986..4987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        position: Position {
            line: 211,
            column: 56,
            span: 4988..4996,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 57,
            span: 4996..4997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 211,
            column: 64,
            span: 4998..5004,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 65,
            span: 5004..5005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 211,
            column: 70,
            span: 5006..5010,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 211,
            column: 72,
            span: 5011..5012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 212,
            column: 9,
            span: 5019..5021,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 10,
            span: 5021..5022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 212,
            column: 18,
            span: 5023..5030,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 19,
            span: 5030..5031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 212,
            column: 25,
            span: 5032..5037,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 26,
            span: 5037..5038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 212,
            column: 33,
            span: 5039..5045,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 212,
            column: 34,
            span: 5045..5046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 212,
            column: 40,
            span: 5046..5052,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 41,
            span: 5052..5053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 212,
            column: 44,
            span: 5054..5056,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 212,
            column: 45,
            span: 5056..5057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 212,
            column: 50,
            span: 5057..5062,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 51,
            span: 5062..5063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 212,
            column: 54,
            span: 5064..5066,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 212,
            column: 55,
            span: 5066..5067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 212,
            column: 59,
            span: 5067..5071,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 60,
            span: 5071..5072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 212,
            column: 63,
            span: 5073..5075,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 212,
            column: 64,
            span: 5075..5076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        position: Position {
            line: 212,
            column: 72,
            span: 5076..5084,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 73,
            span: 5084..5085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 213,
            column: 13,
            span: 5092..5098,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 14,
            span: 5098..5099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 213,
            column: 17,
            span: 5100..5102,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 213,
            column: 18,
            span: 5102..5103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 213,
            column: 0,
            span: 5103..5107,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 216,
            column: 6,
            span: 5150..5155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        position: Position {
            line: 216,
            column: 12,
            span: 5156..5161,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 216,
            column: 14,
            span: 5162..5163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 216,
            column: 16,
            span: 5164..5165,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 216,
            column: 20,
            span: 5166..5169,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"time-debug.txt\"",
        ),
        position: Position {
            line: 216,
            column: 37,
            span: 5170..5186,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 216,
            column: 40,
            span: 5187..5189,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"time.txt\"",
        ),
        position: Position {
            line: 216,
            column: 51,
            span: 5190..5200,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 217,
            column: 6,
            span: 5201..5206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        position: Position {
            line: 217,
            column: 0,
            span: 5207..5215,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 219,
            column: 3,
            span: 5217..5219,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 219,
            column: 7,
            span: 5220..5223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        position: Position {
            line: 219,
            column: 17,
            span: 5224..5233,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 219,
            column: 0,
            span: 5234..5238,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 221,
            column: 8,
            span: 5289..5294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 221,
            column: 10,
            span: 5295..5296,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 221,
            column: 12,
            span: 5297..5298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 221,
            column: 15,
            span: 5299..5301,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 221,
            column: 16,
            span: 5301..5302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 221,
            column: 20,
            span: 5302..5306,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 21,
            span: 5306..5307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        position: Position {
            line: 221,
            column: 26,
            span: 5307..5312,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 27,
            span: 5312..5313,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 222,
            column: 5,
            span: 5316..5318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 222,
            column: 7,
            span: 5319..5320,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 222,
            column: 0,
            span: 5321..5325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        position: Position {
            line: 223,
            column: 13,
            span: 5330..5338,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 223,
            column: 15,
            span: 5339..5340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 223,
            column: 22,
            span: 5341..5347,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 23,
            span: 5347..5348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        position: Position {
            line: 223,
            column: 31,
            span: 5348..5356,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 32,
            span: 5356..5357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 223,
            column: 33,
            span: 5357..5358,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 223,
            column: 34,
            span: 5358..5359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 223,
            column: 38,
            span: 5359..5363,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 223,
            column: 41,
            span: 5363..5366,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 42,
            span: 5366..5367,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 43,
            span: 5367..5368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 224,
            column: 6,
            span: 5373..5374,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 224,
            column: 7,
            span: 5374..5375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 224,
            column: 12,
            span: 5375..5380,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 13,
            span: 5380..5381,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 14,
            span: 5381..5382,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 224,
            column: 15,
            span: 5382..5383,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 225,
            column: 7,
            span: 5386..5390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        position: Position {
            line: 226,
            column: 13,
            span: 5457..5465,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 226,
            column: 15,
            span: 5466..5467,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 226,
            column: 0,
            span: 5468..5471,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 227,
            column: 0,
            span: 5474..5477,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 228,
            column: 0,
            span: 5478..5481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 231,
            column: 6,
            span: 5513..5518,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 7,
            span: 5518..5519,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cleaning all!!!!'",
        ),
        position: Position {
            line: 231,
            column: 25,
            span: 5519..5537,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 231,
            column: 26,
            span: 5537..5538,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 232,
            column: 4,
            span: 5539..5542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 232,
            column: 6,
            span: 5543..5544,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 232,
            column: 9,
            span: 5545..5547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 232,
            column: 15,
            span: 5548..5553,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 16,
            span: 5553..5554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 232,
            column: 18,
            span: 5554..5556,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 19,
            span: 5556..5557,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 232,
            column: 0,
            span: 5558..5560,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 233,
            column: 5,
            span: 5563..5565,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 233,
            column: 9,
            span: 5566..5569,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 11,
            span: 5570..5571,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 233,
            column: 12,
            span: 5571..5572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "___Glob",
        ),
        position: Position {
            line: 233,
            column: 19,
            span: 5572..5579,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 233,
            column: 21,
            span: 5580..5581,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 233,
            column: 23,
            span: 5581..5583,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 24,
            span: 5583..5584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 233,
            column: 33,
            span: 5585..5593,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 233,
            column: 35,
            span: 5594..5595,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 233,
            column: 37,
            span: 5595..5597,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 233,
            column: 38,
            span: 5597..5598,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 39,
            span: 5598..5599,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 233,
            column: 40,
            span: 5599..5600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 233,
            column: 41,
            span: 5600..5601,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 233,
            column: 42,
            span: 5601..5602,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 233,
            column: 0,
            span: 5603..5607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 234,
            column: 7,
            span: 5612..5614,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 234,
            column: 8,
            span: 5614..5615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 234,
            column: 9,
            span: 5615..5616,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 234,
            column: 10,
            span: 5616..5617,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 234,
            column: 12,
            span: 5618..5619,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 234,
            column: 0,
            span: 5620..5623,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 235,
            column: 0,
            span: 5626..5629,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 236,
            column: 0,
            span: 5630..5633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 239,
            column: 15,
            span: 5636..5650,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 16,
            span: 5650..5651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 17,
            span: 5651..5652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 240,
            column: 15,
            span: 5653..5667,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 240,
            column: 16,
            span: 5667..5668,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 240,
            column: 17,
            span: 5668..5669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 241,
            column: 15,
            span: 5670..5684,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 241,
            column: 16,
            span: 5684..5685,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 241,
            column: 17,
            span: 5685..5686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 242,
            column: 15,
            span: 5687..5701,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 16,
            span: 5701..5702,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 17,
            span: 5702..5703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 243,
            column: 15,
            span: 5704..5718,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 16,
            span: 5718..5719,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 17,
            span: 5719..5720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 244,
            column: 15,
            span: 5721..5735,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 244,
            column: 16,
            span: 5735..5736,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 244,
            column: 17,
            span: 5736..5737,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 244,
            column: 18,
            span: 5737..5738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "showmem",
        ),
        position: Position {
            line: 244,
            column: 25,
            span: 5738..5745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 244,
            column: 26,
            span: 5745..5746,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 244,
            column: 27,
            span: 5746..5747,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 246,
            column: 6,
            span: 5749..5754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clocktime",
        ),
        position: Position {
            line: 246,
            column: 16,
            span: 5755..5764,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 246,
            column: 18,
            span: 5765..5766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 246,
            column: 24,
            span: 5767..5772,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 246,
            column: 25,
            span: 5772..5773,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 26,
            span: 5773..5774,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 246,
            column: 28,
            span: 5775..5776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "initclock",
        ),
        position: Position {
            line: 246,
            column: 0,
            span: 5777..5786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "walltime",
        ),
        position: Position {
            line: 247,
            column: 9,
            span: 5787..5795,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 247,
            column: 11,
            span: 5796..5797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        position: Position {
            line: 247,
            column: 20,
            span: 5798..5806,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 21,
            span: 5806..5807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        position: Position {
            line: 247,
            column: 25,
            span: 5807..5811,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 26,
            span: 5811..5812,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 27,
            span: 5812..5813,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 28,
            span: 5813..5814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "walltime",
        ),
        position: Position {
            line: 247,
            column: 37,
            span: 5815..5823,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 38,
            span: 5823..5824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 249,
            column: 6,
            span: 5826..5831,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 7,
            span: 5831..5832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 249,
            column: 13,
            span: 5832..5838,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 14,
            span: 5838..5839,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\ntotal time: %.2fs (wall time: %gs)\\n\"",
        ),
        position: Position {
            line: 249,
            column: 56,
            span: 5839..5881,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 57,
            span: 5881..5882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clocktime",
        ),
        position: Position {
            line: 249,
            column: 67,
            span: 5883..5892,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 68,
            span: 5892..5893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "walltime",
        ),
        position: Position {
            line: 249,
            column: 77,
            span: 5894..5902,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 78,
            span: 5902..5903,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 79,
            span: 5903..5904,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 251,
            column: 3,
            span: 5906..5908,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 251,
            column: 7,
            span: 5909..5912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "usertests",
        ),
        position: Position {
            line: 251,
            column: 17,
            span: 5913..5922,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 251,
            column: 0,
            span: 5923..5927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        position: Position {
            line: 252,
            column: 11,
            span: 5930..5938,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 252,
            column: 13,
            span: 5939..5940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        position: Position {
            line: 252,
            column: 22,
            span: 5941..5949,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 252,
            column: 25,
            span: 5950..5952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clocktime",
        ),
        position: Position {
            line: 252,
            column: 35,
            span: 5953..5962,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 254,
            column: 8,
            span: 6079..6084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        position: Position {
            line: 254,
            column: 13,
            span: 6085..6089,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 254,
            column: 15,
            span: 6090..6091,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 17,
            span: 6092..6093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clocktime",
        ),
        position: Position {
            line: 254,
            column: 26,
            span: 6093..6102,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 254,
            column: 28,
            span: 6103..6104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        position: Position {
            line: 254,
            column: 37,
            span: 6105..6113,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 38,
            span: 6113..6114,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 254,
            column: 40,
            span: 6115..6116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lasttime",
        ),
        position: Position {
            line: 254,
            column: 0,
            span: 6117..6125,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 255,
            column: 8,
            span: 6128..6133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tolerance",
        ),
        position: Position {
            line: 255,
            column: 18,
            span: 6134..6143,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 255,
            column: 20,
            span: 6144..6145,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".05",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 25,
            span: 6145..6150,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 256,
            column: 5,
            span: 6162..6164,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 256,
            column: 7,
            span: 6165..6166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        position: Position {
            line: 256,
            column: 11,
            span: 6166..6170,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 256,
            column: 14,
            span: 6171..6173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tolerance",
        ),
        position: Position {
            line: 256,
            column: 24,
            span: 6174..6183,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 256,
            column: 27,
            span: 6184..6186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        position: Position {
            line: 256,
            column: 32,
            span: 6187..6191,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 256,
            column: 35,
            span: 6192..6194,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 256,
            column: 37,
            span: 6195..6196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tolerance",
        ),
        position: Position {
            line: 256,
            column: 46,
            span: 6196..6205,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 256,
            column: 47,
            span: 6205..6206,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 256,
            column: 0,
            span: 6207..6211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 257,
            column: 10,
            span: 6216..6221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 11,
            span: 6221..6222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 257,
            column: 17,
            span: 6222..6228,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 18,
            span: 6228..6229,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"WARNING: time difference from previous test: %+.1f%%\"",
        ),
        position: Position {
            line: 257,
            column: 72,
            span: 6229..6283,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 257,
            column: 73,
            span: 6283..6284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "diff",
        ),
        position: Position {
            line: 258,
            column: 23,
            span: 6303..6307,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 258,
            column: 25,
            span: 6308..6309,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 258,
            column: 29,
            span: 6309..6313,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 30,
            span: 6313..6314,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 258,
            column: 31,
            span: 6314..6315,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 259,
            column: 0,
            span: 6318..6321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 260,
            column: 9,
            span: 6324..6330,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 10,
            span: 6330..6331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 260,
            column: 14,
            span: 6331..6335,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 15,
            span: 6335..6336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        position: Position {
            line: 260,
            column: 20,
            span: 6336..6341,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 260,
            column: 21,
            span: 6341..6342,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        position: Position {
            line: 260,
            column: 25,
            span: 6343..6346,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 26,
            span: 6346..6347,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 27,
            span: 6347..6348,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 260,
            column: 28,
            span: 6348..6349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 260,
            column: 33,
            span: 6349..6354,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 34,
            span: 6354..6355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clocktime",
        ),
        position: Position {
            line: 260,
            column: 43,
            span: 6355..6364,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 44,
            span: 6364..6365,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 260,
            column: 45,
            span: 6365..6366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 260,
            column: 50,
            span: 6366..6371,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 51,
            span: 6371..6372,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 52,
            span: 6372..6373,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 261,
            column: 0,
            span: 6374..6377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 263,
            column: 6,
            span: 6379..6384,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 263,
            column: 7,
            span: 6384..6385,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"final OK !!!\"",
        ),
        position: Position {
            line: 263,
            column: 21,
            span: 6385..6399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 263,
            column: 22,
            span: 6399..6400,
        },
    },
]
