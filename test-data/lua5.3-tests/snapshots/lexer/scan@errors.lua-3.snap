---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/errors.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 101..106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 7,
        span: 106..107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing errors\"",
        ),
        line: 4,
        column: 23,
        span: 107..123,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 24,
        span: 123..124,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 126..131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 6,
        column: 12,
        span: 132..137,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 14,
        span: 138..139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 6,
        column: 22,
        span: 140..147,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 6,
        column: 29,
        span: 147..154,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 9,
        column: 6,
        span: 237..242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 9,
        column: 9,
        span: 243..245,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
        column: 11,
        span: 246..247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 9,
        column: 24,
        span: 248..260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 25,
        span: 260..261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 9,
        column: 27,
        span: 261..263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 28,
        span: 263..264,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 9,
        column: 31,
        span: 265..267,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 9,
        column: 33,
        span: 268..269,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 9,
        column: 34,
        span: 269..270,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 10,
        column: 6,
        span: 271..276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldmm",
        ),
        line: 10,
        column: 12,
        span: 277..282,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
        column: 14,
        span: 283..284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 10,
        column: 17,
        span: 285..287,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 10,
        column: 18,
        span: 287..288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 10,
        column: 0,
        span: 288..295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 11,
        column: 3,
        span: 296..298,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 11,
        column: 4,
        span: 298..299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 11,
        column: 11,
        span: 299..306,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 11,
        column: 13,
        span: 307..308,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 11,
        column: 0,
        span: 309..312,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 13,
        column: 6,
        span: 314..319,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 13,
        column: 15,
        span: 320..328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 13,
        column: 24,
        span: 329..337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 26,
        span: 338..339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 13,
        column: 29,
        span: 339..342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
        column: 30,
        span: 342..343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 13,
        column: 32,
        span: 344..345,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
        column: 33,
        span: 345..346,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 13,
        column: 37,
        span: 347..350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 38,
        span: 350..351,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 14,
        column: 8,
        span: 354..359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 14,
        column: 11,
        span: 360..362,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 12,
        span: 362..363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 14,
        column: 16,
        span: 364..367,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 18,
        span: 368..369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 14,
        column: 24,
        span: 370..375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 25,
        span: 375..376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 14,
        column: 26,
        span: 376..377,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 14,
        column: 27,
        span: 377..378,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 14,
        column: 31,
        span: 379..382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 32,
        span: 382..383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 15,
        column: 9,
        span: 386..392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 10,
        span: 392..393,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 15,
        column: 13,
        span: 393..396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 15,
        column: 16,
        span: 397..399,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 15,
        column: 20,
        span: 400..403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 15,
        column: 27,
        span: 404..410,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
        column: 28,
        span: 410..411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 15,
        column: 32,
        span: 411..415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 33,
        span: 415..416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 15,
        column: 36,
        span: 416..419,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
        column: 37,
        span: 419..420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 15,
        column: 41,
        span: 421..424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 42,
        span: 424..425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 43,
        span: 425..426,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 16,
        column: 0,
        span: 427..430,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 19,
        column: 6,
        span: 433..438,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 19,
        column: 15,
        span: 439..447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 19,
        column: 20,
        span: 448..452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 22,
        span: 453..454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 19,
        column: 23,
        span: 454..455,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 24,
        span: 455..456,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 20,
        column: 8,
        span: 459..464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 20,
        column: 10,
        span: 465..466,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 11,
        span: 466..467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 20,
        column: 15,
        span: 468..471,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
        column: 17,
        span: 472..473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 20,
        column: 22,
        span: 474..478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 23,
        span: 478..479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 20,
        column: 24,
        span: 479..480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 25,
        span: 480..481,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 21,
        column: 5,
        span: 484..486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 21,
        column: 7,
        span: 487..488,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 21,
        column: 10,
        span: 489..491,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 21,
        column: 14,
        span: 492..495,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 21,
        column: 19,
        span: 496..500,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 21,
        column: 26,
        span: 501..507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 21,
        column: 30,
        span: 508..511,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 21,
        column: 0,
        span: 512..515,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 22,
        column: 8,
        span: 518..523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cond",
        ),
        line: 22,
        column: 13,
        span: 524..528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 14,
        span: 528..529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 22,
        column: 18,
        span: 530..533,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 22,
        column: 20,
        span: 534..535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 22,
        column: 26,
        span: 536..541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 27,
        span: 541..542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 22,
        column: 28,
        span: 542..543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 29,
        span: 543..544,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 23,
        column: 9,
        span: 547..553,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 11,
        span: 554..555,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 23,
        column: 14,
        span: 555..558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cond",
        ),
        line: 23,
        column: 19,
        span: 559..563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 20,
        span: 563..564,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 23,
        column: 24,
        span: 565..568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 23,
        column: 0,
        span: 569..572,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 24,
        column: 0,
        span: 573..576,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 27,
        column: 6,
        span: 579..584,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 27,
        column: 15,
        span: 585..593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 27,
        column: 28,
        span: 594..606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 30,
        span: 607..608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 27,
        column: 34,
        span: 608..612,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
        column: 35,
        span: 612..613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 27,
        column: 39,
        span: 614..617,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 40,
        span: 617..618,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 28,
        column: 8,
        span: 621..626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 28,
        column: 10,
        span: 627..628,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 12,
        span: 629..630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 28,
        column: 17,
        span: 631..635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 18,
        span: 635..636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 28,
        column: 22,
        span: 636..640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 23,
        span: 640..641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 9,
        span: 644..650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 10,
        span: 650..651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 29,
        column: 16,
        span: 651..657,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 29,
        column: 17,
        span: 657..658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 29,
        column: 21,
        span: 658..662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 22,
        span: 662..663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 29,
        column: 23,
        span: 663..664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 24,
        span: 664..665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 29,
        column: 28,
        span: 666..669,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 29,
        span: 669..670,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 31,
        span: 670..672,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 32,
        span: 672..673,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 29,
        column: 37,
        span: 674..678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 38,
        span: 678..679,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 39,
        span: 679..680,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 30,
        column: 0,
        span: 681..684,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 32,
        column: 6,
        span: 686..691,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 32,
        column: 15,
        span: 692..700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 32,
        column: 27,
        span: 701..712,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 29,
        span: 713..714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 32,
        column: 33,
        span: 714..718,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 34,
        span: 718..719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        line: 32,
        column: 40,
        span: 720..725,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 41,
        span: 725..726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 32,
        column: 47,
        span: 727..732,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 48,
        span: 732..733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 32,
        column: 53,
        span: 734..738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 54,
        span: 738..739,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 33,
        column: 8,
        span: 742..747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 33,
        column: 12,
        span: 748..751,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
        column: 14,
        span: 752..753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 33,
        column: 19,
        span: 754..758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 20,
        span: 758..759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 33,
        column: 24,
        span: 759..763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 25,
        span: 763..764,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 34,
        column: 5,
        span: 767..769,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 34,
        column: 9,
        span: 770..773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 34,
        column: 16,
        span: 774..780,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 34,
        column: 17,
        span: 780..781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 34,
        column: 21,
        span: 781..785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 22,
        span: 785..786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 34,
        column: 27,
        span: 786..791,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 28,
        span: 791..792,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^<%a\"",
        ),
        line: 34,
        column: 35,
        span: 793..799,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 36,
        span: 799..800,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 34,
        column: 40,
        span: 801..804,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 34,
        column: 44,
        span: 805..808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 34,
        column: 51,
        span: 809..815,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 34,
        column: 52,
        span: 815..816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 34,
        column: 56,
        span: 816..820,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 57,
        span: 820..821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 34,
        column: 62,
        span: 821..826,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 63,
        span: 826..827,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^char%(\"",
        ),
        line: 34,
        column: 73,
        span: 828..837,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 74,
        span: 837..838,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 35,
        column: 9,
        span: 843..847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 35,
        column: 15,
        span: 848..853,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 35,
        column: 17,
        span: 854..855,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        line: 35,
        column: 21,
        span: 856..859,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 35,
        column: 23,
        span: 859..861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 35,
        column: 28,
        span: 861..866,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 35,
        column: 30,
        span: 866..868,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        line: 35,
        column: 33,
        span: 868..871,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 35,
        column: 0,
        span: 872..875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 36,
        column: 8,
        span: 878..883,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 36,
        column: 10,
        span: 884..885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 36,
        column: 17,
        span: 886..892,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 36,
        column: 18,
        span: 892..893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 36,
        column: 22,
        span: 893..897,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 23,
        span: 897..898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 36,
        column: 28,
        span: 898..903,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 29,
        span: 903..904,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%p)\"",
        ),
        line: 36,
        column: 36,
        span: 905..911,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 37,
        span: 911..912,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%%1\"",
        ),
        line: 36,
        column: 44,
        span: 913..919,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 45,
        span: 919..920,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
        column: 8,
        span: 923..928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pt",
        ),
        line: 37,
        column: 11,
        span: 929..931,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
        column: 13,
        span: 932..933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 37,
        column: 20,
        span: 934..940,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
        column: 21,
        span: 940..941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 37,
        column: 27,
        span: 941..947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 28,
        span: 947..948,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[^%%[string \".*\"%%]:%d: .- near %s$]]",
        ),
        line: 37,
        column: 66,
        span: 948..986,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
        column: 67,
        span: 986..987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 38,
        column: 32,
        span: 1015..1019,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 33,
        span: 1019..1020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 38,
        column: 39,
        span: 1021..1026,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 40,
        span: 1026..1027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 9,
        span: 1030..1036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 10,
        span: 1036..1037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 39,
        column: 16,
        span: 1037..1043,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 17,
        span: 1043..1044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 39,
        column: 21,
        span: 1044..1048,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 22,
        span: 1048..1049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 39,
        column: 25,
        span: 1049..1052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 26,
        span: 1052..1053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pt",
        ),
        line: 39,
        column: 29,
        span: 1054..1056,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 30,
        span: 1056..1057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 31,
        span: 1057..1058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
        column: 9,
        span: 1061..1067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 10,
        span: 1067..1068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 40,
        column: 16,
        span: 1068..1074,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
        column: 17,
        span: 1074..1075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 40,
        column: 21,
        span: 1075..1079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 22,
        span: 1079..1080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 40,
        column: 25,
        span: 1080..1083,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 26,
        span: 1083..1084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 40,
        column: 30,
        span: 1085..1088,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 31,
        span: 1088..1089,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 33,
        span: 1089..1091,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 34,
        span: 1091..1092,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 40,
        column: 39,
        span: 1093..1097,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 40,
        span: 1097..1098,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 41,
        span: 1098..1099,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 41,
        column: 0,
        span: 1100..1103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
        column: 7,
        span: 1147..1153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 8,
        span: 1153..1154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 45,
        column: 12,
        span: 1154..1158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 13,
        span: 1158..1159,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error('hi', 0)\"",
        ),
        line: 45,
        column: 29,
        span: 1159..1175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 30,
        span: 1175..1176,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
        column: 33,
        span: 1177..1179,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'hi'",
        ),
        line: 45,
        column: 38,
        span: 1180..1184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 39,
        span: 1184..1185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 48,
        column: 7,
        span: 1222..1228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 8,
        span: 1228..1229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 48,
        column: 12,
        span: 1229..1233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 13,
        span: 1233..1234,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error()\"",
        ),
        line: 48,
        column: 22,
        span: 1234..1243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 23,
        span: 1243..1244,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 48,
        column: 26,
        span: 1245..1247,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 48,
        column: 30,
        span: 1248..1251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 31,
        span: 1251..1252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 52,
        column: 7,
        span: 1309..1315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 8,
        span: 1315..1316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 52,
        column: 12,
        span: 1316..1320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 13,
        span: 1320..1321,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table.unpack({}, 1, n=2^30)\"",
        ),
        line: 52,
        column: 42,
        span: 1321..1350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 43,
        span: 1350..1351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 44,
        span: 1351..1352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 53,
        column: 7,
        span: 1353..1359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 8,
        span: 1359..1360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 53,
        column: 12,
        span: 1360..1364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 13,
        span: 1364..1365,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=math.sin()\"",
        ),
        line: 53,
        column: 27,
        span: 1365..1379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 28,
        span: 1379..1380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 29,
        span: 1380..1381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 54,
        column: 7,
        span: 1382..1388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 8,
        span: 1388..1389,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 54,
        column: 11,
        span: 1389..1392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 54,
        column: 16,
        span: 1393..1397,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 17,
        span: 1397..1398,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring(1)\"",
        ),
        line: 54,
        column: 30,
        span: 1398..1411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 31,
        span: 1411..1412,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 54,
        column: 35,
        span: 1413..1416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 54,
        column: 40,
        span: 1417..1421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 41,
        span: 1421..1422,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring()\"",
        ),
        line: 54,
        column: 53,
        span: 1422..1434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 54,
        span: 1434..1435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 55,
        span: 1435..1436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
        column: 7,
        span: 1437..1443,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 8,
        span: 1443..1444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 55,
        column: 12,
        span: 1444..1448,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber()\"",
        ),
        line: 55,
        column: 24,
        span: 1448..1460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 25,
        span: 1460..1461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 56,
        column: 7,
        span: 1462..1468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 8,
        span: 1468..1469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 56,
        column: 12,
        span: 1469..1473,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"repeat until 1; a\"",
        ),
        line: 56,
        column: 31,
        span: 1473..1492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 32,
        span: 1492..1493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 57,
        column: 7,
        span: 1494..1500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 8,
        span: 1500..1501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 57,
        column: 12,
        span: 1501..1505,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return;;\"",
        ),
        line: 57,
        column: 22,
        span: 1505..1515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 23,
        span: 1515..1516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 58,
        column: 7,
        span: 1517..1523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 8,
        span: 1523..1524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 58,
        column: 12,
        span: 1524..1528,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(false)\"",
        ),
        line: 58,
        column: 27,
        span: 1528..1543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 28,
        span: 1543..1544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
        column: 7,
        span: 1545..1551,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 8,
        span: 1551..1552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 59,
        column: 12,
        span: 1552..1556,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(nil)\"",
        ),
        line: 59,
        column: 25,
        span: 1556..1569,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 26,
        span: 1569..1570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
        column: 7,
        span: 1571..1577,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 8,
        span: 1577..1578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 60,
        column: 12,
        span: 1578..1582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 13,
        span: 1582..1583,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a (... , ...) end\"",
        ),
        line: 60,
        column: 41,
        span: 1583..1611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 42,
        span: 1611..1612,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 43,
        span: 1612..1613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
        column: 7,
        span: 1614..1620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 8,
        span: 1620..1621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 61,
        column: 12,
        span: 1621..1625,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 13,
        span: 1625..1626,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a (, ...) end\"",
        ),
        line: 61,
        column: 37,
        span: 1626..1650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 38,
        span: 1650..1651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 39,
        span: 1651..1652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
        column: 7,
        span: 1653..1659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 8,
        span: 1659..1660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 62,
        column: 12,
        span: 1660..1664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 13,
        span: 1664..1665,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local t={}; t = t[#t] + 1\"",
        ),
        line: 62,
        column: 40,
        span: 1665..1692,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 41,
        span: 1692..1693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 42,
        span: 1693..1694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 64,
        column: 12,
        span: 1696..1707,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 13,
        span: 1707..1708,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local a = {4\n\n]]",
        ),
        line: 67,
        column: 3,
        span: 1708..1729,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 4,
        span: 1729..1730,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'}' expected (to close '{' at line 1)\"",
        ),
        line: 67,
        column: 44,
        span: 1731..1770,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 45,
        span: 1770..1771,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 67,
        column: 53,
        span: 1772..1779,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 54,
        span: 1779..1780,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
        column: 56,
        span: 1780..1782,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 57,
        span: 1782..1783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 72,
        column: 13,
        span: 1822..1834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 14,
        span: 1834..1835,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} + 1\"",
        ),
        line: 72,
        column: 26,
        span: 1835..1847,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 27,
        span: 1847..1848,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arithmetic\"",
        ),
        line: 72,
        column: 40,
        span: 1849..1861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 41,
        span: 1861..1862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 73,
        column: 13,
        span: 1863..1875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 14,
        span: 1875..1876,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} | 1\"",
        ),
        line: 73,
        column: 26,
        span: 1876..1888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 27,
        span: 1888..1889,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bitwise operation\"",
        ),
        line: 73,
        column: 47,
        span: 1890..1909,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 48,
        span: 1909..1910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 74,
        column: 13,
        span: 1911..1923,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 14,
        span: 1923..1924,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} < 1\"",
        ),
        line: 74,
        column: 26,
        span: 1924..1936,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 27,
        span: 1936..1937,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to compare\"",
        ),
        line: 74,
        column: 48,
        span: 1938..1958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 49,
        span: 1958..1959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 75,
        column: 13,
        span: 1960..1972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 14,
        span: 1972..1973,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {} <= 1\"",
        ),
        line: 75,
        column: 27,
        span: 1973..1986,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 28,
        span: 1986..1987,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to compare\"",
        ),
        line: 75,
        column: 49,
        span: 1988..2008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 50,
        span: 2008..2009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 77,
        column: 13,
        span: 2011..2023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 14,
        span: 2023..2024,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; bbbb=2; a=math.sin(3)+bbbb(3)\"",
        ),
        line: 77,
        column: 50,
        span: 2024..2060,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 51,
        span: 2060..2061,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbbb'\"",
        ),
        line: 77,
        column: 67,
        span: 2062..2077,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 68,
        span: 2077..2078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 78,
        column: 13,
        span: 2079..2091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 14,
        span: 2091..2092,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={}; do local a=1 end a:bbbb(3)\"",
        ),
        line: 78,
        column: 48,
        span: 2092..2126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 49,
        span: 2126..2127,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'bbbb'\"",
        ),
        line: 78,
        column: 65,
        span: 2128..2143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 66,
        span: 2143..2144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 79,
        column: 13,
        span: 2145..2157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 14,
        span: 2157..2158,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a={}; a.bbbb(3)\"",
        ),
        line: 79,
        column: 37,
        span: 2158..2181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 38,
        span: 2181..2182,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbbb'\"",
        ),
        line: 79,
        column: 53,
        span: 2183..2197,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 54,
        span: 2197..2198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 80,
        column: 7,
        span: 2199..2205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 8,
        span: 2205..2206,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 80,
        column: 11,
        span: 2206..2209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 80,
        column: 18,
        span: 2210..2216,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 80,
        column: 19,
        span: 2216..2217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 80,
        column: 23,
        span: 2217..2221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 24,
        span: 2221..2222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 80,
        column: 28,
        span: 2222..2226,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        ),
        line: 80,
        column: 62,
        span: 2226..2260,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 63,
        span: 2260..2261,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'bbbb'\"",
        ),
        line: 80,
        column: 72,
        span: 2262..2270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 73,
        span: 2270..2271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 74,
        span: 2271..2272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 81,
        column: 13,
        span: 2273..2285,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 14,
        span: 2285..2286,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        ),
        line: 81,
        column: 48,
        span: 2286..2320,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 49,
        span: 2320..2321,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 81,
        column: 58,
        span: 2322..2330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 59,
        span: 2330..2331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 82,
        column: 13,
        span: 2332..2344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 14,
        span: 2344..2345,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=(1)..{}\"",
        ),
        line: 82,
        column: 25,
        span: 2345..2356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 26,
        span: 2356..2357,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a table value\"",
        ),
        line: 82,
        column: 42,
        span: 2358..2373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 43,
        span: 2373..2374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 84,
        column: 13,
        span: 2376..2388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 14,
        span: 2388..2389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = #print\"",
        ),
        line: 84,
        column: 26,
        span: 2389..2401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 27,
        span: 2401..2402,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"length of a function value\"",
        ),
        line: 84,
        column: 56,
        span: 2403..2431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 57,
        span: 2431..2432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 85,
        column: 13,
        span: 2433..2445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 14,
        span: 2445..2446,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = #3\"",
        ),
        line: 85,
        column: 22,
        span: 2446..2454,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 23,
        span: 2454..2455,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"length of a number value\"",
        ),
        line: 85,
        column: 50,
        span: 2456..2482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 51,
        span: 2482..2483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aaa",
        ),
        line: 87,
        column: 4,
        span: 2485..2488,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 87,
        column: 6,
        span: 2489..2490,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 87,
        column: 0,
        span: 2491..2494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 88,
        column: 13,
        span: 2495..2507,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 14,
        span: 2507..2508,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa.bbb:ddd(9)\"",
        ),
        line: 88,
        column: 30,
        span: 2508..2524,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 31,
        span: 2524..2525,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 88,
        column: 46,
        span: 2526..2540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 47,
        span: 2540..2541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 89,
        column: 13,
        span: 2542..2554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 14,
        span: 2554..2555,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb=1}; aaa.bbb:ddd(9)\"",
        ),
        line: 89,
        column: 49,
        span: 2555..2590,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 50,
        span: 2590..2591,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbb'\"",
        ),
        line: 89,
        column: 64,
        span: 2592..2605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 65,
        span: 2605..2606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 90,
        column: 13,
        span: 2607..2619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 14,
        span: 2619..2620,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb={}}; aaa.bbb:ddd(9)\"",
        ),
        line: 90,
        column: 50,
        span: 2620..2656,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 51,
        span: 2656..2657,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'ddd'\"",
        ),
        line: 90,
        column: 66,
        span: 2658..2672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 67,
        span: 2672..2673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 91,
        column: 13,
        span: 2674..2686,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 14,
        span: 2686..2687,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,c; (function () a = b+1 end)()\"",
        ),
        line: 91,
        column: 56,
        span: 2687..2729,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 57,
        span: 2729..2730,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"upvalue 'b'\"",
        ),
        line: 91,
        column: 71,
        span: 2731..2744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 72,
        span: 2744..2745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 92,
        column: 7,
        span: 2746..2752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 8,
        span: 2752..2753,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 92,
        column: 11,
        span: 2753..2756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 92,
        column: 16,
        span: 2757..2761,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb={ddd=next}}; aaa.bbb:ddd(nil)\"",
        ),
        line: 92,
        column: 62,
        span: 2761..2807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 63,
        span: 2807..2808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 95,
        column: 13,
        span: 2859..2871,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 14,
        span: 2871..2872,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,cc; (function () a = cc[1] end)()\"",
        ),
        line: 95,
        column: 59,
        span: 2872..2917,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 60,
        span: 2917..2918,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"upvalue 'cc'\"",
        ),
        line: 95,
        column: 75,
        span: 2919..2933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 76,
        span: 2933..2934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 96,
        column: 13,
        span: 2935..2947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 14,
        span: 2947..2948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,cc; (function () a.x = 1 end)()\"",
        ),
        line: 96,
        column: 57,
        span: 2948..2991,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 58,
        span: 2991..2992,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"upvalue 'a'\"",
        ),
        line: 96,
        column: 72,
        span: 2993..3006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 73,
        span: 3006..3007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 98,
        column: 13,
        span: 3009..3021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 14,
        span: 3021..3022,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local _ENV = {x={}}; a = a + 1\"",
        ),
        line: 98,
        column: 46,
        span: 3022..3054,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 47,
        span: 3054..3055,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'a'\"",
        ),
        line: 98,
        column: 60,
        span: 3056..3068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 61,
        span: 3068..3069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 100,
        column: 13,
        span: 3071..3083,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 14,
        span: 3083..3084,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b=1; local aaa='a'; x=aaa+b\"",
        ),
        line: 100,
        column: 43,
        span: 3084..3113,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 44,
        span: 3113..3114,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'aaa'\"",
        ),
        line: 100,
        column: 58,
        span: 3115..3128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 59,
        span: 3128..3129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 101,
        column: 13,
        span: 3130..3142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 14,
        span: 3142..3143,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=3/aaa\"",
        ),
        line: 101,
        column: 31,
        span: 3143..3160,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 32,
        span: 3160..3161,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 101,
        column: 47,
        span: 3162..3176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 48,
        span: 3176..3177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 102,
        column: 13,
        span: 3178..3190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 14,
        span: 3190..3191,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa='2'; b=nil;x=aaa*b\"",
        ),
        line: 102,
        column: 38,
        span: 3191..3215,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 39,
        span: 3215..3216,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'b'\"",
        ),
        line: 102,
        column: 52,
        span: 3217..3229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 53,
        span: 3229..3230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 103,
        column: 13,
        span: 3231..3243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 14,
        span: 3243..3244,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=-aaa\"",
        ),
        line: 103,
        column: 30,
        span: 3244..3260,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
        column: 31,
        span: 3260..3261,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 103,
        column: 46,
        span: 3262..3276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 47,
        span: 3276..3277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 106,
        column: 13,
        span: 3296..3308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 14,
        span: 3308..3309,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; local a,bbbb=2,3; a = math.sin(1) and bbbb(3)\"",
        ),
        line: 106,
        column: 66,
        span: 3309..3361,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 67,
        span: 3361..3362,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'bbbb'\"",
        ),
        line: 107,
        column: 22,
        span: 3370..3384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 23,
        span: 3384..3385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 108,
        column: 13,
        span: 3386..3398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 14,
        span: 3398..3399,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; local a,bbbb=2,3; a = bbbb(1) or a(3)\"",
        ),
        line: 108,
        column: 58,
        span: 3399..3443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 59,
        span: 3443..3444,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'bbbb'\"",
        ),
        line: 108,
        column: 74,
        span: 3445..3459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 75,
        span: 3459..3460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 109,
        column: 13,
        span: 3461..3473,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 14,
        span: 3473..3474,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,c,f = 1,1,1; f((a and b) or c)\"",
        ),
        line: 109,
        column: 56,
        span: 3474..3516,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 57,
        span: 3516..3517,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'f'\"",
        ),
        line: 109,
        column: 69,
        span: 3518..3529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 70,
        span: 3529..3530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 110,
        column: 13,
        span: 3531..3543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 14,
        span: 3543..3544,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,c = 1,1,1; ((a and b) or c)()\"",
        ),
        line: 110,
        column: 55,
        span: 3544..3585,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 56,
        span: 3585..3586,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call a number value\"",
        ),
        line: 110,
        column: 78,
        span: 3587..3608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 79,
        span: 3608..3609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
        column: 7,
        span: 3610..3616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 8,
        span: 3616..3617,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 111,
        column: 11,
        span: 3617..3620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 111,
        column: 18,
        span: 3621..3627,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 111,
        column: 19,
        span: 3627..3628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 111,
        column: 23,
        span: 3628..3632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 24,
        span: 3632..3633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 111,
        column: 28,
        span: 3633..3637,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=(aaa or aaa)+(aaa and aaa)\"",
        ),
        line: 111,
        column: 66,
        span: 3637..3675,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 67,
        span: 3675..3676,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aaa'\"",
        ),
        line: 111,
        column: 75,
        span: 3677..3684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 76,
        span: 3684..3685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 77,
        span: 3685..3686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 112,
        column: 7,
        span: 3687..3693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 8,
        span: 3693..3694,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 112,
        column: 11,
        span: 3694..3697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 112,
        column: 18,
        span: 3698..3704,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 112,
        column: 19,
        span: 3704..3705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 112,
        column: 23,
        span: 3705..3709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 24,
        span: 3709..3710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 112,
        column: 28,
        span: 3710..3714,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; (aaa or aaa)()\"",
        ),
        line: 112,
        column: 52,
        span: 3714..3738,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 53,
        span: 3738..3739,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aaa'\"",
        ),
        line: 112,
        column: 61,
        span: 3740..3747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 62,
        span: 3747..3748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 63,
        span: 3748..3749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 114,
        column: 13,
        span: 3751..3763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 14,
        span: 3763..3764,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(print < 10)\"",
        ),
        line: 114,
        column: 33,
        span: 3764..3783,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 34,
        span: 3783..3784,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function with number\"",
        ),
        line: 114,
        column: 57,
        span: 3785..3807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 58,
        span: 3807..3808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 115,
        column: 13,
        span: 3809..3821,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 14,
        span: 3821..3822,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(print < print)\"",
        ),
        line: 115,
        column: 36,
        span: 3822..3844,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 115,
        column: 37,
        span: 3844..3845,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"two function values\"",
        ),
        line: 115,
        column: 59,
        span: 3846..3867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 60,
        span: 3867..3868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 116,
        column: 13,
        span: 3869..3881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 14,
        span: 3881..3882,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print('10' < 10)\"",
        ),
        line: 116,
        column: 32,
        span: 3882..3900,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 33,
        span: 3900..3901,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string with number\"",
        ),
        line: 116,
        column: 54,
        span: 3902..3922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 55,
        span: 3922..3923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 117,
        column: 13,
        span: 3924..3936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 14,
        span: 3936..3937,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(10 < '23')\"",
        ),
        line: 117,
        column: 32,
        span: 3937..3955,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 33,
        span: 3955..3956,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number with string\"",
        ),
        line: 117,
        column: 54,
        span: 3957..3977,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 55,
        span: 3977..3978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 120,
        column: 13,
        span: 4010..4022,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 14,
        span: 4022..4023,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0^100; x = a << 2\"",
        ),
        line: 120,
        column: 45,
        span: 4023..4054,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 120,
        column: 46,
        span: 4054..4055,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a\"",
        ),
        line: 120,
        column: 56,
        span: 4056..4065,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 57,
        span: 4065..4066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 121,
        column: 13,
        span: 4067..4079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 14,
        span: 4079..4080,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 1 >> 2.0^100\"",
        ),
        line: 121,
        column: 38,
        span: 4080..4104,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 39,
        span: 4104..4105,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 121,
        column: 71,
        span: 4106..4137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 72,
        span: 4137..4138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 122,
        column: 13,
        span: 4139..4151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 14,
        span: 4151..4152,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = '10' << 2.0^100\"",
        ),
        line: 122,
        column: 41,
        span: 4152..4179,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 42,
        span: 4179..4180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 122,
        column: 74,
        span: 4181..4212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 75,
        span: 4212..4213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 123,
        column: 13,
        span: 4214..4226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 14,
        span: 4226..4227,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0^100 & 1\"",
        ),
        line: 123,
        column: 37,
        span: 4227..4250,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 38,
        span: 4250..4251,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 123,
        column: 70,
        span: 4252..4283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 71,
        span: 4283..4284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 124,
        column: 13,
        span: 4285..4297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 14,
        span: 4297..4298,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0^100 & '1'\"",
        ),
        line: 124,
        column: 39,
        span: 4298..4323,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 40,
        span: 4323..4324,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 124,
        column: 72,
        span: 4325..4356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 73,
        span: 4356..4357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 125,
        column: 13,
        span: 4358..4370,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 14,
        span: 4370..4371,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2.0 | 1e40\"",
        ),
        line: 125,
        column: 36,
        span: 4371..4393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 37,
        span: 4393..4394,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 125,
        column: 69,
        span: 4395..4426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 70,
        span: 4426..4427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 126,
        column: 13,
        span: 4428..4440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 14,
        span: 4440..4441,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a = 2e100 ~ 1\"",
        ),
        line: 126,
        column: 35,
        span: 4441..4462,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 36,
        span: 4462..4463,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 126,
        column: 68,
        span: 4464..4495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 69,
        span: 4495..4496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 127,
        column: 13,
        span: 4497..4509,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 14,
        span: 4509..4510,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.sub('a', 2.0^100)\"",
        ),
        line: 127,
        column: 40,
        span: 4510..4536,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 41,
        span: 4536..4537,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 127,
        column: 73,
        span: 4538..4569,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 74,
        span: 4569..4570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 128,
        column: 13,
        span: 4571..4583,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 14,
        span: 4583..4584,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.rep('a', 3.3)\"",
        ),
        line: 128,
        column: 36,
        span: 4584..4606,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 37,
        span: 4606..4607,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 128,
        column: 69,
        span: 4608..4639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 70,
        span: 4639..4640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 129,
        column: 13,
        span: 4641..4653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 14,
        span: 4653..4654,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 6e40 & 7\"",
        ),
        line: 129,
        column: 31,
        span: 4654..4671,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 32,
        span: 4671..4672,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 129,
        column: 64,
        span: 4673..4704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 65,
        span: 4704..4705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 130,
        column: 13,
        span: 4706..4718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 14,
        span: 4718..4719,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 34 << 7e30\"",
        ),
        line: 130,
        column: 33,
        span: 4719..4738,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 34,
        span: 4738..4739,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 130,
        column: 66,
        span: 4740..4771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 67,
        span: 4771..4772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 131,
        column: 13,
        span: 4773..4785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 14,
        span: 4785..4786,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return ~-3e40\"",
        ),
        line: 131,
        column: 29,
        span: 4786..4801,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 30,
        span: 4801..4802,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 131,
        column: 62,
        span: 4803..4834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 63,
        span: 4834..4835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 132,
        column: 13,
        span: 4836..4848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 14,
        span: 4848..4849,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return ~-3.009\"",
        ),
        line: 132,
        column: 30,
        span: 4849..4865,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 31,
        span: 4865..4866,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 132,
        column: 63,
        span: 4867..4898,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 64,
        span: 4898..4899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 133,
        column: 13,
        span: 4900..4912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 14,
        span: 4912..4913,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 3.009 & 1\"",
        ),
        line: 133,
        column: 32,
        span: 4913..4931,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 33,
        span: 4931..4932,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"has no integer representation\"",
        ),
        line: 133,
        column: 65,
        span: 4933..4964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 66,
        span: 4964..4965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 134,
        column: 13,
        span: 4966..4978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 14,
        span: 4978..4979,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 34 >> {}\"",
        ),
        line: 134,
        column: 31,
        span: 4979..4996,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 32,
        span: 4996..4997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table value\"",
        ),
        line: 134,
        column: 46,
        span: 4998..5011,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 47,
        span: 5011..5012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 135,
        column: 13,
        span: 5013..5025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 14,
        span: 5025..5026,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 24 // 0\"",
        ),
        line: 135,
        column: 27,
        span: 5026..5039,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 28,
        span: 5039..5040,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"divide by zero\"",
        ),
        line: 135,
        column: 45,
        span: 5041..5057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 46,
        span: 5057..5058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 136,
        column: 13,
        span: 5059..5071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 14,
        span: 5071..5072,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 1 % 0\"",
        ),
        line: 136,
        column: 25,
        span: 5072..5083,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 26,
        span: 5083..5084,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'n%0'\"",
        ),
        line: 136,
        column: 34,
        span: 5085..5092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 35,
        span: 5092..5093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 140,
        column: 3,
        span: 5147..5149,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 140,
        column: 4,
        span: 5149..5150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 140,
        column: 5,
        span: 5150..5151,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 140,
        column: 7,
        span: 5152..5153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 140,
        column: 0,
        span: 5154..5159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 141,
        column: 13,
        span: 5160..5172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 14,
        span: 5172..5173,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  -- create light udata\n  local x = D.upvalueid(function () return debug end, 1)\n  D.setuservalue(x, {})\n]]",
        ),
        line: 145,
        column: 3,
        span: 5173..5283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 4,
        span: 5283..5284,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"light userdata\"",
        ),
        line: 145,
        column: 21,
        span: 5285..5301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 22,
        span: 5301..5302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 146,
        column: 3,
        span: 5303..5305,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 146,
        column: 4,
        span: 5305..5306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 146,
        column: 5,
        span: 5306..5307,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 146,
        column: 7,
        span: 5308..5309,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 146,
        column: 0,
        span: 5310..5313,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 148,
        column: 3,
        span: 5315..5317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 149,
        column: 15,
        span: 5356..5368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 16,
        span: 5368..5369,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"math.sin(io.input())\"",
        ),
        line: 149,
        column: 38,
        span: 5369..5391,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 39,
        span: 5391..5392,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(number expected, got FILE*)\"",
        ),
        line: 149,
        column: 70,
        span: 5393..5423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 71,
        span: 5423..5424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 150,
        column: 5,
        span: 5427..5429,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 150,
        column: 6,
        span: 5429..5430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 150,
        column: 8,
        span: 5430..5432,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 150,
        column: 10,
        span: 5433..5434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 150,
        column: 23,
        span: 5435..5447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 24,
        span: 5447..5448,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 150,
        column: 25,
        span: 5448..5449,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 150,
        column: 26,
        span: 5449..5450,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 150,
        column: 27,
        span: 5450..5451,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 150,
        column: 29,
        span: 5452..5453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__name",
        ),
        line: 150,
        column: 35,
        span: 5453..5459,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 150,
        column: 37,
        span: 5460..5461,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"My Type\"",
        ),
        line: 150,
        column: 47,
        span: 5462..5471,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 150,
        column: 48,
        span: 5471..5472,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 49,
        span: 5472..5473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 151,
        column: 9,
        span: 5476..5482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 10,
        span: 5482..5483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 151,
        column: 16,
        span: 5483..5489,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 151,
        column: 17,
        span: 5489..5490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 151,
        column: 21,
        span: 5490..5494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 22,
        span: 5494..5495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 151,
        column: 30,
        span: 5495..5503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 31,
        span: 5503..5504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 151,
        column: 33,
        span: 5504..5506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 34,
        span: 5506..5507,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 35,
        span: 5507..5508,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^My Type\"",
        ),
        line: 151,
        column: 46,
        span: 5509..5519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 47,
        span: 5519..5520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 48,
        span: 5520..5521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 152,
        column: 15,
        span: 5524..5536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 16,
        span: 5536..5537,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"io.input(XX)\"",
        ),
        line: 152,
        column: 30,
        span: 5537..5551,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 31,
        span: 5551..5552,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(FILE* expected, got My Type)\"",
        ),
        line: 152,
        column: 63,
        span: 5553..5584,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 64,
        span: 5584..5585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 153,
        column: 15,
        span: 5588..5600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 16,
        span: 5600..5601,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return XX + 1\"",
        ),
        line: 153,
        column: 31,
        span: 5601..5616,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 32,
        span: 5616..5617,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"on a My Type value\"",
        ),
        line: 153,
        column: 53,
        span: 5618..5638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 54,
        span: 5638..5639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 154,
        column: 15,
        span: 5642..5654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 16,
        span: 5654..5655,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return ~io.stdin\"",
        ),
        line: 154,
        column: 34,
        span: 5655..5673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 35,
        span: 5673..5674,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"on a FILE* value\"",
        ),
        line: 154,
        column: 54,
        span: 5675..5693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 55,
        span: 5693..5694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 155,
        column: 15,
        span: 5697..5709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 16,
        span: 5709..5710,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return XX < XX\"",
        ),
        line: 155,
        column: 32,
        span: 5710..5726,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 33,
        span: 5726..5727,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"two My Type values\"",
        ),
        line: 155,
        column: 54,
        span: 5728..5748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 55,
        span: 5748..5749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 156,
        column: 15,
        span: 5752..5764,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 16,
        span: 5764..5765,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return {} < XX\"",
        ),
        line: 156,
        column: 32,
        span: 5765..5781,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 33,
        span: 5781..5782,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table with My Type\"",
        ),
        line: 156,
        column: 54,
        span: 5783..5803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 55,
        span: 5803..5804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 157,
        column: 15,
        span: 5807..5819,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 16,
        span: 5819..5820,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return XX < io.stdin\"",
        ),
        line: 157,
        column: 38,
        span: 5820..5842,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 39,
        span: 5842..5843,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"My Type with FILE*\"",
        ),
        line: 157,
        column: 60,
        span: 5844..5864,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 61,
        span: 5864..5865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 158,
        column: 5,
        span: 5868..5870,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 158,
        column: 6,
        span: 5870..5871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        line: 158,
        column: 8,
        span: 5871..5873,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 158,
        column: 10,
        span: 5874..5875,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 158,
        column: 0,
        span: 5876..5879,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 159,
        column: 0,
        span: 5880..5883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 162,
        column: 13,
        span: 5905..5917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 14,
        span: 5917..5918,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(io.write or print){}\"",
        ),
        line: 162,
        column: 37,
        span: 5918..5941,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 38,
        span: 5941..5942,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"io.write\"",
        ),
        line: 162,
        column: 49,
        span: 5943..5953,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 50,
        span: 5953..5954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 163,
        column: 13,
        span: 5955..5967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 14,
        span: 5967..5968,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(collectgarbage or print){}\"",
        ),
        line: 163,
        column: 43,
        span: 5968..5997,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
        column: 44,
        span: 5997..5998,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"collectgarbage\"",
        ),
        line: 163,
        column: 61,
        span: 5999..6015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 62,
        span: 6015..6016,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 166,
        column: 0,
        span: 6060..6062,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 167,
        column: 8,
        span: 6065..6070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 167,
        column: 10,
        span: 6071..6072,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 167,
        column: 12,
        span: 6073..6074,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 167,
        column: 21,
        span: 6075..6083,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 23,
        span: 6084..6085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 167,
        column: 24,
        span: 6085..6086,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 25,
        span: 6086..6087,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 167,
        column: 32,
        span: 6088..6094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 167,
        column: 34,
        span: 6095..6096,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 167,
        column: 36,
        span: 6097..6098,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 38,
        span: 6098..6100,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 167,
        column: 0,
        span: 6101..6104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 168,
        column: 4,
        span: 6107..6108,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 168,
        column: 6,
        span: 6109..6110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 168,
        column: 13,
        span: 6111..6117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 14,
        span: 6117..6118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 168,
        column: 18,
        span: 6118..6122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 19,
        span: 6122..6123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 168,
        column: 25,
        span: 6123..6129,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 168,
        column: 26,
        span: 6129..6130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 168,
        column: 30,
        span: 6130..6134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 31,
        span: 6134..6135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 168,
        column: 32,
        span: 6135..6136,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 168,
        column: 33,
        span: 6136..6137,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 168,
        column: 38,
        span: 6138..6142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 39,
        span: 6142..6143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 40,
        span: 6143..6144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 41,
        span: 6144..6145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 169,
        column: 9,
        span: 6148..6154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 10,
        span: 6154..6155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 169,
        column: 11,
        span: 6155..6156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 12,
        span: 6156..6157,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 13,
        span: 6156..6158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 14,
        span: 6158..6159,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 17,
        span: 6160..6162,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 19,
        span: 6162..6164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 20,
        span: 6164..6165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 170,
        column: 11,
        span: 6168..6176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 12,
        span: 6176..6177,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%?:%-1:\"",
        ),
        line: 170,
        column: 22,
        span: 6177..6187,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 23,
        span: 6187..6188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 170,
        column: 25,
        span: 6189..6190,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 26,
        span: 6190..6191,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 170,
        column: 28,
        span: 6192..6193,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 170,
        column: 29,
        span: 6193..6194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 30,
        span: 6194..6195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 173,
        column: 4,
        span: 6260..6261,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
        column: 6,
        span: 6262..6263,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 173,
        column: 15,
        span: 6264..6272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 17,
        span: 6273..6274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 18,
        span: 6274..6275,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 173,
        column: 24,
        span: 6276..6281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 173,
        column: 26,
        span: 6282..6283,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 173,
        column: 27,
        span: 6283..6284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 173,
        column: 29,
        span: 6285..6286,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
        column: 31,
        span: 6287..6288,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 173,
        column: 33,
        span: 6289..6290,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 173,
        column: 34,
        span: 6290..6291,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 173,
        column: 35,
        span: 6291..6292,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 173,
        column: 42,
        span: 6293..6299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 173,
        column: 44,
        span: 6300..6301,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 173,
        column: 46,
        span: 6302..6303,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 48,
        span: 6303..6305,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 173,
        column: 0,
        span: 6306..6309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 175,
        column: 4,
        span: 6356..6357,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 175,
        column: 6,
        span: 6358..6359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 175,
        column: 13,
        span: 6360..6366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 14,
        span: 6366..6367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 175,
        column: 18,
        span: 6367..6371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 19,
        span: 6371..6372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 175,
        column: 25,
        span: 6372..6378,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 175,
        column: 26,
        span: 6378..6379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 175,
        column: 30,
        span: 6379..6383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 31,
        span: 6383..6384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 175,
        column: 32,
        span: 6384..6385,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 175,
        column: 33,
        span: 6385..6386,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 175,
        column: 38,
        span: 6387..6391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 39,
        span: 6391..6392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 40,
        span: 6392..6393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 41,
        span: 6393..6394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 177,
        column: 11,
        span: 6441..6449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 12,
        span: 6449..6450,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%?:%-1:.*table value\"",
        ),
        line: 177,
        column: 35,
        span: 6450..6473,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 36,
        span: 6473..6474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 177,
        column: 38,
        span: 6475..6476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 39,
        span: 6476..6477,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 178,
        column: 0,
        span: 6478..6481,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 182,
        column: 6,
        span: 6527..6532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 182,
        column: 8,
        span: 6533..6534,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 182,
        column: 10,
        span: 6535..6536,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 182,
        column: 12,
        span: 6537..6538,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 182,
        column: 13,
        span: 6538..6539,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 183,
        column: 4,
        span: 6540..6543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 183,
        column: 6,
        span: 6544..6545,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 183,
        column: 8,
        span: 6546..6547,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 10,
        span: 6547..6549,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 11,
        span: 6549..6550,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 16,
        span: 6550..6555,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 183,
        column: 0,
        span: 6556..6558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 184,
        column: 4,
        span: 6561..6562,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 184,
        column: 5,
        span: 6562..6563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 184,
        column: 6,
        span: 6563..6564,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 184,
        column: 7,
        span: 6564..6565,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 184,
        column: 9,
        span: 6566..6567,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = x\"",
        ),
        line: 184,
        column: 17,
        span: 6568..6575,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 184,
        column: 20,
        span: 6576..6578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 184,
        column: 0,
        span: 6579..6580,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 185,
        column: 0,
        span: 6581..6584,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 186,
        column: 6,
        span: 6585..6590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 186,
        column: 8,
        span: 6591..6592,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 186,
        column: 10,
        span: 6593..6594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 186,
        column: 16,
        span: 6595..6600,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 17,
        span: 6600..6601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 186,
        column: 23,
        span: 6601..6607,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 24,
        span: 6607..6608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 186,
        column: 25,
        span: 6608..6609,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 26,
        span: 6609..6610,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; \"",
        ),
        line: 186,
        column: 31,
        span: 6611..6615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 32,
        span: 6615..6616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 187,
        column: 2,
        span: 6617..6618,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 187,
        column: 4,
        span: 6619..6620,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 187,
        column: 0,
        span: 6621..6624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 188,
        column: 13,
        span: 6625..6637,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 14,
        span: 6637..6638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 188,
        column: 15,
        span: 6638..6639,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 188,
        column: 17,
        span: 6639..6641,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; a = bbb + 1\"",
        ),
        line: 188,
        column: 32,
        span: 6641..6656,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 188,
        column: 33,
        span: 6656..6657,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbb'\"",
        ),
        line: 188,
        column: 48,
        span: 6658..6672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 49,
        span: 6672..6673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 189,
        column: 13,
        span: 6674..6686,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 14,
        span: 6686..6687,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local _ENV=_ENV;\"",
        ),
        line: 189,
        column: 32,
        span: 6687..6705,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 189,
        column: 34,
        span: 6705..6707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 189,
        column: 35,
        span: 6707..6708,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 189,
        column: 37,
        span: 6708..6710,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; a = bbb + 1\"",
        ),
        line: 189,
        column: 52,
        span: 6710..6725,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 53,
        span: 6725..6726,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbb'\"",
        ),
        line: 189,
        column: 68,
        span: 6727..6741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 69,
        span: 6741..6742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 190,
        column: 13,
        span: 6743..6755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 14,
        span: 6755..6756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 190,
        column: 15,
        span: 6756..6757,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 190,
        column: 17,
        span: 6757..6759,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; local t = {}; a = t.bbb + 1\"",
        ),
        line: 190,
        column: 48,
        span: 6759..6790,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 49,
        span: 6790..6791,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbb'\"",
        ),
        line: 190,
        column: 63,
        span: 6792..6805,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 64,
        span: 6805..6806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 191,
        column: 13,
        span: 6807..6819,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 14,
        span: 6819..6820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 191,
        column: 15,
        span: 6820..6821,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 191,
        column: 17,
        span: 6821..6823,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; local t = {}; t:bbb()\"",
        ),
        line: 191,
        column: 42,
        span: 6823..6848,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 43,
        span: 6848..6849,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'bbb'\"",
        ),
        line: 191,
        column: 58,
        span: 6850..6864,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 59,
        span: 6864..6865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 193,
        column: 13,
        span: 6867..6879,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 14,
        span: 6879..6880,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[aaa=9\nrepeat until 3==3\nlocal x=math.sin(math.cos(3))\nif math.sin(1) == x then return math.sin(1) end   -- tail call\nlocal a,b = 1, {\n  {x='a'..'b'..'c', y='b', z=x},\n  {1,2,3,4,5} or 3+3<=3+3,\n  3+1>3+1,\n  {d = x and aaa[x or y]}}\n]]",
        ),
        line: 202,
        column: 3,
        span: 6880..7116,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
        column: 4,
        span: 7116..7117,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 202,
        column: 19,
        span: 7118..7132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 20,
        span: 7132..7133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 204,
        column: 13,
        span: 7135..7147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 14,
        span: 7147..7148,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal x,y = {},1\nif math.sin(1) == 0 then return 3 end    -- return\nx.a()]]",
        ),
        line: 207,
        column: 8,
        span: 7148..7226,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 9,
        span: 7226..7227,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'a'\"",
        ),
        line: 207,
        column: 21,
        span: 7228..7239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 22,
        span: 7239..7240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 209,
        column: 13,
        span: 7242..7254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 14,
        span: 7254..7255,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nprefix = nil\ninsert = nil\nwhile 1 do\n  local a\n  if nil then break end\n  insert(prefix, a)\nend]]",
        ),
        line: 216,
        column: 6,
        span: 7255..7354,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
        column: 7,
        span: 7354..7355,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'insert'\"",
        ),
        line: 216,
        column: 25,
        span: 7356..7373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 26,
        span: 7373..7374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 218,
        column: 13,
        span: 7376..7388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 14,
        span: 7388..7389,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[  -- tail call\n  return math.sin(\"a\")\n]]",
        ),
        line: 220,
        column: 3,
        span: 7389..7431,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
        column: 4,
        span: 7431..7432,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'sin'\"",
        ),
        line: 220,
        column: 12,
        span: 7433..7440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 13,
        span: 7440..7441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 222,
        column: 13,
        span: 7443..7455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 14,
        span: 7455..7456,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[collectgarbage(\"nooption\")]]",
        ),
        line: 222,
        column: 44,
        span: 7456..7486,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 45,
        span: 7486..7487,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid option\"",
        ),
        line: 222,
        column: 62,
        span: 7488..7504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 63,
        span: 7504..7505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 224,
        column: 13,
        span: 7507..7519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 14,
        span: 7519..7520,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[x = print .. \"a\"]]",
        ),
        line: 224,
        column: 34,
        span: 7520..7540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 35,
        span: 7540..7541,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concatenate\"",
        ),
        line: 224,
        column: 49,
        span: 7542..7555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 50,
        span: 7555..7556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 225,
        column: 13,
        span: 7557..7569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 14,
        span: 7569..7570,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[x = \"a\" .. false]]",
        ),
        line: 225,
        column: 34,
        span: 7570..7590,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 225,
        column: 35,
        span: 7590..7591,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concatenate\"",
        ),
        line: 225,
        column: 49,
        span: 7592..7605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 50,
        span: 7605..7606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 226,
        column: 13,
        span: 7607..7619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 14,
        span: 7619..7620,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[x = {} .. 2]]",
        ),
        line: 226,
        column: 29,
        span: 7620..7635,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 30,
        span: 7635..7636,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concatenate\"",
        ),
        line: 226,
        column: 44,
        span: 7637..7650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 45,
        span: 7650..7651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 228,
        column: 13,
        span: 7653..7665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 14,
        span: 7665..7666,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"getmetatable(io.stdin).__gc()\"",
        ),
        line: 228,
        column: 45,
        span: 7666..7697,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
        column: 46,
        span: 7697..7698,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no value\"",
        ),
        line: 228,
        column: 57,
        span: 7699..7709,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 58,
        span: 7709..7710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 230,
        column: 13,
        span: 7712..7724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 14,
        span: 7724..7725,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal Var\nlocal function main()\n  NoSuchName (function() Var=0 end)\nend\nmain()\n]]",
        ),
        line: 236,
        column: 3,
        span: 7725..7809,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 4,
        span: 7809..7810,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'NoSuchName'\"",
        ),
        line: 236,
        column: 26,
        span: 7811..7832,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 27,
        span: 7832..7833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 237,
        column: 6,
        span: 7834..7839,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 237,
        column: 9,
        span: 7839..7842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 239,
        column: 2,
        span: 7844..7845,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 239,
        column: 4,
        span: 7846..7847,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 239,
        column: 6,
        span: 7848..7849,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 239,
        column: 7,
        span: 7849..7850,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 239,
        column: 8,
        span: 7850..7851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 239,
        column: 21,
        span: 7852..7864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 22,
        span: 7864..7865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 239,
        column: 23,
        span: 7865..7866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 24,
        span: 7866..7867,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 239,
        column: 26,
        span: 7868..7869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 239,
        column: 33,
        span: 7869..7876,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 239,
        column: 35,
        span: 7877..7878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 239,
        column: 42,
        span: 7879..7885,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 239,
        column: 43,
        span: 7885..7886,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 44,
        span: 7886..7887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 240,
        column: 13,
        span: 7888..7900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 14,
        span: 7900..7901,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a:sub()\"",
        ),
        line: 240,
        column: 23,
        span: 7901..7910,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 24,
        span: 7910..7911,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bad self\"",
        ),
        line: 240,
        column: 35,
        span: 7912..7922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 36,
        span: 7922..7923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 241,
        column: 13,
        span: 7924..7936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 14,
        span: 7936..7937,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.sub('a', {})\"",
        ),
        line: 241,
        column: 35,
        span: 7937..7958,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
        column: 36,
        span: 7958..7959,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#2\"",
        ),
        line: 241,
        column: 41,
        span: 7960..7964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 42,
        span: 7964..7965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 242,
        column: 13,
        span: 7966..7978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 14,
        span: 7978..7979,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"('a'):sub{}\"",
        ),
        line: 242,
        column: 27,
        span: 7979..7992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 28,
        span: 7992..7993,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#1\"",
        ),
        line: 242,
        column: 33,
        span: 7994..7998,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 34,
        span: 7998..7999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 244,
        column: 13,
        span: 8001..8013,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 14,
        span: 8013..8014,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table.sort({1,2,3}, table.sort)\"",
        ),
        line: 244,
        column: 47,
        span: 8014..8047,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
        column: 48,
        span: 8047..8048,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'table.sort'\"",
        ),
        line: 244,
        column: 63,
        span: 8049..8063,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 64,
        span: 8063..8064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 245,
        column: 13,
        span: 8065..8077,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 14,
        span: 8077..8078,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.gsub('s', 's', setmetatable)\"",
        ),
        line: 245,
        column: 51,
        span: 8078..8115,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 52,
        span: 8115..8116,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'setmetatable'\"",
        ),
        line: 245,
        column: 69,
        span: 8117..8133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 70,
        span: 8133..8134,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 249,
        column: 6,
        span: 8171..8176,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 249,
        column: 15,
        span: 8177..8185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 249,
        column: 17,
        span: 8186..8187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 19,
        span: 8188..8189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 249,
        column: 20,
        span: 8189..8190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 21,
        span: 8190..8191,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 250,
        column: 8,
        span: 8194..8199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 250,
        column: 10,
        span: 8200..8201,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 250,
        column: 12,
        span: 8202..8203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 250,
        column: 22,
        span: 8204..8213,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 250,
        column: 23,
        span: 8213..8214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 250,
        column: 29,
        span: 8214..8220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 30,
        span: 8220..8221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 250,
        column: 31,
        span: 8221..8222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 32,
        span: 8222..8223,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 251,
        column: 8,
        span: 8226..8231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 251,
        column: 10,
        span: 8232..8233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 11,
        span: 8233..8234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 251,
        column: 12,
        span: 8234..8235,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 251,
        column: 14,
        span: 8236..8237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 251,
        column: 24,
        span: 8238..8247,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 251,
        column: 25,
        span: 8247..8248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 251,
        column: 31,
        span: 8248..8254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 32,
        span: 8254..8255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 251,
        column: 33,
        span: 8255..8256,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 34,
        span: 8256..8257,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 252,
        column: 9,
        span: 8260..8266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 252,
        column: 0,
        span: 8267..8268,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 253,
        column: 0,
        span: 8269..8272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
        column: 7,
        span: 8273..8279,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 8,
        span: 8279..8280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 254,
        column: 14,
        span: 8280..8286,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 254,
        column: 15,
        span: 8286..8287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 254,
        column: 19,
        span: 8287..8291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 20,
        span: 8291..8292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 254,
        column: 21,
        span: 8292..8293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 22,
        span: 8293..8294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 23,
        span: 8294..8295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 24,
        span: 8295..8296,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C stack overflow\"",
        ),
        line: 254,
        column: 43,
        span: 8297..8315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 44,
        span: 8315..8316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 45,
        span: 8316..8317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 256,
        column: 13,
        span: 8319..8331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 14,
        span: 8331..8332,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"coroutine.yield()\"",
        ),
        line: 256,
        column: 33,
        span: 8332..8351,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 34,
        span: 8351..8352,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"outside a coroutine\"",
        ),
        line: 256,
        column: 56,
        span: 8353..8374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 57,
        span: 8374..8375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 258,
        column: 2,
        span: 8377..8378,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 258,
        column: 4,
        span: 8379..8380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 258,
        column: 14,
        span: 8381..8390,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 258,
        column: 15,
        span: 8390..8391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 258,
        column: 19,
        span: 8391..8395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 20,
        span: 8395..8396,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 258,
        column: 28,
        span: 8396..8404,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 30,
        span: 8405..8406,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 31,
        span: 8406..8407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 258,
        column: 37,
        span: 8408..8413,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 258,
        column: 38,
        span: 8413..8414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 258,
        column: 42,
        span: 8414..8418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 43,
        span: 8418..8419,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 258,
        column: 44,
        span: 8419..8420,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 45,
        span: 8419..8421,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 46,
        span: 8421..8422,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 47,
        span: 8421..8423,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 48,
        span: 8423..8424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 49,
        span: 8423..8425,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 258,
        column: 50,
        span: 8425..8426,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 51,
        span: 8426..8427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 258,
        column: 61,
        span: 8428..8437,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 258,
        column: 62,
        span: 8437..8438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 258,
        column: 67,
        span: 8438..8443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 68,
        span: 8443..8444,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 258,
        column: 72,
        span: 8445..8448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 73,
        span: 8448..8449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 259,
        column: 9,
        span: 8450..8458,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 10,
        span: 8458..8459,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield across\"",
        ),
        line: 259,
        column: 24,
        span: 8459..8473,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 25,
        span: 8473..8474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 259,
        column: 27,
        span: 8475..8476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 28,
        span: 8476..8477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "idsize",
        ),
        line: 264,
        column: 7,
        span: 8615..8621,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 264,
        column: 9,
        span: 8622..8623,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 12,
        span: 8623..8626,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 264,
        column: 14,
        span: 8627..8628,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 0,
        span: 8628..8630,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 265,
        column: 6,
        span: 8631..8636,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 265,
        column: 15,
        span: 8637..8645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 265,
        column: 25,
        span: 8646..8655,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 27,
        span: 8656..8657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 265,
        column: 33,
        span: 8657..8663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 34,
        span: 8663..8664,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 267,
        column: 8,
        span: 8685..8690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 267,
        column: 10,
        span: 8691..8692,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
        column: 11,
        span: 8692..8693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 267,
        column: 15,
        span: 8694..8697,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 267,
        column: 17,
        span: 8698..8699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 267,
        column: 22,
        span: 8700..8704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 23,
        span: 8704..8705,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 267,
        column: 26,
        span: 8705..8708,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
        column: 27,
        span: 8708..8709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 267,
        column: 34,
        span: 8710..8716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 35,
        span: 8716..8717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 268,
        column: 6,
        span: 8720..8723,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 268,
        column: 8,
        span: 8724..8725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 268,
        column: 15,
        span: 8726..8732,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 268,
        column: 16,
        span: 8732..8733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 268,
        column: 21,
        span: 8733..8738,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 22,
        span: 8738..8739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 268,
        column: 25,
        span: 8739..8742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 26,
        span: 8742..8743,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^([^:]*):\"",
        ),
        line: 268,
        column: 38,
        span: 8744..8755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 39,
        span: 8755..8756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 269,
        column: 9,
        span: 8797..8803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 10,
        span: 8803..8804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 269,
        column: 13,
        span: 8804..8807,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 269,
        column: 14,
        span: 8807..8808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 269,
        column: 17,
        span: 8808..8811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 18,
        span: 8811..8812,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 19,
        span: 8812..8813,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 269,
        column: 22,
        span: 8814..8816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "idsize",
        ),
        line: 269,
        column: 29,
        span: 8817..8823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 30,
        span: 8823..8824,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 270,
        column: 0,
        span: 8825..8828,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 272,
        column: 4,
        span: 8830..8833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 272,
        column: 6,
        span: 8834..8835,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 272,
        column: 8,
        span: 8836..8837,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 272,
        column: 11,
        span: 8837..8840,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 272,
        column: 13,
        span: 8841..8842,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 272,
        column: 16,
        span: 8842..8845,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 272,
        column: 17,
        span: 8845..8846,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 272,
        column: 20,
        span: 8846..8849,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 272,
        column: 22,
        span: 8850..8851,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 272,
        column: 25,
        span: 8851..8854,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 272,
        column: 28,
        span: 8855..8857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 273,
        column: 12,
        span: 8894..8903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 13,
        span: 8903..8904,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@\"",
        ),
        line: 273,
        column: 16,
        span: 8904..8907,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 273,
        column: 19,
        span: 8908..8910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 273,
        column: 26,
        span: 8911..8917,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 273,
        column: 27,
        span: 8917..8918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 273,
        column: 30,
        span: 8918..8921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 31,
        span: 8921..8922,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 273,
        column: 34,
        span: 8922..8925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 273,
        column: 35,
        span: 8925..8926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 273,
        column: 37,
        span: 8927..8928,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 38,
        span: 8928..8929,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 39,
        span: 8929..8930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 274,
        column: 12,
        span: 8949..8958,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 13,
        span: 8958..8959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 274,
        column: 19,
        span: 8959..8965,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 274,
        column: 20,
        span: 8965..8966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 274,
        column: 23,
        span: 8966..8969,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 24,
        span: 8969..8970,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 274,
        column: 27,
        span: 8970..8973,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 28,
        span: 8973..8974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 274,
        column: 30,
        span: 8975..8976,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 274,
        column: 32,
        span: 8977..8978,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 35,
        span: 8978..8981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 36,
        span: 8981..8982,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 37,
        span: 8982..8983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 275,
        column: 12,
        span: 9008..9017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 13,
        span: 9017..9018,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        line: 275,
        column: 16,
        span: 9018..9021,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 275,
        column: 19,
        span: 9022..9024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 275,
        column: 26,
        span: 9025..9031,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 275,
        column: 27,
        span: 9031..9032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 275,
        column: 30,
        span: 9032..9035,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 31,
        span: 9035..9036,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 275,
        column: 34,
        span: 9036..9039,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 35,
        span: 9039..9040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 275,
        column: 37,
        span: 9041..9042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 38,
        span: 9042..9043,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 39,
        span: 9043..9044,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 276,
        column: 0,
        span: 9064..9067,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 281,
        column: 6,
        span: 9093..9098,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 281,
        column: 15,
        span: 9099..9107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 281,
        column: 25,
        span: 9108..9117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
        column: 27,
        span: 9118..9119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 281,
        column: 28,
        span: 9119..9120,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
        column: 29,
        span: 9120..9121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 281,
        column: 31,
        span: 9122..9123,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
        column: 32,
        span: 9123..9124,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 282,
        column: 8,
        span: 9127..9132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 282,
        column: 12,
        span: 9133..9136,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
        column: 13,
        span: 9136..9137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 282,
        column: 16,
        span: 9137..9140,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 282,
        column: 18,
        span: 9141..9142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 282,
        column: 24,
        span: 9143..9148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 25,
        span: 9148..9149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 282,
        column: 29,
        span: 9149..9153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 30,
        span: 9153..9154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 282,
        column: 31,
        span: 9154..9155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 32,
        span: 9155..9156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 33,
        span: 9156..9157,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 283,
        column: 8,
        span: 9160..9165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 283,
        column: 13,
        span: 9166..9170,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 283,
        column: 15,
        span: 9171..9172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 283,
        column: 22,
        span: 9173..9179,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 283,
        column: 23,
        span: 9179..9180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 283,
        column: 28,
        span: 9180..9185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 29,
        span: 9185..9186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 283,
        column: 32,
        span: 9186..9189,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
        column: 33,
        span: 9189..9190,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":(%d+):\"",
        ),
        line: 283,
        column: 43,
        span: 9191..9200,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 44,
        span: 9200..9201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 284,
        column: 9,
        span: 9204..9210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 10,
        span: 9210..9211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 11,
        span: 9211..9212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 284,
        column: 15,
        span: 9212..9216,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 284,
        column: 19,
        span: 9217..9220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 284,
        column: 24,
        span: 9221..9225,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 284,
        column: 25,
        span: 9225..9226,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 284,
        column: 26,
        span: 9225..9227,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 27,
        span: 9227..9228,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 284,
        column: 30,
        span: 9229..9231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 284,
        column: 32,
        span: 9232..9233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 33,
        span: 9233..9234,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 285,
        column: 0,
        span: 9235..9238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 287,
        column: 10,
        span: 9240..9249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 11,
        span: 9249..9250,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a\\n for i=1,'a' do \\n print(i) \\n end\"",
        ),
        line: 287,
        column: 56,
        span: 9250..9295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 57,
        span: 9295..9296,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 287,
        column: 59,
        span: 9296..9298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 60,
        span: 9298..9299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 288,
        column: 10,
        span: 9300..9309,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 11,
        span: 9309..9310,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n local a \\n for k,v in 3 \\n do \\n print(k) \\n end\"",
        ),
        line: 288,
        column: 64,
        span: 9310..9363,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 65,
        span: 9363..9364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
        column: 67,
        span: 9364..9366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 68,
        span: 9366..9367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 289,
        column: 10,
        span: 9368..9377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 11,
        span: 9377..9378,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\n for k,v in \\n 3 \\n do \\n print(k) \\n end\"",
        ),
        line: 289,
        column: 58,
        span: 9378..9425,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 289,
        column: 59,
        span: 9425..9426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 289,
        column: 61,
        span: 9426..9428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 62,
        span: 9428..9429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 290,
        column: 10,
        span: 9430..9439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 11,
        span: 9439..9440,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a.x.y ()\\na=a+1\\nend\"",
        ),
        line: 290,
        column: 42,
        span: 9440..9471,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 290,
        column: 43,
        span: 9471..9472,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 290,
        column: 45,
        span: 9472..9474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 46,
        span: 9474..9475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 292,
        column: 10,
        span: 9477..9486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 11,
        span: 9486..9487,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = \\na\\n+\\n{}\"",
        ),
        line: 292,
        column: 27,
        span: 9487..9503,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 28,
        span: 9503..9504,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
        column: 30,
        span: 9504..9506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 31,
        span: 9506..9507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 293,
        column: 10,
        span: 9508..9517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 11,
        span: 9517..9518,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = \\n3\\n+\\n(\\n4\\n/\\nprint)\"",
        ),
        line: 293,
        column: 40,
        span: 9518..9547,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
        column: 41,
        span: 9547..9548,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 43,
        span: 9548..9550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 44,
        span: 9550..9551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 294,
        column: 10,
        span: 9552..9561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 11,
        span: 9561..9562,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = \\nprint\\n+\\n(\\n4\\n/\\n7)\"",
        ),
        line: 294,
        column: 40,
        span: 9562..9591,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
        column: 41,
        span: 9591..9592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 294,
        column: 43,
        span: 9592..9594,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 44,
        span: 9594..9595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 296,
        column: 10,
        span: 9597..9606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 11,
        span: 9606..9607,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\n=\\n-\\n\\nprint\\n;\"",
        ),
        line: 296,
        column: 32,
        span: 9607..9628,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 296,
        column: 33,
        span: 9628..9629,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 296,
        column: 35,
        span: 9629..9631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 36,
        span: 9631..9632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 298,
        column: 10,
        span: 9634..9643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 11,
        span: 9643..9644,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\na\n(\n23)\n]]",
        ),
        line: 302,
        column: 3,
        span: 9644..9657,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
        column: 4,
        span: 9657..9658,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 302,
        column: 6,
        span: 9658..9660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 7,
        span: 9660..9661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 304,
        column: 10,
        span: 9663..9672,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 11,
        span: 9672..9673,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal a = {x = 13}\na\n.\nx\n(\n23\n)\n]]",
        ),
        line: 312,
        column: 3,
        span: 9673..9710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 312,
        column: 4,
        span: 9710..9711,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 312,
        column: 6,
        span: 9711..9713,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 7,
        span: 9713..9714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 314,
        column: 10,
        span: 9716..9725,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 11,
        span: 9725..9726,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal a = {x = 13}\na\n.\nx\n(\n23 + a\n)\n]]",
        ),
        line: 322,
        column: 3,
        span: 9726..9767,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 322,
        column: 4,
        span: 9767..9768,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 322,
        column: 6,
        span: 9768..9770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 7,
        span: 9770..9771,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 324,
        column: 6,
        span: 9773..9778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 324,
        column: 8,
        span: 9779..9780,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 324,
        column: 10,
        span: 9781..9782,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  function g() f() end\n  function f(x) error('a', X) end\ng()\n]]",
        ),
        line: 328,
        column: 3,
        span: 9783..9849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 329,
        column: 2,
        span: 9850..9851,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 329,
        column: 3,
        span: 9851..9852,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
        column: 4,
        span: 9851..9853,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 329,
        column: 5,
        span: 9853..9854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 329,
        column: 14,
        span: 9854..9863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 15,
        span: 9863..9864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 16,
        span: 9864..9865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 329,
        column: 17,
        span: 9865..9866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 18,
        span: 9866..9867,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 329,
        column: 19,
        span: 9867..9868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
        column: 21,
        span: 9868..9870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 22,
        span: 9870..9871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 330,
        column: 2,
        span: 9872..9873,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 330,
        column: 3,
        span: 9873..9874,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 4,
        span: 9873..9875,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 330,
        column: 5,
        span: 9875..9876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 330,
        column: 14,
        span: 9876..9885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 15,
        span: 9885..9886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 16,
        span: 9886..9887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 330,
        column: 17,
        span: 9887..9888,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 18,
        span: 9888..9889,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
        column: 19,
        span: 9889..9890,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 330,
        column: 23,
        span: 9891..9894,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 24,
        span: 9894..9895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 331,
        column: 2,
        span: 9896..9897,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 331,
        column: 3,
        span: 9897..9898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 331,
        column: 4,
        span: 9897..9899,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 331,
        column: 5,
        span: 9899..9900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 331,
        column: 14,
        span: 9900..9909,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 15,
        span: 9909..9910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 16,
        span: 9910..9911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 331,
        column: 17,
        span: 9911..9912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 18,
        span: 9912..9913,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 331,
        column: 19,
        span: 9913..9914,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 331,
        column: 21,
        span: 9914..9916,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 22,
        span: 9916..9917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 332,
        column: 2,
        span: 9918..9919,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 332,
        column: 3,
        span: 9919..9920,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 4,
        span: 9919..9921,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 332,
        column: 5,
        span: 9921..9922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 332,
        column: 14,
        span: 9922..9931,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 15,
        span: 9931..9932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 16,
        span: 9932..9933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 332,
        column: 17,
        span: 9933..9934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 18,
        span: 9934..9935,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 332,
        column: 19,
        span: 9935..9936,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 21,
        span: 9936..9938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 22,
        span: 9938..9939,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 335,
        column: 3,
        span: 9942..9944,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 335,
        column: 7,
        span: 9945..9948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 335,
        column: 13,
        span: 9949..9954,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 335,
        column: 0,
        span: 9955..9959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 337,
        column: 17,
        span: 10007..10021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
        column: 18,
        span: 10021..10022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
        column: 19,
        span: 10022..10023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 338,
        column: 8,
        span: 10026..10031,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack overflow\"",
        ),
        line: 338,
        column: 32,
        span: 10031..10055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 339,
        column: 4,
        span: 10058..10059,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 339,
        column: 6,
        span: 10060..10061,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 339,
        column: 0,
        span: 10061..10063,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 340,
        column: 8,
        span: 10066..10071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 340,
        column: 10,
        span: 10072..10073,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 340,
        column: 12,
        span: 10074..10075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 340,
        column: 18,
        span: 10076..10081,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 340,
        column: 19,
        span: 10081..10082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 340,
        column: 26,
        span: 10082..10089,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 27,
        span: 10089..10090,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 340,
        column: 28,
        span: 10089..10091,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 29,
        span: 10091..10092,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 340,
        column: 33,
        span: 10093..10096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 34,
        span: 10096..10097,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 340,
        column: 35,
        span: 10097..10098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 340,
        column: 46,
        span: 10098..10109,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 340,
        column: 47,
        span: 10109..10110,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 340,
        column: 56,
        span: 10111..10119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 340,
        column: 58,
        span: 10120..10121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 60,
        span: 10122..10123,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 61,
        span: 10123..10124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 340,
        column: 63,
        span: 10125..10126,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 340,
        column: 64,
        span: 10126..10127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 340,
        column: 65,
        span: 10127..10128,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 340,
        column: 66,
        span: 10128..10129,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 340,
        column: 67,
        span: 10128..10130,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 340,
        column: 68,
        span: 10130..10131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 340,
        column: 70,
        span: 10132..10133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 71,
        span: 10133..10134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 72,
        span: 10134..10135,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 340,
        column: 0,
        span: 10136..10139,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 342,
        column: 8,
        span: 10143..10148,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 342,
        column: 17,
        span: 10149..10157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 342,
        column: 35,
        span: 10158..10175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 37,
        span: 10176..10177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 342,
        column: 38,
        span: 10177..10178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 39,
        span: 10178..10179,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 343,
        column: 11,
        span: 10184..10190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 13,
        span: 10191..10192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 343,
        column: 19,
        span: 10192..10198,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 343,
        column: 20,
        span: 10198..10199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 343,
        column: 24,
        span: 10199..10203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 25,
        span: 10203..10204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 343,
        column: 26,
        span: 10204..10205,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 343,
        column: 27,
        span: 10205..10206,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^.-:%d+: stack overflow\"",
        ),
        line: 343,
        column: 53,
        span: 10207..10232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 54,
        span: 10232..10233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 55,
        span: 10233..10234,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 344,
        column: 0,
        span: 10237..10240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 346,
        column: 9,
        span: 10299..10305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 10,
        span: 10305..10306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 346,
        column: 27,
        span: 10306..10323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 28,
        span: 10323..10324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 346,
        column: 32,
        span: 10324..10328,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 33,
        span: 10328..10329,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        line: 346,
        column: 38,
        span: 10329..10334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 39,
        span: 10334..10335,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 40,
        span: 10335..10336,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 41,
        span: 10336..10337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 347,
        column: 8,
        span: 10340..10345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 9,
        span: 10345..10346,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 347,
        column: 12,
        span: 10346..10349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 13,
        span: 10349..10350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 348,
        column: 9,
        span: 10353..10359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 10,
        span: 10359..10360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 348,
        column: 27,
        span: 10360..10377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 28,
        span: 10377..10378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 348,
        column: 32,
        span: 10378..10382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 33,
        span: 10382..10383,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        line: 348,
        column: 38,
        span: 10383..10388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 39,
        span: 10388..10389,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 40,
        span: 10389..10390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 41,
        span: 10390..10391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 349,
        column: 8,
        span: 10394..10399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 9,
        span: 10399..10400,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 349,
        column: 12,
        span: 10400..10403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 13,
        span: 10403..10404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 350,
        column: 9,
        span: 10407..10413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 10,
        span: 10413..10414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 350,
        column: 27,
        span: 10414..10431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 28,
        span: 10431..10432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 350,
        column: 32,
        span: 10432..10436,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 33,
        span: 10436..10437,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        line: 350,
        column: 38,
        span: 10437..10442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 39,
        span: 10442..10443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 40,
        span: 10443..10444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 41,
        span: 10444..10445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 351,
        column: 8,
        span: 10448..10453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 9,
        span: 10453..10454,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 351,
        column: 12,
        span: 10454..10457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 13,
        span: 10457..10458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 355,
        column: 4,
        span: 10498..10499,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 355,
        column: 6,
        span: 10500..10501,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 355,
        column: 0,
        span: 10501..10503,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 356,
        column: 8,
        span: 10506..10511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 356,
        column: 0,
        span: 10512..10514,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 357,
        column: 8,
        span: 10517..10522,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 357,
        column: 17,
        span: 10523..10531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 357,
        column: 19,
        span: 10532..10533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 20,
        span: 10533..10534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 357,
        column: 21,
        span: 10534..10535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 22,
        span: 10535..10536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 358,
        column: 7,
        span: 10541..10543,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 358,
        column: 9,
        span: 10544..10545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 358,
        column: 15,
        span: 10546..10551,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 358,
        column: 16,
        span: 10551..10552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 358,
        column: 23,
        span: 10552..10559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 24,
        span: 10559..10560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 358,
        column: 25,
        span: 10560..10561,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
        column: 26,
        span: 10561..10562,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 358,
        column: 30,
        span: 10563..10566,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 31,
        span: 10566..10567,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 358,
        column: 32,
        span: 10567..10568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 358,
        column: 43,
        span: 10568..10579,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 358,
        column: 44,
        span: 10579..10580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 358,
        column: 46,
        span: 10581..10582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 47,
        span: 10582..10583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 48,
        span: 10583..10584,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 359,
        column: 0,
        span: 10587..10590,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 360,
        column: 8,
        span: 10593..10598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 360,
        column: 10,
        span: 10599..10600,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 11,
        span: 10600..10601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stackmsg",
        ),
        line: 360,
        column: 20,
        span: 10602..10610,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 360,
        column: 22,
        span: 10611..10612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 360,
        column: 29,
        span: 10613..10619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 30,
        span: 10619..10620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 360,
        column: 31,
        span: 10620..10621,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 32,
        span: 10621..10622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 360,
        column: 38,
        span: 10623..10628,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 360,
        column: 39,
        span: 10628..10629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 360,
        column: 48,
        span: 10629..10638,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 49,
        span: 10638..10639,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 51,
        span: 10639..10641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 52,
        span: 10641..10642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 361,
        column: 8,
        span: 10645..10650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 9,
        span: 10650..10651,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 361,
        column: 12,
        span: 10651..10654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 13,
        span: 10654..10655,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 362,
        column: 8,
        span: 10658..10663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 362,
        column: 14,
        span: 10664..10669,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 362,
        column: 16,
        span: 10670..10671,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 362,
        column: 18,
        span: 10672..10673,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 362,
        column: 19,
        span: 10673..10674,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 363,
        column: 6,
        span: 10677..10680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 363,
        column: 11,
        span: 10681..10685,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 363,
        column: 14,
        span: 10686..10688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 363,
        column: 21,
        span: 10689..10695,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 363,
        column: 22,
        span: 10695..10696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 363,
        column: 28,
        span: 10696..10702,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 29,
        span: 10702..10703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stackmsg",
        ),
        line: 363,
        column: 37,
        span: 10703..10711,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
        column: 38,
        span: 10711..10712,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^\\n]*\"",
        ),
        line: 363,
        column: 47,
        span: 10713..10721,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 48,
        span: 10721..10722,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 363,
        column: 0,
        span: 10723..10725,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 364,
        column: 10,
        span: 10730..10735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        line: 364,
        column: 15,
        span: 10736..10740,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 364,
        column: 17,
        span: 10741..10742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 364,
        column: 24,
        span: 10743..10749,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 364,
        column: 25,
        span: 10749..10750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 364,
        column: 30,
        span: 10750..10755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 31,
        span: 10755..10756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 364,
        column: 35,
        span: 10756..10760,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 36,
        span: 10760..10761,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":(%d+):\"",
        ),
        line: 364,
        column: 46,
        span: 10762..10771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 47,
        span: 10771..10772,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 365,
        column: 7,
        span: 10777..10779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        line: 365,
        column: 12,
        span: 10780..10784,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 365,
        column: 17,
        span: 10785..10789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 365,
        column: 23,
        span: 10790..10795,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 365,
        column: 24,
        span: 10795..10796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 365,
        column: 30,
        span: 10796..10802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 31,
        span: 10802..10803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 365,
        column: 36,
        span: 10803..10808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 37,
        span: 10808..10809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 365,
        column: 46,
        span: 10810..10818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 47,
        span: 10818..10819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        line: 365,
        column: 51,
        span: 10819..10823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 52,
        span: 10823..10824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 53,
        span: 10824..10825,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 365,
        column: 0,
        span: 10826..10829,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 366,
        column: 0,
        span: 10832..10835,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 367,
        column: 8,
        span: 10838..10843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 367,
        column: 10,
        span: 10844..10845,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 367,
        column: 11,
        span: 10845..10846,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 0,
        span: 10845..10847,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 368,
        column: 8,
        span: 10850..10855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 368,
        column: 14,
        span: 10856..10861,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 368,
        column: 15,
        span: 10861..10862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 368,
        column: 16,
        span: 10862..10863,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 368,
        column: 17,
        span: 10863..10864,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 368,
        column: 20,
        span: 10865..10867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 368,
        column: 23,
        span: 10868..10870,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 368,
        column: 0,
        span: 10871..10873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 369,
        column: 11,
        span: 10878..10884,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
        column: 12,
        span: 10884..10885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 369,
        column: 17,
        span: 10885..10890,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 369,
        column: 18,
        span: 10890..10891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 369,
        column: 19,
        span: 10891..10892,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 369,
        column: 20,
        span: 10892..10893,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 369,
        column: 23,
        span: 10894..10896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 369,
        column: 25,
        span: 10897..10898,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
        column: 26,
        span: 10898..10899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 370,
        column: 6,
        span: 10904..10905,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 370,
        column: 8,
        span: 10906..10907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 370,
        column: 10,
        span: 10908..10909,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 370,
        column: 11,
        span: 10909..10910,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 370,
        column: 0,
        span: 10909..10911,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 371,
        column: 0,
        span: 10914..10917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 372,
        column: 9,
        span: 10920..10926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 10,
        span: 10926..10927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 372,
        column: 11,
        span: 10927..10928,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 372,
        column: 13,
        span: 10929..10930,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 16,
        span: 10930..10933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 17,
        span: 10933..10934,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 376,
        column: 8,
        span: 10968..10973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 376,
        column: 12,
        span: 10974..10977,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 13,
        span: 10977..10978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 376,
        column: 17,
        span: 10979..10982,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 376,
        column: 19,
        span: 10983..10984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 376,
        column: 26,
        span: 10985..10991,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 27,
        span: 10991..10992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 376,
        column: 32,
        span: 10992..10997,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 33,
        span: 10997..10998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 376,
        column: 39,
        span: 10999..11004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 40,
        span: 11004..11005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 377,
        column: 9,
        span: 11008..11014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 10,
        span: 11014..11015,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 377,
        column: 13,
        span: 11015..11018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 377,
        column: 17,
        span: 11019..11022,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 377,
        column: 21,
        span: 11023..11026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 377,
        column: 26,
        span: 11027..11031,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 27,
        span: 11031..11032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 377,
        column: 30,
        span: 11032..11035,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 31,
        span: 11035..11036,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 377,
        column: 34,
        span: 11037..11039,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 377,
        column: 43,
        span: 11040..11048,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 44,
        span: 11048..11049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 378,
        column: 8,
        span: 11052..11057,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
        column: 9,
        span: 11057..11058,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 378,
        column: 12,
        span: 11058..11061,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
        column: 13,
        span: 11061..11062,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 380,
        column: 8,
        span: 11066..11071,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 380,
        column: 17,
        span: 11072..11080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 380,
        column: 19,
        span: 11081..11082,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 21,
        span: 11083..11084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 380,
        column: 22,
        span: 11084..11085,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
        column: 23,
        span: 11085..11086,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 381,
        column: 7,
        span: 11091..11093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 381,
        column: 9,
        span: 11094..11095,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 381,
        column: 11,
        span: 11095..11097,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 381,
        column: 12,
        span: 11096..11098,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 381,
        column: 17,
        span: 11099..11103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 381,
        column: 23,
        span: 11104..11109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 381,
        column: 24,
        span: 11109..11110,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\n'",
        ),
        line: 381,
        column: 29,
        span: 11110..11115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 381,
        column: 30,
        span: 11115..11116,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 382,
        column: 0,
        span: 11121..11125,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 383,
        column: 12,
        span: 11132..11137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 383,
        column: 16,
        span: 11138..11141,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 383,
        column: 18,
        span: 11142..11143,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 383,
        column: 27,
        span: 11144..11152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 29,
        span: 11153..11154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 30,
        span: 11154..11155,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 383,
        column: 37,
        span: 11156..11162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 383,
        column: 39,
        span: 11163..11164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 40,
        span: 11164..11165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 383,
        column: 41,
        span: 11165..11166,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 383,
        column: 42,
        span: 11166..11167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 43,
        span: 11166..11168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 44,
        span: 11168..11169,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 383,
        column: 0,
        span: 11170..11173,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 384,
        column: 12,
        span: 11180..11185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 384,
        column: 14,
        span: 11186..11187,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 384,
        column: 15,
        span: 11187..11188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 384,
        column: 16,
        span: 11188..11189,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 384,
        column: 18,
        span: 11190..11191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 384,
        column: 25,
        span: 11192..11198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
        column: 26,
        span: 11198..11199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 384,
        column: 29,
        span: 11199..11202,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 384,
        column: 30,
        span: 11202..11203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 384,
        column: 34,
        span: 11204..11207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
        column: 35,
        span: 11207..11208,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 385,
        column: 13,
        span: 11215..11221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 385,
        column: 15,
        span: 11222..11223,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 16,
        span: 11223..11224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 385,
        column: 0,
        span: 11224..11225,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 386,
        column: 0,
        span: 11230..11233,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 387,
        column: 0,
        span: 11236..11239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 388,
        column: 4,
        span: 11242..11243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
        column: 5,
        span: 11243..11244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 388,
        column: 6,
        span: 11243..11245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
        column: 7,
        span: 11245..11246,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 390,
        column: 8,
        span: 11250..11255,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 390,
        column: 17,
        span: 11256..11264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 390,
        column: 22,
        span: 11265..11269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 24,
        span: 11270..11271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 390,
        column: 25,
        span: 11271..11272,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 26,
        span: 11272..11273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 390,
        column: 27,
        span: 11273..11274,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 28,
        span: 11274..11275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 390,
        column: 29,
        span: 11275..11276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 30,
        span: 11276..11277,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 390,
        column: 37,
        span: 11278..11284,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 39,
        span: 11284..11286,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 390,
        column: 41,
        span: 11287..11288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 390,
        column: 46,
        span: 11289..11293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 47,
        span: 11293..11294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 390,
        column: 48,
        span: 11294..11295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 49,
        span: 11295..11296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 390,
        column: 51,
        span: 11297..11298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 390,
        column: 52,
        span: 11298..11299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 390,
        column: 54,
        span: 11300..11301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 55,
        span: 11301..11302,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 390,
        column: 0,
        span: 11303..11306,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 392,
        column: 8,
        span: 11311..11316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 392,
        column: 12,
        span: 11317..11320,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
        column: 13,
        span: 11320..11321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 392,
        column: 17,
        span: 11322..11325,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 392,
        column: 19,
        span: 11326..11327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 392,
        column: 26,
        span: 11328..11334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 27,
        span: 11334..11335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 392,
        column: 31,
        span: 11335..11339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
        column: 32,
        span: 11339..11340,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 392,
        column: 41,
        span: 11341..11349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 392,
        column: 43,
        span: 11350..11351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 392,
        column: 44,
        span: 11351..11352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 392,
        column: 45,
        span: 11352..11353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 393,
        column: 11,
        span: 11358..11364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 12,
        span: 11364..11365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 393,
        column: 18,
        span: 11365..11371,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 393,
        column: 19,
        span: 11371..11372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 393,
        column: 23,
        span: 11372..11376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 24,
        span: 11376..11377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 393,
        column: 25,
        span: 11377..11378,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 393,
        column: 26,
        span: 11378..11379,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        line: 393,
        column: 43,
        span: 11380..11396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 44,
        span: 11396..11397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 45,
        span: 11397..11398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 394,
        column: 13,
        span: 11403..11411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 14,
        span: 11411..11412,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error handling\"",
        ),
        line: 394,
        column: 30,
        span: 11412..11428,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 31,
        span: 11428..11429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 394,
        column: 36,
        span: 11430..11434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 37,
        span: 11434..11435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 395,
        column: 11,
        span: 11440..11446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 12,
        span: 11446..11447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 395,
        column: 16,
        span: 11447..11451,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 395,
        column: 17,
        span: 11451..11452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 395,
        column: 20,
        span: 11452..11455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 21,
        span: 11455..11456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
        column: 22,
        span: 11455..11457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 23,
        span: 11457..11458,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 395,
        column: 26,
        span: 11459..11461,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
        column: 28,
        span: 11461..11463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 29,
        span: 11463..11464,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 396,
        column: 11,
        span: 11469..11475,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 0,
        span: 11475..11478,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 397,
        column: 6,
        span: 11481..11484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 7,
        span: 11484..11485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 398,
        column: 9,
        span: 11488..11494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 10,
        span: 11494..11495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 398,
        column: 13,
        span: 11495..11498,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 398,
        column: 16,
        span: 11499..11501,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 19,
        span: 11501..11504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 20,
        span: 11504..11505,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 400,
        column: 8,
        span: 11509..11514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 400,
        column: 10,
        span: 11515..11516,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 400,
        column: 12,
        span: 11517..11518,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 400,
        column: 21,
        span: 11519..11527,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 400,
        column: 23,
        span: 11528..11529,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 400,
        column: 24,
        span: 11529..11530,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 401,
        column: 8,
        span: 11535..11538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 401,
        column: 10,
        span: 11539..11540,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 401,
        column: 12,
        span: 11541..11542,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "999900",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 19,
        span: 11542..11549,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
        column: 20,
        span: 11549..11550,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000000",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 28,
        span: 11550..11558,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
        column: 29,
        span: 11558..11559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 31,
        span: 11559..11561,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 401,
        column: 34,
        span: 11562..11564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 401,
        column: 40,
        span: 11565..11570,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 401,
        column: 41,
        span: 11570..11571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 401,
        column: 47,
        span: 11571..11577,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 401,
        column: 48,
        span: 11577..11578,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 401,
        column: 49,
        span: 11578..11579,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 401,
        column: 50,
        span: 11579..11580,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
        column: 51,
        span: 11580..11581,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 53,
        span: 11581..11583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
        column: 54,
        span: 11583..11584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 401,
        column: 56,
        span: 11585..11586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 401,
        column: 57,
        span: 11586..11587,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 401,
        column: 0,
        span: 11588..11591,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 402,
        column: 0,
        span: 11594..11597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        line: 403,
        column: 11,
        span: 11600..11608,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
        column: 12,
        span: 11608..11609,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many results\"",
        ),
        line: 403,
        column: 30,
        span: 11609..11627,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 403,
        column: 31,
        span: 11627..11628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 403,
        column: 33,
        span: 11629..11630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
        column: 34,
        span: 11630..11631,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 405,
        column: 0,
        span: 11633..11636,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 408,
        column: 0,
        span: 11639..11641,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 410,
        column: 8,
        span: 11669..11674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 410,
        column: 10,
        span: 11675..11676,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 410,
        column: 12,
        span: 11677..11678,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 410,
        column: 14,
        span: 11679..11680,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 410,
        column: 15,
        span: 11680..11681,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 411,
        column: 8,
        span: 11684..11689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 411,
        column: 12,
        span: 11690..11693,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
        column: 13,
        span: 11693..11694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 411,
        column: 17,
        span: 11695..11698,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 411,
        column: 19,
        span: 11699..11700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 411,
        column: 25,
        span: 11701..11706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 26,
        span: 11706..11707,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 411,
        column: 34,
        span: 11707..11715,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 36,
        span: 11716..11717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 37,
        span: 11717..11718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 411,
        column: 43,
        span: 11719..11724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 44,
        span: 11724..11725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 411,
        column: 45,
        span: 11725..11726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 46,
        span: 11726..11727,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 411,
        column: 50,
        span: 11728..11731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 51,
        span: 11731..11732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 412,
        column: 9,
        span: 11735..11741,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 10,
        span: 11741..11742,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 412,
        column: 13,
        span: 11742..11745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 412,
        column: 17,
        span: 11746..11749,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 412,
        column: 21,
        span: 11750..11753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 412,
        column: 25,
        span: 11754..11757,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 412,
        column: 28,
        span: 11758..11760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 412,
        column: 30,
        span: 11761..11762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 31,
        span: 11762..11763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 414,
        column: 6,
        span: 11767..11770,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 414,
        column: 7,
        span: 11770..11771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 414,
        column: 11,
        span: 11772..11775,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 414,
        column: 13,
        span: 11776..11777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 414,
        column: 19,
        span: 11778..11783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 20,
        span: 11783..11784,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 414,
        column: 28,
        span: 11784..11792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 30,
        span: 11793..11794,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 31,
        span: 11794..11795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 414,
        column: 37,
        span: 11796..11801,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 38,
        span: 11801..11802,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 414,
        column: 41,
        span: 11802..11805,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 42,
        span: 11805..11806,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 414,
        column: 46,
        span: 11807..11810,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 47,
        span: 11810..11811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 415,
        column: 9,
        span: 11814..11820,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 10,
        span: 11820..11821,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 415,
        column: 13,
        span: 11821..11824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 415,
        column: 17,
        span: 11825..11828,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 415,
        column: 21,
        span: 11829..11832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 415,
        column: 25,
        span: 11833..11836,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 415,
        column: 28,
        span: 11837..11839,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 415,
        column: 32,
        span: 11840..11843,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 33,
        span: 11843..11844,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 417,
        column: 8,
        span: 11848..11853,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 417,
        column: 17,
        span: 11854..11862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 417,
        column: 19,
        span: 11863..11864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 20,
        span: 11864..11865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 21,
        span: 11865..11866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 417,
        column: 27,
        span: 11867..11872,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 417,
        column: 28,
        span: 11872..11873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 417,
        column: 31,
        span: 11873..11876,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 417,
        column: 32,
        span: 11876..11877,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 417,
        column: 35,
        span: 11877..11880,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 417,
        column: 36,
        span: 11880..11881,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 417,
        column: 0,
        span: 11882..11885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 418,
        column: 6,
        span: 11888..11891,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 418,
        column: 7,
        span: 11891..11892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 418,
        column: 11,
        span: 11893..11896,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 418,
        column: 13,
        span: 11897..11898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 418,
        column: 20,
        span: 11899..11905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 21,
        span: 11905..11906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 418,
        column: 22,
        span: 11906..11907,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 418,
        column: 23,
        span: 11907..11908,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 418,
        column: 32,
        span: 11909..11917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 34,
        span: 11918..11919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 418,
        column: 35,
        span: 11919..11920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 36,
        span: 11920..11921,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 418,
        column: 43,
        span: 11922..11928,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 418,
        column: 45,
        span: 11929..11930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 418,
        column: 48,
        span: 11930..11933,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 418,
        column: 49,
        span: 11933..11934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 418,
        column: 50,
        span: 11934..11935,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 418,
        column: 51,
        span: 11935..11936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 418,
        column: 54,
        span: 11936..11939,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 418,
        column: 56,
        span: 11939..11941,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y'",
        ),
        line: 418,
        column: 59,
        span: 11941..11944,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 418,
        column: 60,
        span: 11944..11945,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 418,
        column: 64,
        span: 11946..11949,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 65,
        span: 11949..11950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 419,
        column: 9,
        span: 11953..11959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 10,
        span: 11959..11960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 419,
        column: 13,
        span: 11960..11963,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 419,
        column: 14,
        span: 11963..11964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 419,
        column: 17,
        span: 11964..11967,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 419,
        column: 20,
        span: 11968..11970,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xy'",
        ),
        line: 419,
        column: 25,
        span: 11971..11975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 26,
        span: 11975..11976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 422,
        column: 6,
        span: 12015..12018,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 7,
        span: 12018..12019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 422,
        column: 11,
        span: 12020..12023,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 422,
        column: 13,
        span: 12024..12025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 422,
        column: 19,
        span: 12026..12031,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
        column: 20,
        span: 12031..12032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 422,
        column: 26,
        span: 12032..12038,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 27,
        span: 12038..12039,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 422,
        column: 33,
        span: 12040..12045,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 34,
        span: 12045..12046,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 422,
        column: 38,
        span: 12047..12050,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 39,
        span: 12050..12051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 422,
        column: 41,
        span: 12052..12053,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
        column: 42,
        span: 12053..12054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 423,
        column: 9,
        span: 12057..12063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 10,
        span: 12063..12064,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 423,
        column: 13,
        span: 12064..12067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 423,
        column: 17,
        span: 12068..12071,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 423,
        column: 21,
        span: 12072..12075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 423,
        column: 25,
        span: 12076..12079,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 423,
        column: 28,
        span: 12080..12082,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 423,
        column: 32,
        span: 12083..12086,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 33,
        span: 12086..12087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 426,
        column: 6,
        span: 12122..12125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 426,
        column: 7,
        span: 12125..12126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 426,
        column: 11,
        span: 12127..12130,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 426,
        column: 13,
        span: 12131..12132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 426,
        column: 19,
        span: 12133..12138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 20,
        span: 12138..12139,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 426,
        column: 28,
        span: 12139..12147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 30,
        span: 12148..12149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
        column: 31,
        span: 12149..12150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 426,
        column: 38,
        span: 12151..12157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 39,
        span: 12157..12158,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 426,
        column: 44,
        span: 12158..12163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
        column: 45,
        span: 12163..12164,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 426,
        column: 49,
        span: 12165..12168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
        column: 50,
        span: 12168..12169,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 427,
        column: 8,
        span: 12172..12177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 427,
        column: 13,
        span: 12178..12182,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 427,
        column: 15,
        span: 12183..12184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 427,
        column: 22,
        span: 12185..12191,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 427,
        column: 23,
        span: 12191..12192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 427,
        column: 28,
        span: 12192..12197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 29,
        span: 12197..12198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 427,
        column: 32,
        span: 12198..12201,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 427,
        column: 33,
        span: 12201..12202,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+%.lua:(%d+): assertion failed!$\"",
        ),
        line: 427,
        column: 70,
        span: 12203..12239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 71,
        span: 12239..12240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 428,
        column: 9,
        span: 12243..12249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 10,
        span: 12249..12250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 428,
        column: 18,
        span: 12250..12258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 19,
        span: 12258..12259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 428,
        column: 23,
        span: 12259..12263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 24,
        span: 12263..12264,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 428,
        column: 27,
        span: 12265..12267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 428,
        column: 33,
        span: 12268..12273,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 428,
        column: 34,
        span: 12273..12274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 428,
        column: 41,
        span: 12274..12281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 42,
        span: 12281..12282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 428,
        column: 43,
        span: 12281..12283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 428,
        column: 44,
        span: 12283..12284,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 428,
        column: 48,
        span: 12285..12288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 49,
        span: 12288..12289,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 428,
        column: 50,
        span: 12289..12290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 428,
        column: 61,
        span: 12290..12301,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 428,
        column: 63,
        span: 12302..12303,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 428,
        column: 65,
        span: 12303..12305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 66,
        span: 12305..12306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 431,
        column: 6,
        span: 12349..12352,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 431,
        column: 7,
        span: 12352..12353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 431,
        column: 11,
        span: 12354..12357,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 431,
        column: 13,
        span: 12358..12359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 431,
        column: 19,
        span: 12360..12365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 431,
        column: 20,
        span: 12365..12366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 431,
        column: 26,
        span: 12366..12372,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 431,
        column: 27,
        span: 12372..12373,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 431,
        column: 33,
        span: 12374..12379,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 431,
        column: 34,
        span: 12379..12380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 431,
        column: 36,
        span: 12381..12382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 431,
        column: 37,
        span: 12382..12383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 432,
        column: 9,
        span: 12386..12392,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 10,
        span: 12392..12393,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 432,
        column: 13,
        span: 12393..12396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 432,
        column: 17,
        span: 12397..12400,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 432,
        column: 21,
        span: 12401..12404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 432,
        column: 25,
        span: 12405..12408,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 432,
        column: 28,
        span: 12409..12411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 432,
        column: 30,
        span: 12412..12413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 31,
        span: 12413..12414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 434,
        column: 6,
        span: 12418..12421,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 7,
        span: 12421..12422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 434,
        column: 11,
        span: 12423..12426,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 434,
        column: 13,
        span: 12427..12428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 434,
        column: 19,
        span: 12429..12434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 20,
        span: 12434..12435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 434,
        column: 26,
        span: 12435..12441,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 27,
        span: 12441..12442,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 434,
        column: 31,
        span: 12443..12446,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 32,
        span: 12446..12447,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 434,
        column: 36,
        span: 12448..12451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 37,
        span: 12451..12452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 435,
        column: 9,
        span: 12455..12461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
        column: 10,
        span: 12461..12462,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 435,
        column: 13,
        span: 12462..12465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 435,
        column: 17,
        span: 12466..12469,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 435,
        column: 21,
        span: 12470..12473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 435,
        column: 25,
        span: 12474..12477,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 435,
        column: 28,
        span: 12478..12480,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 435,
        column: 32,
        span: 12481..12484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
        column: 33,
        span: 12484..12485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 438,
        column: 6,
        span: 12521..12524,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 438,
        column: 7,
        span: 12524..12525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 438,
        column: 11,
        span: 12526..12529,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 438,
        column: 13,
        span: 12530..12531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 438,
        column: 19,
        span: 12532..12537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 438,
        column: 20,
        span: 12537..12538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 438,
        column: 26,
        span: 12538..12544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 438,
        column: 27,
        span: 12544..12545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 439,
        column: 9,
        span: 12548..12554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 439,
        column: 10,
        span: 12554..12555,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 439,
        column: 13,
        span: 12555..12558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 439,
        column: 17,
        span: 12559..12562,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 439,
        column: 21,
        span: 12563..12566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 439,
        column: 28,
        span: 12567..12573,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 439,
        column: 29,
        span: 12573..12574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 439,
        column: 33,
        span: 12574..12578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 439,
        column: 34,
        span: 12578..12579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 439,
        column: 37,
        span: 12579..12582,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 439,
        column: 38,
        span: 12582..12583,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"value expected\"",
        ),
        line: 439,
        column: 55,
        span: 12584..12600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 439,
        column: 56,
        span: 12600..12601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 439,
        column: 57,
        span: 12601..12602,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 440,
        column: 0,
        span: 12603..12606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 443,
        column: 2,
        span: 12633..12634,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 443,
        column: 3,
        span: 12634..12635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 443,
        column: 5,
        span: 12636..12637,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 443,
        column: 6,
        span: 12637..12638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 443,
        column: 8,
        span: 12639..12640,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 443,
        column: 10,
        span: 12641..12642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 443,
        column: 17,
        span: 12643..12649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 443,
        column: 18,
        span: 12649..12650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 443,
        column: 24,
        span: 12650..12656,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 443,
        column: 25,
        span: 12656..12657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 443,
        column: 29,
        span: 12657..12661,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 443,
        column: 30,
        span: 12661..12662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 443,
        column: 36,
        span: 12663..12668,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 443,
        column: 37,
        span: 12668..12669,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 443,
        column: 43,
        span: 12670..12675,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 443,
        column: 44,
        span: 12675..12676,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"al\"",
        ),
        line: 443,
        column: 49,
        span: 12677..12681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 443,
        column: 50,
        span: 12681..12682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 444,
        column: 7,
        span: 12683..12689,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 444,
        column: 8,
        span: 12689..12690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 444,
        column: 9,
        span: 12690..12691,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 444,
        column: 13,
        span: 12692..12695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 444,
        column: 15,
        span: 12696..12697,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 444,
        column: 18,
        span: 12698..12700,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 444,
        column: 20,
        span: 12700..12702,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 444,
        column: 24,
        span: 12703..12706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 444,
        column: 26,
        span: 12707..12708,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 444,
        column: 29,
        span: 12709..12711,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 444,
        column: 31,
        span: 12711..12713,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 444,
        column: 32,
        span: 12713..12714,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 445,
        column: 2,
        span: 12715..12716,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 445,
        column: 3,
        span: 12716..12717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 445,
        column: 5,
        span: 12718..12719,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 445,
        column: 6,
        span: 12719..12720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 445,
        column: 8,
        span: 12721..12722,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 445,
        column: 10,
        span: 12723..12724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 445,
        column: 17,
        span: 12725..12731,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
        column: 18,
        span: 12731..12732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 445,
        column: 24,
        span: 12732..12738,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 445,
        column: 25,
        span: 12738..12739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 445,
        column: 29,
        span: 12739..12743,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 445,
        column: 30,
        span: 12743..12744,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 445,
        column: 39,
        span: 12745..12753,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
        column: 41,
        span: 12754..12755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 445,
        column: 42,
        span: 12755..12756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
        column: 43,
        span: 12756..12757,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 445,
        column: 50,
        span: 12758..12764,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 445,
        column: 52,
        span: 12765..12766,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 445,
        column: 53,
        span: 12766..12767,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 445,
        column: 57,
        span: 12768..12771,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 445,
        column: 58,
        span: 12771..12772,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 445,
        column: 63,
        span: 12773..12777,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 445,
        column: 64,
        span: 12777..12778,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"al\"",
        ),
        line: 445,
        column: 69,
        span: 12779..12783,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
        column: 70,
        span: 12783..12784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 446,
        column: 7,
        span: 12785..12791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
        column: 8,
        span: 12791..12792,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 446,
        column: 11,
        span: 12792..12795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 446,
        column: 13,
        span: 12796..12797,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 446,
        column: 17,
        span: 12798..12801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 446,
        column: 22,
        span: 12802..12806,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
        column: 23,
        span: 12806..12807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 446,
        column: 24,
        span: 12807..12808,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
        column: 25,
        span: 12808..12809,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 446,
        column: 28,
        span: 12810..12812,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 446,
        column: 36,
        span: 12813..12820,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 446,
        column: 40,
        span: 12821..12824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 446,
        column: 42,
        span: 12825..12826,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 446,
        column: 45,
        span: 12827..12829,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 446,
        column: 49,
        span: 12830..12833,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
        column: 50,
        span: 12833..12834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 449,
        column: 6,
        span: 12837..12842,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
        column: 7,
        span: 12842..12843,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing tokens in error messages\"",
        ),
        line: 449,
        column: 41,
        span: 12843..12877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 449,
        column: 42,
        span: 12877..12878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 450,
        column: 12,
        span: 12879..12890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 13,
        span: 12890..12891,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"syntax error\"",
        ),
        line: 450,
        column: 27,
        span: 12891..12905,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 450,
        column: 28,
        span: 12905..12906,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 450,
        column: 31,
        span: 12907..12909,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 450,
        column: 32,
        span: 12909..12910,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error\"",
        ),
        line: 450,
        column: 40,
        span: 12911..12918,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 450,
        column: 41,
        span: 12918..12919,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 450,
        column: 43,
        span: 12919..12921,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 44,
        span: 12921..12922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 451,
        column: 12,
        span: 12923..12934,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 13,
        span: 12934..12935,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1.000\"",
        ),
        line: 451,
        column: 20,
        span: 12935..12942,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
        column: 21,
        span: 12942..12943,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 451,
        column: 24,
        span: 12944..12946,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
        column: 25,
        span: 12946..12947,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1.000\"",
        ),
        line: 451,
        column: 33,
        span: 12948..12955,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
        column: 34,
        span: 12955..12956,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 451,
        column: 36,
        span: 12956..12958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 37,
        span: 12958..12959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 452,
        column: 12,
        span: 12960..12971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 452,
        column: 13,
        span: 12971..12972,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[a]]\"",
        ),
        line: 452,
        column: 20,
        span: 12972..12979,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 452,
        column: 21,
        span: 12979..12980,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 452,
        column: 24,
        span: 12981..12983,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 452,
        column: 25,
        span: 12983..12984,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[a]]\"",
        ),
        line: 452,
        column: 33,
        span: 12985..12992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 452,
        column: 34,
        span: 12992..12993,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 452,
        column: 36,
        span: 12993..12995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
        column: 37,
        span: 12995..12996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 453,
        column: 12,
        span: 12997..13008,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
        column: 13,
        span: 13008..13009,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aa'\"",
        ),
        line: 453,
        column: 19,
        span: 13009..13015,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 453,
        column: 20,
        span: 13015..13016,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 453,
        column: 23,
        span: 13017..13019,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 453,
        column: 24,
        span: 13019..13020,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aa'\"",
        ),
        line: 453,
        column: 31,
        span: 13021..13027,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 453,
        column: 32,
        span: 13027..13028,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 453,
        column: 34,
        span: 13028..13030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
        column: 35,
        span: 13030..13031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 454,
        column: 12,
        span: 13032..13043,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
        column: 13,
        span: 13043..13044,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"while << do end\"",
        ),
        line: 454,
        column: 30,
        span: 13044..13061,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 454,
        column: 31,
        span: 13061..13062,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 454,
        column: 34,
        span: 13063..13065,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 454,
        column: 35,
        span: 13065..13066,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<<\"",
        ),
        line: 454,
        column: 40,
        span: 13067..13071,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 454,
        column: 41,
        span: 13071..13072,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 454,
        column: 43,
        span: 13072..13074,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
        column: 44,
        span: 13074..13075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 455,
        column: 12,
        span: 13076..13087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 455,
        column: 13,
        span: 13087..13088,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for >> do end\"",
        ),
        line: 455,
        column: 28,
        span: 13088..13103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 455,
        column: 29,
        span: 13103..13104,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 455,
        column: 32,
        span: 13105..13107,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 455,
        column: 33,
        span: 13107..13108,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\">>\"",
        ),
        line: 455,
        column: 38,
        span: 13109..13113,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 455,
        column: 39,
        span: 13113..13114,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 455,
        column: 41,
        span: 13114..13116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 455,
        column: 42,
        span: 13116..13117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 458,
        column: 12,
        span: 13165..13176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
        column: 13,
        span: 13176..13177,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\1a = 1\"",
        ),
        line: 458,
        column: 23,
        span: 13177..13187,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 458,
        column: 24,
        span: 13187..13188,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 458,
        column: 27,
        span: 13189..13191,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 458,
        column: 28,
        span: 13191..13192,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<\\\\1>\"",
        ),
        line: 458,
        column: 36,
        span: 13193..13200,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 458,
        column: 37,
        span: 13200..13201,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 458,
        column: 39,
        span: 13201..13203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
        column: 40,
        span: 13203..13204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 461,
        column: 12,
        span: 13243..13254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
        column: 13,
        span: 13254..13255,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\255a = 1\"",
        ),
        line: 461,
        column: 24,
        span: 13255..13266,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 461,
        column: 25,
        span: 13266..13267,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 461,
        column: 28,
        span: 13268..13270,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 461,
        column: 29,
        span: 13270..13271,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<\\\\255>\"",
        ),
        line: 461,
        column: 39,
        span: 13272..13281,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 461,
        column: 40,
        span: 13281..13282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 461,
        column: 42,
        span: 13282..13284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
        column: 43,
        span: 13284..13285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 463,
        column: 5,
        span: 13287..13291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
        column: 6,
        span: 13291..13292,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'I = load(\"a=9+\"); a=3'",
        ),
        line: 463,
        column: 29,
        span: 13292..13315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
        column: 30,
        span: 13315..13316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 464,
        column: 7,
        span: 13317..13323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
        column: 8,
        span: 13323..13324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 464,
        column: 9,
        span: 13324..13325,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 464,
        column: 11,
        span: 13325..13327,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 464,
        column: 12,
        span: 13326..13328,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 464,
        column: 16,
        span: 13329..13332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "I",
        ),
        line: 464,
        column: 18,
        span: 13333..13334,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 464,
        column: 21,
        span: 13335..13337,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 464,
        column: 25,
        span: 13338..13341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 26,
        span: 13341..13342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 465,
        column: 6,
        span: 13343..13348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
        column: 7,
        span: 13348..13349,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 465,
        column: 10,
        span: 13349..13352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
        column: 11,
        span: 13352..13353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 467,
        column: 4,
        span: 13355..13358,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 467,
        column: 6,
        span: 13359..13360,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 467,
        column: 0,
        span: 13360..13365,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 468,
        column: 3,
        span: 13366..13368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 468,
        column: 9,
        span: 13369..13374,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 468,
        column: 14,
        span: 13375..13379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 468,
        column: 18,
        span: 13380..13383,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 468,
        column: 20,
        span: 13384..13385,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 468,
        column: 24,
        span: 13385..13389,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 468,
        column: 0,
        span: 13390..13393,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 469,
        column: 4,
        span: 13394..13397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 469,
        column: 6,
        span: 13398..13399,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 469,
        column: 7,
        span: 13399..13400,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 469,
        column: 8,
        span: 13399..13401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 469,
        column: 9,
        span: 13401..13402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 469,
        column: 12,
        span: 13402..13405,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 469,
        column: 0,
        span: 13406..13408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 470,
        column: 7,
        span: 13411..13415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
        column: 8,
        span: 13415..13416,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a = '",
        ),
        line: 470,
        column: 14,
        span: 13416..13422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
        column: 15,
        span: 13422..13423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 471,
        column: 7,
        span: 13426..13430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 471,
        column: 8,
        span: 13430..13431,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a = 4+nil'",
        ),
        line: 471,
        column: 19,
        span: 13431..13442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 471,
        column: 20,
        span: 13442..13443,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 472,
        column: 0,
        span: 13444..13447,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 477,
        column: 6,
        span: 13476..13481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxClevel",
        ),
        line: 477,
        column: 16,
        span: 13482..13491,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 477,
        column: 18,
        span: 13492..13493,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 477,
        column: 22,
        span: 13493..13497,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 479,
        column: 6,
        span: 13535..13540,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 479,
        column: 15,
        span: 13541..13549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 479,
        column: 23,
        span: 13550..13557,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 479,
        column: 25,
        span: 13558..13559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        line: 479,
        column: 29,
        span: 13559..13563,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 479,
        column: 30,
        span: 13563..13564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 479,
        column: 34,
        span: 13565..13568,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 479,
        column: 35,
        span: 13568..13569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 479,
        column: 41,
        span: 13570..13575,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 479,
        column: 42,
        span: 13575..13576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "repc",
        ),
        line: 479,
        column: 47,
        span: 13577..13581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 479,
        column: 48,
        span: 13581..13582,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 480,
        column: 8,
        span: 13585..13590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 480,
        column: 10,
        span: 13591..13592,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 480,
        column: 12,
        span: 13593..13594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        line: 480,
        column: 17,
        span: 13595..13599,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 480,
        column: 20,
        span: 13600..13602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 480,
        column: 27,
        span: 13603..13609,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 480,
        column: 28,
        span: 13609..13610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 480,
        column: 31,
        span: 13610..13613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 32,
        span: 13613..13614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 480,
        column: 35,
        span: 13614..13617,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 480,
        column: 36,
        span: 13617..13618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxClevel",
        ),
        line: 480,
        column: 46,
        span: 13619..13628,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 480,
        column: 48,
        span: 13629..13630,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 480,
        column: 51,
        span: 13630..13633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
        column: 52,
        span: 13633..13634,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 480,
        column: 55,
        span: 13635..13637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 480,
        column: 61,
        span: 13638..13643,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 480,
        column: 64,
        span: 13644..13646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 481,
        column: 22,
        span: 13662..13668,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 481,
        column: 23,
        span: 13668..13669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 481,
        column: 26,
        span: 13669..13672,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 481,
        column: 27,
        span: 13672..13673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "repc",
        ),
        line: 481,
        column: 31,
        span: 13673..13677,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 481,
        column: 32,
        span: 13677..13678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxClevel",
        ),
        line: 481,
        column: 42,
        span: 13679..13688,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 481,
        column: 44,
        span: 13689..13690,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 481,
        column: 47,
        span: 13690..13693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 481,
        column: 48,
        span: 13693..13694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 482,
        column: 9,
        span: 13697..13703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
        column: 10,
        span: 13703..13704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 482,
        column: 14,
        span: 13704..13708,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 482,
        column: 15,
        span: 13708..13709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 482,
        column: 16,
        span: 13709..13710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
        column: 17,
        span: 13710..13711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 482,
        column: 18,
        span: 13711..13712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 483,
        column: 4,
        span: 13737..13738,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 483,
        column: 6,
        span: 13739..13740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        line: 483,
        column: 11,
        span: 13741..13745,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 483,
        column: 14,
        span: 13746..13748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 483,
        column: 21,
        span: 13749..13755,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 483,
        column: 22,
        span: 13755..13756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 483,
        column: 25,
        span: 13756..13759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 483,
        column: 26,
        span: 13759..13760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 483,
        column: 29,
        span: 13760..13763,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 483,
        column: 30,
        span: 13763..13764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxClevel",
        ),
        line: 483,
        column: 40,
        span: 13765..13774,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 483,
        column: 42,
        span: 13775..13776,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 483,
        column: 44,
        span: 13776..13778,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 483,
        column: 45,
        span: 13778..13779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 484,
        column: 15,
        span: 13782..13794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 484,
        column: 16,
        span: 13794..13795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 484,
        column: 17,
        span: 13795..13796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 484,
        column: 18,
        span: 13796..13797,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many C levels\"",
        ),
        line: 484,
        column: 38,
        span: 13798..13817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 484,
        column: 39,
        span: 13817..13818,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 485,
        column: 0,
        span: 13819..13822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 487,
        column: 8,
        span: 13824..13831,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 487,
        column: 9,
        span: 13831..13832,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a\"",
        ),
        line: 487,
        column: 21,
        span: 13832..13844,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
        column: 22,
        span: 13844..13845,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",a\"",
        ),
        line: 487,
        column: 27,
        span: 13846..13850,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
        column: 28,
        span: 13850..13851,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"= 1\"",
        ),
        line: 487,
        column: 34,
        span: 13852..13857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
        column: 35,
        span: 13857..13858,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",1\"",
        ),
        line: 487,
        column: 40,
        span: 13859..13863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 487,
        column: 41,
        span: 13863..13864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 488,
        column: 8,
        span: 13891..13898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 488,
        column: 9,
        span: 13898..13899,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a=\"",
        ),
        line: 488,
        column: 22,
        span: 13899..13912,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 488,
        column: 23,
        span: 13912..13913,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"{\"",
        ),
        line: 488,
        column: 27,
        span: 13914..13917,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 488,
        column: 28,
        span: 13917..13918,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 488,
        column: 32,
        span: 13919..13922,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 488,
        column: 33,
        span: 13922..13923,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"}\"",
        ),
        line: 488,
        column: 37,
        span: 13924..13927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 488,
        column: 38,
        span: 13927..13928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 489,
        column: 8,
        span: 13929..13936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 489,
        column: 9,
        span: 13936..13937,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a=\"",
        ),
        line: 489,
        column: 22,
        span: 13937..13950,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 23,
        span: 13950..13951,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(\"",
        ),
        line: 489,
        column: 27,
        span: 13952..13955,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 28,
        span: 13955..13956,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 489,
        column: 32,
        span: 13957..13960,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 489,
        column: 33,
        span: 13960..13961,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        line: 489,
        column: 37,
        span: 13962..13965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 489,
        column: 38,
        span: 13965..13966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 490,
        column: 8,
        span: 13967..13974,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 490,
        column: 9,
        span: 13974..13975,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; \"",
        ),
        line: 490,
        column: 20,
        span: 13975..13986,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 490,
        column: 21,
        span: 13986..13987,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a(\"",
        ),
        line: 490,
        column: 26,
        span: 13988..13992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 490,
        column: 27,
        span: 13992..13993,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 490,
        column: 31,
        span: 13994..13997,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 490,
        column: 32,
        span: 13997..13998,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        line: 490,
        column: 36,
        span: 13999..14002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 490,
        column: 37,
        span: 14002..14003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 491,
        column: 8,
        span: 14004..14011,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 491,
        column: 9,
        span: 14011..14012,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 491,
        column: 11,
        span: 14012..14014,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 491,
        column: 12,
        span: 14014..14015,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"do \"",
        ),
        line: 491,
        column: 18,
        span: 14016..14021,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 491,
        column: 19,
        span: 14021..14022,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 491,
        column: 22,
        span: 14023..14025,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 491,
        column: 23,
        span: 14025..14026,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        line: 491,
        column: 30,
        span: 14027..14033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 491,
        column: 31,
        span: 14033..14034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 492,
        column: 8,
        span: 14035..14042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
        column: 9,
        span: 14042..14043,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 492,
        column: 11,
        span: 14043..14045,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 492,
        column: 12,
        span: 14045..14046,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"while a do \"",
        ),
        line: 492,
        column: 26,
        span: 14047..14060,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 492,
        column: 27,
        span: 14060..14061,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 492,
        column: 30,
        span: 14062..14064,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 492,
        column: 31,
        span: 14064..14065,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        line: 492,
        column: 38,
        span: 14066..14072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
        column: 39,
        span: 14072..14073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 493,
        column: 8,
        span: 14074..14081,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 493,
        column: 9,
        span: 14081..14082,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; \"",
        ),
        line: 493,
        column: 20,
        span: 14082..14093,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 493,
        column: 21,
        span: 14093..14094,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"if a then else \"",
        ),
        line: 493,
        column: 39,
        span: 14095..14112,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 493,
        column: 40,
        span: 14112..14113,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 493,
        column: 43,
        span: 14114..14116,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 493,
        column: 44,
        span: 14116..14117,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        line: 493,
        column: 51,
        span: 14118..14124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
        column: 52,
        span: 14124..14125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 494,
        column: 8,
        span: 14126..14133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 494,
        column: 9,
        span: 14133..14134,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 494,
        column: 11,
        span: 14134..14136,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 494,
        column: 12,
        span: 14136..14137,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function foo () \"",
        ),
        line: 494,
        column: 31,
        span: 14138..14156,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 494,
        column: 32,
        span: 14156..14157,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 494,
        column: 35,
        span: 14158..14160,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 494,
        column: 36,
        span: 14160..14161,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" end\"",
        ),
        line: 494,
        column: 43,
        span: 14162..14168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 494,
        column: 44,
        span: 14168..14169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 495,
        column: 8,
        span: 14170..14177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 495,
        column: 9,
        span: 14177..14178,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a=\"",
        ),
        line: 495,
        column: 22,
        span: 14178..14191,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 495,
        column: 23,
        span: 14191..14192,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a..\"",
        ),
        line: 495,
        column: 29,
        span: 14193..14198,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 495,
        column: 30,
        span: 14198..14199,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 495,
        column: 34,
        span: 14200..14203,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 495,
        column: 35,
        span: 14203..14204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 495,
        column: 38,
        span: 14205..14207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 495,
        column: 39,
        span: 14207..14208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 496,
        column: 8,
        span: 14209..14216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
        column: 9,
        span: 14216..14217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; a=\"",
        ),
        line: 496,
        column: 22,
        span: 14217..14230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 496,
        column: 23,
        span: 14230..14231,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a^\"",
        ),
        line: 496,
        column: 28,
        span: 14232..14236,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 496,
        column: 29,
        span: 14236..14237,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 496,
        column: 33,
        span: 14238..14241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 496,
        column: 34,
        span: 14241..14242,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 496,
        column: 37,
        span: 14243..14245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
        column: 38,
        span: 14245..14246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 498,
        column: 13,
        span: 14248..14260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 498,
        column: 14,
        span: 14260..14261,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = f(x\"",
        ),
        line: 498,
        column: 23,
        span: 14261..14270,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 498,
        column: 26,
        span: 14271..14273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 498,
        column: 33,
        span: 14274..14280,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 498,
        column: 34,
        span: 14280..14281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 498,
        column: 37,
        span: 14281..14284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 498,
        column: 38,
        span: 14284..14285,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",x\"",
        ),
        line: 498,
        column: 42,
        span: 14285..14289,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 498,
        column: 43,
        span: 14289..14290,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "260",
                    after_decimal: "",
                },
            ),
        ),
        line: 498,
        column: 47,
        span: 14290..14294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 498,
        column: 48,
        span: 14294..14295,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 498,
        column: 51,
        span: 14296..14298,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\")\"",
        ),
        line: 498,
        column: 55,
        span: 14299..14302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 498,
        column: 56,
        span: 14302..14303,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many registers\"",
        ),
        line: 498,
        column: 77,
        span: 14304..14324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 498,
        column: 78,
        span: 14324..14325,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 504,
        column: 6,
        span: 14365..14370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 504,
        column: 10,
        span: 14371..14374,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 504,
        column: 12,
        span: 14375..14376,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        line: 504,
        column: 0,
        span: 14376..14380,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 505,
        column: 6,
        span: 14381..14386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 505,
        column: 9,
        span: 14388..14389,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 505,
        column: 11,
        span: 14390..14391,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local function fooA ()\\n  local \"",
        ),
        line: 505,
        column: 46,
        span: 14392..14426,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 506,
        column: 4,
        span: 14427..14430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 506,
        column: 6,
        span: 14431..14432,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 506,
        column: 8,
        span: 14433..14434,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 506,
        column: 10,
        span: 14434..14436,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 506,
        column: 11,
        span: 14436..14437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 506,
        column: 14,
        span: 14437..14440,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 506,
        column: 0,
        span: 14441..14443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 507,
        column: 4,
        span: 14446..14447,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 507,
        column: 6,
        span: 14448..14449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 507,
        column: 8,
        span: 14450..14451,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 507,
        column: 10,
        span: 14451..14453,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 507,
        column: 13,
        span: 14453..14456,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 507,
        column: 15,
        span: 14456..14458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 507,
        column: 16,
        span: 14458..14459,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 507,
        column: 18,
        span: 14459..14461,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 507,
        column: 22,
        span: 14461..14465,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 508,
        column: 0,
        span: 14466..14469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 509,
        column: 2,
        span: 14470..14471,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 509,
        column: 4,
        span: 14472..14473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 509,
        column: 6,
        span: 14474..14475,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 509,
        column: 8,
        span: 14475..14477,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b,c\\n\"",
        ),
        line: 509,
        column: 15,
        span: 14477..14484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 510,
        column: 2,
        span: 14485..14486,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 510,
        column: 4,
        span: 14487..14488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 510,
        column: 6,
        span: 14489..14490,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 510,
        column: 8,
        span: 14490..14492,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local function fooB ()\\n  local \"",
        ),
        line: 510,
        column: 42,
        span: 14492..14526,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 511,
        column: 4,
        span: 14527..14530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 511,
        column: 6,
        span: 14531..14532,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 511,
        column: 8,
        span: 14533..14534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 511,
        column: 10,
        span: 14534..14536,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 511,
        column: 11,
        span: 14536..14537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 511,
        column: 14,
        span: 14537..14540,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 511,
        column: 0,
        span: 14541..14543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 512,
        column: 4,
        span: 14546..14547,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 512,
        column: 6,
        span: 14548..14549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 512,
        column: 8,
        span: 14550..14551,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 512,
        column: 10,
        span: 14551..14553,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 512,
        column: 13,
        span: 14553..14556,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 512,
        column: 15,
        span: 14556..14558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 512,
        column: 16,
        span: 14558..14559,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 512,
        column: 18,
        span: 14559..14561,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 512,
        column: 22,
        span: 14561..14565,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 513,
        column: 0,
        span: 14566..14569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 514,
        column: 2,
        span: 14570..14571,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 514,
        column: 4,
        span: 14572..14573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 514,
        column: 6,
        span: 14574..14575,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 514,
        column: 8,
        span: 14575..14577,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\n\"",
        ),
        line: 514,
        column: 13,
        span: 14577..14582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 515,
        column: 2,
        span: 14583..14584,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 515,
        column: 4,
        span: 14585..14586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 515,
        column: 6,
        span: 14587..14588,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 515,
        column: 8,
        span: 14588..14590,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function fooC () return b+c\"",
        ),
        line: 515,
        column: 37,
        span: 14590..14619,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 516,
        column: 6,
        span: 14620..14625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 516,
        column: 8,
        span: 14626..14627,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 516,
        column: 10,
        span: 14628..14629,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
        column: 12,
        span: 14629..14631,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 516,
        column: 13,
        span: 14631..14632,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 516,
        column: 0,
        span: 14631..14633,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 517,
        column: 4,
        span: 14634..14637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 517,
        column: 6,
        span: 14638..14639,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 517,
        column: 8,
        span: 14640..14641,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 517,
        column: 10,
        span: 14641..14643,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 517,
        column: 11,
        span: 14643..14644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 517,
        column: 14,
        span: 14644..14647,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 517,
        column: 0,
        span: 14648..14650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 518,
        column: 4,
        span: 14653..14654,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 518,
        column: 6,
        span: 14655..14656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 518,
        column: 8,
        span: 14657..14658,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 518,
        column: 10,
        span: 14658..14660,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+a\"",
        ),
        line: 518,
        column: 14,
        span: 14660..14664,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 518,
        column: 16,
        span: 14664..14666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 518,
        column: 17,
        span: 14666..14667,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 518,
        column: 19,
        span: 14667..14669,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+b\"",
        ),
        line: 518,
        column: 23,
        span: 14669..14673,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 518,
        column: 25,
        span: 14673..14675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 518,
        column: 0,
        span: 14675..14676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 519,
        column: 4,
        span: 14679..14680,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 519,
        column: 6,
        span: 14681..14682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 519,
        column: 8,
        span: 14683..14684,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 519,
        column: 10,
        span: 14685..14686,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 519,
        column: 0,
        span: 14686..14688,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 520,
        column: 0,
        span: 14689..14692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 521,
        column: 2,
        span: 14693..14694,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 521,
        column: 4,
        span: 14695..14696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 521,
        column: 6,
        span: 14697..14698,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 521,
        column: 8,
        span: 14698..14700,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nend  end end\"",
        ),
        line: 521,
        column: 24,
        span: 14700..14716,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 522,
        column: 6,
        span: 14717..14722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 522,
        column: 8,
        span: 14723..14724,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 522,
        column: 9,
        span: 14724..14725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 522,
        column: 10,
        span: 14725..14726,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 522,
        column: 12,
        span: 14727..14728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 522,
        column: 17,
        span: 14729..14733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 522,
        column: 18,
        span: 14733..14734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 522,
        column: 19,
        span: 14734..14735,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 522,
        column: 20,
        span: 14735..14736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 523,
        column: 7,
        span: 14737..14743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 523,
        column: 8,
        span: 14743..14744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 523,
        column: 9,
        span: 14744..14745,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 523,
        column: 11,
        span: 14746..14747,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 523,
        column: 15,
        span: 14747..14751,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 523,
        column: 19,
        span: 14752..14755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 523,
        column: 26,
        span: 14756..14762,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 523,
        column: 27,
        span: 14762..14763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 523,
        column: 31,
        span: 14763..14767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 523,
        column: 32,
        span: 14767..14768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 523,
        column: 33,
        span: 14768..14769,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 523,
        column: 34,
        span: 14769..14770,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many upvalues\"",
        ),
        line: 523,
        column: 54,
        span: 14771..14790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 523,
        column: 55,
        span: 14790..14791,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 523,
        column: 0,
        span: 14792..14795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 524,
        column: 14,
        span: 14803..14809,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 524,
        column: 15,
        span: 14809..14810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 524,
        column: 19,
        span: 14810..14814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 524,
        column: 20,
        span: 14814..14815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 524,
        column: 21,
        span: 14815..14816,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 524,
        column: 22,
        span: 14816..14817,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line 5\"",
        ),
        line: 524,
        column: 31,
        span: 14818..14826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 524,
        column: 32,
        span: 14826..14827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 524,
        column: 33,
        span: 14827..14828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 527,
        column: 2,
        span: 14849..14850,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 527,
        column: 4,
        span: 14851..14852,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nfunction foo ()\\n  local \"",
        ),
        line: 527,
        column: 34,
        span: 14853..14882,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 528,
        column: 4,
        span: 14883..14886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 528,
        column: 6,
        span: 14887..14888,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 528,
        column: 8,
        span: 14889..14890,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 528,
        column: 10,
        span: 14890..14892,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 528,
        column: 11,
        span: 14892..14893,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 528,
        column: 14,
        span: 14892..14896,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 528,
        column: 0,
        span: 14897..14899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 529,
        column: 4,
        span: 14902..14903,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 529,
        column: 6,
        span: 14904..14905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 529,
        column: 8,
        span: 14906..14907,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 529,
        column: 10,
        span: 14907..14909,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 529,
        column: 13,
        span: 14909..14912,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 529,
        column: 15,
        span: 14912..14914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 529,
        column: 16,
        span: 14914..14915,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 529,
        column: 18,
        span: 14915..14917,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 529,
        column: 22,
        span: 14917..14921,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 530,
        column: 0,
        span: 14922..14925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 531,
        column: 2,
        span: 14926..14927,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 531,
        column: 4,
        span: 14928..14929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 531,
        column: 6,
        span: 14930..14931,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 531,
        column: 8,
        span: 14931..14933,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\n\"",
        ),
        line: 531,
        column: 13,
        span: 14933..14938,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 532,
        column: 6,
        span: 14939..14944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 532,
        column: 8,
        span: 14945..14946,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 532,
        column: 9,
        span: 14946..14947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 532,
        column: 10,
        span: 14947..14948,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 532,
        column: 12,
        span: 14949..14950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 532,
        column: 17,
        span: 14951..14955,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 532,
        column: 18,
        span: 14955..14956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 532,
        column: 19,
        span: 14956..14957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 532,
        column: 20,
        span: 14957..14958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 533,
        column: 7,
        span: 14959..14965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
        column: 8,
        span: 14965..14966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 533,
        column: 14,
        span: 14966..14972,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 533,
        column: 15,
        span: 14972..14973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 533,
        column: 19,
        span: 14973..14977,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
        column: 20,
        span: 14977..14978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 533,
        column: 21,
        span: 14978..14979,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 533,
        column: 22,
        span: 14979..14980,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line 2\"",
        ),
        line: 533,
        column: 31,
        span: 14981..14989,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
        column: 32,
        span: 14989..14990,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 533,
        column: 36,
        span: 14991..14994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 533,
        column: 43,
        span: 14995..15001,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 533,
        column: 44,
        span: 15001..15002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 533,
        column: 48,
        span: 15002..15006,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 533,
        column: 49,
        span: 15006..15007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 533,
        column: 50,
        span: 15007..15008,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 533,
        column: 51,
        span: 15008..15009,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many local variables\"",
        ),
        line: 533,
        column: 78,
        span: 15010..15036,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
        column: 79,
        span: 15036..15037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 533,
        column: 80,
        span: 15037..15038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 535,
        column: 3,
        span: 15040..15042,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 535,
        column: 4,
        span: 15042..15043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 535,
        column: 11,
        span: 15043..15050,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 535,
        column: 13,
        span: 15051..15052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldmm",
        ),
        line: 535,
        column: 0,
        span: 15053..15058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 537,
        column: 6,
        span: 15060..15065,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 537,
        column: 7,
        span: 15065..15066,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 537,
        column: 11,
        span: 15066..15070,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 537,
        column: 12,
        span: 15070..15071,
    },
]
